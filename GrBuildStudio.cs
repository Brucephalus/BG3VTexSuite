// Warning: Some assembly references could not be resolved automatically. This might lead to incorrect decompilation of some parts,
// for ex. property getter/setter access. To get optimal decompilation results, please manually add the missing references to the list of loaded assemblies.

// E:\VirtualTexturesEditor\GrBuildStudio.exe
// GrBuildStudio, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// Global type: <Module>
// Entry point: GrBuildStudio.Program.Main
// Architecture: x64
// Runtime: v4.0.30319
// This assembly was compiled using the /deterministic option.
// Hash algorithm: SHA1

using System;
using System.CodeDom.Compiler;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration;
using System.Diagnostics;
using System.Drawing;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Management;
using System.Net;
using System.Reflection;
using System.Resources;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using System.Runtime.Versioning;
using System.Security;
using System.Security.Cryptography;
using System.Security.Permissions;
using System.Text;
using System.Text.RegularExpressions;
using System.Threading;
using System.Windows.Forms;
using System.Xml;
using System.Xml.Serialization;
using DevComponents.AdvTree;
using DevComponents.DotNetBar;
using DevComponents.DotNetBar.Controls;
using DevComponents.DotNetBar.Metro.ColorTables;
using DevComponents.Editors;
using Graphine.Core;
using GraphineLicenseManager.Ed25519b;
using GrBuildLib;
using GrBuildLib.Tools;
using GrBuildStudio.Controls;
using GrBuildStudio.Properties;
using GrBuildStudio.Tools;
using Grim;
using Microsoft.CodeAnalysis;
using Microsoft.Win32;
using Nixel;

[assembly: CompilationRelaxations(8)]
[assembly: RuntimeCompatibility(WrapNonExceptionThrows = true)]
[assembly: Debuggable(DebuggableAttribute.DebuggingModes.Default | DebuggableAttribute.DebuggingModes.DisableOptimizations | DebuggableAttribute.DebuggingModes.IgnoreSymbolStoreSequencePoints | DebuggableAttribute.DebuggingModes.EnableEditAndContinue)]
[assembly: AssemblyCompany("Graphine NV")]
[assembly: AssemblyProduct("Tile Set Studio")]
[assembly: AssemblyCopyright("Copyright Graphine NV Â© 2013-2017")]
[assembly: AssemblyInformationalVersion("5.0.7.34144")]
[assembly: AssemblyDescription("Generated by cholleme@ZELDA from master/9a8e2032016ca90aea9bc098289abc7dc1f56d8c")]
[assembly: AssemblyTitle("GrBuildStudio")]
[assembly: AssemblyConfiguration("")]
[assembly: AssemblyTrademark("")]
[assembly: ComVisible(false)]
[assembly: Guid("5dd9b935-d4c1-480e-bc34-b8cac7b6fd0a")]
[assembly: AssemblyFileVersion("1.0.0.0")]
[assembly: TargetFramework(".NETFramework,Version=v4.5", FrameworkDisplayName = ".NET Framework 4.5")]
[assembly: SecurityPermission(SecurityAction.RequestMinimum, SkipVerification = true)]
[assembly: AssemblyVersion("1.0.0.0")]
[module: UnverifiableCode]
namespace Microsoft.CodeAnalysis
{
	[CompilerGenerated]
	[Embedded]
	internal sealed class EmbeddedAttribute : Attribute
	{
	}
}
namespace System.Runtime.CompilerServices
{
	[CompilerGenerated]
	[Embedded]
	internal sealed class IsReadOnlyAttribute : Attribute
	{
	}
}
namespace GrBuildStudio
{
	internal class AboutBox : Form
	{
		private IContainer components;

		private TableLayoutPanel tableLayoutPanel;

		private PictureBox logoPictureBox;

		private Label labelProductName;

		private Label labelVersion;

		private Label labelCopyright;

		private TextBox textBoxDescription;

		private Button okButton;

		private LinkLabel linkSilk;

		private LinkLabel linkCompanyName;

		public AboutBox()
		{
			InitializeComponent();
			Text = "About " + AssemblyHelper.AssemblyProduct;
			labelProductName.Text = AssemblyHelper.AssemblyProduct;
			labelVersion.Text = "Version " + AssemblyHelper.AssemblyInformationalVersion;
			labelCopyright.Text = AssemblyHelper.AssemblyCopyright;
			linkCompanyName.Text = AssemblyHelper.AssemblyCompany;
			textBoxDescription.Text = AssemblyHelper.AssemblyDescription;
		}

		private void linkCompanyName_LinkClicked(object sender, LinkLabelLinkClickedEventArgs e)
		{
			Process.Start(new ProcessStartInfo("http://www.graphinesoftware.com"));
		}

		private void linkSilk_LinkClicked(object sender, LinkLabelLinkClickedEventArgs e)
		{
			string text = "ToolLicenses.txt";
			string text2 = "Licenses";
			try
			{
				Process.Start(new ProcessStartInfo(Path.Combine(Path.GetDirectoryName(Assembly.GetExecutingAssembly().Location), text2, text)));
			}
			catch (Exception)
			{
				MessageBox.Show("Please see the '" + text + "' file in the '" + text2 + "' directory in the tools install directory for more information.");
			}
		}

		protected override void Dispose(bool disposing)
		{
			if (disposing && components != null)
			{
				components.Dispose();
			}
			base.Dispose(disposing);
		}

		private void InitializeComponent()
		{
			this.tableLayoutPanel = new System.Windows.Forms.TableLayoutPanel();
			this.logoPictureBox = new System.Windows.Forms.PictureBox();
			this.labelProductName = new System.Windows.Forms.Label();
			this.labelVersion = new System.Windows.Forms.Label();
			this.labelCopyright = new System.Windows.Forms.Label();
			this.linkCompanyName = new System.Windows.Forms.LinkLabel();
			this.textBoxDescription = new System.Windows.Forms.TextBox();
			this.okButton = new System.Windows.Forms.Button();
			this.linkSilk = new System.Windows.Forms.LinkLabel();
			this.tableLayoutPanel.SuspendLayout();
			((System.ComponentModel.ISupportInitialize)this.logoPictureBox).BeginInit();
			base.SuspendLayout();
			this.tableLayoutPanel.ColumnCount = 3;
			this.tableLayoutPanel.ColumnStyles.Add(new System.Windows.Forms.ColumnStyle(System.Windows.Forms.SizeType.Percent, 46.98413f));
			this.tableLayoutPanel.ColumnStyles.Add(new System.Windows.Forms.ColumnStyle(System.Windows.Forms.SizeType.Percent, 53.01587f));
			this.tableLayoutPanel.ColumnStyles.Add(new System.Windows.Forms.ColumnStyle(System.Windows.Forms.SizeType.Absolute, 85f));
			this.tableLayoutPanel.Controls.Add(this.logoPictureBox, 0, 0);
			this.tableLayoutPanel.Controls.Add(this.labelProductName, 1, 0);
			this.tableLayoutPanel.Controls.Add(this.labelVersion, 1, 1);
			this.tableLayoutPanel.Controls.Add(this.labelCopyright, 1, 2);
			this.tableLayoutPanel.Controls.Add(this.linkCompanyName, 1, 3);
			this.tableLayoutPanel.Controls.Add(this.textBoxDescription, 1, 4);
			this.tableLayoutPanel.Controls.Add(this.okButton, 2, 5);
			this.tableLayoutPanel.Controls.Add(this.linkSilk, 1, 5);
			this.tableLayoutPanel.Dock = System.Windows.Forms.DockStyle.Fill;
			this.tableLayoutPanel.Location = new System.Drawing.Point(9, 9);
			this.tableLayoutPanel.Name = "tableLayoutPanel";
			this.tableLayoutPanel.RowCount = 6;
			this.tableLayoutPanel.RowStyles.Add(new System.Windows.Forms.RowStyle(System.Windows.Forms.SizeType.Percent, 10f));
			this.tableLayoutPanel.RowStyles.Add(new System.Windows.Forms.RowStyle(System.Windows.Forms.SizeType.Percent, 10f));
			this.tableLayoutPanel.RowStyles.Add(new System.Windows.Forms.RowStyle(System.Windows.Forms.SizeType.Percent, 10.68376f));
			this.tableLayoutPanel.RowStyles.Add(new System.Windows.Forms.RowStyle(System.Windows.Forms.SizeType.Percent, 9.82906f));
			this.tableLayoutPanel.RowStyles.Add(new System.Windows.Forms.RowStyle(System.Windows.Forms.SizeType.Percent, 50.98039f));
			this.tableLayoutPanel.RowStyles.Add(new System.Windows.Forms.RowStyle(System.Windows.Forms.SizeType.Percent, 10.58823f));
			this.tableLayoutPanel.RowStyles.Add(new System.Windows.Forms.RowStyle(System.Windows.Forms.SizeType.Absolute, 28f));
			this.tableLayoutPanel.RowStyles.Add(new System.Windows.Forms.RowStyle(System.Windows.Forms.SizeType.Absolute, 20f));
			this.tableLayoutPanel.RowStyles.Add(new System.Windows.Forms.RowStyle(System.Windows.Forms.SizeType.Absolute, 20f));
			this.tableLayoutPanel.RowStyles.Add(new System.Windows.Forms.RowStyle(System.Windows.Forms.SizeType.Absolute, 20f));
			this.tableLayoutPanel.RowStyles.Add(new System.Windows.Forms.RowStyle(System.Windows.Forms.SizeType.Absolute, 20f));
			this.tableLayoutPanel.Size = new System.Drawing.Size(397, 255);
			this.tableLayoutPanel.TabIndex = 0;
			this.logoPictureBox.Dock = System.Windows.Forms.DockStyle.Fill;
			this.logoPictureBox.Image = GrBuildStudio.Properties.Resources.about_logo;
			this.logoPictureBox.Location = new System.Drawing.Point(3, 3);
			this.logoPictureBox.Name = "logoPictureBox";
			this.tableLayoutPanel.SetRowSpan(this.logoPictureBox, 6);
			this.logoPictureBox.Size = new System.Drawing.Size(140, 249);
			this.logoPictureBox.SizeMode = System.Windows.Forms.PictureBoxSizeMode.Zoom;
			this.logoPictureBox.TabIndex = 12;
			this.logoPictureBox.TabStop = false;
			this.tableLayoutPanel.SetColumnSpan(this.labelProductName, 2);
			this.labelProductName.Dock = System.Windows.Forms.DockStyle.Fill;
			this.labelProductName.Location = new System.Drawing.Point(152, 0);
			this.labelProductName.Margin = new System.Windows.Forms.Padding(6, 0, 3, 0);
			this.labelProductName.MaximumSize = new System.Drawing.Size(0, 17);
			this.labelProductName.Name = "labelProductName";
			this.labelProductName.Size = new System.Drawing.Size(242, 17);
			this.labelProductName.TabIndex = 19;
			this.labelProductName.Text = "Granite SDK by Graphine";
			this.labelProductName.TextAlign = System.Drawing.ContentAlignment.MiddleLeft;
			this.tableLayoutPanel.SetColumnSpan(this.labelVersion, 2);
			this.labelVersion.Dock = System.Windows.Forms.DockStyle.Fill;
			this.labelVersion.Location = new System.Drawing.Point(152, 24);
			this.labelVersion.Margin = new System.Windows.Forms.Padding(6, 0, 3, 0);
			this.labelVersion.MaximumSize = new System.Drawing.Size(0, 17);
			this.labelVersion.Name = "labelVersion";
			this.labelVersion.Size = new System.Drawing.Size(242, 17);
			this.labelVersion.TabIndex = 0;
			this.labelVersion.Text = "1.9";
			this.labelVersion.TextAlign = System.Drawing.ContentAlignment.MiddleLeft;
			this.tableLayoutPanel.SetColumnSpan(this.labelCopyright, 2);
			this.labelCopyright.Dock = System.Windows.Forms.DockStyle.Fill;
			this.labelCopyright.Location = new System.Drawing.Point(152, 48);
			this.labelCopyright.Margin = new System.Windows.Forms.Padding(6, 0, 3, 0);
			this.labelCopyright.MaximumSize = new System.Drawing.Size(0, 17);
			this.labelCopyright.Name = "labelCopyright";
			this.labelCopyright.Size = new System.Drawing.Size(242, 17);
			this.labelCopyright.TabIndex = 21;
			this.labelCopyright.Text = "Copyright (c) 2012-2013";
			this.labelCopyright.TextAlign = System.Drawing.ContentAlignment.MiddleLeft;
			this.linkCompanyName.AutoSize = true;
			this.tableLayoutPanel.SetColumnSpan(this.linkCompanyName, 2);
			this.linkCompanyName.Dock = System.Windows.Forms.DockStyle.Fill;
			this.linkCompanyName.Location = new System.Drawing.Point(152, 74);
			this.linkCompanyName.Margin = new System.Windows.Forms.Padding(6, 0, 3, 0);
			this.linkCompanyName.Name = "linkCompanyName";
			this.linkCompanyName.Size = new System.Drawing.Size(242, 24);
			this.linkCompanyName.TabIndex = 26;
			this.linkCompanyName.TabStop = true;
			this.linkCompanyName.Text = "Graphine Software";
			this.linkCompanyName.LinkClicked += new System.Windows.Forms.LinkLabelLinkClickedEventHandler(linkCompanyName_LinkClicked);
			this.tableLayoutPanel.SetColumnSpan(this.textBoxDescription, 2);
			this.textBoxDescription.Dock = System.Windows.Forms.DockStyle.Fill;
			this.textBoxDescription.Location = new System.Drawing.Point(152, 101);
			this.textBoxDescription.Margin = new System.Windows.Forms.Padding(6, 3, 3, 3);
			this.textBoxDescription.Multiline = true;
			this.textBoxDescription.Name = "textBoxDescription";
			this.textBoxDescription.ReadOnly = true;
			this.textBoxDescription.ScrollBars = System.Windows.Forms.ScrollBars.Both;
			this.textBoxDescription.Size = new System.Drawing.Size(242, 121);
			this.textBoxDescription.TabIndex = 23;
			this.textBoxDescription.TabStop = false;
			this.textBoxDescription.Text = "Description";
			this.okButton.Anchor = System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Right;
			this.okButton.DialogResult = System.Windows.Forms.DialogResult.Cancel;
			this.okButton.Location = new System.Drawing.Point(319, 228);
			this.okButton.Name = "okButton";
			this.okButton.Size = new System.Drawing.Size(75, 24);
			this.okButton.TabIndex = 24;
			this.okButton.Text = "&OK";
			this.linkSilk.Anchor = System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Left;
			this.linkSilk.Location = new System.Drawing.Point(152, 232);
			this.linkSilk.Margin = new System.Windows.Forms.Padding(6, 0, 3, 10);
			this.linkSilk.Name = "linkSilk";
			this.linkSilk.Size = new System.Drawing.Size(156, 13);
			this.linkSilk.TabIndex = 25;
			this.linkSilk.TabStop = true;
			this.linkSilk.Text = "Third Party Licenses";
			this.linkSilk.LinkClicked += new System.Windows.Forms.LinkLabelLinkClickedEventHandler(linkSilk_LinkClicked);
			base.AcceptButton = this.okButton;
			base.AutoScaleDimensions = new System.Drawing.SizeF(6f, 13f);
			base.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;
			base.ClientSize = new System.Drawing.Size(415, 273);
			base.Controls.Add(this.tableLayoutPanel);
			base.FormBorderStyle = System.Windows.Forms.FormBorderStyle.FixedDialog;
			base.MaximizeBox = false;
			base.MinimizeBox = false;
			base.Name = "AboutBox";
			base.Padding = new System.Windows.Forms.Padding(9);
			base.ShowIcon = false;
			base.ShowInTaskbar = false;
			base.StartPosition = System.Windows.Forms.FormStartPosition.CenterParent;
			this.Text = "About";
			this.tableLayoutPanel.ResumeLayout(false);
			this.tableLayoutPanel.PerformLayout();
			((System.ComponentModel.ISupportInitialize)this.logoPictureBox).EndInit();
			base.ResumeLayout(false);
		}
	}
	public class AssetCustomSizeForm : Form
	{
		internal enum Mode
		{
			Pixels,
			Percent
		}

		internal class DualValue
		{
			private decimal absolute;

			private decimal percentage;

			public Mode ActiveMode { get; set; }

			public decimal BaseAbsoluteValue { get; private set; }

			public decimal Value
			{
				get
				{
					if (ActiveMode == Mode.Pixels)
					{
						return absolute;
					}
					return percentage;
				}
				set
				{
					if (ActiveMode == Mode.Pixels)
					{
						SetAbsolute(value);
					}
					else
					{
						SetPercentage(value);
					}
				}
			}

			public DualValue(decimal baseValue, decimal value, Mode startMode)
			{
				if (baseValue == 0.0m)
				{
					throw new ArgumentException();
				}
				BaseAbsoluteValue = baseValue;
				SetAbsolute(value);
				ActiveMode = startMode;
			}

			private void SetAbsolute(decimal value)
			{
				absolute = value;
				percentage = value * 100m / BaseAbsoluteValue;
			}

			private void SetPercentage(decimal value)
			{
				percentage = value;
				absolute = BaseAbsoluteValue * percentage / 100m;
			}

			public void Set(Mode mode, decimal value)
			{
				if (mode == Mode.Pixels)
				{
					SetAbsolute(value);
				}
				else
				{
					SetPercentage(value);
				}
			}

			public decimal Get(Mode mode)
			{
				if (mode == Mode.Pixels)
				{
					return absolute;
				}
				return percentage;
			}
		}

		public decimal MaximumTargetSize = decimal.MaxValue;

		private DualValue widthValue;

		private DualValue heightValue;

		private bool disableUpdates;

		private IContainer components;

		private NumericUpDown numericUpDownWidth;

		private NumericUpDown numericUpDownHeight;

		private Label label1;

		private Label label2;

		private CheckBox checkBoxAspect;

		private ComboBox comboBoxMethodWidth;

		private ComboBox comboBoxMethodHeight;

		private Label label3;

		private Label label4;

		private Label labelOldSize;

		private Label labelNewSize;

		private Button buttonOk;

		private Button buttonCancel;

		private Line line1;

		private Line line2;

		private Label labelOldAspect;

		private Label label6;

		private Label label7;

		private Label labelNewAspect;

		private CheckBox checkBoxCustom;

		private Button buttonReset;

		public Size TargetSize { get; set; }

		public Size OriginalSize { get; set; }

		public string Title { get; set; }

		public AssetCustomSizeForm()
		{
			InitializeComponent();
			disableUpdates = true;
			numericUpDownWidth.Minimum = 1m;
			numericUpDownWidth.Maximum = MaximumTargetSize;
			numericUpDownHeight.Minimum = 1m;
			numericUpDownHeight.Maximum = MaximumTargetSize;
			checkBoxAspect.Checked = true;
			disableUpdates = false;
		}

		private void AssetCustomSize_Load(object sender, EventArgs e)
		{
			Text = Title;
			disableUpdates = true;
			bool flag = TargetSize.Width > 0 || TargetSize.Height > 0;
			labelOldSize.Text = string.Format("{0} x {1}", new object[2] { OriginalSize.Width, OriginalSize.Height });
			labelOldAspect.Text = ((double)OriginalSize.Width / (double)OriginalSize.Height).ToString();
			comboBoxMethodHeight.SelectedIndex = 0;
			comboBoxMethodWidth.SelectedIndex = 0;
			checkBoxCustom.Checked = flag;
			widthValue = new DualValue(OriginalSize.Width, flag ? TargetSize.Width : OriginalSize.Width, Mode.Pixels);
			heightValue = new DualValue(OriginalSize.Height, flag ? TargetSize.Height : OriginalSize.Height, Mode.Pixels);
			numericUpDownWidth.Value = widthValue.Value;
			numericUpDownHeight.Value = heightValue.Value;
			UpdateControls();
			disableUpdates = false;
			UpdateValues();
		}

		private void SetWidth(decimal value)
		{
			widthValue.Value = value;
			numericUpDownWidth.Value = Math.Min(MaximumTargetSize, widthValue.Value);
		}

		private void SetHeight(decimal value)
		{
			heightValue.Value = value;
			numericUpDownHeight.Value = Math.Min(MaximumTargetSize, heightValue.Value);
		}

		private void SetWidth(Mode mode, decimal value)
		{
			widthValue.Set(mode, value);
			numericUpDownWidth.Value = Math.Min(MaximumTargetSize, widthValue.Value);
		}

		private void SetHeight(Mode mode, decimal value)
		{
			heightValue.Set(mode, value);
			numericUpDownHeight.Value = Math.Min(MaximumTargetSize, heightValue.Value);
		}

		private void UpdateControls()
		{
			bool @checked = checkBoxCustom.Checked;
			checkBoxAspect.Enabled = @checked;
			comboBoxMethodHeight.Enabled = @checked;
			comboBoxMethodWidth.Enabled = @checked;
			numericUpDownHeight.Enabled = @checked;
			numericUpDownWidth.Enabled = @checked;
		}

		private void UpdateValues()
		{
			bool @checked = checkBoxCustom.Checked;
			int num = (int)widthValue.Get(Mode.Pixels);
			int num2 = (int)heightValue.Get(Mode.Pixels);
			TargetSize = (@checked ? new Size(num, num2) : new Size(0, 0));
			labelNewSize.Text = string.Format("{0} x {1}", new object[2] { num, num2 });
			labelNewAspect.Text = ((double)num / (double)num2).ToString("G");
		}

		private void numericUpDownWidth_ValueChanged(object sender, EventArgs e)
		{
			if (!disableUpdates)
			{
				SetWidth(numericUpDownWidth.Value);
				if (checkBoxAspect.Checked)
				{
					disableUpdates = true;
					SetHeight(Mode.Percent, widthValue.Get(Mode.Percent));
					numericUpDownHeight.Value = heightValue.Value;
					disableUpdates = false;
				}
				UpdateValues();
			}
		}

		private void numericUpDownHeight_ValueChanged(object sender, EventArgs e)
		{
			if (!disableUpdates)
			{
				SetHeight(numericUpDownHeight.Value);
				if (checkBoxAspect.Checked)
				{
					disableUpdates = true;
					SetWidth(Mode.Percent, heightValue.Get(Mode.Percent));
					disableUpdates = false;
				}
				UpdateValues();
			}
		}

		private void comboBoxMethodWidth_SelectedIndexChanged(object sender, EventArgs e)
		{
			if (!disableUpdates)
			{
				disableUpdates = true;
				Mode activeMode = widthValue.ActiveMode;
				widthValue.ActiveMode = (Mode)comboBoxMethodWidth.SelectedIndex;
				SetWidth(activeMode, numericUpDownWidth.Value);
				disableUpdates = false;
				UpdateValues();
			}
		}

		private void comboBoxMethodHeight_SelectedIndexChanged(object sender, EventArgs e)
		{
			if (!disableUpdates)
			{
				disableUpdates = true;
				Mode activeMode = heightValue.ActiveMode;
				heightValue.ActiveMode = (Mode)comboBoxMethodHeight.SelectedIndex;
				SetHeight(activeMode, numericUpDownHeight.Value);
				disableUpdates = false;
				UpdateValues();
			}
		}

		private void checkBoxAspect_CheckedChanged(object sender, EventArgs e)
		{
			if (!disableUpdates)
			{
				if (checkBoxAspect.Checked)
				{
					disableUpdates = true;
					SetHeight(Mode.Percent, widthValue.Get(Mode.Percent));
					disableUpdates = false;
				}
				UpdateValues();
			}
		}

		private void buttonReset_Click(object sender, EventArgs e)
		{
			disableUpdates = true;
			SetWidth(Mode.Pixels, OriginalSize.Width);
			SetHeight(Mode.Pixels, OriginalSize.Height);
			comboBoxMethodWidth.SelectedIndex = 0;
			comboBoxMethodHeight.SelectedIndex = 0;
			checkBoxAspect.Checked = true;
			disableUpdates = false;
			UpdateValues();
		}

		private void checkBoxCustom_CheckedChanged(object sender, EventArgs e)
		{
			UpdateControls();
			if (!disableUpdates)
			{
				UpdateValues();
			}
		}

		protected override void Dispose(bool disposing)
		{
			if (disposing && components != null)
			{
				components.Dispose();
			}
			base.Dispose(disposing);
		}

		private void InitializeComponent()
		{
			//IL_0091: Unknown result type (might be due to invalid IL or missing references)
			//IL_009b: Expected O, but got Unknown
			//IL_009c: Unknown result type (might be due to invalid IL or missing references)
			//IL_00a6: Expected O, but got Unknown
			this.numericUpDownWidth = new System.Windows.Forms.NumericUpDown();
			this.numericUpDownHeight = new System.Windows.Forms.NumericUpDown();
			this.label1 = new System.Windows.Forms.Label();
			this.label2 = new System.Windows.Forms.Label();
			this.checkBoxAspect = new System.Windows.Forms.CheckBox();
			this.comboBoxMethodWidth = new System.Windows.Forms.ComboBox();
			this.comboBoxMethodHeight = new System.Windows.Forms.ComboBox();
			this.label3 = new System.Windows.Forms.Label();
			this.label4 = new System.Windows.Forms.Label();
			this.labelOldSize = new System.Windows.Forms.Label();
			this.labelNewSize = new System.Windows.Forms.Label();
			this.buttonOk = new System.Windows.Forms.Button();
			this.buttonCancel = new System.Windows.Forms.Button();
			this.line1 = new Line();
			this.line2 = new Line();
			this.labelOldAspect = new System.Windows.Forms.Label();
			this.label6 = new System.Windows.Forms.Label();
			this.label7 = new System.Windows.Forms.Label();
			this.labelNewAspect = new System.Windows.Forms.Label();
			this.checkBoxCustom = new System.Windows.Forms.CheckBox();
			this.buttonReset = new System.Windows.Forms.Button();
			((System.ComponentModel.ISupportInitialize)this.numericUpDownWidth).BeginInit();
			((System.ComponentModel.ISupportInitialize)this.numericUpDownHeight).BeginInit();
			base.SuspendLayout();
			this.numericUpDownWidth.Location = new System.Drawing.Point(119, 138);
			this.numericUpDownWidth.Name = "numericUpDownWidth";
			this.numericUpDownWidth.Size = new System.Drawing.Size(75, 20);
			this.numericUpDownWidth.TabIndex = 2;
			this.numericUpDownWidth.ValueChanged += new System.EventHandler(numericUpDownWidth_ValueChanged);
			this.numericUpDownHeight.Location = new System.Drawing.Point(119, 164);
			this.numericUpDownHeight.Name = "numericUpDownHeight";
			this.numericUpDownHeight.Size = new System.Drawing.Size(75, 20);
			this.numericUpDownHeight.TabIndex = 3;
			this.numericUpDownHeight.ValueChanged += new System.EventHandler(numericUpDownHeight_ValueChanged);
			this.label1.AutoSize = true;
			this.label1.Location = new System.Drawing.Point(41, 140);
			this.label1.Name = "label1";
			this.label1.Size = new System.Drawing.Size(38, 13);
			this.label1.TabIndex = 1;
			this.label1.Text = "Width:";
			this.label2.AutoSize = true;
			this.label2.Location = new System.Drawing.Point(41, 166);
			this.label2.Name = "label2";
			this.label2.Size = new System.Drawing.Size(41, 13);
			this.label2.TabIndex = 1;
			this.label2.Text = "Height:";
			this.checkBoxAspect.AutoSize = true;
			this.checkBoxAspect.Location = new System.Drawing.Point(21, 112);
			this.checkBoxAspect.Name = "checkBoxAspect";
			this.checkBoxAspect.Size = new System.Drawing.Size(124, 17);
			this.checkBoxAspect.TabIndex = 1;
			this.checkBoxAspect.Text = "Maintain aspect ratio";
			this.checkBoxAspect.UseVisualStyleBackColor = true;
			this.checkBoxAspect.CheckedChanged += new System.EventHandler(checkBoxAspect_CheckedChanged);
			this.comboBoxMethodWidth.DropDownStyle = System.Windows.Forms.ComboBoxStyle.DropDownList;
			this.comboBoxMethodWidth.FormattingEnabled = true;
			this.comboBoxMethodWidth.Items.AddRange(new object[2] { "pixels", "percentage" });
			this.comboBoxMethodWidth.Location = new System.Drawing.Point(200, 137);
			this.comboBoxMethodWidth.Name = "comboBoxMethodWidth";
			this.comboBoxMethodWidth.Size = new System.Drawing.Size(90, 21);
			this.comboBoxMethodWidth.TabIndex = 4;
			this.comboBoxMethodWidth.SelectedIndexChanged += new System.EventHandler(comboBoxMethodWidth_SelectedIndexChanged);
			this.comboBoxMethodHeight.DropDownStyle = System.Windows.Forms.ComboBoxStyle.DropDownList;
			this.comboBoxMethodHeight.FormattingEnabled = true;
			this.comboBoxMethodHeight.Items.AddRange(new object[2] { "pixels", "percentage" });
			this.comboBoxMethodHeight.Location = new System.Drawing.Point(200, 163);
			this.comboBoxMethodHeight.Name = "comboBoxMethodHeight";
			this.comboBoxMethodHeight.Size = new System.Drawing.Size(90, 21);
			this.comboBoxMethodHeight.TabIndex = 5;
			this.comboBoxMethodHeight.SelectedIndexChanged += new System.EventHandler(comboBoxMethodHeight_SelectedIndexChanged);
			this.label3.AutoSize = true;
			this.label3.Location = new System.Drawing.Point(18, 20);
			this.label3.Name = "label3";
			this.label3.Size = new System.Drawing.Size(68, 13);
			this.label3.TabIndex = 4;
			this.label3.Text = "Original Size:";
			this.label4.AutoSize = true;
			this.label4.Location = new System.Drawing.Point(18, 225);
			this.label4.Name = "label4";
			this.label4.Size = new System.Drawing.Size(55, 13);
			this.label4.TabIndex = 4;
			this.label4.Text = "New Size:";
			this.labelOldSize.AutoSize = true;
			this.labelOldSize.Location = new System.Drawing.Point(132, 20);
			this.labelOldSize.Name = "labelOldSize";
			this.labelOldSize.Size = new System.Drawing.Size(83, 13);
			this.labelOldSize.TabIndex = 4;
			this.labelOldSize.Text = "960 x 600 pixels";
			this.labelNewSize.AutoSize = true;
			this.labelNewSize.Location = new System.Drawing.Point(132, 225);
			this.labelNewSize.Name = "labelNewSize";
			this.labelNewSize.Size = new System.Drawing.Size(95, 13);
			this.labelNewSize.TabIndex = 4;
			this.labelNewSize.Text = "2048 x 2048 pixels";
			this.buttonOk.Anchor = System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Right;
			this.buttonOk.DialogResult = System.Windows.Forms.DialogResult.OK;
			this.buttonOk.Location = new System.Drawing.Point(179, 283);
			this.buttonOk.Name = "buttonOk";
			this.buttonOk.Size = new System.Drawing.Size(75, 23);
			this.buttonOk.TabIndex = 6;
			this.buttonOk.Text = "OK";
			this.buttonOk.UseVisualStyleBackColor = true;
			this.buttonCancel.Anchor = System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Right;
			this.buttonCancel.DialogResult = System.Windows.Forms.DialogResult.Cancel;
			this.buttonCancel.Location = new System.Drawing.Point(260, 283);
			this.buttonCancel.Name = "buttonCancel";
			this.buttonCancel.Size = new System.Drawing.Size(75, 23);
			this.buttonCancel.TabIndex = 7;
			this.buttonCancel.Text = "Cancel";
			this.buttonCancel.UseVisualStyleBackColor = true;
			((System.Windows.Forms.Control)(object)this.line1).Anchor = System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Left | System.Windows.Forms.AnchorStyles.Right;
			((System.Windows.Forms.Control)(object)this.line1).Location = new System.Drawing.Point(12, 86);
			((System.Windows.Forms.Control)(object)this.line1).Name = "line1";
			((System.Windows.Forms.Control)(object)this.line1).Size = new System.Drawing.Size(323, 23);
			((System.Windows.Forms.Control)(object)this.line1).TabIndex = 6;
			((System.Windows.Forms.Control)(object)this.line1).Text = "line1";
			((System.Windows.Forms.Control)(object)this.line2).Anchor = System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Left | System.Windows.Forms.AnchorStyles.Right;
			((System.Windows.Forms.Control)(object)this.line2).Location = new System.Drawing.Point(12, 194);
			((System.Windows.Forms.Control)(object)this.line2).Name = "line2";
			((System.Windows.Forms.Control)(object)this.line2).Size = new System.Drawing.Size(323, 23);
			((System.Windows.Forms.Control)(object)this.line2).TabIndex = 6;
			((System.Windows.Forms.Control)(object)this.line2).Text = "line1";
			this.labelOldAspect.AutoSize = true;
			this.labelOldAspect.Location = new System.Drawing.Point(132, 43);
			this.labelOldAspect.Name = "labelOldAspect";
			this.labelOldAspect.Size = new System.Drawing.Size(34, 13);
			this.labelOldAspect.TabIndex = 7;
			this.labelOldAspect.Text = "1.333";
			this.label6.AutoSize = true;
			this.label6.Location = new System.Drawing.Point(18, 43);
			this.label6.Name = "label6";
			this.label6.Size = new System.Drawing.Size(109, 13);
			this.label6.TabIndex = 8;
			this.label6.Text = "Original Aspect Ratio:";
			this.label7.AutoSize = true;
			this.label7.Location = new System.Drawing.Point(18, 248);
			this.label7.Name = "label7";
			this.label7.Size = new System.Drawing.Size(96, 13);
			this.label7.TabIndex = 8;
			this.label7.Text = "New Aspect Ratio:";
			this.labelNewAspect.AutoSize = true;
			this.labelNewAspect.Location = new System.Drawing.Point(132, 248);
			this.labelNewAspect.Name = "labelNewAspect";
			this.labelNewAspect.Size = new System.Drawing.Size(34, 13);
			this.labelNewAspect.TabIndex = 7;
			this.labelNewAspect.Text = "1.333";
			this.checkBoxCustom.AutoSize = true;
			this.checkBoxCustom.Location = new System.Drawing.Point(21, 70);
			this.checkBoxCustom.Name = "checkBoxCustom";
			this.checkBoxCustom.Size = new System.Drawing.Size(84, 17);
			this.checkBoxCustom.TabIndex = 10;
			this.checkBoxCustom.Text = "Custom Size";
			this.checkBoxCustom.UseVisualStyleBackColor = true;
			this.checkBoxCustom.CheckedChanged += new System.EventHandler(checkBoxCustom_CheckedChanged);
			this.buttonReset.Location = new System.Drawing.Point(287, 108);
			this.buttonReset.Name = "buttonReset";
			this.buttonReset.Size = new System.Drawing.Size(48, 23);
			this.buttonReset.TabIndex = 11;
			this.buttonReset.Text = "Reset";
			this.buttonReset.UseVisualStyleBackColor = true;
			this.buttonReset.Click += new System.EventHandler(buttonReset_Click);
			base.AcceptButton = this.buttonOk;
			base.AutoScaleDimensions = new System.Drawing.SizeF(6f, 13f);
			base.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;
			base.CancelButton = this.buttonCancel;
			base.ClientSize = new System.Drawing.Size(347, 318);
			base.Controls.Add(this.buttonReset);
			base.Controls.Add(this.checkBoxCustom);
			base.Controls.Add(this.labelNewAspect);
			base.Controls.Add(this.label7);
			base.Controls.Add(this.labelOldAspect);
			base.Controls.Add(this.label6);
			base.Controls.Add((System.Windows.Forms.Control)(object)this.line2);
			base.Controls.Add((System.Windows.Forms.Control)(object)this.line1);
			base.Controls.Add(this.buttonCancel);
			base.Controls.Add(this.buttonOk);
			base.Controls.Add(this.label4);
			base.Controls.Add(this.labelNewSize);
			base.Controls.Add(this.labelOldSize);
			base.Controls.Add(this.label3);
			base.Controls.Add(this.comboBoxMethodHeight);
			base.Controls.Add(this.comboBoxMethodWidth);
			base.Controls.Add(this.checkBoxAspect);
			base.Controls.Add(this.label2);
			base.Controls.Add(this.label1);
			base.Controls.Add(this.numericUpDownHeight);
			base.Controls.Add(this.numericUpDownWidth);
			base.FormBorderStyle = System.Windows.Forms.FormBorderStyle.FixedToolWindow;
			base.Name = "AssetCustomSize";
			base.StartPosition = System.Windows.Forms.FormStartPosition.CenterParent;
			this.Text = "Resize Asset";
			base.Load += new System.EventHandler(AssetCustomSize_Load);
			((System.ComponentModel.ISupportInitialize)this.numericUpDownWidth).EndInit();
			((System.ComponentModel.ISupportInitialize)this.numericUpDownHeight).EndInit();
			base.ResumeLayout(false);
			base.PerformLayout();
		}
	}
	public class AssetDetails : UserControl
	{
		public enum SelectionType
		{
			Asset,
			AssetGroup,
			Layer,
			Texture
		}

		public struct SelectionContext
		{
			public SelectionType Type { get; set; }

			public Guid ProjectId { get; set; }

			public Guid AssetId { get; set; }

			public string AssetGroupId { get; set; }

			public int LayerIndex { get; set; }

			public Texture Texture { get; set; }

			public SelectionContext(Guid projectId, Guid assetId)
			{
				this = default(SelectionContext);
				Type = SelectionType.Asset;
				ProjectId = projectId;
				AssetId = assetId;
			}

			public SelectionContext(Guid projectId, string assetGroupId)
			{
				this = default(SelectionContext);
				Type = SelectionType.AssetGroup;
				ProjectId = projectId;
				AssetGroupId = assetGroupId;
			}

			public SelectionContext(Guid projectId, Guid assetId, int layer)
			{
				this = default(SelectionContext);
				Type = SelectionType.Layer;
				ProjectId = projectId;
				AssetId = assetId;
				LayerIndex = layer;
			}

			public SelectionContext(Guid projectId, Guid assetId, int layer, Texture texture)
			{
				this = default(SelectionContext);
				Type = SelectionType.Texture;
				ProjectId = projectId;
				AssetId = assetId;
				LayerIndex = layer;
				Texture = texture;
			}
		}

		private class ScaleComboHelper
		{
			public struct Values
			{
				public AssetLayerResizeMode mode;

				public int targetWidth;

				public int targetHeight;

				public Values(AssetLayerResizeMode mode, int targetWidth, int targetHeight)
				{
					//IL_0002: Unknown result type (might be due to invalid IL or missing references)
					//IL_0003: Unknown result type (might be due to invalid IL or missing references)
					this.mode = mode;
					this.targetWidth = targetWidth;
					this.targetHeight = targetHeight;
				}
			}

			private enum ScaleValue
			{
				Automatic,
				RelativeToStackedTexture2,
				RelativeToStackedTexture4,
				RelativeToStackedTexture8,
				RelativeToSource2,
				RelativeToSource4,
				RelativeToSource8
			}

			private static string toString(ScaleValue value)
			{
				return (new string[7] { "Automatic", "1/2x of Stacked Texture", "1/4x of Stacked Texture", "1/8x of Stacked Texture", "1/2x of Source Texture", "1/4x of Source Texture", "1/8x of Source Texture" })[(int)value];
			}

			public static void FillCombo(ComboBox combo)
			{
				ComboBoxHelper.FillEnumComboBox<ScaleValue>(combo, toString);
			}

			public static Values GetComboValue(ComboBox combo)
			{
				ScaleValue selectedValue = ComboBoxHelper.GetSelectedValue<ScaleValue>(combo);
				if (1 == 0)
				{
				}
				Values result = selectedValue switch
				{
					ScaleValue.Automatic => new Values((AssetLayerResizeMode)0, 0, 0), 
					ScaleValue.RelativeToSource2 => new Values((AssetLayerResizeMode)1, -1, -1), 
					ScaleValue.RelativeToSource4 => new Values((AssetLayerResizeMode)1, -2, -2), 
					ScaleValue.RelativeToSource8 => new Values((AssetLayerResizeMode)1, -3, -3), 
					ScaleValue.RelativeToStackedTexture2 => new Values((AssetLayerResizeMode)2, -1, -1), 
					ScaleValue.RelativeToStackedTexture4 => new Values((AssetLayerResizeMode)2, -2, -2), 
					ScaleValue.RelativeToStackedTexture8 => new Values((AssetLayerResizeMode)2, -3, -3), 
					_ => new Values((AssetLayerResizeMode)0, 0, 0), 
				};
				if (1 == 0)
				{
				}
				return result;
			}

			public static void SetComboValue(ComboBox combo, AssetLayerResizeMode mode, int targetWidth, int targetHeight)
			{
				//IL_0015: Unknown result type (might be due to invalid IL or missing references)
				//IL_0016: Unknown result type (might be due to invalid IL or missing references)
				//IL_0017: Unknown result type (might be due to invalid IL or missing references)
				//IL_0018: Unknown result type (might be due to invalid IL or missing references)
				//IL_0019: Unknown result type (might be due to invalid IL or missing references)
				//IL_001b: Invalid comparison between Unknown and I4
				//IL_001f: Unknown result type (might be due to invalid IL or missing references)
				//IL_0021: Invalid comparison between Unknown and I4
				ScaleValue tag = ScaleValue.Automatic;
				if (targetWidth != 0 || targetHeight != 0)
				{
					if ((int)mode != 1)
					{
						if ((int)mode == 2)
						{
							if (1 == 0)
							{
							}
							ScaleValue scaleValue = targetWidth switch
							{
								-1 => ScaleValue.RelativeToStackedTexture2, 
								-2 => ScaleValue.RelativeToStackedTexture4, 
								-3 => ScaleValue.RelativeToStackedTexture8, 
								_ => ScaleValue.Automatic, 
							};
							if (1 == 0)
							{
							}
							tag = scaleValue;
						}
					}
					else
					{
						if (1 == 0)
						{
						}
						ScaleValue scaleValue = targetWidth switch
						{
							-1 => ScaleValue.RelativeToSource2, 
							-2 => ScaleValue.RelativeToSource4, 
							-3 => ScaleValue.RelativeToSource8, 
							_ => ScaleValue.Automatic, 
						};
						if (1 == 0)
						{
						}
						tag = scaleValue;
					}
				}
				ComboBoxHelper.SelectComboBoxItem(combo, tag);
			}
		}

		public delegate void AssetChangedEventHandler(object sender, Asset asset, ProjectBuilder builder);

		private SolutionModel model;

		private bool loading;

		private ChannelMask mask;

		private System.Windows.Forms.ToolTip toolTipTextureFileAbs = new System.Windows.Forms.ToolTip();

		private SelectionContext ActiveSelection;

		private IContainer components;

		private TabStrip tabStrip1;

		private TabItem tabItemLayerInfo;

		private TabItem tabItemAssetInfo;

		private Panel panel1;

		private LabelX labelX4;

		private LabelX labelLayerCount;

		private LabelX label4;

		private LabelX labelNaturalSize;

		private LabelX label1;

		private Panel panel2;

		private LabelX labelType;

		private LabelX labelX5;

		private ComboBox comboBoxFlip;

		private LabelX labelX1;

		private LabelX labelLayerName;

		private LabelX labelX3;

		private LabelX labelDataType;

		private LabelX labelX2;

		private ComboBox comboBoxQualty;

		private LabelX label13;

		private Panel panel3;

		private Button buttonShowTexture;

		private TabItem tabItemTextureInfo;

		private LabelX labelStatus;

		private ToolTip ToolTip;

		private LabelX labelInfo;

		private LabelX labelX6;

		private LabelX labelIcon;

		private LabelX labelAssetPanelGroupId;

		private LabelX labelX8;

		private Panel panel4;

		private LabelX labelGroupPanelGroupId;

		private LabelX labelX9;

		private TabItem tabItemGroupInfo;

		private LabelX labelStackedTextureCount;

		private LabelX labelX10;

		private LabelX labelX7;

		private LabelX labelAssetType;

		private LabelX labelX12;

		private LabelX labelGroupType;

		private LabelX labelX13;

		private ComboBox comboBoxBorderMethod;

		private LabelX labelX16;

		private ComboBox comboBoxMipMaps;

		private Button buttonSizeAsset;

		private LabelX labelX14;

		private LabelX labelTargetSize;

		private SwizzleControl swizzle0;

		private SwizzleControl swizzle1;

		private TextBoxX nameTextBox;

		private LabelX labelX17;

		private LabelX labelTextureFileAbs;

		private LabelX labelSwizzle1;

		private LabelX labelSwizzle0;

		private LabelX labelX11;

		private LabelX labelTextureFileModified;

		private LabelX labelTextureFileSize;

		private LabelX labelX18;

		private LabelX labelCodingProfile;

		private LabelX labelX15;

		private LabelX labelX19;

		private ComboBox comboBoxSizeMode;

		private InvertChannelsControl invertChannels0;

		private LabelX labelInvertChannel0;

		private LabelX labelInvertChannel1;

		private InvertChannelsControl invertChannels1;

		private LabelX labelInvertChannel3;

		private InvertChannelsControl invertChannels3;

		private SwizzleControl swizzle3;

		private LabelX labelSwizzle3;

		private LabelX labelInvertChannel2;

		private InvertChannelsControl invertChannels2;

		private SwizzleControl swizzle2;

		private LabelX labelSwizzle2;

		private LabelX labelMissingTextures;

		public bool ReadOnly { get; private set; }

		public Asset Asset { get; set; }

		public Texture Texture { get; private set; }

		public ProjectBuilder Builder { get; private set; }

		public int LayerIndex { get; private set; }

		public string AssetGroupId { get; private set; }

		private SelectionType Type { get; set; }

		public Guid ProjectId { get; private set; }

		private bool IsUpdatingAsset { get; set; }

		public event AssetChangedEventHandler AssetChanged;

		protected virtual void OnAssetChanged(Asset asset, ProjectBuilder builder)
		{
			IsUpdatingAsset = true;
			this.AssetChanged?.Invoke(this, asset, builder);
			IsUpdatingAsset = false;
		}

		public AssetDetails()
		{
			InitializeComponent();
			panel1.Dock = DockStyle.Fill;
			panel2.Dock = DockStyle.Fill;
			panel3.Dock = DockStyle.Fill;
			panel4.Dock = DockStyle.Fill;
			((Control)(object)labelStatus).Dock = DockStyle.Top;
			UpdatePanelVisibility(hideAll: true);
		}

		public void Create(SolutionModel model)
		{
			this.model = model;
			model.ProjectAssetChanged += model_ProjectAssetChanged;
		}

		private void model_ProjectAssetChanged(object sender, Guid projectId, Asset asset)
		{
			if (sender != this && !IsUpdatingAsset && asset == Asset)
			{
				RefreshSelection();
			}
		}

		private string CapitalizeString(string qp)
		{
			if (qp.Length > 1)
			{
				return char.ToUpper(qp[0]) + qp.Substring(1);
			}
			return qp.ToUpper();
		}

		private void CreateQualityCombo()
		{
			comboBoxQualty.Items.Clear();
			comboBoxQualty.Enabled = !ReadOnly;
			foreach (string availableQualityProfile in GetAvailableQualityProfiles(Builder, Asset, LayerIndex))
			{
				comboBoxQualty.Items.Add(CapitalizeString(availableQualityProfile));
			}
			string text = Asset.get_AssetLayers()[LayerIndex].get_QualityProfile();
			if (text == null || text.Length == 0)
			{
				text = "default";
			}
			comboBoxQualty.SelectedItem = CapitalizeString(text);
		}

		private void CreateSizeModeCombo()
		{
			//IL_002b: Unknown result type (might be due to invalid IL or missing references)
			ScaleComboHelper.FillCombo(comboBoxSizeMode);
			AssetLayer val = Asset.get_AssetLayers()[LayerIndex];
			ScaleComboHelper.SetComboValue(comboBoxSizeMode, val.get_ResizeMode(), val.get_TargetWidth(), val.get_TargetHeight());
			int num = ((Asset.get_TargetWidth() > 0) ? Asset.get_TargetWidth() : Asset.get_Width());
			int num2 = ((Asset.get_TargetHeight() > 0) ? Asset.get_TargetHeight() : Asset.get_Height());
			bool flag = ExtraMath.IsPowerOfTwo((ulong)num) && ExtraMath.IsPowerOfTwo((ulong)num2);
			bool flag2 = Asset.get_AssetLayers().Count == 1;
			comboBoxSizeMode.Enabled = !ReadOnly && !flag2 && flag;
		}

		private List<T> EnumToList<T>()
		{
			List<T> list = new List<T>();
			Array values = System.Enum.GetValues(typeof(T));
			for (int i = 0; i < values.Length; i++)
			{
				list.Add((T)values.GetValue(i));
			}
			return list;
		}

		private void CreateFlipCombo()
		{
			//IL_0038: Unknown result type (might be due to invalid IL or missing references)
			//IL_003d: Unknown result type (might be due to invalid IL or missing references)
			//IL_004a: Unknown result type (might be due to invalid IL or missing references)
			//IL_0087: Unknown result type (might be due to invalid IL or missing references)
			//IL_008c: Unknown result type (might be due to invalid IL or missing references)
			//IL_0093: Unknown result type (might be due to invalid IL or missing references)
			comboBoxFlip.Items.Clear();
			comboBoxFlip.Enabled = !ReadOnly;
			foreach (Flip item in EnumToList<Flip>())
			{
				comboBoxFlip.Items.Add(item);
			}
			Flip flip = Asset.get_AssetLayers()[LayerIndex].get_Flip();
			comboBoxFlip.SelectedItem = flip;
		}

		private void ClearCombos()
		{
			comboBoxQualty.Items.Clear();
			comboBoxQualty.Enabled = false;
			comboBoxFlip.Items.Clear();
			comboBoxFlip.Enabled = false;
		}

		private List<string> GetAvailableQualityProfiles(ProjectBuilder builder, Asset asset, int layerIdx)
		{
			DataType dataType = builder.get_ActiveProject().get_LayerConfiguration().get_Layers()[layerIdx].get_DataType();
			return CodingProfileHelper.GetAvailableQualityProfiles(builder.get_ActiveProject().get_LayerConfiguration().get_Layers()[layerIdx].get_CodingProfile(), dataType, false, true);
		}

		private void LoadAssetGroup()
		{
			//IL_007c: Unknown result type (might be due to invalid IL or missing references)
			//IL_0081: Unknown result type (might be due to invalid IL or missing references)
			((Control)(object)labelGroupPanelGroupId).Text = ((AssetGroupId == null || AssetGroupId.Length == 0) ? "none" : AssetGroupId);
			List<Asset> list = model.FindAssetGroupAsset(ProjectId, AssetGroupId);
			((Control)(object)labelStackedTextureCount).Text = list.Count.ToString();
			if (list.Count > 0)
			{
				LabelX obj = labelGroupType;
				AssetType type = list[0].get_Type();
				((Control)(object)obj).Text = ((object)(AssetType)(ref type)).ToString();
			}
			else
			{
				((Control)(object)labelGroupType).Text = "Normal";
			}
		}

		private void LoadAsset()
		{
			//IL_0115: Unknown result type (might be due to invalid IL or missing references)
			//IL_011b: Invalid comparison between Unknown and I4
			//IL_0123: Unknown result type (might be due to invalid IL or missing references)
			//IL_0128: Unknown result type (might be due to invalid IL or missing references)
			LoadAssetGroup();
			ClearCombos();
			((Control)(object)labelInfo).Text = GetAssetState(Asset);
			((Control)(object)nameTextBox).Text = Asset.get_Name();
			((Control)(object)nameTextBox).Enabled = !ReadOnly;
			buttonSizeAsset.Enabled = !ReadOnly;
			((Control)(object)labelAssetPanelGroupId).Text = ((Asset.get_AssetGroupId() == null || Asset.get_AssetGroupId().Length == 0) ? "none" : Asset.get_AssetGroupId());
			Size size = AssetTools.CalculateAssetSize(Asset);
			((Control)(object)labelNaturalSize).Text = size.Width + " x " + size.Height;
			((Control)(object)labelLayerCount).Text = Asset.get_AssetLayers().Count.ToString();
			LabelX obj = labelAssetType;
			object obj2;
			if ((int)Asset.get_Type() != 1)
			{
				AssetType type = Asset.get_Type();
				obj2 = ((object)(AssetType)(ref type)).ToString();
			}
			else
			{
				obj2 = "Cubemap Face";
			}
			((Control)(object)obj).Text = (string)obj2;
			string text = string.Format("{0} x {1}", new object[2]
			{
				Asset.get_TargetWidth(),
				Asset.get_TargetHeight()
			});
			string text2 = string.Format("{0} x {1}", new object[2] { size.Width, size.Height });
			((Control)(object)labelTargetSize).Text = ((Asset.get_TargetWidth() != 0 && Asset.get_TargetHeight() != 0) ? ("Custom: " + text) : ("Automatic: " + text2));
			CreateBorderMethodCombo();
		}

		private void CreateBorderMethodCombo()
		{
			//IL_007c: Unknown result type (might be due to invalid IL or missing references)
			//IL_0081: Unknown result type (might be due to invalid IL or missing references)
			//IL_00fe: Unknown result type (might be due to invalid IL or missing references)
			//IL_0104: Invalid comparison between Unknown and I4
			comboBoxBorderMethod.Items.Clear();
			comboBoxBorderMethod.Enabled = !ReadOnly;
			string[] names = System.Enum.GetNames(typeof(AssetTilingMethod));
			string[] array = names;
			foreach (string qp in array)
			{
				comboBoxBorderMethod.Items.Add(CapitalizeString(qp));
			}
			ComboBox comboBox = comboBoxBorderMethod;
			AssetTilingMethod tilingMethod = Asset.get_TilingMethod();
			comboBox.SelectedItem = ((object)(AssetTilingMethod)(ref tilingMethod)).ToString();
			int num = ((Asset.get_TargetWidth() > 0) ? Asset.get_TargetWidth() : Asset.get_Width());
			int num2 = ((Asset.get_TargetHeight() > 0) ? Asset.get_TargetHeight() : Asset.get_Height());
			bool flag = ExtraMath.IsPowerOfTwo((ulong)num) && ExtraMath.IsPowerOfTwo((ulong)num2);
			bool flag2 = (int)Asset.get_Type() == 1;
			comboBoxBorderMethod.Enabled = !ReadOnly && flag && !flag2;
		}

		private string GetAssetState(Asset asset)
		{
			AssetState val = Builder.get_BuildStateSummary().get_AssetStates()[asset.get_Id()];
			string assetStateInfo = State.GetAssetStateInfo(val);
			labelIcon.set_Image((Image)State.GetAssetIcon(val));
			return assetStateInfo;
		}

		private void LoadLayer()
		{
			//IL_00a6: Unknown result type (might be due to invalid IL or missing references)
			LoadAsset();
			if (LayerIndex >= 0 || LayerIndex < Asset.get_AssetLayers().Count)
			{
				LayerDescription val = Builder.get_ActiveProject().get_LayerConfiguration().get_Layers()[LayerIndex];
				AssetLayer val2 = Asset.get_AssetLayers()[LayerIndex];
				DataType dataType = val.get_DataType();
				((Control)(object)labelDataType).Text = dataType.ToString();
				((Control)(object)labelLayerName).Text = val.get_LayerName();
				CodingProfile val3 = default(CodingProfile);
				ProfileLoader.LoadCodingProfile(val.get_CodingProfile(), ref val3);
				if (val3 != null)
				{
					((Control)(object)labelCodingProfile).Text = val3.get_DisplayName();
				}
				tabItemLayerInfo.set_Text("Layer '" + val.get_LayerName() + "'");
				Size size = AssetTools.CalculateAssetSize(Asset);
				string.Format("{0} x {1}", new object[2]
				{
					val2.get_TargetWidth(),
					val2.get_TargetHeight()
				});
				string.Format("{0} x {1}", new object[2] { size.Width, size.Height });
				CreateSizeModeCombo();
				CreateQualityCombo();
				CreateFlipCombo();
				SetupMasks();
				LoadSwizzleAndInvert();
				CreateMipMapsCombo();
				SetupType();
			}
		}

		private string GetType(int subIdx)
		{
			List<Texture> list = (from _tex in Asset.get_AssetLayers()[LayerIndex].get_Textures()
				where _tex.get_SubIndex() == subIdx
				select _tex).ToList();
			int count = list.Count;
			if (count == 0)
			{
				return "";
			}
			if (count == 1)
			{
				return "Single File";
			}
			if (count > 1)
			{
				if (Asset.get_UDimSettings()[subIdx] == null)
				{
					return $"Tiled ({list.Count} files)";
				}
				return $"UDIM ({list.Count} patches)";
			}
			return "Unknown";
		}

		private void SetupMasks()
		{
			//IL_0033: Unknown result type (might be due to invalid IL or missing references)
			//IL_0038: Unknown result type (might be due to invalid IL or missing references)
			//IL_006f: Unknown result type (might be due to invalid IL or missing references)
			//IL_007c: Unknown result type (might be due to invalid IL or missing references)
			Asset.get_AssetLayers()[LayerIndex].get_Textures();
			AssetPackingMode packingMode = Asset.get_AssetLayers()[LayerIndex].get_PackingMode();
			DataType dataType = Builder.get_ActiveProject().get_LayerConfiguration().get_Layers()[LayerIndex].get_DataType();
			Dictionary<AssetPackingMode, ChannelMask> dictionary = new Dictionary<AssetPackingMode, ChannelMask>();
			ChannelMerging.GetAllChannelMasks(dataType, ref dictionary);
			if (dictionary.ContainsKey(packingMode))
			{
				mask = dictionary[packingMode];
			}
			else
			{
				mask = null;
			}
		}

		private void SetupType()
		{
			string text;
			if (GetType(0).Equals(string.Empty))
			{
				text = "Empty";
			}
			else if (mask != null)
			{
				text = "";
				for (int i = 0; i < 4; i++)
				{
					string text2 = mask.humanReadable[i];
					if (string.IsNullOrEmpty(text2))
					{
						continue;
					}
					string type = GetType(i);
					if (!string.IsNullOrEmpty(type))
					{
						if (i != 0)
						{
							text += ", ";
						}
						text += string.Format("{0}: {1}", new object[2] { text2, type });
					}
				}
			}
			else
			{
				text = GetType(0);
			}
			((Control)(object)labelType).Text = text;
		}

		private void CreateMipMapsCombo()
		{
			//IL_0047: Unknown result type (might be due to invalid IL or missing references)
			//IL_004c: Unknown result type (might be due to invalid IL or missing references)
			//IL_0053: Unknown result type (might be due to invalid IL or missing references)
			comboBoxMipMaps.Enabled = !ReadOnly;
			comboBoxMipMaps.DataSource = System.Enum.GetValues(typeof(TextureMipSourceType));
			TextureMipSourceType mipSourceType = Asset.get_AssetLayers()[LayerIndex].get_MipSourceType();
			comboBoxMipMaps.SelectedItem = mipSourceType;
		}

		private void LoadSwizzleAndInvert()
		{
			//IL_017e: Unknown result type (might be due to invalid IL or missing references)
			AssetLayer val = Asset.get_AssetLayers()[LayerIndex];
			LayerDescription val2 = Builder.get_ActiveProject().get_LayerConfiguration().get_Layers()[LayerIndex];
			SwizzleControl[] array = new SwizzleControl[4] { swizzle0, swizzle1, swizzle2, swizzle3 };
			LabelX[] array2 = (LabelX[])(object)new LabelX[4] { labelSwizzle0, labelSwizzle1, labelSwizzle2, labelSwizzle3 };
			InvertChannelsControl[] array3 = new InvertChannelsControl[4] { invertChannels0, invertChannels1, invertChannels2, invertChannels3 };
			LabelX[] array4 = (LabelX[])(object)new LabelX[4] { labelInvertChannel0, labelInvertChannel1, labelInvertChannel2, labelInvertChannel3 };
			int num = 28;
			int num2 = comboBoxMipMaps.Location.Y + num;
			int i;
			for (i = 0; i < 4; i++)
			{
				int numTextureChannels = AssetTools.GetNumTextureChannels(Asset, Builder, LayerIndex, i);
				string text = ((mask != null) ? mask.humanReadable[i] : string.Empty);
				string text2 = ((!string.IsNullOrEmpty(text)) ? ("(" + text + ")") : string.Empty);
				string text3 = (ChannelMerging.IsCombinedMode(val.get_PackingMode()) ? i.ToString() : string.Empty);
				bool flag = (from _tex in val.get_Textures()
					where _tex.get_SubIndex() == i
					select _tex).Count() > 0;
				if (flag)
				{
					array[i].Initialize(numTextureChannels, val.get_Swizzle()[i], showPresetButton: true, Constants.SwizzlePresets);
					array[i].OnSwizzleChanged += comboBoxSwizzleX_SelectedIndexChanged;
					((Control)(object)array2[i]).Text = "Swizzle " + text3 + " " + text2;
					array[i].Tag = i;
				}
				((Control)(object)array2[i]).Visible = flag;
				array[i].Visible = flag;
				((Control)(object)array2[i]).Location = new Point(((Control)(object)array2[i]).Location.X, num2);
				array[i].Location = new Point(array[i].Location.X, num2);
				num2 += num * (flag ? 1 : 0);
				if (flag)
				{
					string text4 = text;
					if (string.IsNullOrEmpty(text4))
					{
						text4 = ChannelMerging.GetDataTypeChannelNames(val2.get_DataType());
					}
					array3[i].Initialize(numTextureChannels, text4, val.get_InvertChannels()[i]);
					array3[i].ValuesChanged += invertChannels_ValuesChanged;
					((Control)(object)array4[i]).Text = "Invert Channel " + text3 + " " + text2;
					array3[i].Tag = i;
				}
				array3[i].Visible = flag;
				((Control)(object)array4[i]).Visible = flag;
				((Control)(object)array4[i]).Location = new Point(((Control)(object)array4[i]).Location.X, num2);
				array3[i].Location = new Point(array3[i].Location.X, num2);
				num2 += num * (flag ? 1 : 0);
				array[i].Enabled = !ReadOnly;
				array3[i].Enabled = !ReadOnly;
			}
		}

		private void invertChannels_ValuesChanged(object sender, EventArgs e)
		{
			if (Asset == null || loading)
			{
				return;
			}
			InvertChannelsControl invertChannelsControl = (InvertChannelsControl)sender;
			int num = (int)invertChannelsControl.Tag;
			if (LayerIndex >= 0 && LayerIndex < Asset.get_AssetLayers().Count)
			{
				string invertValue = invertChannelsControl.InvertValue;
				if (Asset.get_AssetLayers()[LayerIndex].get_InvertChannels()[num] != invertValue)
				{
					Asset.get_AssetLayers()[LayerIndex].get_InvertChannels()[num] = invertValue;
					ChangeLayerState((CausingChanges)4);
					OnAssetChanged(Asset, Builder);
				}
			}
		}

		private void LoadTexture()
		{
			LoadLayer();
			try
			{
				string absolutePath = ShellTools.GetAbsolutePath(model.GetProjectAbsolutePath(ProjectId), Texture.get_Source());
				((Control)(object)labelTextureFileAbs).Text = absolutePath;
				toolTipTextureFileAbs.SetToolTip((Control)(object)labelTextureFileAbs, absolutePath);
				FileInfo fileInfo = new FileInfo(absolutePath);
				((Control)(object)labelTextureFileModified).Text = DateTimeManagement.Round(fileInfo.LastWriteTime).ToString("F");
				((Control)(object)labelTextureFileSize).Text = Various.FormatBytes(fileInfo.Length);
			}
			catch
			{
				((Control)(object)labelTextureFileAbs).Text = "";
				toolTipTextureFileAbs.SetToolTip((Control)(object)labelTextureFileAbs, "");
				((Control)(object)labelTextureFileModified).Text = "unknown";
				((Control)(object)labelTextureFileSize).Text = "unknown";
			}
		}

		private void SelectTabWithoutFocus(int index)
		{
			tabStrip1.set_SelectedTabIndex(index);
			UpdatePanelVisibility(hideAll: false);
		}

		private void RefreshSelection()
		{
			SetSelection(ActiveSelection);
		}

		public void SetSelection(SelectionContext selection)
		{
			//IL_0135: Unknown result type (might be due to invalid IL or missing references)
			//IL_013e: Unknown result type (might be due to invalid IL or missing references)
			//IL_0144: Invalid comparison between Unknown and I4
			//IL_0180: Unknown result type (might be due to invalid IL or missing references)
			//IL_0189: Unknown result type (might be due to invalid IL or missing references)
			//IL_018f: Invalid comparison between Unknown and I4
			if (model == null)
			{
				return;
			}
			ActiveSelection = selection;
			loading = true;
			LayerIndex = selection.LayerIndex;
			Texture = selection.Texture;
			AssetGroupId = selection.AssetGroupId;
			Builder = model.SolutionBuilder.GetProjectBuilder(selection.ProjectId);
			ProjectId = selection.ProjectId;
			Asset = model.FindAsset(selection.ProjectId, selection.AssetId);
			if (Asset == null && selection.Type != SelectionType.AssetGroup)
			{
				Clear();
				loading = false;
				return;
			}
			bool flag = false;
			if (selection.Type == SelectionType.AssetGroup)
			{
				List<Asset> list = model.FindAssetGroupAsset(ProjectId, AssetGroupId);
				if (list.Count > 0)
				{
					AssetState val = Builder.get_BuildStateSummary().get_AssetStates()[list[0].get_Id()];
					if (val != null)
					{
						flag = (int)val.get_FailureState() == 0 || (int)val.get_FailureState() == 1;
					}
				}
			}
			else
			{
				AssetState val2 = Builder.get_BuildStateSummary().get_AssetStates()[Asset.get_Id()];
				if (val2 != null)
				{
					flag = (int)val2.get_FailureState() == 0 || (int)val2.get_FailureState() == 1;
				}
			}
			ReadOnly = flag || Builder.get_ReadOnly();
			((Control)(object)labelMissingTextures).Visible = flag;
			((Control)(object)labelMissingTextures).Dock = DockStyle.Top;
			((Control)(object)tabStrip1).Visible = true;
			if (selection.Type == SelectionType.AssetGroup)
			{
				LoadAssetGroup();
				tabItemAssetInfo.set_Visible(false);
				tabItemLayerInfo.set_Visible(false);
				tabItemTextureInfo.set_Visible(false);
				tabItemGroupInfo.set_Visible(AssetGroupId != null);
				SelectTabWithoutFocus(0);
			}
			else if (selection.Type == SelectionType.Asset)
			{
				LoadAsset();
				tabItemAssetInfo.set_Visible(true);
				tabItemLayerInfo.set_Visible(false);
				tabItemTextureInfo.set_Visible(false);
				tabItemGroupInfo.set_Visible(AssetGroupId != null);
				SelectTabWithoutFocus(1);
			}
			else if (selection.Type == SelectionType.Layer)
			{
				LoadLayer();
				tabItemAssetInfo.set_Visible(true);
				tabItemLayerInfo.set_Visible(true);
				tabItemTextureInfo.set_Visible(false);
				tabItemGroupInfo.set_Visible(AssetGroupId != null);
				SelectTabWithoutFocus(2);
			}
			else if (selection.Type == SelectionType.Texture)
			{
				LoadTexture();
				tabItemAssetInfo.set_Visible(true);
				tabItemLayerInfo.set_Visible(true);
				tabItemTextureInfo.set_Visible(true);
				tabItemGroupInfo.set_Visible(AssetGroupId != null);
				SelectTabWithoutFocus(3);
			}
			loading = false;
			((Control)(object)labelStatus).Visible = false;
		}

		public void Clear()
		{
			Asset = null;
			((Control)(object)nameTextBox).Text = "None selected";
			((Control)(object)nameTextBox).Enabled = false;
			((Control)(object)labelNaturalSize).Text = string.Empty;
			((Control)(object)labelLayerName).Text = string.Empty;
			((Control)(object)labelLayerCount).Text = string.Empty;
			((Control)(object)labelType).Text = string.Empty;
			((Control)(object)labelTextureFileAbs).Text = string.Empty;
			SelectTabWithoutFocus(0);
			tabItemLayerInfo.set_Visible(false);
			tabItemTextureInfo.set_Visible(false);
			((Control)(object)tabStrip1).Visible = false;
			((Control)(object)labelStatus).Visible = true;
			UpdatePanelVisibility(hideAll: true);
			ClearCombos();
		}

		private void comboBoxBorderMethod_SelectedIndexChanged(object sender, EventArgs e)
		{
			//IL_001b: Unknown result type (might be due to invalid IL or missing references)
			//IL_003a: Unknown result type (might be due to invalid IL or missing references)
			if (Asset != null && !loading)
			{
				AssetTilingMethod result = (AssetTilingMethod)1;
				if (System.Enum.TryParse<AssetTilingMethod>(comboBoxBorderMethod.Text, ignoreCase: true, out result))
				{
					Asset.set_TilingMethod(result);
					ChangeLayerState((CausingChanges)7);
					OnAssetChanged(Asset, Builder);
				}
			}
		}

		private void comboBoxQualty_SelectedIndexChanged(object sender, EventArgs e)
		{
			if (Asset != null && !loading && LayerIndex >= 0 && LayerIndex < Asset.get_AssetLayers().Count && Asset.get_AssetLayers()[LayerIndex].get_QualityProfile() != comboBoxQualty.Text.ToLower())
			{
				Asset.get_AssetLayers()[LayerIndex].set_QualityProfile(comboBoxQualty.Text);
				ChangeLayerState((CausingChanges)5);
				OnAssetChanged(Asset, Builder);
			}
		}

		private void ChangeAssetState(CausingChanges change)
		{
			//IL_0021: Unknown result type (might be due to invalid IL or missing references)
			Builder.get_BuildStateSummary().get_AssetStates()[Asset.get_Id()].set_Changes(change);
		}

		private void ChangeLayerState(CausingChanges change)
		{
			//IL_0035: Unknown result type (might be due to invalid IL or missing references)
			//IL_003d: Unknown result type (might be due to invalid IL or missing references)
			AssetState val = Builder.get_BuildStateSummary().get_AssetStates()[Asset.get_Id()];
			LayerAssetState val2 = val.get_LayerStates()[LayerIndex];
			val.set_Changes(change);
			val2.set_Changes(change);
		}

		private void comboBoxFlip_SelectedIndexChanged(object sender, EventArgs e)
		{
			//IL_0045: Unknown result type (might be due to invalid IL or missing references)
			//IL_004a: Unknown result type (might be due to invalid IL or missing references)
			//IL_0061: Unknown result type (might be due to invalid IL or missing references)
			//IL_0066: Unknown result type (might be due to invalid IL or missing references)
			//IL_0087: Unknown result type (might be due to invalid IL or missing references)
			if (Asset != null && !loading && LayerIndex >= 0 && LayerIndex < Asset.get_AssetLayers().Count)
			{
				Flip val = (Flip)comboBoxFlip.SelectedItem;
				if (Asset.get_AssetLayers()[LayerIndex].get_Flip() != val)
				{
					Asset.get_AssetLayers()[LayerIndex].set_Flip(val);
					ChangeLayerState((CausingChanges)4);
					OnAssetChanged(Asset, Builder);
				}
			}
		}

		private void UpdatePanelVisibility(bool hideAll)
		{
			Panel[] array = new Panel[4] { panel4, panel1, panel2, panel3 };
			for (int i = 0; i < array.Length; i++)
			{
				array[i].Visible = !hideAll && tabStrip1.get_SelectedTabIndex() == i;
			}
			if (!panel1.Visible && Asset != null)
			{
				((Control)(object)nameTextBox).Text = Asset.get_Name();
			}
		}

		private void tabStrip1_SelectedTabChanged(object sender, TabStripTabChangedEventArgs e)
		{
			UpdatePanelVisibility(hideAll: false);
		}

		private void buttonShowTexture_Click(object sender, EventArgs e)
		{
			ShellTools.OpenExplorerAndSelect(((Control)(object)labelTextureFileAbs).Text);
		}

		private void comboBoxSwizzleX_SelectedIndexChanged(object sender, EventArgs e)
		{
			if (Asset != null && !loading && LayerIndex >= 0 && LayerIndex < Asset.get_AssetLayers().Count)
			{
				SwizzleControl swizzleControl = (SwizzleControl)sender;
				string swizzle = swizzleControl.Swizzle;
				int num = (int)swizzleControl.Tag;
				if (Asset.get_AssetLayers()[LayerIndex].get_Swizzle()[num] != swizzle)
				{
					Asset.get_AssetLayers()[LayerIndex].get_Swizzle()[num] = swizzle;
					ChangeLayerState((CausingChanges)4);
					OnAssetChanged(Asset, Builder);
				}
			}
		}

		private void comboBoxMipMaps_SelectedIndexChanged(object sender, EventArgs e)
		{
			//IL_0061: Unknown result type (might be due to invalid IL or missing references)
			//IL_0066: Unknown result type (might be due to invalid IL or missing references)
			//IL_008a: Unknown result type (might be due to invalid IL or missing references)
			if (Asset != null && !loading && LayerIndex >= 0 && LayerIndex < Asset.get_AssetLayers().Count && System.Enum.TryParse<TextureMipSourceType>(comboBoxMipMaps.SelectedValue.ToString(), out TextureMipSourceType result) && Asset.get_AssetLayers()[LayerIndex].get_MipSourceType() != result)
			{
				Asset.get_AssetLayers()[LayerIndex].set_MipSourceType(result);
				ChangeLayerState((CausingChanges)4);
				OnAssetChanged(Asset, Builder);
			}
		}

		private void buttonSize_Click(object sender, EventArgs e)
		{
			AssetCustomSizeForm assetCustomSizeForm = new AssetCustomSizeForm();
			assetCustomSizeForm.Title = "Resize Asset";
			Size size2 = (assetCustomSizeForm.OriginalSize = AssetTools.CalculateAssetSize(Asset));
			Size size3 = size2;
			assetCustomSizeForm.TargetSize = new Size(Asset.get_TargetWidth(), Asset.get_TargetHeight());
			if (assetCustomSizeForm.ShowDialog(this) == DialogResult.OK)
			{
				Size targetSize = assetCustomSizeForm.TargetSize;
				if (Asset.get_TargetWidth() != targetSize.Width || Asset.get_TargetHeight() != targetSize.Height)
				{
					Asset.set_TargetWidth(targetSize.Width);
					Asset.set_TargetHeight(targetSize.Height);
					LoadAsset();
					OnAssetChanged(Asset, Builder);
				}
			}
		}

		private void textBoxX1_KeyDown(object sender, KeyEventArgs e)
		{
			if (e.KeyCode == Keys.Return)
			{
				RenameAsset();
			}
		}

		private void RenameAsset()
		{
			if (Asset != null && model != null && !loading)
			{
				string text = ((Control)(object)nameTextBox).Text;
				if (Asset.get_Name() != text)
				{
					model.RenameAsset(ProjectId, Asset.get_Id(), text);
				}
			}
		}

		private void nameTextBox_Leave(object sender, EventArgs e)
		{
			RenameAsset();
		}

		private void comboBoxSizeMode_SelectedIndexChanged(object sender, EventArgs e)
		{
			//IL_0063: Unknown result type (might be due to invalid IL or missing references)
			//IL_0098: Unknown result type (might be due to invalid IL or missing references)
			if (Asset != null && !loading && LayerIndex >= 0 && LayerIndex < Asset.get_AssetLayers().Count)
			{
				AssetLayer val = Asset.get_AssetLayers()[LayerIndex];
				ScaleComboHelper.Values comboValue = ScaleComboHelper.GetComboValue(comboBoxSizeMode);
				ScaleComboHelper.Values values = new ScaleComboHelper.Values(val.get_ResizeMode(), val.get_TargetWidth(), val.get_TargetHeight());
				if (!comboValue.Equals(values))
				{
					val.set_ResizeMode(comboValue.mode);
					val.set_TargetWidth(comboValue.targetWidth);
					val.set_TargetHeight(comboValue.targetHeight);
					ChangeLayerState((CausingChanges)4);
					OnAssetChanged(Asset, Builder);
				}
			}
		}

		protected override void Dispose(bool disposing)
		{
			if (disposing && components != null)
			{
				components.Dispose();
			}
			base.Dispose(disposing);
		}

		private void InitializeComponent()
		{
			//IL_000d: Unknown result type (might be due to invalid IL or missing references)
			//IL_0017: Expected O, but got Unknown
			//IL_001e: Unknown result type (might be due to invalid IL or missing references)
			//IL_0028: Expected O, but got Unknown
			//IL_002f: Unknown result type (might be due to invalid IL or missing references)
			//IL_0039: Expected O, but got Unknown
			//IL_0040: Unknown result type (might be due to invalid IL or missing references)
			//IL_004a: Expected O, but got Unknown
			//IL_0051: Unknown result type (might be due to invalid IL or missing references)
			//IL_005b: Expected O, but got Unknown
			//IL_0067: Unknown result type (might be due to invalid IL or missing references)
			//IL_0071: Expected O, but got Unknown
			//IL_007d: Unknown result type (might be due to invalid IL or missing references)
			//IL_0087: Expected O, but got Unknown
			//IL_0088: Unknown result type (might be due to invalid IL or missing references)
			//IL_0092: Expected O, but got Unknown
			//IL_009e: Unknown result type (might be due to invalid IL or missing references)
			//IL_00a8: Expected O, but got Unknown
			//IL_00a9: Unknown result type (might be due to invalid IL or missing references)
			//IL_00b3: Expected O, but got Unknown
			//IL_00b4: Unknown result type (might be due to invalid IL or missing references)
			//IL_00be: Expected O, but got Unknown
			//IL_00bf: Unknown result type (might be due to invalid IL or missing references)
			//IL_00c9: Expected O, but got Unknown
			//IL_00ca: Unknown result type (might be due to invalid IL or missing references)
			//IL_00d4: Expected O, but got Unknown
			//IL_00d5: Unknown result type (might be due to invalid IL or missing references)
			//IL_00df: Expected O, but got Unknown
			//IL_00e0: Unknown result type (might be due to invalid IL or missing references)
			//IL_00ea: Expected O, but got Unknown
			//IL_00eb: Unknown result type (might be due to invalid IL or missing references)
			//IL_00f5: Expected O, but got Unknown
			//IL_00f6: Unknown result type (might be due to invalid IL or missing references)
			//IL_0100: Expected O, but got Unknown
			//IL_0101: Unknown result type (might be due to invalid IL or missing references)
			//IL_010b: Expected O, but got Unknown
			//IL_010c: Unknown result type (might be due to invalid IL or missing references)
			//IL_0116: Expected O, but got Unknown
			//IL_0117: Unknown result type (might be due to invalid IL or missing references)
			//IL_0121: Expected O, but got Unknown
			//IL_0122: Unknown result type (might be due to invalid IL or missing references)
			//IL_012c: Expected O, but got Unknown
			//IL_0138: Unknown result type (might be due to invalid IL or missing references)
			//IL_0142: Expected O, but got Unknown
			//IL_014e: Unknown result type (might be due to invalid IL or missing references)
			//IL_0158: Expected O, but got Unknown
			//IL_016f: Unknown result type (might be due to invalid IL or missing references)
			//IL_0179: Expected O, but got Unknown
			//IL_017a: Unknown result type (might be due to invalid IL or missing references)
			//IL_0184: Expected O, but got Unknown
			//IL_019b: Unknown result type (might be due to invalid IL or missing references)
			//IL_01a5: Expected O, but got Unknown
			//IL_01a6: Unknown result type (might be due to invalid IL or missing references)
			//IL_01b0: Expected O, but got Unknown
			//IL_01c7: Unknown result type (might be due to invalid IL or missing references)
			//IL_01d1: Expected O, but got Unknown
			//IL_01d2: Unknown result type (might be due to invalid IL or missing references)
			//IL_01dc: Expected O, but got Unknown
			//IL_01dd: Unknown result type (might be due to invalid IL or missing references)
			//IL_01e7: Expected O, but got Unknown
			//IL_01f3: Unknown result type (might be due to invalid IL or missing references)
			//IL_01fd: Expected O, but got Unknown
			//IL_01fe: Unknown result type (might be due to invalid IL or missing references)
			//IL_0208: Expected O, but got Unknown
			//IL_0214: Unknown result type (might be due to invalid IL or missing references)
			//IL_021e: Expected O, but got Unknown
			//IL_021f: Unknown result type (might be due to invalid IL or missing references)
			//IL_0229: Expected O, but got Unknown
			//IL_0235: Unknown result type (might be due to invalid IL or missing references)
			//IL_023f: Expected O, but got Unknown
			//IL_0240: Unknown result type (might be due to invalid IL or missing references)
			//IL_024a: Expected O, but got Unknown
			//IL_024b: Unknown result type (might be due to invalid IL or missing references)
			//IL_0255: Expected O, but got Unknown
			//IL_0261: Unknown result type (might be due to invalid IL or missing references)
			//IL_026b: Expected O, but got Unknown
			//IL_026c: Unknown result type (might be due to invalid IL or missing references)
			//IL_0276: Expected O, but got Unknown
			//IL_0277: Unknown result type (might be due to invalid IL or missing references)
			//IL_0281: Expected O, but got Unknown
			//IL_028d: Unknown result type (might be due to invalid IL or missing references)
			//IL_0297: Expected O, but got Unknown
			//IL_02a3: Unknown result type (might be due to invalid IL or missing references)
			//IL_02ad: Expected O, but got Unknown
			//IL_02ae: Unknown result type (might be due to invalid IL or missing references)
			//IL_02b8: Expected O, but got Unknown
			//IL_02b9: Unknown result type (might be due to invalid IL or missing references)
			//IL_02c3: Expected O, but got Unknown
			//IL_02c4: Unknown result type (might be due to invalid IL or missing references)
			//IL_02ce: Expected O, but got Unknown
			//IL_02cf: Unknown result type (might be due to invalid IL or missing references)
			//IL_02d9: Expected O, but got Unknown
			//IL_02da: Unknown result type (might be due to invalid IL or missing references)
			//IL_02e4: Expected O, but got Unknown
			//IL_02f0: Unknown result type (might be due to invalid IL or missing references)
			//IL_02fa: Expected O, but got Unknown
			//IL_0306: Unknown result type (might be due to invalid IL or missing references)
			//IL_0310: Expected O, but got Unknown
			//IL_0311: Unknown result type (might be due to invalid IL or missing references)
			//IL_031b: Expected O, but got Unknown
			//IL_031c: Unknown result type (might be due to invalid IL or missing references)
			//IL_0326: Expected O, but got Unknown
			//IL_0327: Unknown result type (might be due to invalid IL or missing references)
			//IL_0331: Expected O, but got Unknown
			//IL_0332: Unknown result type (might be due to invalid IL or missing references)
			//IL_033c: Expected O, but got Unknown
			//IL_033d: Unknown result type (might be due to invalid IL or missing references)
			//IL_0347: Expected O, but got Unknown
			//IL_0348: Unknown result type (might be due to invalid IL or missing references)
			//IL_0352: Expected O, but got Unknown
			//IL_041f: Unknown result type (might be due to invalid IL or missing references)
			//IL_0425: Expected O, but got Unknown
			//IL_0431: Unknown result type (might be due to invalid IL or missing references)
			//IL_0437: Expected O, but got Unknown
			//IL_0443: Unknown result type (might be due to invalid IL or missing references)
			//IL_0449: Expected O, but got Unknown
			//IL_0455: Unknown result type (might be due to invalid IL or missing references)
			//IL_045b: Expected O, but got Unknown
			//IL_048f: Unknown result type (might be due to invalid IL or missing references)
			//IL_0495: Expected O, but got Unknown
			//IL_04a1: Unknown result type (might be due to invalid IL or missing references)
			//IL_04a7: Expected O, but got Unknown
			//IL_04b3: Unknown result type (might be due to invalid IL or missing references)
			//IL_04b9: Expected O, but got Unknown
			//IL_04c5: Unknown result type (might be due to invalid IL or missing references)
			//IL_04cb: Expected O, but got Unknown
			//IL_0511: Unknown result type (might be due to invalid IL or missing references)
			//IL_0517: Expected O, but got Unknown
			//IL_0523: Unknown result type (might be due to invalid IL or missing references)
			//IL_0529: Expected O, but got Unknown
			//IL_0535: Unknown result type (might be due to invalid IL or missing references)
			//IL_053b: Expected O, but got Unknown
			//IL_0547: Unknown result type (might be due to invalid IL or missing references)
			//IL_054d: Expected O, but got Unknown
			//IL_066a: Unknown result type (might be due to invalid IL or missing references)
			//IL_0674: Expected O, but got Unknown
			//IL_0c1b: Unknown result type (might be due to invalid IL or missing references)
			//IL_0c25: Expected O, but got Unknown
			//IL_1418: Unknown result type (might be due to invalid IL or missing references)
			//IL_1422: Expected O, but got Unknown
			//IL_1cba: Unknown result type (might be due to invalid IL or missing references)
			//IL_1cc4: Expected O, but got Unknown
			//IL_2273: Unknown result type (might be due to invalid IL or missing references)
			//IL_227d: Expected O, but got Unknown
			//IL_26f8: Unknown result type (might be due to invalid IL or missing references)
			//IL_2702: Expected O, but got Unknown
			//IL_31e9: Unknown result type (might be due to invalid IL or missing references)
			//IL_31f3: Expected O, but got Unknown
			this.components = new System.ComponentModel.Container();
			this.tabStrip1 = new TabStrip();
			this.tabItemGroupInfo = new TabItem(this.components);
			this.tabItemAssetInfo = new TabItem(this.components);
			this.tabItemLayerInfo = new TabItem(this.components);
			this.tabItemTextureInfo = new TabItem(this.components);
			this.panel1 = new System.Windows.Forms.Panel();
			this.nameTextBox = new TextBoxX();
			this.buttonSizeAsset = new System.Windows.Forms.Button();
			this.labelX14 = new LabelX();
			this.labelTargetSize = new LabelX();
			this.comboBoxBorderMethod = new System.Windows.Forms.ComboBox();
			this.labelX13 = new LabelX();
			this.labelX7 = new LabelX();
			this.labelAssetType = new LabelX();
			this.labelAssetPanelGroupId = new LabelX();
			this.labelX8 = new LabelX();
			this.labelIcon = new LabelX();
			this.labelX6 = new LabelX();
			this.labelInfo = new LabelX();
			this.labelX4 = new LabelX();
			this.labelLayerCount = new LabelX();
			this.label4 = new LabelX();
			this.labelNaturalSize = new LabelX();
			this.label1 = new LabelX();
			this.comboBoxMipMaps = new System.Windows.Forms.ComboBox();
			this.labelX16 = new LabelX();
			this.panel2 = new System.Windows.Forms.Panel();
			this.labelInvertChannel3 = new LabelX();
			this.invertChannels3 = new GrBuildStudio.Controls.InvertChannelsControl();
			this.swizzle3 = new GrBuildStudio.Controls.SwizzleControl();
			this.labelSwizzle3 = new LabelX();
			this.labelInvertChannel2 = new LabelX();
			this.invertChannels2 = new GrBuildStudio.Controls.InvertChannelsControl();
			this.swizzle2 = new GrBuildStudio.Controls.SwizzleControl();
			this.labelSwizzle2 = new LabelX();
			this.labelInvertChannel1 = new LabelX();
			this.comboBoxSizeMode = new System.Windows.Forms.ComboBox();
			this.invertChannels1 = new GrBuildStudio.Controls.InvertChannelsControl();
			this.labelX19 = new LabelX();
			this.labelCodingProfile = new LabelX();
			this.labelInvertChannel0 = new LabelX();
			this.swizzle1 = new GrBuildStudio.Controls.SwizzleControl();
			this.labelSwizzle1 = new LabelX();
			this.labelX15 = new LabelX();
			this.invertChannels0 = new GrBuildStudio.Controls.InvertChannelsControl();
			this.labelType = new LabelX();
			this.labelX5 = new LabelX();
			this.comboBoxFlip = new System.Windows.Forms.ComboBox();
			this.labelX1 = new LabelX();
			this.labelLayerName = new LabelX();
			this.labelSwizzle0 = new LabelX();
			this.swizzle0 = new GrBuildStudio.Controls.SwizzleControl();
			this.labelX3 = new LabelX();
			this.labelDataType = new LabelX();
			this.labelX2 = new LabelX();
			this.comboBoxQualty = new System.Windows.Forms.ComboBox();
			this.label13 = new LabelX();
			this.panel3 = new System.Windows.Forms.Panel();
			this.labelTextureFileSize = new LabelX();
			this.labelX18 = new LabelX();
			this.labelTextureFileModified = new LabelX();
			this.labelX11 = new LabelX();
			this.labelTextureFileAbs = new LabelX();
			this.labelX17 = new LabelX();
			this.buttonShowTexture = new System.Windows.Forms.Button();
			this.labelStatus = new LabelX();
			this.panel4 = new System.Windows.Forms.Panel();
			this.labelX12 = new LabelX();
			this.labelGroupType = new LabelX();
			this.labelStackedTextureCount = new LabelX();
			this.labelX10 = new LabelX();
			this.labelGroupPanelGroupId = new LabelX();
			this.labelX9 = new LabelX();
			this.labelMissingTextures = new LabelX();
			this.ToolTip = new GrBuildStudio.ToolTip();
			this.panel1.SuspendLayout();
			this.panel2.SuspendLayout();
			this.panel3.SuspendLayout();
			this.panel4.SuspendLayout();
			base.SuspendLayout();
			this.tabStrip1.set_AutoSelectAttachedControl(true);
			this.tabStrip1.set_CanReorderTabs(false);
			this.tabStrip1.set_CloseButtonVisible(false);
			this.tabStrip1.get_ColorScheme().set_TabBackground(System.Drawing.Color.Transparent);
			this.tabStrip1.get_ColorScheme().set_TabBorder(System.Drawing.Color.Silver);
			this.tabStrip1.get_ColorScheme().set_TabItemBackground(System.Drawing.Color.Transparent);
			this.tabStrip1.get_ColorScheme().get_TabItemBackgroundColorBlend().AddRange((BackgroundColorBlend[])(object)new BackgroundColorBlend[4]
			{
				new BackgroundColorBlend(System.Drawing.Color.Empty, 0f),
				new BackgroundColorBlend(System.Drawing.Color.Empty, 0.45f),
				new BackgroundColorBlend(System.Drawing.Color.Empty, 0.45f),
				new BackgroundColorBlend(System.Drawing.Color.Empty, 1f)
			});
			this.tabStrip1.get_ColorScheme().get_TabItemHotBackgroundColorBlend().AddRange((BackgroundColorBlend[])(object)new BackgroundColorBlend[4]
			{
				new BackgroundColorBlend(System.Drawing.Color.FromArgb(28, 151, 234), 0f),
				new BackgroundColorBlend(System.Drawing.Color.Empty, 0.45f),
				new BackgroundColorBlend(System.Drawing.Color.Empty, 0.45f),
				new BackgroundColorBlend(System.Drawing.Color.Empty, 1f)
			});
			this.tabStrip1.get_ColorScheme().set_TabItemSelectedBackground(System.Drawing.Color.Transparent);
			this.tabStrip1.get_ColorScheme().get_TabItemSelectedBackgroundColorBlend().AddRange((BackgroundColorBlend[])(object)new BackgroundColorBlend[4]
			{
				new BackgroundColorBlend(System.Drawing.Color.FromArgb(0, 122, 204), 0f),
				new BackgroundColorBlend(System.Drawing.Color.Empty, 0.45f),
				new BackgroundColorBlend(System.Drawing.Color.Empty, 0.45f),
				new BackgroundColorBlend(System.Drawing.Color.Empty, 1f)
			});
			((System.Windows.Forms.Control)(object)this.tabStrip1).Dock = System.Windows.Forms.DockStyle.Top;
			((System.Windows.Forms.Control)(object)this.tabStrip1).ForeColor = System.Drawing.Color.Black;
			((System.Windows.Forms.Control)(object)this.tabStrip1).Location = new System.Drawing.Point(0, 0);
			((System.Windows.Forms.Control)(object)this.tabStrip1).Name = "tabStrip1";
			this.tabStrip1.set_SelectedTab(this.tabItemGroupInfo);
			this.tabStrip1.set_ShowFocusRectangle(false);
			((System.Windows.Forms.Control)(object)this.tabStrip1).Size = new System.Drawing.Size(1571, 27);
			this.tabStrip1.set_Style((eTabStripStyle)4);
			this.tabStrip1.set_TabAlignment((eTabStripAlignment)2);
			((System.Windows.Forms.Control)(object)this.tabStrip1).TabIndex = 32;
			this.tabStrip1.set_TabLayoutType((eTabLayoutType)1);
			this.tabStrip1.get_Tabs().Add(this.tabItemGroupInfo);
			this.tabStrip1.get_Tabs().Add(this.tabItemAssetInfo);
			this.tabStrip1.get_Tabs().Add(this.tabItemLayerInfo);
			this.tabStrip1.get_Tabs().Add(this.tabItemTextureInfo);
			this.tabStrip1.add_SelectedTabChanged(new SelectedTabChangedEventHandler(tabStrip1_SelectedTabChanged));
			this.tabItemGroupInfo.set_Name("tabItemGroupInfo");
			this.tabItemGroupInfo.set_Text("Stacked Texture Group Info");
			this.tabItemAssetInfo.set_Name("tabItemAssetInfo");
			this.tabItemAssetInfo.set_Text("Stacked Texture Info");
			this.tabItemLayerInfo.set_Name("tabItemLayerInfo");
			this.tabItemLayerInfo.set_Text("Layer Info");
			this.tabItemTextureInfo.set_Name("tabItemTextureInfo");
			this.tabItemTextureInfo.set_Text("Texture Info");
			this.panel1.Controls.Add((System.Windows.Forms.Control)(object)this.nameTextBox);
			this.panel1.Controls.Add(this.buttonSizeAsset);
			this.panel1.Controls.Add((System.Windows.Forms.Control)(object)this.labelX14);
			this.panel1.Controls.Add((System.Windows.Forms.Control)(object)this.labelTargetSize);
			this.panel1.Controls.Add(this.comboBoxBorderMethod);
			this.panel1.Controls.Add((System.Windows.Forms.Control)(object)this.labelX13);
			this.panel1.Controls.Add((System.Windows.Forms.Control)(object)this.labelX7);
			this.panel1.Controls.Add((System.Windows.Forms.Control)(object)this.labelAssetType);
			this.panel1.Controls.Add((System.Windows.Forms.Control)(object)this.labelAssetPanelGroupId);
			this.panel1.Controls.Add((System.Windows.Forms.Control)(object)this.labelX8);
			this.panel1.Controls.Add((System.Windows.Forms.Control)(object)this.labelIcon);
			this.panel1.Controls.Add((System.Windows.Forms.Control)(object)this.labelX6);
			this.panel1.Controls.Add((System.Windows.Forms.Control)(object)this.labelInfo);
			this.panel1.Controls.Add((System.Windows.Forms.Control)(object)this.labelX4);
			this.panel1.Controls.Add((System.Windows.Forms.Control)(object)this.labelLayerCount);
			this.panel1.Controls.Add((System.Windows.Forms.Control)(object)this.label4);
			this.panel1.Controls.Add((System.Windows.Forms.Control)(object)this.labelNaturalSize);
			this.panel1.Controls.Add((System.Windows.Forms.Control)(object)this.label1);
			this.panel1.Location = new System.Drawing.Point(3, 33);
			this.panel1.Name = "panel1";
			this.panel1.Size = new System.Drawing.Size(372, 288);
			this.panel1.TabIndex = 33;
			((System.Windows.Forms.Control)(object)this.nameTextBox).BackColor = System.Drawing.SystemColors.Window;
			this.nameTextBox.get_Border().set_Class("TextBoxBorder");
			this.nameTextBox.get_Border().set_CornerType((eCornerType)1);
			this.nameTextBox.get_ButtonCustom().set_Text("Edit");
			this.nameTextBox.set_DisabledBackColor(System.Drawing.Color.White);
			((System.Windows.Forms.Control)(object)this.nameTextBox).ForeColor = System.Drawing.Color.Black;
			((System.Windows.Forms.Control)(object)this.nameTextBox).Location = new System.Drawing.Point(111, 20);
			((System.Windows.Forms.Control)(object)this.nameTextBox).Name = "nameTextBox";
			this.nameTextBox.set_PreventEnterBeep(true);
			((System.Windows.Forms.Control)(object)this.nameTextBox).Size = new System.Drawing.Size(181, 20);
			((System.Windows.Forms.Control)(object)this.nameTextBox).TabIndex = 61;
			((System.Windows.Forms.Control)(object)this.nameTextBox).KeyDown += new System.Windows.Forms.KeyEventHandler(textBoxX1_KeyDown);
			((System.Windows.Forms.Control)(object)this.nameTextBox).Leave += new System.EventHandler(nameTextBox_Leave);
			this.buttonSizeAsset.Location = new System.Drawing.Point(257, 103);
			this.buttonSizeAsset.Name = "buttonSizeAsset";
			this.buttonSizeAsset.Size = new System.Drawing.Size(64, 23);
			this.buttonSizeAsset.TabIndex = 60;
			this.buttonSizeAsset.Text = "Set Size";
			this.buttonSizeAsset.UseVisualStyleBackColor = true;
			this.buttonSizeAsset.Click += new System.EventHandler(buttonSize_Click);
			((System.Windows.Forms.Control)(object)this.labelX14).AutoSize = true;
			((System.Windows.Forms.Control)(object)this.labelX14).BackColor = System.Drawing.Color.Transparent;
			((BaseItemControl)this.labelX14).get_BackgroundStyle().set_CornerType((eCornerType)1);
			((System.Windows.Forms.Control)(object)this.labelX14).Location = new System.Drawing.Point(14, 107);
			((System.Windows.Forms.Control)(object)this.labelX14).Name = "labelX14";
			((System.Windows.Forms.Control)(object)this.labelX14).Size = new System.Drawing.Size(62, 15);
			((System.Windows.Forms.Control)(object)this.labelX14).TabIndex = 59;
			((System.Windows.Forms.Control)(object)this.labelX14).Text = "Target Size:";
			((System.Windows.Forms.Control)(object)this.labelTargetSize).Anchor = System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Left | System.Windows.Forms.AnchorStyles.Right;
			((System.Windows.Forms.Control)(object)this.labelTargetSize).BackColor = System.Drawing.Color.Transparent;
			((BaseItemControl)this.labelTargetSize).get_BackgroundStyle().set_CornerType((eCornerType)1);
			((System.Windows.Forms.Control)(object)this.labelTargetSize).Location = new System.Drawing.Point(111, 104);
			((System.Windows.Forms.Control)(object)this.labelTargetSize).Name = "labelTargetSize";
			((System.Windows.Forms.Control)(object)this.labelTargetSize).Size = new System.Drawing.Size(144, 21);
			((System.Windows.Forms.Control)(object)this.labelTargetSize).TabIndex = 58;
			((System.Windows.Forms.Control)(object)this.labelTargetSize).Text = "Automatic";
			this.comboBoxBorderMethod.DropDownStyle = System.Windows.Forms.ComboBoxStyle.DropDownList;
			this.comboBoxBorderMethod.FormattingEnabled = true;
			this.comboBoxBorderMethod.Items.AddRange(new object[2] { "Repeat", "Clamp" });
			this.comboBoxBorderMethod.Location = new System.Drawing.Point(111, 160);
			this.comboBoxBorderMethod.Name = "comboBoxBorderMethod";
			this.comboBoxBorderMethod.Size = new System.Drawing.Size(116, 21);
			((SuperTooltip)this.ToolTip).SetSuperTooltip((System.ComponentModel.IComponent)this.comboBoxBorderMethod, new SuperTooltipInfo("Replace the resource tag in text", "", "TT_OPTION_TILINGMETHOD", (System.Drawing.Image)null, (System.Drawing.Image)null, (eTooltipColor)17));
			this.comboBoxBorderMethod.TabIndex = 49;
			this.comboBoxBorderMethod.SelectedIndexChanged += new System.EventHandler(comboBoxBorderMethod_SelectedIndexChanged);
			((System.Windows.Forms.Control)(object)this.labelX13).AutoSize = true;
			((System.Windows.Forms.Control)(object)this.labelX13).BackColor = System.Drawing.Color.Transparent;
			((BaseItemControl)this.labelX13).get_BackgroundStyle().set_CornerType((eCornerType)1);
			((System.Windows.Forms.Control)(object)this.labelX13).Location = new System.Drawing.Point(14, 163);
			((System.Windows.Forms.Control)(object)this.labelX13).Name = "labelX13";
			((System.Windows.Forms.Control)(object)this.labelX13).Size = new System.Drawing.Size(32, 15);
			((System.Windows.Forms.Control)(object)this.labelX13).TabIndex = 44;
			((System.Windows.Forms.Control)(object)this.labelX13).Text = "Tiling:";
			((System.Windows.Forms.Control)(object)this.labelX7).AutoSize = true;
			((System.Windows.Forms.Control)(object)this.labelX7).BackColor = System.Drawing.Color.Transparent;
			((BaseItemControl)this.labelX7).get_BackgroundStyle().set_CornerType((eCornerType)1);
			((System.Windows.Forms.Control)(object)this.labelX7).Location = new System.Drawing.Point(14, 191);
			((System.Windows.Forms.Control)(object)this.labelX7).Name = "labelX7";
			((System.Windows.Forms.Control)(object)this.labelX7).Size = new System.Drawing.Size(30, 15);
			((System.Windows.Forms.Control)(object)this.labelX7).TabIndex = 42;
			((System.Windows.Forms.Control)(object)this.labelX7).Text = "Type:";
			((System.Windows.Forms.Control)(object)this.labelAssetType).Anchor = System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Left | System.Windows.Forms.AnchorStyles.Right;
			((System.Windows.Forms.Control)(object)this.labelAssetType).BackColor = System.Drawing.Color.Transparent;
			((BaseItemControl)this.labelAssetType).get_BackgroundStyle().set_CornerType((eCornerType)1);
			((System.Windows.Forms.Control)(object)this.labelAssetType).Location = new System.Drawing.Point(111, 188);
			((System.Windows.Forms.Control)(object)this.labelAssetType).Name = "labelAssetType";
			((System.Windows.Forms.Control)(object)this.labelAssetType).Size = new System.Drawing.Size(243, 21);
			((System.Windows.Forms.Control)(object)this.labelAssetType).TabIndex = 41;
			((System.Windows.Forms.Control)(object)this.labelAssetType).Text = "Cubemap";
			((System.Windows.Forms.Control)(object)this.labelAssetPanelGroupId).Anchor = System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Left | System.Windows.Forms.AnchorStyles.Right;
			((System.Windows.Forms.Control)(object)this.labelAssetPanelGroupId).BackColor = System.Drawing.Color.Transparent;
			((BaseItemControl)this.labelAssetPanelGroupId).get_BackgroundStyle().set_CornerType((eCornerType)1);
			((System.Windows.Forms.Control)(object)this.labelAssetPanelGroupId).Location = new System.Drawing.Point(111, 48);
			((System.Windows.Forms.Control)(object)this.labelAssetPanelGroupId).Name = "labelAssetPanelGroupId";
			((System.Windows.Forms.Control)(object)this.labelAssetPanelGroupId).Size = new System.Drawing.Size(243, 21);
			((System.Windows.Forms.Control)(object)this.labelAssetPanelGroupId).TabIndex = 40;
			((System.Windows.Forms.Control)(object)this.labelAssetPanelGroupId).Text = "bluemarble";
			((System.Windows.Forms.Control)(object)this.labelX8).AutoSize = true;
			((System.Windows.Forms.Control)(object)this.labelX8).BackColor = System.Drawing.Color.Transparent;
			((BaseItemControl)this.labelX8).get_BackgroundStyle().set_CornerType((eCornerType)1);
			((System.Windows.Forms.Control)(object)this.labelX8).Location = new System.Drawing.Point(14, 51);
			((System.Windows.Forms.Control)(object)this.labelX8).Name = "labelX8";
			((System.Windows.Forms.Control)(object)this.labelX8).Size = new System.Drawing.Size(36, 15);
			((System.Windows.Forms.Control)(object)this.labelX8).TabIndex = 39;
			((System.Windows.Forms.Control)(object)this.labelX8).Text = "Group:";
			((System.Windows.Forms.Control)(object)this.labelIcon).BackColor = System.Drawing.Color.Transparent;
			((BaseItemControl)this.labelIcon).get_BackgroundStyle().set_CornerType((eCornerType)1);
			this.labelIcon.set_Image((System.Drawing.Image)GrBuildStudio.Properties.Resources.asset_built);
			this.labelIcon.set_ImagePosition((eImagePosition)2);
			((System.Windows.Forms.Control)(object)this.labelIcon).Location = new System.Drawing.Point(84, 216);
			((System.Windows.Forms.Control)(object)this.labelIcon).Name = "labelIcon";
			((System.Windows.Forms.Control)(object)this.labelIcon).Size = new System.Drawing.Size(21, 27);
			((System.Windows.Forms.Control)(object)this.labelIcon).TabIndex = 38;
			((System.Windows.Forms.Control)(object)this.labelX6).AutoSize = true;
			((System.Windows.Forms.Control)(object)this.labelX6).BackColor = System.Drawing.Color.Transparent;
			((BaseItemControl)this.labelX6).get_BackgroundStyle().set_CornerType((eCornerType)1);
			((System.Windows.Forms.Control)(object)this.labelX6).Location = new System.Drawing.Point(14, 218);
			((System.Windows.Forms.Control)(object)this.labelX6).Name = "labelX6";
			((System.Windows.Forms.Control)(object)this.labelX6).Size = new System.Drawing.Size(31, 15);
			((System.Windows.Forms.Control)(object)this.labelX6).TabIndex = 37;
			((System.Windows.Forms.Control)(object)this.labelX6).Text = "State:";
			((System.Windows.Forms.Control)(object)this.labelInfo).Anchor = System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Left | System.Windows.Forms.AnchorStyles.Right;
			((System.Windows.Forms.Control)(object)this.labelInfo).BackColor = System.Drawing.Color.Transparent;
			((BaseItemControl)this.labelInfo).get_BackgroundStyle().set_CornerType((eCornerType)1);
			((System.Windows.Forms.Control)(object)this.labelInfo).Location = new System.Drawing.Point(111, 220);
			((System.Windows.Forms.Control)(object)this.labelInfo).Name = "labelInfo";
			((System.Windows.Forms.Control)(object)this.labelInfo).RightToLeft = System.Windows.Forms.RightToLeft.No;
			((System.Windows.Forms.Control)(object)this.labelInfo).Size = new System.Drawing.Size(243, 61);
			((System.Windows.Forms.Control)(object)this.labelInfo).TabIndex = 36;
			((System.Windows.Forms.Control)(object)this.labelInfo).Text = "The Stacked Texture needs Rebuilding.";
			this.labelInfo.set_TextLineAlignment(System.Drawing.StringAlignment.Near);
			this.labelInfo.set_WordWrap(true);
			((System.Windows.Forms.Control)(object)this.labelX4).AutoSize = true;
			((System.Windows.Forms.Control)(object)this.labelX4).BackColor = System.Drawing.Color.Transparent;
			((BaseItemControl)this.labelX4).get_BackgroundStyle().set_CornerType((eCornerType)1);
			((System.Windows.Forms.Control)(object)this.labelX4).Location = new System.Drawing.Point(14, 135);
			((System.Windows.Forms.Control)(object)this.labelX4).Name = "labelX4";
			((System.Windows.Forms.Control)(object)this.labelX4).Size = new System.Drawing.Size(39, 15);
			((System.Windows.Forms.Control)(object)this.labelX4).TabIndex = 35;
			((System.Windows.Forms.Control)(object)this.labelX4).Text = "Layers:";
			((System.Windows.Forms.Control)(object)this.labelLayerCount).Anchor = System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Left | System.Windows.Forms.AnchorStyles.Right;
			((System.Windows.Forms.Control)(object)this.labelLayerCount).BackColor = System.Drawing.Color.Transparent;
			((BaseItemControl)this.labelLayerCount).get_BackgroundStyle().set_CornerType((eCornerType)1);
			((System.Windows.Forms.Control)(object)this.labelLayerCount).Location = new System.Drawing.Point(111, 132);
			((System.Windows.Forms.Control)(object)this.labelLayerCount).Name = "labelLayerCount";
			((System.Windows.Forms.Control)(object)this.labelLayerCount).Size = new System.Drawing.Size(243, 21);
			((System.Windows.Forms.Control)(object)this.labelLayerCount).TabIndex = 34;
			((System.Windows.Forms.Control)(object)this.labelLayerCount).Text = "3";
			((System.Windows.Forms.Control)(object)this.label4).AutoSize = true;
			((System.Windows.Forms.Control)(object)this.label4).BackColor = System.Drawing.Color.Transparent;
			((BaseItemControl)this.label4).get_BackgroundStyle().set_CornerType((eCornerType)1);
			((System.Windows.Forms.Control)(object)this.label4).Location = new System.Drawing.Point(14, 79);
			((System.Windows.Forms.Control)(object)this.label4).Name = "label4";
			((System.Windows.Forms.Control)(object)this.label4).Size = new System.Drawing.Size(68, 15);
			((System.Windows.Forms.Control)(object)this.label4).TabIndex = 33;
			((System.Windows.Forms.Control)(object)this.label4).Text = "Original Size:";
			((System.Windows.Forms.Control)(object)this.labelNaturalSize).Anchor = System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Left | System.Windows.Forms.AnchorStyles.Right;
			((System.Windows.Forms.Control)(object)this.labelNaturalSize).BackColor = System.Drawing.Color.Transparent;
			((BaseItemControl)this.labelNaturalSize).get_BackgroundStyle().set_CornerType((eCornerType)1);
			((System.Windows.Forms.Control)(object)this.labelNaturalSize).Location = new System.Drawing.Point(111, 76);
			((System.Windows.Forms.Control)(object)this.labelNaturalSize).Name = "labelNaturalSize";
			((System.Windows.Forms.Control)(object)this.labelNaturalSize).Size = new System.Drawing.Size(243, 21);
			((System.Windows.Forms.Control)(object)this.labelNaturalSize).TabIndex = 31;
			((System.Windows.Forms.Control)(object)this.labelNaturalSize).Text = "128 x 128";
			((System.Windows.Forms.Control)(object)this.label1).AutoSize = true;
			((System.Windows.Forms.Control)(object)this.label1).BackColor = System.Drawing.Color.Transparent;
			((BaseItemControl)this.label1).get_BackgroundStyle().set_CornerType((eCornerType)1);
			((System.Windows.Forms.Control)(object)this.label1).Location = new System.Drawing.Point(14, 23);
			((System.Windows.Forms.Control)(object)this.label1).Name = "label1";
			((System.Windows.Forms.Control)(object)this.label1).Size = new System.Drawing.Size(35, 15);
			((System.Windows.Forms.Control)(object)this.label1).TabIndex = 30;
			((System.Windows.Forms.Control)(object)this.label1).Text = "Name:";
			this.comboBoxMipMaps.DropDownStyle = System.Windows.Forms.ComboBoxStyle.DropDownList;
			this.comboBoxMipMaps.FormattingEnabled = true;
			this.comboBoxMipMaps.Location = new System.Drawing.Point(117, 216);
			this.comboBoxMipMaps.Name = "comboBoxMipMaps";
			this.comboBoxMipMaps.Size = new System.Drawing.Size(101, 21);
			((SuperTooltip)this.ToolTip).SetSuperTooltip((System.ComponentModel.IComponent)this.comboBoxMipMaps, new SuperTooltipInfo("Replace the resource tag in text", "", "TT_OPTION_MIPMAPSOURCE", (System.Drawing.Image)null, (System.Drawing.Image)null, (eTooltipColor)17));
			this.comboBoxMipMaps.TabIndex = 55;
			this.comboBoxMipMaps.SelectedIndexChanged += new System.EventHandler(comboBoxMipMaps_SelectedIndexChanged);
			((System.Windows.Forms.Control)(object)this.labelX16).AutoSize = true;
			((System.Windows.Forms.Control)(object)this.labelX16).BackColor = System.Drawing.Color.Transparent;
			((BaseItemControl)this.labelX16).get_BackgroundStyle().set_CornerType((eCornerType)1);
			((System.Windows.Forms.Control)(object)this.labelX16).Location = new System.Drawing.Point(10, 219);
			((System.Windows.Forms.Control)(object)this.labelX16).Name = "labelX16";
			((System.Windows.Forms.Control)(object)this.labelX16).Size = new System.Drawing.Size(85, 15);
			((System.Windows.Forms.Control)(object)this.labelX16).TabIndex = 54;
			((System.Windows.Forms.Control)(object)this.labelX16).Text = "Mip Map Source:";
			this.panel2.AutoScroll = true;
			this.panel2.AutoScrollMargin = new System.Drawing.Size(0, 16);
			this.panel2.Controls.Add((System.Windows.Forms.Control)(object)this.labelInvertChannel3);
			this.panel2.Controls.Add(this.invertChannels3);
			this.panel2.Controls.Add(this.swizzle3);
			this.panel2.Controls.Add((System.Windows.Forms.Control)(object)this.labelSwizzle3);
			this.panel2.Controls.Add((System.Windows.Forms.Control)(object)this.labelInvertChannel2);
			this.panel2.Controls.Add(this.invertChannels2);
			this.panel2.Controls.Add(this.swizzle2);
			this.panel2.Controls.Add((System.Windows.Forms.Control)(object)this.labelSwizzle2);
			this.panel2.Controls.Add((System.Windows.Forms.Control)(object)this.labelInvertChannel1);
			this.panel2.Controls.Add(this.comboBoxSizeMode);
			this.panel2.Controls.Add(this.invertChannels1);
			this.panel2.Controls.Add((System.Windows.Forms.Control)(object)this.labelX19);
			this.panel2.Controls.Add((System.Windows.Forms.Control)(object)this.labelCodingProfile);
			this.panel2.Controls.Add((System.Windows.Forms.Control)(object)this.labelInvertChannel0);
			this.panel2.Controls.Add(this.swizzle1);
			this.panel2.Controls.Add((System.Windows.Forms.Control)(object)this.labelSwizzle1);
			this.panel2.Controls.Add((System.Windows.Forms.Control)(object)this.labelX15);
			this.panel2.Controls.Add(this.comboBoxMipMaps);
			this.panel2.Controls.Add(this.invertChannels0);
			this.panel2.Controls.Add((System.Windows.Forms.Control)(object)this.labelX16);
			this.panel2.Controls.Add((System.Windows.Forms.Control)(object)this.labelType);
			this.panel2.Controls.Add((System.Windows.Forms.Control)(object)this.labelX5);
			this.panel2.Controls.Add(this.comboBoxFlip);
			this.panel2.Controls.Add((System.Windows.Forms.Control)(object)this.labelX1);
			this.panel2.Controls.Add((System.Windows.Forms.Control)(object)this.labelLayerName);
			this.panel2.Controls.Add((System.Windows.Forms.Control)(object)this.labelSwizzle0);
			this.panel2.Controls.Add(this.swizzle0);
			this.panel2.Controls.Add((System.Windows.Forms.Control)(object)this.labelX3);
			this.panel2.Controls.Add((System.Windows.Forms.Control)(object)this.labelDataType);
			this.panel2.Controls.Add((System.Windows.Forms.Control)(object)this.labelX2);
			this.panel2.Controls.Add(this.comboBoxQualty);
			this.panel2.Controls.Add((System.Windows.Forms.Control)(object)this.label13);
			this.panel2.Location = new System.Drawing.Point(381, 33);
			this.panel2.Name = "panel2";
			this.panel2.Size = new System.Drawing.Size(405, 508);
			this.panel2.TabIndex = 34;
			((System.Windows.Forms.Control)(object)this.labelInvertChannel3).AutoSize = true;
			((System.Windows.Forms.Control)(object)this.labelInvertChannel3).BackColor = System.Drawing.Color.Transparent;
			((BaseItemControl)this.labelInvertChannel3).get_BackgroundStyle().set_CornerType((eCornerType)1);
			((System.Windows.Forms.Control)(object)this.labelInvertChannel3).Location = new System.Drawing.Point(10, 440);
			((System.Windows.Forms.Control)(object)this.labelInvertChannel3).Name = "labelInvertChannel3";
			((System.Windows.Forms.Control)(object)this.labelInvertChannel3).Size = new System.Drawing.Size(86, 15);
			((System.Windows.Forms.Control)(object)this.labelInvertChannel3).TabIndex = 76;
			((System.Windows.Forms.Control)(object)this.labelInvertChannel3).Text = "Invert Channel 1:";
			this.invertChannels3.Location = new System.Drawing.Point(117, 440);
			this.invertChannels3.Name = "invertChannels3";
			this.invertChannels3.Size = new System.Drawing.Size(168, 16);
			this.invertChannels3.TabIndex = 75;
			this.swizzle3.Location = new System.Drawing.Point(117, 412);
			this.swizzle3.maxChannels = 0;
			this.swizzle3.Name = "swizzle3";
			this.swizzle3.Size = new System.Drawing.Size(172, 21);
			this.swizzle3.TabIndex = 73;
			((System.Windows.Forms.Control)(object)this.labelSwizzle3).AutoSize = true;
			((System.Windows.Forms.Control)(object)this.labelSwizzle3).BackColor = System.Drawing.Color.Transparent;
			((BaseItemControl)this.labelSwizzle3).get_BackgroundStyle().set_CornerType((eCornerType)1);
			((System.Windows.Forms.Control)(object)this.labelSwizzle3).Location = new System.Drawing.Point(10, 415);
			((System.Windows.Forms.Control)(object)this.labelSwizzle3).Name = "labelSwizzle3";
			((System.Windows.Forms.Control)(object)this.labelSwizzle3).Size = new System.Drawing.Size(43, 15);
			((System.Windows.Forms.Control)(object)this.labelSwizzle3).TabIndex = 74;
			((System.Windows.Forms.Control)(object)this.labelSwizzle3).Text = "Swizzle:";
			((System.Windows.Forms.Control)(object)this.labelInvertChannel2).AutoSize = true;
			((System.Windows.Forms.Control)(object)this.labelInvertChannel2).BackColor = System.Drawing.Color.Transparent;
			((BaseItemControl)this.labelInvertChannel2).get_BackgroundStyle().set_CornerType((eCornerType)1);
			((System.Windows.Forms.Control)(object)this.labelInvertChannel2).Location = new System.Drawing.Point(10, 385);
			((System.Windows.Forms.Control)(object)this.labelInvertChannel2).Name = "labelInvertChannel2";
			((System.Windows.Forms.Control)(object)this.labelInvertChannel2).Size = new System.Drawing.Size(86, 15);
			((System.Windows.Forms.Control)(object)this.labelInvertChannel2).TabIndex = 72;
			((System.Windows.Forms.Control)(object)this.labelInvertChannel2).Text = "Invert Channel 1:";
			this.invertChannels2.Location = new System.Drawing.Point(117, 384);
			this.invertChannels2.Name = "invertChannels2";
			this.invertChannels2.Size = new System.Drawing.Size(168, 16);
			this.invertChannels2.TabIndex = 71;
			this.swizzle2.Location = new System.Drawing.Point(117, 356);
			this.swizzle2.maxChannels = 0;
			this.swizzle2.Name = "swizzle2";
			this.swizzle2.Size = new System.Drawing.Size(172, 21);
			this.swizzle2.TabIndex = 69;
			((System.Windows.Forms.Control)(object)this.labelSwizzle2).AutoSize = true;
			((System.Windows.Forms.Control)(object)this.labelSwizzle2).BackColor = System.Drawing.Color.Transparent;
			((BaseItemControl)this.labelSwizzle2).get_BackgroundStyle().set_CornerType((eCornerType)1);
			((System.Windows.Forms.Control)(object)this.labelSwizzle2).Location = new System.Drawing.Point(10, 359);
			((System.Windows.Forms.Control)(object)this.labelSwizzle2).Name = "labelSwizzle2";
			((System.Windows.Forms.Control)(object)this.labelSwizzle2).Size = new System.Drawing.Size(43, 15);
			((System.Windows.Forms.Control)(object)this.labelSwizzle2).TabIndex = 70;
			((System.Windows.Forms.Control)(object)this.labelSwizzle2).Text = "Swizzle:";
			((System.Windows.Forms.Control)(object)this.labelInvertChannel1).AutoSize = true;
			((System.Windows.Forms.Control)(object)this.labelInvertChannel1).BackColor = System.Drawing.Color.Transparent;
			((BaseItemControl)this.labelInvertChannel1).get_BackgroundStyle().set_CornerType((eCornerType)1);
			((System.Windows.Forms.Control)(object)this.labelInvertChannel1).Location = new System.Drawing.Point(10, 331);
			((System.Windows.Forms.Control)(object)this.labelInvertChannel1).Name = "labelInvertChannel1";
			((System.Windows.Forms.Control)(object)this.labelInvertChannel1).Size = new System.Drawing.Size(86, 15);
			((System.Windows.Forms.Control)(object)this.labelInvertChannel1).TabIndex = 68;
			((System.Windows.Forms.Control)(object)this.labelInvertChannel1).Text = "Invert Channel 1:";
			this.comboBoxSizeMode.DropDownStyle = System.Windows.Forms.ComboBoxStyle.DropDownList;
			this.comboBoxSizeMode.FormattingEnabled = true;
			this.comboBoxSizeMode.Location = new System.Drawing.Point(117, 160);
			this.comboBoxSizeMode.Name = "comboBoxSizeMode";
			this.comboBoxSizeMode.Size = new System.Drawing.Size(172, 21);
			((SuperTooltip)this.ToolTip).SetSuperTooltip((System.ComponentModel.IComponent)this.comboBoxSizeMode, new SuperTooltipInfo("Replace the resource tag in text", "", "TT_OPTION_LAYER_TARGETSIZE", (System.Drawing.Image)null, (System.Drawing.Image)null, (eTooltipColor)17));
			this.comboBoxSizeMode.TabIndex = 64;
			this.comboBoxSizeMode.SelectedIndexChanged += new System.EventHandler(comboBoxSizeMode_SelectedIndexChanged);
			this.invertChannels1.Location = new System.Drawing.Point(117, 328);
			this.invertChannels1.Name = "invertChannels1";
			this.invertChannels1.Size = new System.Drawing.Size(168, 16);
			this.invertChannels1.TabIndex = 67;
			((System.Windows.Forms.Control)(object)this.labelX19).AutoSize = true;
			((System.Windows.Forms.Control)(object)this.labelX19).BackColor = System.Drawing.Color.Transparent;
			((BaseItemControl)this.labelX19).get_BackgroundStyle().set_CornerType((eCornerType)1);
			((System.Windows.Forms.Control)(object)this.labelX19).Location = new System.Drawing.Point(10, 163);
			((System.Windows.Forms.Control)(object)this.labelX19).Name = "labelX19";
			((System.Windows.Forms.Control)(object)this.labelX19).Size = new System.Drawing.Size(62, 15);
			((System.Windows.Forms.Control)(object)this.labelX19).TabIndex = 62;
			((System.Windows.Forms.Control)(object)this.labelX19).Text = "Target Size:";
			((System.Windows.Forms.Control)(object)this.labelCodingProfile).Anchor = System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Left | System.Windows.Forms.AnchorStyles.Right;
			((System.Windows.Forms.Control)(object)this.labelCodingProfile).BackColor = System.Drawing.Color.Transparent;
			((BaseItemControl)this.labelCodingProfile).get_BackgroundStyle().set_CornerType((eCornerType)1);
			((System.Windows.Forms.Control)(object)this.labelCodingProfile).Location = new System.Drawing.Point(117, 76);
			((System.Windows.Forms.Control)(object)this.labelCodingProfile).Name = "labelCodingProfile";
			((System.Windows.Forms.Control)(object)this.labelCodingProfile).Size = new System.Drawing.Size(274, 21);
			((System.Windows.Forms.Control)(object)this.labelCodingProfile).TabIndex = 59;
			((System.Windows.Forms.Control)(object)this.labelCodingProfile).Text = "BC7";
			((System.Windows.Forms.Control)(object)this.labelInvertChannel0).AutoSize = true;
			((System.Windows.Forms.Control)(object)this.labelInvertChannel0).BackColor = System.Drawing.Color.Transparent;
			((BaseItemControl)this.labelInvertChannel0).get_BackgroundStyle().set_CornerType((eCornerType)1);
			((System.Windows.Forms.Control)(object)this.labelInvertChannel0).Location = new System.Drawing.Point(10, 275);
			((System.Windows.Forms.Control)(object)this.labelInvertChannel0).Name = "labelInvertChannel0";
			((System.Windows.Forms.Control)(object)this.labelInvertChannel0).Size = new System.Drawing.Size(86, 15);
			((System.Windows.Forms.Control)(object)this.labelInvertChannel0).TabIndex = 66;
			((System.Windows.Forms.Control)(object)this.labelInvertChannel0).Text = "Invert Channel 0:";
			this.swizzle1.Location = new System.Drawing.Point(117, 300);
			this.swizzle1.maxChannels = 0;
			this.swizzle1.Name = "swizzle1";
			this.swizzle1.Size = new System.Drawing.Size(172, 21);
			this.swizzle1.TabIndex = 57;
			((System.Windows.Forms.Control)(object)this.labelSwizzle1).AutoSize = true;
			((System.Windows.Forms.Control)(object)this.labelSwizzle1).BackColor = System.Drawing.Color.Transparent;
			((BaseItemControl)this.labelSwizzle1).get_BackgroundStyle().set_CornerType((eCornerType)1);
			((System.Windows.Forms.Control)(object)this.labelSwizzle1).Location = new System.Drawing.Point(10, 303);
			((System.Windows.Forms.Control)(object)this.labelSwizzle1).Name = "labelSwizzle1";
			((System.Windows.Forms.Control)(object)this.labelSwizzle1).Size = new System.Drawing.Size(43, 15);
			((System.Windows.Forms.Control)(object)this.labelSwizzle1).TabIndex = 58;
			((System.Windows.Forms.Control)(object)this.labelSwizzle1).Text = "Swizzle:";
			((System.Windows.Forms.Control)(object)this.labelX15).AutoSize = true;
			((System.Windows.Forms.Control)(object)this.labelX15).BackColor = System.Drawing.Color.Transparent;
			((BaseItemControl)this.labelX15).get_BackgroundStyle().set_CornerType((eCornerType)1);
			((System.Windows.Forms.Control)(object)this.labelX15).Location = new System.Drawing.Point(10, 79);
			((System.Windows.Forms.Control)(object)this.labelX15).Name = "labelX15";
			((System.Windows.Forms.Control)(object)this.labelX15).Size = new System.Drawing.Size(75, 15);
			((System.Windows.Forms.Control)(object)this.labelX15).TabIndex = 58;
			((System.Windows.Forms.Control)(object)this.labelX15).Text = "Coding Profile:";
			this.invertChannels0.Location = new System.Drawing.Point(117, 272);
			this.invertChannels0.Name = "invertChannels0";
			this.invertChannels0.Size = new System.Drawing.Size(168, 16);
			this.invertChannels0.TabIndex = 65;
			((System.Windows.Forms.Control)(object)this.labelType).Anchor = System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Left | System.Windows.Forms.AnchorStyles.Right;
			((System.Windows.Forms.Control)(object)this.labelType).BackColor = System.Drawing.Color.Transparent;
			((BaseItemControl)this.labelType).get_BackgroundStyle().set_CornerType((eCornerType)1);
			((System.Windows.Forms.Control)(object)this.labelType).Location = new System.Drawing.Point(117, 188);
			((System.Windows.Forms.Control)(object)this.labelType).Name = "labelType";
			((System.Windows.Forms.Control)(object)this.labelType).Size = new System.Drawing.Size(238, 21);
			((System.Windows.Forms.Control)(object)this.labelType).TabIndex = 47;
			((System.Windows.Forms.Control)(object)this.labelType).Text = "Single File";
			((System.Windows.Forms.Control)(object)this.labelX5).AutoSize = true;
			((System.Windows.Forms.Control)(object)this.labelX5).BackColor = System.Drawing.Color.Transparent;
			((BaseItemControl)this.labelX5).get_BackgroundStyle().set_CornerType((eCornerType)1);
			((System.Windows.Forms.Control)(object)this.labelX5).Location = new System.Drawing.Point(10, 191);
			((System.Windows.Forms.Control)(object)this.labelX5).Name = "labelX5";
			((System.Windows.Forms.Control)(object)this.labelX5).Size = new System.Drawing.Size(30, 15);
			((System.Windows.Forms.Control)(object)this.labelX5).TabIndex = 46;
			((System.Windows.Forms.Control)(object)this.labelX5).Text = "Type:";
			this.comboBoxFlip.DropDownStyle = System.Windows.Forms.ComboBoxStyle.DropDownList;
			this.comboBoxFlip.FormattingEnabled = true;
			this.comboBoxFlip.Items.AddRange(new object[4] { "Lossless", "High", "Medium", "Low" });
			this.comboBoxFlip.Location = new System.Drawing.Point(117, 132);
			this.comboBoxFlip.Name = "comboBoxFlip";
			this.comboBoxFlip.Size = new System.Drawing.Size(140, 21);
			((SuperTooltip)this.ToolTip).SetSuperTooltip((System.ComponentModel.IComponent)this.comboBoxFlip, new SuperTooltipInfo("Replace the resource tag in text", "", "TT_OPTION_FLIP", (System.Drawing.Image)null, (System.Drawing.Image)null, (eTooltipColor)17));
			this.comboBoxFlip.TabIndex = 45;
			this.comboBoxFlip.SelectedIndexChanged += new System.EventHandler(comboBoxFlip_SelectedIndexChanged);
			((System.Windows.Forms.Control)(object)this.labelX1).AutoSize = true;
			((System.Windows.Forms.Control)(object)this.labelX1).BackColor = System.Drawing.Color.Transparent;
			((BaseItemControl)this.labelX1).get_BackgroundStyle().set_CornerType((eCornerType)1);
			((System.Windows.Forms.Control)(object)this.labelX1).Location = new System.Drawing.Point(10, 135);
			((System.Windows.Forms.Control)(object)this.labelX1).Name = "labelX1";
			((System.Windows.Forms.Control)(object)this.labelX1).Size = new System.Drawing.Size(23, 15);
			((System.Windows.Forms.Control)(object)this.labelX1).TabIndex = 44;
			((System.Windows.Forms.Control)(object)this.labelX1).Text = "Flip:";
			((System.Windows.Forms.Control)(object)this.labelLayerName).Anchor = System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Left | System.Windows.Forms.AnchorStyles.Right;
			((System.Windows.Forms.Control)(object)this.labelLayerName).BackColor = System.Drawing.Color.Transparent;
			((BaseItemControl)this.labelLayerName).get_BackgroundStyle().set_CornerType((eCornerType)1);
			((System.Windows.Forms.Control)(object)this.labelLayerName).Location = new System.Drawing.Point(117, 20);
			((System.Windows.Forms.Control)(object)this.labelLayerName).Name = "labelLayerName";
			((System.Windows.Forms.Control)(object)this.labelLayerName).Size = new System.Drawing.Size(274, 21);
			((System.Windows.Forms.Control)(object)this.labelLayerName).TabIndex = 43;
			((System.Windows.Forms.Control)(object)this.labelLayerName).Text = "Diffuse";
			((System.Windows.Forms.Control)(object)this.labelSwizzle0).AutoSize = true;
			((System.Windows.Forms.Control)(object)this.labelSwizzle0).BackColor = System.Drawing.Color.Transparent;
			((BaseItemControl)this.labelSwizzle0).get_BackgroundStyle().set_CornerType((eCornerType)1);
			((System.Windows.Forms.Control)(object)this.labelSwizzle0).Location = new System.Drawing.Point(10, 247);
			((System.Windows.Forms.Control)(object)this.labelSwizzle0).Name = "labelSwizzle0";
			((System.Windows.Forms.Control)(object)this.labelSwizzle0).Size = new System.Drawing.Size(43, 15);
			((System.Windows.Forms.Control)(object)this.labelSwizzle0).TabIndex = 58;
			((System.Windows.Forms.Control)(object)this.labelSwizzle0).Text = "Swizzle:";
			this.swizzle0.Location = new System.Drawing.Point(117, 244);
			this.swizzle0.maxChannels = 0;
			this.swizzle0.Name = "swizzle0";
			this.swizzle0.Size = new System.Drawing.Size(172, 21);
			this.swizzle0.TabIndex = 56;
			((System.Windows.Forms.Control)(object)this.labelX3).AutoSize = true;
			((System.Windows.Forms.Control)(object)this.labelX3).BackColor = System.Drawing.Color.Transparent;
			((BaseItemControl)this.labelX3).get_BackgroundStyle().set_CornerType((eCornerType)1);
			((System.Windows.Forms.Control)(object)this.labelX3).Location = new System.Drawing.Point(10, 23);
			((System.Windows.Forms.Control)(object)this.labelX3).Name = "labelX3";
			((System.Windows.Forms.Control)(object)this.labelX3).Size = new System.Drawing.Size(71, 15);
			((System.Windows.Forms.Control)(object)this.labelX3).TabIndex = 42;
			((System.Windows.Forms.Control)(object)this.labelX3).Text = "Layer Name: ";
			((System.Windows.Forms.Control)(object)this.labelDataType).Anchor = System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Left | System.Windows.Forms.AnchorStyles.Right;
			((System.Windows.Forms.Control)(object)this.labelDataType).BackColor = System.Drawing.Color.Transparent;
			((BaseItemControl)this.labelDataType).get_BackgroundStyle().set_CornerType((eCornerType)1);
			((System.Windows.Forms.Control)(object)this.labelDataType).Location = new System.Drawing.Point(117, 48);
			((System.Windows.Forms.Control)(object)this.labelDataType).Name = "labelDataType";
			((System.Windows.Forms.Control)(object)this.labelDataType).Size = new System.Drawing.Size(274, 21);
			((System.Windows.Forms.Control)(object)this.labelDataType).TabIndex = 41;
			((System.Windows.Forms.Control)(object)this.labelDataType).Text = "R8G8B8_SRGB";
			((System.Windows.Forms.Control)(object)this.labelX2).AutoSize = true;
			((System.Windows.Forms.Control)(object)this.labelX2).BackColor = System.Drawing.Color.Transparent;
			((BaseItemControl)this.labelX2).get_BackgroundStyle().set_CornerType((eCornerType)1);
			((System.Windows.Forms.Control)(object)this.labelX2).Location = new System.Drawing.Point(10, 51);
			((System.Windows.Forms.Control)(object)this.labelX2).Name = "labelX2";
			((System.Windows.Forms.Control)(object)this.labelX2).Size = new System.Drawing.Size(66, 15);
			((System.Windows.Forms.Control)(object)this.labelX2).TabIndex = 40;
			((System.Windows.Forms.Control)(object)this.labelX2).Text = "Layer Type: ";
			this.comboBoxQualty.DropDownStyle = System.Windows.Forms.ComboBoxStyle.DropDownList;
			this.comboBoxQualty.FormattingEnabled = true;
			this.comboBoxQualty.Items.AddRange(new object[4] { "Lossless", "High", "Medium", "Low" });
			this.comboBoxQualty.Location = new System.Drawing.Point(117, 104);
			this.comboBoxQualty.Name = "comboBoxQualty";
			this.comboBoxQualty.Size = new System.Drawing.Size(140, 21);
			((SuperTooltip)this.ToolTip).SetSuperTooltip((System.ComponentModel.IComponent)this.comboBoxQualty, new SuperTooltipInfo("Replace the resource tag in text", "", "TT_OPTION_QUALITYLEVEL", (System.Drawing.Image)null, (System.Drawing.Image)null, (eTooltipColor)17));
			this.comboBoxQualty.TabIndex = 39;
			this.comboBoxQualty.SelectedIndexChanged += new System.EventHandler(comboBoxQualty_SelectedIndexChanged);
			((System.Windows.Forms.Control)(object)this.label13).AutoSize = true;
			((System.Windows.Forms.Control)(object)this.label13).BackColor = System.Drawing.Color.Transparent;
			((BaseItemControl)this.label13).get_BackgroundStyle().set_CornerType((eCornerType)1);
			((System.Windows.Forms.Control)(object)this.label13).Location = new System.Drawing.Point(10, 107);
			((System.Windows.Forms.Control)(object)this.label13).Name = "label13";
			((System.Windows.Forms.Control)(object)this.label13).Size = new System.Drawing.Size(40, 15);
			((System.Windows.Forms.Control)(object)this.label13).TabIndex = 38;
			((System.Windows.Forms.Control)(object)this.label13).Text = "Quality:";
			this.panel3.Controls.Add((System.Windows.Forms.Control)(object)this.labelTextureFileSize);
			this.panel3.Controls.Add((System.Windows.Forms.Control)(object)this.labelX18);
			this.panel3.Controls.Add((System.Windows.Forms.Control)(object)this.labelTextureFileModified);
			this.panel3.Controls.Add((System.Windows.Forms.Control)(object)this.labelX11);
			this.panel3.Controls.Add((System.Windows.Forms.Control)(object)this.labelTextureFileAbs);
			this.panel3.Controls.Add((System.Windows.Forms.Control)(object)this.labelX17);
			this.panel3.Controls.Add(this.buttonShowTexture);
			this.panel3.Location = new System.Drawing.Point(792, 33);
			this.panel3.Name = "panel3";
			this.panel3.Size = new System.Drawing.Size(372, 197);
			this.panel3.TabIndex = 36;
			((System.Windows.Forms.Control)(object)this.labelTextureFileSize).Anchor = System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Left | System.Windows.Forms.AnchorStyles.Right;
			((BaseItemControl)this.labelTextureFileSize).get_BackgroundStyle().set_CornerType((eCornerType)1);
			((System.Windows.Forms.Control)(object)this.labelTextureFileSize).ForeColor = System.Drawing.SystemColors.ControlText;
			((System.Windows.Forms.Control)(object)this.labelTextureFileSize).Location = new System.Drawing.Point(108, 76);
			((System.Windows.Forms.Control)(object)this.labelTextureFileSize).Name = "labelTextureFileSize";
			((System.Windows.Forms.Control)(object)this.labelTextureFileSize).Size = new System.Drawing.Size(246, 20);
			((System.Windows.Forms.Control)(object)this.labelTextureFileSize).TabIndex = 67;
			((System.Windows.Forms.Control)(object)this.labelTextureFileSize).Text = "123KB";
			((System.Windows.Forms.Control)(object)this.labelX18).BackColor = System.Drawing.Color.Transparent;
			((BaseItemControl)this.labelX18).get_BackgroundStyle().set_CornerType((eCornerType)1);
			((System.Windows.Forms.Control)(object)this.labelX18).Location = new System.Drawing.Point(14, 76);
			((System.Windows.Forms.Control)(object)this.labelX18).Name = "labelX18";
			((System.Windows.Forms.Control)(object)this.labelX18).Size = new System.Drawing.Size(88, 20);
			((System.Windows.Forms.Control)(object)this.labelX18).TabIndex = 66;
			((System.Windows.Forms.Control)(object)this.labelX18).Text = "File Size:";
			((System.Windows.Forms.Control)(object)this.labelTextureFileModified).Anchor = System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Left | System.Windows.Forms.AnchorStyles.Right;
			((BaseItemControl)this.labelTextureFileModified).get_BackgroundStyle().set_CornerType((eCornerType)1);
			((System.Windows.Forms.Control)(object)this.labelTextureFileModified).ForeColor = System.Drawing.SystemColors.ControlText;
			((System.Windows.Forms.Control)(object)this.labelTextureFileModified).Location = new System.Drawing.Point(108, 48);
			((System.Windows.Forms.Control)(object)this.labelTextureFileModified).Name = "labelTextureFileModified";
			((System.Windows.Forms.Control)(object)this.labelTextureFileModified).Size = new System.Drawing.Size(246, 20);
			((System.Windows.Forms.Control)(object)this.labelTextureFileModified).TabIndex = 65;
			((System.Windows.Forms.Control)(object)this.labelTextureFileModified).Text = "1 Januari 2016 16:22:01";
			((System.Windows.Forms.Control)(object)this.labelX11).BackColor = System.Drawing.Color.Transparent;
			((BaseItemControl)this.labelX11).get_BackgroundStyle().set_CornerType((eCornerType)1);
			((System.Windows.Forms.Control)(object)this.labelX11).Location = new System.Drawing.Point(14, 48);
			((System.Windows.Forms.Control)(object)this.labelX11).Name = "labelX11";
			((System.Windows.Forms.Control)(object)this.labelX11).Size = new System.Drawing.Size(88, 20);
			((System.Windows.Forms.Control)(object)this.labelX11).TabIndex = 64;
			((System.Windows.Forms.Control)(object)this.labelX11).Text = "File last modified:";
			((System.Windows.Forms.Control)(object)this.labelTextureFileAbs).Anchor = System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Left | System.Windows.Forms.AnchorStyles.Right;
			((BaseItemControl)this.labelTextureFileAbs).get_BackgroundStyle().set_CornerType((eCornerType)1);
			((System.Windows.Forms.Control)(object)this.labelTextureFileAbs).ForeColor = System.Drawing.SystemColors.ControlText;
			((System.Windows.Forms.Control)(object)this.labelTextureFileAbs).Location = new System.Drawing.Point(108, 20);
			((System.Windows.Forms.Control)(object)this.labelTextureFileAbs).Name = "labelTextureFileAbs";
			((System.Windows.Forms.Control)(object)this.labelTextureFileAbs).Size = new System.Drawing.Size(223, 20);
			((System.Windows.Forms.Control)(object)this.labelTextureFileAbs).TabIndex = 63;
			((System.Windows.Forms.Control)(object)this.labelTextureFileAbs).Text = "world.topo.bathy.200412.3x21600x21600.A0.png";
			((System.Windows.Forms.Control)(object)this.labelX17).BackColor = System.Drawing.Color.Transparent;
			((BaseItemControl)this.labelX17).get_BackgroundStyle().set_CornerType((eCornerType)1);
			((System.Windows.Forms.Control)(object)this.labelX17).Location = new System.Drawing.Point(14, 20);
			((System.Windows.Forms.Control)(object)this.labelX17).Name = "labelX17";
			((System.Windows.Forms.Control)(object)this.labelX17).Size = new System.Drawing.Size(23, 20);
			((System.Windows.Forms.Control)(object)this.labelX17).TabIndex = 39;
			((System.Windows.Forms.Control)(object)this.labelX17).Text = "File:";
			this.buttonShowTexture.Anchor = System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Right;
			this.buttonShowTexture.Image = GrBuildStudio.Properties.Resources.magnifier;
			this.buttonShowTexture.Location = new System.Drawing.Point(330, 19);
			this.buttonShowTexture.Name = "buttonShowTexture";
			this.buttonShowTexture.Size = new System.Drawing.Size(26, 23);
			this.buttonShowTexture.TabIndex = 38;
			this.buttonShowTexture.UseVisualStyleBackColor = true;
			this.buttonShowTexture.Click += new System.EventHandler(buttonShowTexture_Click);
			((BaseItemControl)this.labelStatus).get_BackgroundStyle().set_CornerType((eCornerType)1);
			((System.Windows.Forms.Control)(object)this.labelStatus).Location = new System.Drawing.Point(0, 571);
			((System.Windows.Forms.Control)(object)this.labelStatus).Name = "labelStatus";
			this.labelStatus.set_PaddingLeft(10);
			this.labelStatus.set_PaddingTop(10);
			((System.Windows.Forms.Control)(object)this.labelStatus).Size = new System.Drawing.Size(338, 48);
			((System.Windows.Forms.Control)(object)this.labelStatus).TabIndex = 38;
			((System.Windows.Forms.Control)(object)this.labelStatus).Text = "Select one Stacked Texture to view details";
			this.panel4.Controls.Add((System.Windows.Forms.Control)(object)this.labelX12);
			this.panel4.Controls.Add((System.Windows.Forms.Control)(object)this.labelGroupType);
			this.panel4.Controls.Add((System.Windows.Forms.Control)(object)this.labelStackedTextureCount);
			this.panel4.Controls.Add((System.Windows.Forms.Control)(object)this.labelX10);
			this.panel4.Controls.Add((System.Windows.Forms.Control)(object)this.labelGroupPanelGroupId);
			this.panel4.Controls.Add((System.Windows.Forms.Control)(object)this.labelX9);
			this.panel4.Location = new System.Drawing.Point(1170, 33);
			this.panel4.Name = "panel4";
			this.panel4.Size = new System.Drawing.Size(369, 202);
			this.panel4.TabIndex = 39;
			((System.Windows.Forms.Control)(object)this.labelX12).AutoSize = true;
			((System.Windows.Forms.Control)(object)this.labelX12).BackColor = System.Drawing.Color.Transparent;
			((BaseItemControl)this.labelX12).get_BackgroundStyle().set_CornerType((eCornerType)1);
			((System.Windows.Forms.Control)(object)this.labelX12).Location = new System.Drawing.Point(14, 79);
			((System.Windows.Forms.Control)(object)this.labelX12).Name = "labelX12";
			((System.Windows.Forms.Control)(object)this.labelX12).Size = new System.Drawing.Size(30, 15);
			((System.Windows.Forms.Control)(object)this.labelX12).TabIndex = 46;
			((System.Windows.Forms.Control)(object)this.labelX12).Text = "Type:";
			((System.Windows.Forms.Control)(object)this.labelGroupType).Anchor = System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Left | System.Windows.Forms.AnchorStyles.Right;
			((System.Windows.Forms.Control)(object)this.labelGroupType).BackColor = System.Drawing.Color.Transparent;
			((BaseItemControl)this.labelGroupType).get_BackgroundStyle().set_CornerType((eCornerType)1);
			((System.Windows.Forms.Control)(object)this.labelGroupType).Location = new System.Drawing.Point(111, 76);
			((System.Windows.Forms.Control)(object)this.labelGroupType).Name = "labelGroupType";
			((System.Windows.Forms.Control)(object)this.labelGroupType).Size = new System.Drawing.Size(240, 21);
			((System.Windows.Forms.Control)(object)this.labelGroupType).TabIndex = 45;
			((System.Windows.Forms.Control)(object)this.labelGroupType).Text = "Cubemap";
			((System.Windows.Forms.Control)(object)this.labelStackedTextureCount).Anchor = System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Left | System.Windows.Forms.AnchorStyles.Right;
			((System.Windows.Forms.Control)(object)this.labelStackedTextureCount).BackColor = System.Drawing.Color.Transparent;
			((BaseItemControl)this.labelStackedTextureCount).get_BackgroundStyle().set_CornerType((eCornerType)1);
			((System.Windows.Forms.Control)(object)this.labelStackedTextureCount).Location = new System.Drawing.Point(111, 48);
			((System.Windows.Forms.Control)(object)this.labelStackedTextureCount).Name = "labelStackedTextureCount";
			((System.Windows.Forms.Control)(object)this.labelStackedTextureCount).Size = new System.Drawing.Size(240, 21);
			((System.Windows.Forms.Control)(object)this.labelStackedTextureCount).TabIndex = 44;
			((System.Windows.Forms.Control)(object)this.labelStackedTextureCount).Text = "bluemarble";
			((System.Windows.Forms.Control)(object)this.labelX10).AutoSize = true;
			((System.Windows.Forms.Control)(object)this.labelX10).BackColor = System.Drawing.Color.Transparent;
			((BaseItemControl)this.labelX10).get_BackgroundStyle().set_CornerType((eCornerType)1);
			((System.Windows.Forms.Control)(object)this.labelX10).Location = new System.Drawing.Point(14, 51);
			((System.Windows.Forms.Control)(object)this.labelX10).Name = "labelX10";
			((System.Windows.Forms.Control)(object)this.labelX10).Size = new System.Drawing.Size(88, 15);
			((System.Windows.Forms.Control)(object)this.labelX10).TabIndex = 43;
			((System.Windows.Forms.Control)(object)this.labelX10).Text = "Stacked Textures";
			((System.Windows.Forms.Control)(object)this.labelGroupPanelGroupId).Anchor = System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Left | System.Windows.Forms.AnchorStyles.Right;
			((System.Windows.Forms.Control)(object)this.labelGroupPanelGroupId).BackColor = System.Drawing.Color.Transparent;
			((BaseItemControl)this.labelGroupPanelGroupId).get_BackgroundStyle().set_CornerType((eCornerType)1);
			((System.Windows.Forms.Control)(object)this.labelGroupPanelGroupId).Location = new System.Drawing.Point(111, 20);
			((System.Windows.Forms.Control)(object)this.labelGroupPanelGroupId).Name = "labelGroupPanelGroupId";
			((System.Windows.Forms.Control)(object)this.labelGroupPanelGroupId).Size = new System.Drawing.Size(240, 21);
			((System.Windows.Forms.Control)(object)this.labelGroupPanelGroupId).TabIndex = 42;
			((System.Windows.Forms.Control)(object)this.labelGroupPanelGroupId).Text = "bluemarble";
			((System.Windows.Forms.Control)(object)this.labelX9).AutoSize = true;
			((System.Windows.Forms.Control)(object)this.labelX9).BackColor = System.Drawing.Color.Transparent;
			((BaseItemControl)this.labelX9).get_BackgroundStyle().set_CornerType((eCornerType)1);
			((System.Windows.Forms.Control)(object)this.labelX9).Location = new System.Drawing.Point(14, 23);
			((System.Windows.Forms.Control)(object)this.labelX9).Name = "labelX9";
			((System.Windows.Forms.Control)(object)this.labelX9).Size = new System.Drawing.Size(36, 15);
			((System.Windows.Forms.Control)(object)this.labelX9).TabIndex = 41;
			((System.Windows.Forms.Control)(object)this.labelX9).Text = "Group:";
			((System.Windows.Forms.Control)(object)this.labelMissingTextures).Anchor = System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Left | System.Windows.Forms.AnchorStyles.Right;
			((System.Windows.Forms.Control)(object)this.labelMissingTextures).BackColor = System.Drawing.Color.Transparent;
			((BaseItemControl)this.labelMissingTextures).get_BackgroundStyle().set_CornerType((eCornerType)1);
			this.labelMissingTextures.set_Image((System.Drawing.Image)GrBuildStudio.Properties.Resources.info);
			this.labelMissingTextures.set_ImageTextSpacing(6);
			((System.Windows.Forms.Control)(object)this.labelMissingTextures).Location = new System.Drawing.Point(19, 346);
			((System.Windows.Forms.Control)(object)this.labelMissingTextures).Name = "labelMissingTextures";
			((System.Windows.Forms.Control)(object)this.labelMissingTextures).RightToLeft = System.Windows.Forms.RightToLeft.No;
			((System.Windows.Forms.Control)(object)this.labelMissingTextures).Size = new System.Drawing.Size(329, 61);
			((System.Windows.Forms.Control)(object)this.labelMissingTextures).TabIndex = 0;
			((System.Windows.Forms.Control)(object)this.labelMissingTextures).Text = "One or more textures are missing. Editing is disabled.";
			this.labelMissingTextures.set_WordWrap(true);
			((SuperTooltip)this.ToolTip).set_DefaultTooltipSettings(new SuperTooltipInfo("Replace the resource tag in text", "", "TT_NO_TOOLTIP", (System.Drawing.Image)null, (System.Drawing.Image)null, (eTooltipColor)17));
			((SuperTooltip)this.ToolTip).set_LicenseKey("F962CEC7-CD8F-4911-A9E9-CAB39962FC1F");
			base.AutoScaleDimensions = new System.Drawing.SizeF(6f, 13f);
			base.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;
			this.BackColor = System.Drawing.SystemColors.Control;
			base.Controls.Add(this.panel4);
			base.Controls.Add((System.Windows.Forms.Control)(object)this.labelStatus);
			base.Controls.Add(this.panel3);
			base.Controls.Add(this.panel2);
			base.Controls.Add(this.panel1);
			base.Controls.Add((System.Windows.Forms.Control)(object)this.tabStrip1);
			base.Controls.Add((System.Windows.Forms.Control)(object)this.labelMissingTextures);
			base.Name = "AssetDetails";
			base.Size = new System.Drawing.Size(1571, 544);
			this.panel1.ResumeLayout(false);
			this.panel1.PerformLayout();
			this.panel2.ResumeLayout(false);
			this.panel2.PerformLayout();
			this.panel3.ResumeLayout(false);
			this.panel4.ResumeLayout(false);
			this.panel4.PerformLayout();
			base.ResumeLayout(false);
		}
	}
	public class AssetImportDescription
	{
		public string Name { get; set; }

		public AssetType Type { get; set; }

		public List<LayerAssetImportDescription> LayerAssets { get; private set; }

		public AssetImportDescription()
		{
			LayerAssets = new List<LayerAssetImportDescription>();
		}
	}
	public class AutoBuildReport
	{
		public bool ErrorsOccurred { get; set; }

		public bool AtlassingErrorsOccurred { get; set; }
	}
	public class BatchImportAssetsForm : Office2007Form
	{
		private class ControlRow
		{
			public ChannelPickerControl picker;

			public BatchTemplateControl batchTemplate;

			public ButtonX optionsButton;

			public ButtonX infoButton;

			public LayerAssetDetailsControl details;

			public ImportTemplateInfo[] templateInfo = (ImportTemplateInfo[])(object)new ImportTemplateInfo[4];

			public string prevText;

			public int layerIndex;

			public BatchInfo batchInfo;

			public SwizzleControl[] swizzle = new SwizzleControl[4];

			public ButtonItem[] swizzleMenuButton = (ButtonItem[])(object)new ButtonItem[4];
		}

		private struct PresetControlPair
		{
			internal SwizzleControl Control { get; set; }

			internal SwizzlePreset Preset { get; set; }

			internal PresetControlPair(SwizzleControl control, SwizzlePreset preset)
			{
				this = default(PresetControlPair);
				Control = control;
				Preset = preset;
			}
		}

		private SolutionModel model;

		private LayerConfig layerConfig;

		private FolderBrowserDialog folderBrowser;

		private List<ControlRow> controlRows;

		private string suggestedName = "MyAssetName";

		private SlowTaskMonitor slowTaskMonitor;

		private string[] columnNames = new string[6] { "", "Layer", "Path", "Filter", "", "" };

		private int[] columnWidths = new int[6] { 25, 110, 320, 140, 60, 60 };

		private int controlHeight = 20;

		private int controlMargin = 20;

		private ProjectSettings projectSettings;

		private UserSettings userSettings;

		private IContainer components;

		private AdvTree advTreeMatchingFiles;

		private Node node1;

		private Node node2;

		private Node node3;

		private Node node4;

		private Node node6;

		private Node node5;

		private NodeConnector nodeConnector1;

		private ElementStyle elementStyle1;

		private Label label1;

		private Label label2;

		private Button buttonImport;

		private Button buttonCancel;

		private ComboBoxEx comboBoxExName;

		private ComboItem comboItem2;

		private ComboItem comboItem3;

		private ComboItem comboItem4;

		private BackgroundWorker backgroundWorker1;

		private ComboItem comboItem5;

		private ComboItem comboItem6;

		private Button button3;

		private ComboBox comboBox1;

		private Label label3;

		private Button button6;

		private Label labelName;

		private ScrollableEditList scrollableEditList;

		private ToolTip ToolTip;

		public LayerTemplateImportDescription LayerTemplateImportDescription { get; private set; }

		private BatchImportAssetsForm()
		{
			InitializeComponent();
		}

		public BatchImportAssetsForm(LayerConfig layerConfig, SolutionModel model, UserSettings userSettings)
		{
			this.model = model;
			this.userSettings = userSettings;
			InitializeComponent();
			projectSettings = userSettings.Solution[model.ActiveProjectBuilder.get_ActiveProject().get_Id()];
			folderBrowser = new FolderBrowserDialog();
			this.layerConfig = layerConfig;
			LayerTemplateImportDescription = new LayerTemplateImportDescription();
			for (int i = 0; i < columnNames.Length; i++)
			{
				scrollableEditList.Columns.Add(new ScrollableEditList.ColumnItem(columnNames[i], columnWidths[i]));
			}
			if (layerConfig != null)
			{
				controlRows = new List<ControlRow>();
				for (int j = 0; j < layerConfig.get_Layers().Count; j++)
				{
					ScrollableEditList.Row row = null;
					MakeRow(j, out row, out var controls);
					scrollableEditList.Rows.Add(row);
					controlRows.Add(controls);
					UpdateInfo(controls, 0);
				}
			}
			updateExampleName();
			updateMatchingFiles();
		}

		private void MakeRow(int layerIndex, out ScrollableEditList.Row row, out ControlRow controls)
		{
			controls = new ControlRow();
			controls.batchInfo = projectSettings.GetBatchInfo(layerIndex);
			controls.layerIndex = layerIndex;
			controls.picker = new ChannelPickerControl(layerConfig.get_Layers()[layerIndex].get_DataType());
			controls.picker.Name = "folderPicker";
			controls.picker.Size = new Size(500, controls.picker.Size.Height);
			controls.picker.BackColor = System.Drawing.Color.Transparent;
			controls.picker.PickerPicked += picker_Picked;
			controls.picker.PickerUpdate += picker_PickerUpdate;
			controls.picker.SourceModeChanged += picker_SourceModeChanged;
			controls.picker.PickerFileDropped += picker_PickerFileDropped;
			controls.picker.Tag = controls;
			controls.picker.Init(ToolTip, "TT_BATCHIMPORT_FOLDER", layerIndex, ChannelPickerControl.FileFolderMode.Folder);
			controls.picker.SetDisplayText(0, controls.batchInfo.GetImportLocation(0));
			controls.picker.ReadOnly = false;
			controls.batchTemplate = new BatchTemplateControl();
			controls.batchTemplate.Size = new Size(columnWidths[3] - 2 * controlMargin, controls.batchTemplate.Size.Height);
			controls.batchTemplate.Tag = controls;
			controls.batchTemplate.BackColor = System.Drawing.Color.Transparent;
			controls.batchTemplate.Init(ToolTip, "TT_BATCHIMPORT_TEMPLATE", layerIndex, controls.batchInfo);
			controls.batchTemplate.UpdateTemplate += batchTemplate_UpdateTemplate;
			controls.optionsButton = SetupOptionsButton(controls, layerIndex);
			((Control)(object)controls.optionsButton).Tag = controls;
			((Control)(object)controls.optionsButton).TabIndex = 10 * (layerIndex + 1) + 6;
			controls.details = new LayerAssetDetailsControl();
			controls.details.Tag = controls;
			controls.infoButton = SetupInfoButton(controls.details);
			((Control)(object)controls.infoButton).Tag = controls;
			((Control)(object)controls.infoButton).TabIndex = 10 * (layerIndex + 1) + 8;
			row = new ScrollableEditList.Row();
			row.RowItems.Add(new ScrollableEditList.RowItem(""));
			row.RowItems.Add(new ScrollableEditList.RowItem(layerConfig.get_Layers()[layerIndex].get_LayerName()));
			row.RowItems.Add(new ScrollableEditList.RowItem(controls.picker));
			row.RowItems.Add(new ScrollableEditList.RowItem(controls.batchTemplate));
			row.RowItems.Add(new ScrollableEditList.RowItem((Control)(object)controls.optionsButton));
			row.RowItems.Add(new ScrollableEditList.RowItem((Control)(object)controls.infoButton));
		}

		private void picker_PickerFileDropped(object sender, int subIndex, string filePath)
		{
			ChannelPickerControl channelPickerControl = (ChannelPickerControl)sender;
			ControlRow row = (ControlRow)channelPickerControl.Tag;
			UpdateInfo(row, subIndex);
			channelPickerControl.SetDisplayText(subIndex, filePath);
		}

		private void picker_PickerUpdate(object sender, EventArgs e, int subtextureIndex)
		{
			ChannelPickerControl channelPickerControl = (ChannelPickerControl)sender;
			ControlRow row = (ControlRow)channelPickerControl.Tag;
			ImportTemplateInfo val = UpdateInfo(row, subtextureIndex);
			if (val != null)
			{
				channelPickerControl.SetDisplayText(subtextureIndex, val.get_BasePath());
			}
		}

		private void picker_Picked(object sender, EventArgs e, int subtextureIndex)
		{
			ChannelPickerControl channelPickerControl = (ChannelPickerControl)sender;
			ControlRow controlRow = (ControlRow)channelPickerControl.Tag;
			folderBrowser.SelectedPath = controlRow.batchInfo.GetImportLocation(subtextureIndex);
			if (folderBrowser.ShowDialog() == DialogResult.OK && UpdateInfo(controlRow, subtextureIndex) != null)
			{
				channelPickerControl.SetDisplayText(subtextureIndex, folderBrowser.SelectedPath);
			}
		}

		private void batchTemplate_UpdateTemplate(object sender, EventArgs e, int subtextureIndex)
		{
			ControlRow controlRow = (ControlRow)((BatchTemplateControl)sender).Tag;
			string text = controlRow.picker.GetDisplayText(subtextureIndex) + "\\" + controlRow.batchTemplate.GetTemplate(subtextureIndex);
			if (controlRow.prevText != text)
			{
				controlRow.prevText = text;
				ImportTemplateInfo val = UpdateInfo(controlRow, subtextureIndex);
				if (val != null)
				{
					controlRow.picker.SetDisplayText(subtextureIndex, val.get_BasePath());
				}
			}
		}

		private List<string> EnumToStringList<T>()
		{
			List<string> list = new List<string>();
			Array values = System.Enum.GetValues(typeof(T));
			for (int i = 0; i < values.Length; i++)
			{
				list.Add(values.GetValue(i).ToString());
			}
			return list;
		}

		private ButtonItem SetupEnumButtonItems<T>(T defaultValue, string title)
		{
			//IL_0001: Unknown result type (might be due to invalid IL or missing references)
			//IL_0007: Expected O, but got Unknown
			//IL_0046: Unknown result type (might be due to invalid IL or missing references)
			//IL_004d: Expected O, but got Unknown
			ButtonItem val = new ButtonItem();
			((BaseItem)val).set_GlobalItem(false);
			((BaseItem)val).set_Text(title);
			string text = defaultValue.ToString();
			foreach (string item in EnumToStringList<T>())
			{
				bool @checked = text.Equals(item);
				ButtonItem val2 = new ButtonItem();
				val2.set_Checked(@checked);
				((BaseItem)val2).set_Text(item);
				((BaseItem)val2).set_Tag((object)item);
				((BaseItem)val2).add_Click((EventHandler)sub_Click);
				((BaseItem)val).get_SubItems().Add((BaseItem)(object)val2);
			}
			return val;
		}

		private void sub_Click(object sender, EventArgs e)
		{
			//IL_0002: Unknown result type (might be due to invalid IL or missing references)
			//IL_0008: Expected O, but got Unknown
			//IL_0019: Unknown result type (might be due to invalid IL or missing references)
			//IL_001f: Expected O, but got Unknown
			//IL_0041: Unknown result type (might be due to invalid IL or missing references)
			//IL_0048: Expected O, but got Unknown
			//IL_004e: Unknown result type (might be due to invalid IL or missing references)
			//IL_0053: Invalid comparison between O and Unknown
			ButtonItem val = (ButtonItem)sender;
			if (val == null)
			{
				return;
			}
			ButtonItem val2 = (ButtonItem)((BaseItem)val).get_Parent();
			if (val2 == null)
			{
				return;
			}
			foreach (ButtonItem item in (CollectionBase)(object)((BaseItem)val2).get_SubItems())
			{
				ButtonItem val3 = item;
				val3.set_Checked((object)val3 == (object)(ButtonItem)sender);
			}
		}

		private ButtonX SetupOptionsButton(ControlRow row, int layerIndex)
		{
			//IL_0001: Unknown result type (might be due to invalid IL or missing references)
			//IL_0007: Expected O, but got Unknown
			//IL_00a6: Unknown result type (might be due to invalid IL or missing references)
			//IL_00ab: Unknown result type (might be due to invalid IL or missing references)
			//IL_00b5: Expected O, but got Unknown
			//IL_00fc: Unknown result type (might be due to invalid IL or missing references)
			//IL_0101: Unknown result type (might be due to invalid IL or missing references)
			//IL_010b: Expected O, but got Unknown
			//IL_0124: Unknown result type (might be due to invalid IL or missing references)
			//IL_012a: Expected O, but got Unknown
			ButtonX val = new ButtonX();
			((Control)(object)val).Name = "button";
			((Control)(object)val).Text = "Options";
			((Control)(object)val).Size = new Size(columnWidths[4] - 2 * controlMargin, controlHeight);
			((Control)(object)val).AccessibleRole = AccessibleRole.PushButton;
			val.set_AutoExpandOnClick(true);
			((PopupItemControl)val).set_Style((eDotNetBarStyle)9);
			val.get_SubItems().Add((BaseItem)(object)SetupEnumButtonItems(Constants.DefaultQualityLevel, "QualityLevel"));
			((SuperTooltip)ToolTip).SetSuperTooltip((IComponent)val.get_SubItems().get_Item(0), new SuperTooltipInfo("", "", "TT_OPTION_QUALITYLEVEL", (Image)null, (Image)null, ((SuperTooltip)ToolTip).get_DefaultTooltipSettings().get_Color()));
			val.get_SubItems().Add((BaseItem)(object)SetupEnumButtonItems(FlipOption.None, "Flip"));
			((SuperTooltip)ToolTip).SetSuperTooltip((IComponent)val.get_SubItems().get_Item(1), new SuperTooltipInfo("", "", "TT_OPTION_FLIP", (Image)null, (Image)null, ((SuperTooltip)ToolTip).get_DefaultTooltipSettings().get_Color()));
			val.get_SubItems().Add((BaseItem)(object)SetupEnumButtonItems<TextureMipSourceType>((TextureMipSourceType)0, "Mip map Source"));
			ButtonItem val2 = new ButtonItem();
			((BaseItem)val2).set_Name("swizzleButton");
			((BaseItem)val2).set_Text("Swizzle");
			val.get_SubItems().Add((BaseItem)(object)val2);
			for (int i = 0; i < 4; i++)
			{
				row.swizzleMenuButton[i] = SetupSwizzlingButtonItem(i, row, layerIndex);
				((BaseItem)val2).get_SubItems().Add((BaseItem)(object)row.swizzleMenuButton[i]);
			}
			return val;
		}

		private ButtonX SetupInfoButton(LayerAssetDetailsControl detailControl)
		{
			//IL_0001: Unknown result type (might be due to invalid IL or missing references)
			//IL_0006: Unknown result type (might be due to invalid IL or missing references)
			//IL_0011: Expected O, but got Unknown
			//IL_0012: Unknown result type (might be due to invalid IL or missing references)
			//IL_001d: Expected O, but got Unknown
			//IL_001e: Unknown result type (might be due to invalid IL or missing references)
			//IL_0040: Expected O, but got Unknown
			//IL_0041: Unknown result type (might be due to invalid IL or missing references)
			//IL_0049: Expected O, but got Unknown
			//IL_004a: Unknown result type (might be due to invalid IL or missing references)
			//IL_0052: Unknown result type (might be due to invalid IL or missing references)
			//IL_005c: Expected O, but got Unknown
			//IL_005c: Unknown result type (might be due to invalid IL or missing references)
			//IL_0061: Unknown result type (might be due to invalid IL or missing references)
			//IL_0069: Unknown result type (might be due to invalid IL or missing references)
			//IL_0071: Unknown result type (might be due to invalid IL or missing references)
			//IL_007a: Expected O, but got Unknown
			ButtonX val = new ButtonX();
			((Control)val).Name = "button";
			((Control)val).Text = "Info";
			((Control)val).Size = new Size(columnWidths[5] - 2 * controlMargin, controlHeight);
			((Control)val).AccessibleRole = AccessibleRole.PushButton;
			val.set_AutoExpandOnClick(true);
			((PopupItemControl)val).set_Style((eDotNetBarStyle)9);
			ButtonX val2 = val;
			ControlContainerItem val3 = new ControlContainerItem();
			val3.set_AllowItemResize(true);
			val3.set_MenuVisibility((eMenuVisibility)0);
			val3.set_Control((Control)detailControl);
			ControlContainerItem val4 = val3;
			val2.get_SubItems().Add((BaseItem)(object)val4);
			return val2;
		}

		private ButtonItem SetupSwizzlingButtonItem(int subIdx, ControlRow row, int layerIndex)
		{
			//IL_0001: Unknown result type (might be due to invalid IL or missing references)
			//IL_0007: Expected O, but got Unknown
			//IL_0037: Unknown result type (might be due to invalid IL or missing references)
			//IL_003d: Expected O, but got Unknown
			//IL_008c: Unknown result type (might be due to invalid IL or missing references)
			//IL_0093: Expected O, but got Unknown
			//IL_00e8: Unknown result type (might be due to invalid IL or missing references)
			//IL_00ef: Expected O, but got Unknown
			//IL_012d: Unknown result type (might be due to invalid IL or missing references)
			//IL_0134: Expected O, but got Unknown
			//IL_014b: Unknown result type (might be due to invalid IL or missing references)
			//IL_0152: Expected O, but got Unknown
			ButtonItem val = new ButtonItem();
			((BaseItem)val).set_Name("swizzleButton" + subIdx);
			((BaseItem)val).set_Text("Swizzle " + subIdx);
			ButtonItem val2 = new ButtonItem();
			((BaseItem)val2).set_Text("Load Preset");
			((BaseItem)val).get_SubItems().Add((BaseItem)(object)val2);
			SwizzleControl swizzleControl = new SwizzleControl();
			row.swizzle[subIdx] = swizzleControl;
			swizzleControl.Padding = new Padding(4, 4, 4, 4);
			SwizzlePreset[] swizzlePresets = Constants.SwizzlePresets;
			SwizzlePreset[] array = swizzlePresets;
			foreach (SwizzlePreset swizzlePreset in array)
			{
				ButtonItem val3 = new ButtonItem();
				((BaseItem)val3).set_Text(swizzlePreset.Name);
				((BaseItem)val3).set_Tag((object)new PresetControlPair(swizzleControl, swizzlePreset));
				((BaseItem)val3).add_Click((EventHandler)presetButton_Click);
				((BaseItem)val2).get_SubItems().Add((BaseItem)(object)val3);
			}
			ControlContainerItem val4 = new ControlContainerItem();
			val4.set_AllowItemResize(false);
			((BaseItem)val4).set_BeginGroup(false);
			((BaseItem)val4).set_GlobalItem(false);
			val4.set_MenuVisibility((eMenuVisibility)0);
			((BaseItem)val4).set_Name("controlContainerItem1");
			((BaseItem)val4).set_Text("Swizzle");
			LabelItem val5 = new LabelItem();
			((BaseItem)val5).set_Text("Custom: ");
			val5.set_PaddingLeft(32);
			ItemContainer val6 = new ItemContainer();
			((BaseItem)val6).set_BeginGroup(true);
			((BaseItem)val6).get_SubItems().Add((BaseItem)(object)val5);
			((BaseItem)val6).get_SubItems().Add((BaseItem)(object)val4);
			int numChannels = DataTypeInfo.GetNumChannels(layerConfig.get_Layers()[layerIndex].get_DataType());
			swizzleControl.Initialize(numChannels, SwizzlePreset.RGBA.Pattern);
			val4.set_Control((Control)swizzleControl);
			((BaseItem)val).get_SubItems().Add((BaseItem)(object)val6);
			return val;
		}

		private void presetButton_Click(object sender, EventArgs e)
		{
			//IL_0002: Unknown result type (might be due to invalid IL or missing references)
			PresetControlPair presetControlPair = (PresetControlPair)((BaseItem)(ButtonItem)sender).get_Tag();
			presetControlPair.Control.LoadSwizzle(presetControlPair.Preset.Pattern);
		}

		private ImportTemplateInfo UpdateInfo(ControlRow row, int subtextureIndex)
		{
			slowTaskMonitor = new SlowTaskMonitor("Scanning", (Form)(object)this);
			slowTaskMonitor.Type = SlowTaskMonitor.ProgressBarType.Marquee;
			slowTaskMonitor.Start();
			ImportTemplateInfo val = null;
			string displayText = row.picker.GetDisplayText(subtextureIndex);
			string template = row.batchTemplate.GetTemplate(subtextureIndex);
			bool flag = false;
			if (displayText != string.Empty && Directory.Exists(displayText))
			{
				val = ImportTemplateInfo.ParseAndScan(displayText, template, 0, flag);
				row.templateInfo[subtextureIndex] = val;
			}
			else
			{
				row.templateInfo[subtextureIndex] = null;
			}
			UpdateDetails(row);
			slowTaskMonitor.End();
			updateExampleName();
			updateMatchingFiles();
			return val;
		}

		private void UpdateDetails(ControlRow row)
		{
			int num = 1;
			ChannelMask val = null;
			Dictionary<AssetPackingMode, ChannelMask> dictionary = new Dictionary<AssetPackingMode, ChannelMask>();
			ChannelMerging.GetAllChannelMasks(layerConfig.get_Layers()[row.layerIndex].get_DataType(), ref dictionary);
			switch (row.picker.ActiveSourceMode)
			{
			case SourceMode.MultiSource4:
				num = 4;
				val = dictionary[(AssetPackingMode)3];
				break;
			case SourceMode.MultiSource3:
				num = 3;
				val = dictionary[(AssetPackingMode)2];
				break;
			case SourceMode.MultiSource:
				num = 2;
				val = dictionary[(AssetPackingMode)1];
				break;
			}
			MaskInfo maskInfo = default(MaskInfo);
			maskInfo.MaskCount = num;
			maskInfo.Infos = (ImportTemplateInfo[])(object)new ImportTemplateInfo[4];
			maskInfo.Names = new string[4];
			for (int i = 0; i < num; i++)
			{
				maskInfo.Infos[i] = row.templateInfo[i];
				maskInfo.Names[i] = ((val != null) ? val.humanReadable[i] : string.Empty);
			}
			row.details.UpdateTree(maskInfo);
			bool visible = row.picker.ActiveSourceMode == SourceMode.MultiSource || row.picker.ActiveSourceMode == SourceMode.MultiSource3 || row.picker.ActiveSourceMode == SourceMode.MultiSource4;
			bool visible2 = row.picker.ActiveSourceMode == SourceMode.MultiSource3 || row.picker.ActiveSourceMode == SourceMode.MultiSource4;
			bool visible3 = row.picker.ActiveSourceMode == SourceMode.MultiSource4;
			((BaseItem)row.swizzleMenuButton[0]).set_Text((row.picker.ActiveSourceMode == SourceMode.SingleSource) ? "Swizzle" : "Swizzle 0");
			((BaseItem)row.swizzleMenuButton[1]).set_Visible(visible);
			((BaseItem)row.swizzleMenuButton[2]).set_Visible(visible2);
			((BaseItem)row.swizzleMenuButton[3]).set_Visible(visible3);
		}

		private void updateExampleName()
		{
			string text = ((Control)(object)comboBoxExName).Text.Replace("*", suggestedName);
			labelName.Text = "Example: \t\"" + text + "\"";
		}

		private string ValidateSubIndex(int layerIdx, int subIdx)
		{
			string text = " :\"";
			if (controlRows[layerIdx].picker.ActiveSourceMode != 0)
			{
				text = " (sub-texture " + subIdx + ") :\"";
			}
			if (!Directory.Exists(controlRows[layerIdx].picker.GetDisplayText(subIdx)))
			{
				return "Unvalid directory of layer " + (layerIdx + 1) + text + layerConfig.get_Layers()[layerIdx].get_LayerName() + "\".";
			}
			if (controlRows[layerIdx].templateInfo[subIdx] == null)
			{
				return "No info found for layer " + (layerIdx + 1) + text + layerConfig.get_Layers()[layerIdx].get_LayerName() + "\".";
			}
			Match match = Regex.Match(controlRows[layerIdx].batchTemplate.Text, "[%@#]");
			if (match.Success)
			{
				return "Unvalid character (" + match.Value + ") for import template in layer " + (layerIdx + 1) + text + layerConfig.get_Layers()[layerIdx].get_LayerName() + "\".";
			}
			if (controlRows[layerIdx].templateInfo[subIdx].get_FoundTextureFiles().get_NumberOfTextures() == 0)
			{
				return "No files found for layer " + (layerIdx + 1) + text + layerConfig.get_Layers()[layerIdx].get_LayerName() + "\".";
			}
			return null;
		}

		private bool updateMatchingFiles()
		{
			//IL_003c: Unknown result type (might be due to invalid IL or missing references)
			//IL_0042: Expected O, but got Unknown
			//IL_0067: Unknown result type (might be due to invalid IL or missing references)
			//IL_006e: Expected O, but got Unknown
			//IL_0121: Unknown result type (might be due to invalid IL or missing references)
			//IL_012b: Expected O, but got Unknown
			//IL_01a1: Unknown result type (might be due to invalid IL or missing references)
			//IL_01a7: Expected O, but got Unknown
			//IL_01eb: Unknown result type (might be due to invalid IL or missing references)
			//IL_01f1: Expected O, but got Unknown
			//IL_0243: Unknown result type (might be due to invalid IL or missing references)
			//IL_0248: Unknown result type (might be due to invalid IL or missing references)
			//IL_0251: Unknown result type (might be due to invalid IL or missing references)
			//IL_025b: Expected O, but got Unknown
			//IL_02b1: Unknown result type (might be due to invalid IL or missing references)
			//IL_02bb: Expected O, but got Unknown
			//IL_02bd: Unknown result type (might be due to invalid IL or missing references)
			//IL_02f4: Unknown result type (might be due to invalid IL or missing references)
			//IL_02f9: Unknown result type (might be due to invalid IL or missing references)
			//IL_02fe: Unknown result type (might be due to invalid IL or missing references)
			//IL_0303: Unknown result type (might be due to invalid IL or missing references)
			//IL_030b: Unknown result type (might be due to invalid IL or missing references)
			//IL_030d: Unknown result type (might be due to invalid IL or missing references)
			//IL_033e: Unknown result type (might be due to invalid IL or missing references)
			//IL_036f: Unknown result type (might be due to invalid IL or missing references)
			//IL_0374: Unknown result type (might be due to invalid IL or missing references)
			//IL_03cd: Unknown result type (might be due to invalid IL or missing references)
			//IL_03fb: Unknown result type (might be due to invalid IL or missing references)
			//IL_0448: Unknown result type (might be due to invalid IL or missing references)
			//IL_0452: Expected O, but got Unknown
			//IL_047b: Unknown result type (might be due to invalid IL or missing references)
			//IL_04a9: Unknown result type (might be due to invalid IL or missing references)
			//IL_04f9: Unknown result type (might be due to invalid IL or missing references)
			//IL_0503: Expected O, but got Unknown
			//IL_0575: Unknown result type (might be due to invalid IL or missing references)
			//IL_057a: Unknown result type (might be due to invalid IL or missing references)
			slowTaskMonitor = new SlowTaskMonitor("Updating", (Form)(object)this);
			slowTaskMonitor.Type = SlowTaskMonitor.ProgressBarType.Marquee;
			slowTaskMonitor.Start();
			((CollectionBase)(object)advTreeMatchingFiles.get_Nodes()).Clear();
			ImportAssetTemplate val = new ImportAssetTemplate();
			val.set_Name(((Control)(object)comboBoxExName).Text);
			val.set_TilingMethod((AssetTilingMethod)0);
			bool flag = false;
			for (int i = 0; i < controlRows.Count; i++)
			{
				ImportAssetLayerTemplate val2 = new ImportAssetLayerTemplate();
				int num = 0;
				SourceMode activeSourceMode = controlRows[i].picker.ActiveSourceMode;
				if (1 == 0)
				{
				}
				int val3 = activeSourceMode switch
				{
					SourceMode.MultiSource => 2, 
					SourceMode.MultiSource3 => 3, 
					SourceMode.MultiSource4 => 4, 
					_ => 1, 
				};
				if (1 == 0)
				{
				}
				num = Math.Min(val3, 4);
				for (int j = 0; j < num; j++)
				{
					string text = ValidateSubIndex(i, j);
					if (text == null)
					{
						val2.get_Source().AddSource(controlRows[i].templateInfo[j].get_TemplateString(), j);
						flag = true;
					}
					else
					{
						advTreeMatchingFiles.get_Nodes().Add(new Node(text));
					}
				}
				val.get_LayerTemplates().Add(val2);
			}
			if (!flag && ((CollectionBase)(object)advTreeMatchingFiles.get_Nodes()).Count != 0)
			{
				slowTaskMonitor.End();
				return false;
			}
			TemplateImportScanner val4 = new TemplateImportScanner();
			val4.Scan(val);
			Node val5 = new Node(((val4.get_FoundAssets().Count == 0) ? "No m" : (val4.get_FoundAssets().Count + " M")) + "atching files found.");
			advTreeMatchingFiles.get_Nodes().Add(val5);
			if (val4.get_FoundAssets().Count == 0)
			{
				slowTaskMonitor.End();
				return false;
			}
			for (int k = 0; k < val4.get_FoundAssets().Count; k++)
			{
				NodeCollection nodes = val5.get_Nodes();
				FoundAsset val6 = val4.get_FoundAssets()[k];
				nodes.Add(new Node(((FoundAsset)(ref val6)).get_Name()));
				int num2 = 0;
				while (true)
				{
					int num3 = num2;
					val6 = val4.get_FoundAssets()[k];
					if (num3 >= ((FoundAsset)(ref val6)).get_LayerSourceTextures().Count)
					{
						break;
					}
					val5.get_Nodes().get_Item(k).get_Nodes()
						.Add(new Node(num2 + 1 + ": \"" + layerConfig.get_Layers()[num2].get_LayerName() + "\""));
					AssetPackingMode val7 = (AssetPackingMode)0;
					SourceMode activeSourceMode2 = controlRows[num2].picker.ActiveSourceMode;
					if (1 == 0)
					{
					}
					AssetPackingMode val8 = (AssetPackingMode)(activeSourceMode2 switch
					{
						SourceMode.MultiSource => 1, 
						SourceMode.MultiSource3 => 2, 
						SourceMode.MultiSource4 => 3, 
						_ => 0, 
					});
					if (1 == 0)
					{
					}
					val7 = val8;
					int num4 = 0;
					int numChannels = DataTypeInfo.GetNumChannels(layerConfig.get_Layers()[num2].get_DataType());
					int subIdx;
					for (subIdx = 0; subIdx < 4; subIdx++)
					{
						int channelCount = ChannelMerging.GetChannelCount(val7, layerConfig.get_Layers()[num2].get_DataType(), num2, subIdx);
						val6 = val4.get_FoundAssets()[k];
						List<Item> list = ((FoundAsset)(ref val6)).get_LayerSourceTextures()[num2].Sources.Where((Item _src) => _src.SubIndex == subIdx).ToList();
						if (list.Count == 0)
						{
							if (ChannelMerging.IsCombinedMode(val7))
							{
								string text2 = "(";
								text2 += ChannelMerging.GetChannelMaskHumanReadable(layerConfig.get_Layers()[num2].get_DataType(), val7, subIdx);
								text2 += ")";
								val5.get_Nodes().get_Item(k).get_Nodes()
									.get_Item(num2)
									.get_Nodes()
									.Add(new Node("Default layer color " + text2));
							}
						}
						else
						{
							foreach (Item item in list)
							{
								string text3 = "";
								if (ChannelMerging.IsCombinedMode(val7))
								{
									text3 = " (";
									text3 += ChannelMerging.GetChannelMaskHumanReadable(layerConfig.get_Layers()[num2].get_DataType(), val7, item.SubIndex);
									text3 += ")";
								}
								val5.get_Nodes().get_Item(k).get_Nodes()
									.get_Item(num2)
									.get_Nodes()
									.Add(new Node(item.Source + text3));
							}
						}
						num4 += channelCount;
						if (num4 >= numChannels)
						{
							break;
						}
					}
					num2++;
				}
			}
			val5.set_Expanded(true);
			slowTaskMonitor.End();
			return true;
		}

		private void comboBoxExName_Leave(object sender, EventArgs e)
		{
			updateExampleName();
			updateMatchingFiles();
		}

		private void buttonImport_Click(object sender, EventArgs e)
		{
			//IL_0117: Unknown result type (might be due to invalid IL or missing references)
			//IL_0142: Unknown result type (might be due to invalid IL or missing references)
			//IL_0147: Unknown result type (might be due to invalid IL or missing references)
			//IL_014c: Unknown result type (might be due to invalid IL or missing references)
			//IL_0152: Unknown result type (might be due to invalid IL or missing references)
			//IL_01ec: Unknown result type (might be due to invalid IL or missing references)
			//IL_01f3: Expected O, but got Unknown
			//IL_0270: Unknown result type (might be due to invalid IL or missing references)
			//IL_0277: Expected O, but got Unknown
			//IL_02f4: Unknown result type (might be due to invalid IL or missing references)
			//IL_02fb: Expected O, but got Unknown
			//IL_0322: Unknown result type (might be due to invalid IL or missing references)
			if (!updateMatchingFiles())
			{
				return;
			}
			slowTaskMonitor = new SlowTaskMonitor("Preparing Import", (Form)(object)this);
			slowTaskMonitor.Type = SlowTaskMonitor.ProgressBarType.Marquee;
			slowTaskMonitor.Start();
			LayerTemplateImportDescription.Name = ((Control)(object)comboBoxExName).Text;
			int num = 0;
			foreach (ControlRow controlRow in controlRows)
			{
				LayerAssetImportDescription layerAssetImportDescription = new LayerAssetImportDescription();
				layerAssetImportDescription.Name = layerConfig.get_Layers()[num].get_LayerName();
				for (int i = 0; i < 4; i++)
				{
					if (controlRow.templateInfo[i] != null)
					{
						layerAssetImportDescription.FileSources.AddSource(controlRow.templateInfo[i].get_TemplateString(), i);
						controlRow.batchInfo.SetImportLocation(i, controlRow.picker.GetDisplayText(i));
						controlRow.batchInfo.PushTemplate(i, controlRow.batchTemplate.GetTemplate(i));
					}
				}
				AssetPackingMode packingMode = (AssetPackingMode)0;
				switch (controlRow.picker.ActiveSourceMode)
				{
				case SourceMode.MultiSource:
					packingMode = (AssetPackingMode)1;
					break;
				case SourceMode.MultiSource3:
					packingMode = (AssetPackingMode)2;
					break;
				case SourceMode.MultiSource4:
					packingMode = (AssetPackingMode)3;
					break;
				}
				layerAssetImportDescription.PackingMode = packingMode;
				for (int j = 0; j < 4; j++)
				{
					layerAssetImportDescription.Swizzle[j] = controlRows[num].swizzle[j].Swizzle;
					if (layerAssetImportDescription.Swizzle[j].Equals(SwizzlePreset.Default.Pattern))
					{
						layerAssetImportDescription.Swizzle[j] = "";
					}
				}
				foreach (ButtonItem item in (CollectionBase)(object)controlRow.optionsButton.get_SubItems().get_Item(0).get_SubItems())
				{
					ButtonItem val = item;
					if (val.get_Checked())
					{
						layerAssetImportDescription.Quality = (QualityLevel)System.Enum.Parse(typeof(QualityLevel), ((BaseItem)val).get_Text());
						break;
					}
				}
				foreach (ButtonItem item2 in (CollectionBase)(object)controlRow.optionsButton.get_SubItems().get_Item(1).get_SubItems())
				{
					ButtonItem val2 = item2;
					if (val2.get_Checked())
					{
						layerAssetImportDescription.Flip = (FlipOption)System.Enum.Parse(typeof(FlipOption), ((BaseItem)val2).get_Text());
						break;
					}
				}
				foreach (ButtonItem item3 in (CollectionBase)(object)controlRow.optionsButton.get_SubItems().get_Item(2).get_SubItems())
				{
					ButtonItem val3 = item3;
					if (val3.get_Checked())
					{
						layerAssetImportDescription.MipSourceType = (TextureMipSourceType)System.Enum.Parse(typeof(TextureMipSourceType), ((BaseItem)val3).get_Text());
						break;
					}
				}
				LayerTemplateImportDescription.LayerTemplates.Add(layerAssetImportDescription);
				projectSettings.SetBatchInfo(num, controlRow.batchInfo);
				num++;
			}
			slowTaskMonitor.End();
			userSettings.Solution[model.ActiveProjectBuilder.get_ActiveProject().get_Id()] = projectSettings;
			((Form)this).DialogResult = DialogResult.OK;
		}

		private void picker_SourceModeChanged(object sender, SourceMode mode)
		{
			ChannelPickerControl channelPickerControl = (ChannelPickerControl)sender;
			ControlRow controlRow = (ControlRow)channelPickerControl.Tag;
			controlRow.batchTemplate.ActiveSourceMode = channelPickerControl.ActiveSourceMode;
			int num = 0;
			SourceMode activeSourceMode = channelPickerControl.ActiveSourceMode;
			if (1 == 0)
			{
			}
			int num2 = activeSourceMode switch
			{
				SourceMode.MultiSource => 2, 
				SourceMode.MultiSource3 => 3, 
				SourceMode.MultiSource4 => 4, 
				_ => 1, 
			};
			if (1 == 0)
			{
			}
			num = num2;
			for (int i = 0; i < num; i++)
			{
				UpdateInfo(controlRow, i);
			}
		}

		protected override void Dispose(bool disposing)
		{
			if (disposing && components != null)
			{
				components.Dispose();
			}
			((OfficeForm)this).Dispose(disposing);
		}

		private void InitializeComponent()
		{
			//IL_0002: Unknown result type (might be due to invalid IL or missing references)
			//IL_000c: Expected O, but got Unknown
			//IL_000d: Unknown result type (might be due to invalid IL or missing references)
			//IL_0017: Expected O, but got Unknown
			//IL_0018: Unknown result type (might be due to invalid IL or missing references)
			//IL_0022: Expected O, but got Unknown
			//IL_0023: Unknown result type (might be due to invalid IL or missing references)
			//IL_002d: Expected O, but got Unknown
			//IL_002e: Unknown result type (might be due to invalid IL or missing references)
			//IL_0038: Expected O, but got Unknown
			//IL_0039: Unknown result type (might be due to invalid IL or missing references)
			//IL_0043: Expected O, but got Unknown
			//IL_0044: Unknown result type (might be due to invalid IL or missing references)
			//IL_004e: Expected O, but got Unknown
			//IL_004f: Unknown result type (might be due to invalid IL or missing references)
			//IL_0059: Expected O, but got Unknown
			//IL_005a: Unknown result type (might be due to invalid IL or missing references)
			//IL_0064: Expected O, but got Unknown
			//IL_0091: Unknown result type (might be due to invalid IL or missing references)
			//IL_009b: Expected O, but got Unknown
			//IL_009c: Unknown result type (might be due to invalid IL or missing references)
			//IL_00a6: Expected O, but got Unknown
			//IL_00a7: Unknown result type (might be due to invalid IL or missing references)
			//IL_00b1: Expected O, but got Unknown
			//IL_00b2: Unknown result type (might be due to invalid IL or missing references)
			//IL_00bc: Expected O, but got Unknown
			//IL_00c8: Unknown result type (might be due to invalid IL or missing references)
			//IL_00d2: Expected O, but got Unknown
			//IL_00d3: Unknown result type (might be due to invalid IL or missing references)
			//IL_00dd: Expected O, but got Unknown
			//IL_0299: Unknown result type (might be due to invalid IL or missing references)
			//IL_02a3: Expected O, but got Unknown
			//IL_0795: Unknown result type (might be due to invalid IL or missing references)
			//IL_079f: Expected O, but got Unknown
			//IL_0b02: Unknown result type (might be due to invalid IL or missing references)
			//IL_0b0c: Expected O, but got Unknown
			advTreeMatchingFiles = new AdvTree();
			node1 = new Node();
			node2 = new Node();
			node6 = new Node();
			node3 = new Node();
			node4 = new Node();
			node5 = new Node();
			nodeConnector1 = new NodeConnector();
			elementStyle1 = new ElementStyle();
			label1 = new Label();
			label2 = new Label();
			buttonImport = new Button();
			buttonCancel = new Button();
			comboBoxExName = new ComboBoxEx();
			comboItem2 = new ComboItem();
			comboItem3 = new ComboItem();
			comboItem4 = new ComboItem();
			backgroundWorker1 = new BackgroundWorker();
			comboItem5 = new ComboItem();
			comboItem6 = new ComboItem();
			button3 = new Button();
			comboBox1 = new ComboBox();
			label3 = new Label();
			button6 = new Button();
			labelName = new Label();
			scrollableEditList = new ScrollableEditList();
			ToolTip = new ToolTip();
			((ISupportInitialize)advTreeMatchingFiles).BeginInit();
			((Control)this).SuspendLayout();
			((Control)(object)advTreeMatchingFiles).AccessibleRole = AccessibleRole.Outline;
			((Control)(object)advTreeMatchingFiles).AllowDrop = true;
			((Control)(object)advTreeMatchingFiles).Anchor = AnchorStyles.Bottom | AnchorStyles.Left | AnchorStyles.Right;
			((Control)(object)advTreeMatchingFiles).BackColor = SystemColors.Window;
			advTreeMatchingFiles.get_BackgroundStyle().set_Class("TreeBorderKey");
			advTreeMatchingFiles.get_BackgroundStyle().set_CornerType((eCornerType)1);
			advTreeMatchingFiles.set_DragDropEnabled(false);
			advTreeMatchingFiles.set_DragDropNodeCopyEnabled(false);
			advTreeMatchingFiles.set_LicenseKey("F962CEC7-CD8F-4911-A9E9-CAB39962FC1F");
			((Control)(object)advTreeMatchingFiles).Location = new Point(12, 313);
			((Control)(object)advTreeMatchingFiles).Name = "advTreeMatchingFiles";
			advTreeMatchingFiles.get_Nodes().AddRange((Node[])(object)new Node[1] { node1 });
			advTreeMatchingFiles.set_NodesConnector(nodeConnector1);
			advTreeMatchingFiles.set_NodeStyle(elementStyle1);
			advTreeMatchingFiles.set_PathSeparator(";");
			((Control)(object)advTreeMatchingFiles).Size = new Size(788, 209);
			advTreeMatchingFiles.get_Styles().Add(elementStyle1);
			((SuperTooltip)ToolTip).SetSuperTooltip((IComponent)advTreeMatchingFiles, new SuperTooltipInfo("Enter your resource Tag here In text", "", "TT_BATCHIMPORT_MATCHINGFILES", (Image)null, (Image)null, (eTooltipColor)17));
			((Control)(object)advTreeMatchingFiles).TabIndex = 36;
			((Control)(object)advTreeMatchingFiles).Text = "advTreeMatchingFiles";
			node1.set_Expanded(true);
			node1.set_Name("node1");
			node1.get_Nodes().AddRange((Node[])(object)new Node[2] { node2, node3 });
			node1.set_Text("Blue Marble");
			node2.set_Expanded(true);
			node2.set_Name("node2");
			node2.get_Nodes().AddRange((Node[])(object)new Node[1] { node6 });
			node2.set_Text("Diffuse - Found 0 files");
			node6.set_Expanded(true);
			node6.set_Name("node6");
			node6.set_Text("Empty");
			node3.set_DragDropEnabled(false);
			node3.set_Editable(false);
			node3.set_Expanded(true);
			node3.set_Name("node3");
			node3.get_Nodes().AddRange((Node[])(object)new Node[2] { node4, node5 });
			node3.set_Text("Normals - Found 2 files");
			node4.set_Expanded(true);
			node4.set_Name("node4");
			node4.set_Text("world.topo.bathy.200412.3x21600x21600.A0.png");
			node5.set_Expanded(true);
			node5.set_Name("node5");
			node5.set_Text("world.topo.bathy.200412.3x21600x21600.A1.png");
			nodeConnector1.set_LineColor(SystemColors.ControlText);
			elementStyle1.set_CornerType((eCornerType)1);
			elementStyle1.set_Name("elementStyle1");
			elementStyle1.set_TextColor(SystemColors.ControlText);
			label1.AutoSize = true;
			label1.Location = new Point(13, 263);
			label1.Name = "label1";
			label1.Size = new Size(35, 13);
			label1.TabIndex = 27;
			label1.Text = "Name";
			label2.AutoSize = true;
			label2.Location = new Point(13, 292);
			label2.Name = "label2";
			label2.Size = new Size(72, 13);
			label2.TabIndex = 27;
			label2.Text = "Matching files";
			buttonImport.Anchor = AnchorStyles.Bottom | AnchorStyles.Right;
			buttonImport.DialogResult = DialogResult.OK;
			buttonImport.Location = new Point(645, 539);
			buttonImport.Name = "buttonImport";
			buttonImport.Size = new Size(75, 23);
			buttonImport.TabIndex = 500;
			buttonImport.Text = "Add";
			buttonImport.UseVisualStyleBackColor = true;
			buttonImport.Click += buttonImport_Click;
			buttonCancel.Anchor = AnchorStyles.Bottom | AnchorStyles.Right;
			buttonCancel.DialogResult = DialogResult.Cancel;
			buttonCancel.Location = new Point(726, 539);
			buttonCancel.Name = "buttonCancel";
			buttonCancel.Size = new Size(75, 23);
			buttonCancel.TabIndex = 520;
			buttonCancel.Text = "Cancel";
			buttonCancel.UseVisualStyleBackColor = true;
			((ListControl)(object)comboBoxExName).DisplayMember = "Text";
			((ComboBox)(object)comboBoxExName).DrawMode = DrawMode.OwnerDrawFixed;
			((Control)(object)comboBoxExName).ForeColor = System.Drawing.Color.Black;
			((ListControl)(object)comboBoxExName).FormattingEnabled = true;
			((ComboBox)(object)comboBoxExName).ItemHeight = 14;
			comboBoxExName.get_Items().AddRange(new object[3] { comboItem2, comboItem3, comboItem4 });
			((Control)(object)comboBoxExName).Location = new Point(64, 259);
			((Control)(object)comboBoxExName).Name = "comboBoxExName";
			((Control)(object)comboBoxExName).Size = new Size(269, 20);
			comboBoxExName.set_Style((eDotNetBarStyle)9);
			((SuperTooltip)ToolTip).SetSuperTooltip((IComponent)comboBoxExName, new SuperTooltipInfo("Enter your resource Tag here In text", "", "TT_BATCHIMPORT_NAMETEMPLATE", (Image)null, (Image)null, (eTooltipColor)17));
			((Control)(object)comboBoxExName).TabIndex = 480;
			((Control)(object)comboBoxExName).Text = "*";
			((Control)(object)comboBoxExName).Leave += comboBoxExName_Leave;
			comboItem2.set_Text("*");
			comboItem3.set_Text("myprefix_*");
			comboItem4.set_Text("*_mypostfix");
			comboItem5.set_Text("Fast");
			comboItem6.set_Text("Optimized");
			button3.Enabled = false;
			button3.Location = new Point(284, 539);
			button3.Name = "button3";
			button3.Size = new Size(91, 23);
			button3.TabIndex = 40;
			button3.Text = "Load Preset...";
			button3.UseVisualStyleBackColor = true;
			button3.Visible = false;
			comboBox1.Enabled = false;
			comboBox1.FormattingEnabled = true;
			comboBox1.Location = new Point(71, 540);
			comboBox1.Name = "comboBox1";
			comboBox1.Size = new Size(209, 21);
			comboBox1.TabIndex = 42;
			comboBox1.Visible = false;
			label3.AutoSize = true;
			label3.Location = new Point(20, 544);
			label3.Name = "label3";
			label3.Size = new Size(42, 13);
			label3.TabIndex = 43;
			label3.Text = "Presets";
			label3.Visible = false;
			button6.Enabled = false;
			button6.Location = new Point(377, 539);
			button6.Name = "button6";
			button6.Size = new Size(112, 23);
			button6.TabIndex = 44;
			button6.Text = "Save as Preset...";
			button6.UseVisualStyleBackColor = true;
			button6.Visible = false;
			labelName.Location = new Point(339, 263);
			labelName.Name = "labelName";
			labelName.Size = new Size(323, 18);
			labelName.TabIndex = 46;
			labelName.Text = "world.topo.bathy.200412.3x21600x21600";
			scrollableEditList.Anchor = AnchorStyles.Top | AnchorStyles.Left | AnchorStyles.Right;
			scrollableEditList.Location = new Point(16, 12);
			scrollableEditList.Name = "scrollableEditList";
			scrollableEditList.Size = new Size(786, 238);
			scrollableEditList.TabIndex = 1;
			((SuperTooltip)ToolTip).set_DefaultTooltipSettings(new SuperTooltipInfo("Enter your resource Tag here In text", "", "TT_NO_TOOLTIP", (Image)null, (Image)null, (eTooltipColor)17));
			((SuperTooltip)ToolTip).set_LicenseKey("F962CEC7-CD8F-4911-A9E9-CAB39962FC1F");
			((Form)this).AcceptButton = buttonImport;
			((ContainerControl)this).AutoScaleDimensions = new SizeF(6f, 13f);
			((ContainerControl)this).AutoScaleMode = AutoScaleMode.Font;
			((Form)this).CancelButton = buttonCancel;
			((Form)this).ClientSize = new Size(813, 574);
			((Control)this).Controls.Add(scrollableEditList);
			((Control)this).Controls.Add(labelName);
			((Control)this).Controls.Add(button6);
			((Control)this).Controls.Add(label3);
			((Control)this).Controls.Add(comboBox1);
			((Control)this).Controls.Add(button3);
			((Control)this).Controls.Add((Control)(object)comboBoxExName);
			((Control)this).Controls.Add(buttonCancel);
			((Control)this).Controls.Add(buttonImport);
			((Control)this).Controls.Add((Control)(object)advTreeMatchingFiles);
			((Control)this).Controls.Add(label2);
			((Control)this).Controls.Add(label1);
			((Control)(object)this).DoubleBuffered = true;
			((Form)this).FormBorderStyle = FormBorderStyle.FixedDialog;
			((Form)this).MaximizeBox = false;
			((Form)this).MinimizeBox = false;
			((Control)this).Name = "BatchImportAssetsForm";
			((Form)this).ShowInTaskbar = false;
			((Form)this).StartPosition = FormStartPosition.CenterParent;
			((Control)(object)this).Text = "Import Multiple Stacked textures in Tile Set 'Loft'";
			((ISupportInitialize)advTreeMatchingFiles).EndInit();
			((Control)this).ResumeLayout(performLayout: false);
			((Control)this).PerformLayout();
		}
	}
	public class BatchInfo
	{
		public class ChannelBatchInfo
		{
			public string lastImportLocation;

			public const int TemplateHistory = 5;

			public string[] Templates = new string[5];
		}

		public static readonly string NodeName = "BatchInfo";

		private ChannelBatchInfo[] infos = new ChannelBatchInfo[4];

		public ChannelBatchInfo GetChannelInfo(int subIdx)
		{
			if (infos[subIdx] == null)
			{
				infos[subIdx] = new ChannelBatchInfo();
			}
			return infos[subIdx];
		}

		public string GetImportLocation(int subIdx)
		{
			if (infos[subIdx] == null)
			{
				infos[subIdx] = new ChannelBatchInfo();
			}
			if (infos[subIdx].lastImportLocation == null || !Directory.Exists(infos[subIdx].lastImportLocation))
			{
				infos[subIdx].lastImportLocation = Environment.GetFolderPath(Environment.SpecialFolder.Personal);
			}
			return infos[subIdx].lastImportLocation;
		}

		public void SetImportLocation(int subIdx, string value)
		{
			if (infos[subIdx] == null)
			{
				infos[subIdx] = new ChannelBatchInfo();
			}
			if (value != null && Directory.Exists(value))
			{
				infos[subIdx].lastImportLocation = Path.GetFullPath(value);
			}
		}

		public string GetTemplate(int subIdx, int templateIdx)
		{
			if (infos[subIdx] == null)
			{
				infos[subIdx] = new ChannelBatchInfo();
			}
			return infos[subIdx].Templates[templateIdx];
		}

		public void SetTemplate(int subIdx, int templateIdx, string value)
		{
			if (infos[subIdx] == null)
			{
				infos[subIdx] = new ChannelBatchInfo();
			}
			infos[subIdx].Templates[templateIdx] = value;
		}

		public void Save(XmlDocument document, XmlElement projectNode)
		{
			XmlNode xmlNode = document.CreateElement(NodeName);
			projectNode.AppendChild(xmlNode);
			for (int i = 0; i < 4; i++)
			{
				if (infos[i] == null)
				{
					continue;
				}
				XmlElement xmlElement = document.CreateElement("ChannelBatchInfo");
				xmlElement.SetAttribute("TextureIdx", i.ToString());
				xmlNode.AppendChild(xmlElement);
				XmlElement xmlElement2 = document.CreateElement("ImportLocation");
				xmlElement2.InnerText = GetImportLocation(i);
				xmlElement.AppendChild(xmlElement2);
				string[] templates = infos[i].Templates;
				string[] array = templates;
				foreach (string text in array)
				{
					if (!string.IsNullOrEmpty(text))
					{
						XmlNode xmlNode2 = document.CreateElement("ImportTemplate");
						xmlNode2.InnerText = text;
						xmlElement.AppendChild(xmlNode2);
					}
				}
			}
		}

		public static BatchInfo Load(XmlNode node)
		{
			BatchInfo batchInfo = new BatchInfo();
			foreach (XmlNode item in node.SelectNodes("ChannelBatchInfo"))
			{
				if (item.Attributes["TextureIdx"] == null)
				{
					continue;
				}
				int num = Convert.ToInt32(item.Attributes["TextureIdx"].Value);
				if (num >= 0 && num <= 4)
				{
					XmlNode xmlNode2 = item.SelectSingleNode("ImportLocation");
					if (xmlNode2 == null)
					{
						return null;
					}
					batchInfo.SetImportLocation(num, xmlNode2.InnerText);
					XmlNodeList xmlNodeList = item.SelectNodes("ImportTemplate");
					for (int i = 0; i < Math.Min(5, xmlNodeList.Count); i++)
					{
						batchInfo.SetTemplate(num, i, xmlNodeList[i].InnerText);
					}
				}
			}
			return batchInfo;
		}

		public void PushTemplate(int subIdx, string value)
		{
			if (infos[subIdx] == null)
			{
				infos[subIdx] = new ChannelBatchInfo();
			}
			Queue<string> queue = new Queue<string>();
			queue.Enqueue(value);
			string[] templates = infos[subIdx].Templates;
			string[] array = templates;
			foreach (string text in array)
			{
				if (text != null && text != value)
				{
					queue.Enqueue(text);
				}
				if (queue.Count >= 5)
				{
					break;
				}
			}
			int count = queue.Count;
			for (int j = 0; j < count; j++)
			{
				infos[subIdx].Templates[j] = queue.Dequeue();
			}
		}
	}
	public enum BuildErrorType
	{
		FatalError,
		Error,
		Warning,
		Info
	}
	public class BuildForm : Office2007Form
	{
		private class TaskBarProgressMonitor
		{
			private TaskBarProgressBar taskbarProgress;

			private int currentTask;

			private int currentProject;

			private Form parent;

			public int TaskCount { get; set; }

			public int ProjectCount { get; set; }

			public TaskBarProgressMonitor(Form parent)
			{
				this.parent = parent;
				Reset();
				taskbarProgress = new TaskBarProgressBar(parent);
			}

			public void Reset()
			{
				currentTask = 0;
				currentProject = 0;
			}

			public void Start()
			{
				if (parent.InvokeRequired)
				{
					parent.Invoke((Action)delegate
					{
						Start();
					});
				}
				else
				{
					Reset();
					taskbarProgress.Start();
				}
			}

			public void Stop()
			{
				if (parent.InvokeRequired)
				{
					parent.Invoke((Action)delegate
					{
						Stop();
					});
				}
				else
				{
					taskbarProgress.Stop();
				}
			}

			public void StepTask()
			{
				if (parent.InvokeRequired)
				{
					parent.Invoke((Action)delegate
					{
						StepTask();
					});
					return;
				}
				currentTask++;
				if (currentTask >= TaskCount)
				{
					TaskCount++;
				}
				Update();
			}

			public void StepProject()
			{
				if (parent.InvokeRequired)
				{
					parent.Invoke((Action)delegate
					{
						StepProject();
					});
				}
				else
				{
					currentProject++;
					currentTask = 0;
					Update();
				}
			}

			public void Update()
			{
				if (parent.InvokeRequired)
				{
					parent.Invoke((Action)delegate
					{
						Update();
					});
				}
				else
				{
					int num = ProjectCount * TaskCount;
					int num2 = currentProject * TaskCount + currentTask;
					taskbarProgress.SetValue((ulong)num2, (ulong)num);
				}
			}
		}

		private struct ProcessTrackContext
		{
			public SlowTask processStart;

			public SlowTask processEnd;

			public StepItem stepItem;

			public ProcessTrackContext(SlowTask start, SlowTask end, StepItem stepItem)
			{
				//IL_0002: Unknown result type (might be due to invalid IL or missing references)
				//IL_0003: Unknown result type (might be due to invalid IL or missing references)
				//IL_0009: Unknown result type (might be due to invalid IL or missing references)
				//IL_000a: Unknown result type (might be due to invalid IL or missing references)
				processStart = start;
				processEnd = end;
				this.stepItem = stepItem;
			}
		}

		private TaskBarProgressMonitor taskBarProgressMonitor;

		private SolutionModel model;

		private Task task;

		private BuildLogger buildLogger;

		private Guid[] projectIds;

		private CleanOperationParameters cleanParams;

		private ProjectBuildOptions projectBuildOptions;

		private int errors;

		private int warnings;

		private int infos;

		private bool Canceled;

		private Form parent;

		private int projectIdx;

		private int projectCount;

		private bool building;

		private int assetIndex;

		private int assetCount;

		private Asset currentAsset;

		private int currentContextIdx;

		private ProcessTrackContext[] contexts;

		private StepItem currentStepItem;

		private TaskDescription<SlowTask> currentTaskDesc;

		private IContainer components;

		private ProgressSteps progressSteps1;

		private StepItem stepItemImport;

		private StepItem stepItemComposeAndCode;

		private StepItem stepItemBuild;

		private LabelX labelText;

		private LabelX labelProject;

		private BuildLoggerList buildLoggerList;

		private StepItem stepItemPreprocess;

		private StepItem stepItemClean;

		private Button buttonClose;

		private Button buttonCancel;

		public bool CloseOnFinished { get; set; }

		public bool ForceCloseOnFinished { get; set; }

		public BuildForm(Form parent)
		{
			//IL_0051: Unknown result type (might be due to invalid IL or missing references)
			//IL_0056: Unknown result type (might be due to invalid IL or missing references)
			warnings = 0;
			errors = 0;
			infos = 0;
			InitializeComponent();
			buildLogger = new BuildLogger(buildLoggerList);
			building = true;
			buttonClose.Enabled = false;
			Canceled = false;
			cleanParams = Defaults.get_CleanOperationParameters();
			this.parent = parent;
			taskBarProgressMonitor = new TaskBarProgressMonitor(parent);
			Clear();
		}

		public BuildForm(Form parent, FormMode formMode)
		{
			warnings = 0;
			errors = 0;
			infos = 0;
			InitializeComponent();
			buildLogger = new BuildLogger(buildLoggerList);
			building = true;
			buttonClose.Enabled = false;
			Canceled = false;
			this.parent = parent;
			Form form = ((formMode == FormMode.Standalone) ? ((Form)(object)this) : parent);
			taskBarProgressMonitor = new TaskBarProgressMonitor(form);
			((Form)this).ShowInTaskbar = formMode == FormMode.Standalone;
			Clear();
		}

		private void Clear()
		{
			((Control)(object)labelProject).Text = string.Empty;
			((Control)(object)labelText).Text = string.Empty;
		}

		public void Create(SolutionModel model)
		{
			this.model = model;
			BuildContexts();
		}

		public void ShowAndBuild(Task task, Guid[] projectIds, ProjectBuildOptions projectBuildOptions)
		{
			//IL_0002: Unknown result type (might be due to invalid IL or missing references)
			//IL_0004: Unknown result type (might be due to invalid IL or missing references)
			//IL_0009: Unknown result type (might be due to invalid IL or missing references)
			ShowAndBuild(task, projectIds, Defaults.get_CleanOperationParameters(), projectBuildOptions);
		}

		public void ShowAndBuild(Task task, Guid[] projectIds, CleanOperationParameters cleanParams, ProjectBuildOptions projectBuildOptions)
		{
			//IL_0002: Unknown result type (might be due to invalid IL or missing references)
			//IL_0003: Unknown result type (might be due to invalid IL or missing references)
			//IL_0010: Unknown result type (might be due to invalid IL or missing references)
			//IL_0011: Unknown result type (might be due to invalid IL or missing references)
			//IL_0017: Unknown result type (might be due to invalid IL or missing references)
			//IL_0019: Unknown result type (might be due to invalid IL or missing references)
			this.task = task;
			this.projectIds = projectIds;
			this.cleanParams = cleanParams;
			this.projectBuildOptions = projectBuildOptions;
			((Form)this).ShowDialog((IWin32Window)parent);
		}

		public void ShowAndBuild(Task task, ProjectBuildOptions projectBuildOptions)
		{
			//IL_0002: Unknown result type (might be due to invalid IL or missing references)
			//IL_0004: Unknown result type (might be due to invalid IL or missing references)
			//IL_0009: Unknown result type (might be due to invalid IL or missing references)
			ShowAndBuild(task, null, Defaults.get_CleanOperationParameters(), projectBuildOptions);
		}

		public void ShowAndBuild(Task task, CleanOperationParameters cleanParams, ProjectBuildOptions projectBuildOptions)
		{
			//IL_0002: Unknown result type (might be due to invalid IL or missing references)
			//IL_0004: Unknown result type (might be due to invalid IL or missing references)
			//IL_0005: Unknown result type (might be due to invalid IL or missing references)
			ShowAndBuild(task, null, cleanParams, projectBuildOptions);
		}

		public bool ErrorOccurred()
		{
			return buildLogger.ContainsErrors();
		}

		public bool AtlassingErrorOccurred()
		{
			return buildLogger.ContainsAtlassingErrors();
		}

		private void BuildProjects()
		{
			//IL_006c: Unknown result type (might be due to invalid IL or missing references)
			//IL_0076: Expected O, but got Unknown
			//IL_0089: Unknown result type (might be due to invalid IL or missing references)
			//IL_0093: Expected O, but got Unknown
			//IL_00bb: Unknown result type (might be due to invalid IL or missing references)
			//IL_00f5: Expected O, but got Unknown
			//IL_0130: Unknown result type (might be due to invalid IL or missing references)
			//IL_013a: Expected O, but got Unknown
			//IL_014d: Unknown result type (might be due to invalid IL or missing references)
			//IL_0157: Expected O, but got Unknown
			if (Canceled)
			{
				return;
			}
			CancelSolution(cancel: false);
			projectIdx = 0;
			projectCount = projectIds.Length;
			taskBarProgressMonitor.TaskCount = 9;
			taskBarProgressMonitor.ProjectCount = projectCount;
			taskBarProgressMonitor.Start();
			model.SolutionBuilder.add_ProjectBuildStarting(new ProjectBuildEventHandler(SolutionBuilder_ProjectBuildStarting));
			model.SolutionBuilder.add_ProjectBuildFinished(new ProjectBuildEventHandler(SolutionBuilder_ProjectBuildFinished));
			try
			{
				Guid[] array = projectIds;
				Guid[] array2 = array;
				foreach (Guid guid in array2)
				{
					model.SolutionBuilder.BuildProject(guid, projectBuildOptions);
					if (!Canceled)
					{
						taskBarProgressMonitor.StepProject();
						continue;
					}
					break;
				}
			}
			catch (UnspecifiedException val)
			{
				UnspecifiedException val2 = val;
				((Logger)StudioLogger.Global).LogError(((Exception)(object)val2).Message);
			}
			catch (Exception e)
			{
				StudioLogger.Global.LogException(e);
			}
			model.SolutionBuilder.remove_ProjectBuildStarting(new ProjectBuildEventHandler(SolutionBuilder_ProjectBuildStarting));
			model.SolutionBuilder.remove_ProjectBuildFinished(new ProjectBuildEventHandler(SolutionBuilder_ProjectBuildFinished));
			taskBarProgressMonitor.Stop();
		}

		private void RebuildProjects()
		{
			CleanProjects();
			BuildProjects();
		}

		private void CleanProjects()
		{
			//IL_007d: Unknown result type (might be due to invalid IL or missing references)
			//IL_0087: Expected O, but got Unknown
			//IL_009a: Unknown result type (might be due to invalid IL or missing references)
			//IL_00a4: Expected O, but got Unknown
			//IL_00cc: Unknown result type (might be due to invalid IL or missing references)
			//IL_00f3: Expected O, but got Unknown
			//IL_012e: Unknown result type (might be due to invalid IL or missing references)
			//IL_0138: Expected O, but got Unknown
			//IL_014b: Unknown result type (might be due to invalid IL or missing references)
			//IL_0155: Expected O, but got Unknown
			if (Canceled)
			{
				return;
			}
			CancelSolution(cancel: false);
			projectIdx = 0;
			projectCount = projectIds.Length;
			stepItemClean.set_Maximum(projectCount);
			taskBarProgressMonitor.TaskCount = 1;
			taskBarProgressMonitor.ProjectCount = projectCount;
			taskBarProgressMonitor.Start();
			model.SolutionBuilder.add_ProjectCleanStarting(new ProjectCleanStartingEventHandler(SolutionBuilder_ProjectCleanStarting));
			model.SolutionBuilder.add_ProjectCleanFinished(new ProjectCleanFinishedEventHandler(SolutionBuilder_ProjectCleanFinished));
			try
			{
				Guid[] array = projectIds;
				Guid[] array2 = array;
				foreach (Guid guid in array2)
				{
					model.SolutionBuilder.CleanProject(guid, cleanParams);
					taskBarProgressMonitor.StepProject();
				}
			}
			catch (UnspecifiedException val)
			{
				UnspecifiedException val2 = val;
				((Logger)StudioLogger.Global).LogError(((Exception)(object)val2).Message);
			}
			catch (Exception e)
			{
				StudioLogger.Global.LogException(e);
			}
			model.SolutionBuilder.remove_ProjectCleanStarting(new ProjectCleanStartingEventHandler(SolutionBuilder_ProjectCleanStarting));
			model.SolutionBuilder.remove_ProjectCleanFinished(new ProjectCleanFinishedEventHandler(SolutionBuilder_ProjectCleanFinished));
			taskBarProgressMonitor.Stop();
		}

		private void RepageProjects()
		{
			//IL_007d: Unknown result type (might be due to invalid IL or missing references)
			//IL_0087: Expected O, but got Unknown
			//IL_009a: Unknown result type (might be due to invalid IL or missing references)
			//IL_00a4: Expected O, but got Unknown
			//IL_00ed: Expected O, but got Unknown
			//IL_0128: Unknown result type (might be due to invalid IL or missing references)
			//IL_0132: Expected O, but got Unknown
			//IL_0145: Unknown result type (might be due to invalid IL or missing references)
			//IL_014f: Expected O, but got Unknown
			if (Canceled)
			{
				return;
			}
			CancelSolution(cancel: false);
			projectIdx = 0;
			projectCount = projectIds.Length;
			stepItemClean.set_Maximum(projectCount);
			taskBarProgressMonitor.TaskCount = 1;
			taskBarProgressMonitor.ProjectCount = projectCount;
			taskBarProgressMonitor.Start();
			model.SolutionBuilder.add_ProjectRepageStarting(new ProjectRepageStartingEventHandler(SolutionBuilder_ProjectRepageStarting));
			model.SolutionBuilder.add_ProjectRepageFinished(new ProjectRepageFinishedEventHandler(SolutionBuilder_ProjectRepageFinished));
			try
			{
				Guid[] array = projectIds;
				Guid[] array2 = array;
				foreach (Guid guid in array2)
				{
					model.SolutionBuilder.RepageProject(guid);
					taskBarProgressMonitor.StepProject();
				}
			}
			catch (UnspecifiedException val)
			{
				UnspecifiedException val2 = val;
				((Logger)StudioLogger.Global).LogError(((Exception)(object)val2).Message);
			}
			catch (Exception e)
			{
				StudioLogger.Global.LogException(e);
			}
			model.SolutionBuilder.remove_ProjectRepageStarting(new ProjectRepageStartingEventHandler(SolutionBuilder_ProjectRepageStarting));
			model.SolutionBuilder.remove_ProjectRepageFinished(new ProjectRepageFinishedEventHandler(SolutionBuilder_ProjectRepageFinished));
			taskBarProgressMonitor.Stop();
		}

		private void CancelSolution(bool cancel = true)
		{
			//IL_0018: Expected O, but got Unknown
			try
			{
				model.SolutionBuilder.CancelBuild(cancel);
			}
			catch (UnspecifiedException val)
			{
				UnspecifiedException val2 = val;
				((Logger)StudioLogger.Global).LogError(((Exception)(object)val2).Message);
			}
			catch (Exception e)
			{
				StudioLogger.Global.LogException(e);
			}
		}

		private void SolutionBuilder_ProjectCleanStarting(object sender, ProjectBuilder builder)
		{
			ResetProgress();
			projectIdx++;
			builder.get_ProgressTracker().add_ProgressTick((ProgressTickEventHandler<SlowTask>)ProgressTracker_ProgressTick);
			builder.get_ProgressTracker().add_TaskStarted((TaskStartedEventHandler<SlowTask>)ProgressTracker_TaskStarted);
			builder.get_ProgressTracker().add_TaskFinished((TaskFinishedEventHandler<SlowTask>)ProgressTracker_TaskFinished);
			builder.get_ProgressTracker().add_AssetStarted((AssetStartedEventHandler<SlowTask>)ProgressTracker_AssetStarted);
			buildLogger.AddInfoText("Cleaning project '" + builder.get_ActiveProject().get_Name() + "'...");
			SetText((Control)(object)labelProject, string.Format("Project {0} out of {1}", new object[2] { projectIdx, projectCount }));
		}

		private void SolutionBuilder_ProjectCleanFinished(object sender, ProjectBuilder builder)
		{
			builder.get_ProgressTracker().remove_ProgressTick((ProgressTickEventHandler<SlowTask>)ProgressTracker_ProgressTick);
			builder.get_ProgressTracker().remove_TaskStarted((TaskStartedEventHandler<SlowTask>)ProgressTracker_TaskStarted);
			builder.get_ProgressTracker().remove_TaskFinished((TaskFinishedEventHandler<SlowTask>)ProgressTracker_TaskFinished);
			builder.get_ProgressTracker().remove_AssetStarted((AssetStartedEventHandler<SlowTask>)ProgressTracker_AssetStarted);
			buildLogger.AddInfoText(string.Format("Finished cleaning project.", builder.get_ActiveProject().get_Name()));
			stepItemClean.set_Value(stepItemClean.get_Maximum());
			taskBarProgressMonitor.StepTask();
		}

		private void SolutionBuilder_ProjectRepageStarting(object sender, ProjectBuilder builder)
		{
			ResetProgress();
			projectIdx++;
			builder.get_ProgressTracker().add_ProgressTick((ProgressTickEventHandler<SlowTask>)ProgressTracker_ProgressTick);
			builder.get_ProgressTracker().add_TaskStarted((TaskStartedEventHandler<SlowTask>)ProgressTracker_TaskStarted);
			builder.get_ProgressTracker().add_TaskFinished((TaskFinishedEventHandler<SlowTask>)ProgressTracker_TaskFinished);
			builder.get_ProgressTracker().add_AssetStarted((AssetStartedEventHandler<SlowTask>)ProgressTracker_AssetStarted);
			buildLogger.AddInfoText("Repageing project '" + builder.get_ActiveProject().get_Name() + "'...");
			SetText((Control)(object)labelProject, string.Format("Project {0} out of {1}", new object[2] { projectIdx, projectCount }));
		}

		private void SolutionBuilder_ProjectRepageFinished(object sender, ProjectBuilder builder)
		{
			builder.get_ProgressTracker().remove_ProgressTick((ProgressTickEventHandler<SlowTask>)ProgressTracker_ProgressTick);
			builder.get_ProgressTracker().remove_TaskStarted((TaskStartedEventHandler<SlowTask>)ProgressTracker_TaskStarted);
			builder.get_ProgressTracker().remove_TaskFinished((TaskFinishedEventHandler<SlowTask>)ProgressTracker_TaskFinished);
			builder.get_ProgressTracker().remove_AssetStarted((AssetStartedEventHandler<SlowTask>)ProgressTracker_AssetStarted);
			buildLogger.AddInfoText(string.Format("Finished Repageing project.", builder.get_ActiveProject().get_Name()));
			stepItemClean.set_Value(stepItemClean.get_Maximum());
			taskBarProgressMonitor.StepTask();
		}

		private void SolutionBuilder_ProjectBuildStarting(object sender, ProjectBuilder builder)
		{
			//IL_0083: Unknown result type (might be due to invalid IL or missing references)
			//IL_008d: Expected O, but got Unknown
			//IL_009b: Unknown result type (might be due to invalid IL or missing references)
			//IL_00a5: Expected O, but got Unknown
			//IL_00b3: Unknown result type (might be due to invalid IL or missing references)
			//IL_00bd: Expected O, but got Unknown
			//IL_00cb: Unknown result type (might be due to invalid IL or missing references)
			//IL_00d5: Expected O, but got Unknown
			ResetProgress();
			projectIdx++;
			builder.get_ProgressTracker().add_ProgressTick((ProgressTickEventHandler<SlowTask>)ProgressTracker_ProgressTick);
			builder.get_ProgressTracker().add_TaskStarted((TaskStartedEventHandler<SlowTask>)ProgressTracker_TaskStarted);
			builder.get_ProgressTracker().add_TaskFinished((TaskFinishedEventHandler<SlowTask>)ProgressTracker_TaskFinished);
			builder.get_ProgressTracker().add_AssetStarted((AssetStartedEventHandler<SlowTask>)ProgressTracker_AssetStarted);
			builder.get_BuildReportingHandler().add_OnErrorHandler(new OnBuildError(BuildReportingHandler_OnErrorHandler));
			builder.get_BuildReportingHandler().add_OnFatalErrorHandler(new OnBuildFatalError(BuildReportingHandler_OnFatalErrorHandler));
			builder.get_BuildReportingHandler().add_OnWarningHandler(new OnBuildWarning(BuildReportingHandler_OnWarningHandler));
			builder.get_BuildReportingHandler().add_OnInfoHandler(new OnBuildInfo(BuildReportingHandler_OnInfoHandler));
			buildLogger.AddInfoText("Building project '" + builder.get_ActiveProject().get_Name() + "'...");
			SetText((Control)(object)labelProject, string.Format("Project {0} out of {1}", new object[2] { projectIdx, projectCount }));
		}

		private void SetText(Control control, string text)
		{
			if (control.InvokeRequired)
			{
				control.Invoke((Action)delegate
				{
					SetText(control, text);
				});
			}
			else
			{
				control.Text = text;
			}
		}

		private void SolutionBuilder_ProjectBuildFinished(object sender, ProjectBuilder builder)
		{
			//IL_006e: Unknown result type (might be due to invalid IL or missing references)
			//IL_0078: Expected O, but got Unknown
			//IL_0086: Unknown result type (might be due to invalid IL or missing references)
			//IL_0090: Expected O, but got Unknown
			//IL_009e: Unknown result type (might be due to invalid IL or missing references)
			//IL_00a8: Expected O, but got Unknown
			//IL_00b6: Unknown result type (might be due to invalid IL or missing references)
			//IL_00c0: Expected O, but got Unknown
			//IL_00c2: Unknown result type (might be due to invalid IL or missing references)
			//IL_00c8: Invalid comparison between Unknown and I4
			//IL_0112: Unknown result type (might be due to invalid IL or missing references)
			//IL_0117: Unknown result type (might be due to invalid IL or missing references)
			builder.get_ProgressTracker().remove_ProgressTick((ProgressTickEventHandler<SlowTask>)ProgressTracker_ProgressTick);
			builder.get_ProgressTracker().remove_TaskStarted((TaskStartedEventHandler<SlowTask>)ProgressTracker_TaskStarted);
			builder.get_ProgressTracker().remove_TaskFinished((TaskFinishedEventHandler<SlowTask>)ProgressTracker_TaskFinished);
			builder.get_ProgressTracker().remove_AssetStarted((AssetStartedEventHandler<SlowTask>)ProgressTracker_AssetStarted);
			builder.get_BuildReportingHandler().remove_OnErrorHandler(new OnBuildError(BuildReportingHandler_OnErrorHandler));
			builder.get_BuildReportingHandler().remove_OnFatalErrorHandler(new OnBuildFatalError(BuildReportingHandler_OnFatalErrorHandler));
			builder.get_BuildReportingHandler().remove_OnWarningHandler(new OnBuildWarning(BuildReportingHandler_OnWarningHandler));
			builder.get_BuildReportingHandler().remove_OnInfoHandler(new OnBuildInfo(BuildReportingHandler_OnInfoHandler));
			if ((int)builder.get_ProcessResult() == 2)
			{
				SetText((Control)(object)labelText, "Canceled!");
			}
			else
			{
				BuildLogger obj = buildLogger;
				string[] obj2 = new string[5]
				{
					"Finished building ",
					builder.get_ActiveProject().get_Name(),
					" - ",
					null,
					null
				};
				PipelineProcessResult processResult = builder.get_ProcessResult();
				obj2[3] = ((object)(PipelineProcessResult)(ref processResult)).ToString();
				obj2[4] = "!";
				obj.AddInfoText(string.Concat(obj2));
				SetText((Control)(object)labelText, "Finished!");
			}
			SetFullProgress();
		}

		private void BuildContexts()
		{
			contexts = new ProcessTrackContext[5]
			{
				new ProcessTrackContext((SlowTask)10, (SlowTask)10, stepItemClean),
				new ProcessTrackContext((SlowTask)0, (SlowTask)0, stepItemPreprocess),
				new ProcessTrackContext((SlowTask)1, (SlowTask)2, stepItemImport),
				new ProcessTrackContext((SlowTask)3, (SlowTask)3, stepItemComposeAndCode),
				new ProcessTrackContext((SlowTask)6, (SlowTask)6, stepItemBuild)
			};
		}

		private void ProgressTracker_TaskStarted(object sender, TaskDescription<SlowTask> desc)
		{
			//IL_0002: Unknown result type (might be due to invalid IL or missing references)
			//IL_0003: Unknown result type (might be due to invalid IL or missing references)
			//IL_001c: Unknown result type (might be due to invalid IL or missing references)
			//IL_0023: Unknown result type (might be due to invalid IL or missing references)
			//IL_00c6: Unknown result type (might be due to invalid IL or missing references)
			//IL_00cb: Unknown result type (might be due to invalid IL or missing references)
			//IL_00cd: Unknown result type (might be due to invalid IL or missing references)
			//IL_00cf: Unknown result type (might be due to invalid IL or missing references)
			//IL_00d1: Unknown result type (might be due to invalid IL or missing references)
			//IL_0104: Expected I4, but got Unknown
			currentTaskDesc = desc;
			for (int i = 0; i < contexts.Length; i++)
			{
				if (contexts[i].processStart == desc.get_Task())
				{
					currentContextIdx = i;
					currentStepItem = contexts[i].stepItem;
					currentStepItem.set_Value(0);
					for (int j = 0; j < i; j++)
					{
						StepItem stepItem = contexts[j].stepItem;
						int num;
						contexts[j].stepItem.set_Maximum(num = 100);
						int num2;
						stepItem.set_Value(num2 = num);
						int num3 = num2;
					}
					break;
				}
			}
			SlowTask val = desc.get_Task();
			SlowTask val2 = val;
			switch ((int)val2)
			{
			case 0:
				SetText((Control)(object)labelText, "Preprocessing...");
				currentStepItem = stepItemPreprocess;
				currentStepItem.set_Value(10);
				break;
			case 1:
			{
				SetText((Control)(object)labelText, "Importing...");
				StepItem obj6 = currentStepItem;
				obj6.set_Value(obj6.get_Value() + 10);
				break;
			}
			case 2:
			{
				SetText((Control)(object)labelText, "Atlassing...");
				StepItem obj5 = currentStepItem;
				obj5.set_Value(obj5.get_Value() + 10);
				break;
			}
			case 7:
			{
				SetText((Control)(object)labelText, "Postprocessing...");
				StepItem obj4 = currentStepItem;
				obj4.set_Value(obj4.get_Value() + 10);
				break;
			}
			case 4:
				SetText((Control)(object)labelText, "Ordering...");
				break;
			case 10:
			{
				SetText((Control)(object)labelText, "Cleaning solution...");
				StepItem obj3 = currentStepItem;
				obj3.set_Value(obj3.get_Value() + 10);
				break;
			}
			case 8:
				SetText((Control)(object)labelText, "Compositing asset ...");
				break;
			case 9:
				SetText((Control)(object)labelText, "Coding asset ...");
				break;
			case 3:
				SetText((Control)(object)labelText, "Compositing and coding...");
				break;
			case 6:
				SetText((Control)(object)labelText, "Building GTS...");
				break;
			case 5:
			{
				SetText((Control)(object)labelText, "Preparing...");
				StepItem obj2 = currentStepItem;
				obj2.set_Value(obj2.get_Value() + 10);
				break;
			}
			default:
			{
				SetText((Control)(object)labelText, string.Empty);
				StepItem obj = currentStepItem;
				obj.set_Value(obj.get_Value() + 10);
				break;
			}
			}
			if (Canceled)
			{
				SetText((Control)(object)labelText, "Canceling...");
			}
		}

		private void ProgressTracker_TaskFinished(object sender, TaskDescription<SlowTask> desc)
		{
			//IL_0003: Unknown result type (might be due to invalid IL or missing references)
			//IL_0009: Invalid comparison between Unknown and I4
			if ((int)desc.get_Task() == 6)
			{
				stepItemBuild.set_Value(stepItemBuild.get_Maximum());
			}
			taskBarProgressMonitor.StepTask();
		}

		private void ProgressTracker_AssetStarted(object sender, Asset a, int assetIndex, int assetCount)
		{
			currentAsset = a;
			this.assetIndex = assetIndex;
			this.assetCount = assetCount;
		}

		private void ProgressTracker_ProgressTick(object sender, long min, long max, long value)
		{
			//IL_0025: Unknown result type (might be due to invalid IL or missing references)
			//IL_002a: Unknown result type (might be due to invalid IL or missing references)
			//IL_002c: Unknown result type (might be due to invalid IL or missing references)
			//IL_002e: Unknown result type (might be due to invalid IL or missing references)
			//IL_0030: Unknown result type (might be due to invalid IL or missing references)
			//IL_0033: Invalid comparison between Unknown and I4
			//IL_003a: Unknown result type (might be due to invalid IL or missing references)
			//IL_003e: Invalid comparison between Unknown and I4
			int num = 1000;
			string text = string.Empty;
			if (Canceled)
			{
				text = "Canceling after remaining process...\n";
			}
			SlowTask val = currentTaskDesc.get_Task();
			SlowTask val2 = val;
			if ((int)val2 != 8)
			{
				if ((int)val2 == 9)
				{
					SetText((Control)(object)labelText, string.Format(text + "Processing stacked texture {0} out of {1}: coding tile {2} out of {3} ", assetIndex + 1, assetCount, (min + value < max - min) ? (min + value) : (max - min), max - min));
					float num2 = (float)value / (float)(max - min);
					long num3 = (num - 1) / 2 + (long)(num2 * (float)(num - 1) / 2f);
					min = 1L;
					max = num * assetCount;
					value = num * assetIndex + num3;
				}
			}
			else
			{
				SetText((Control)(object)labelText, string.Format(text + "Processing stacked texture {0} out of {1}: compositing", new object[2]
				{
					(min + value < max - min) ? (min + value) : (max - min),
					max - min
				}));
				min = 1L;
				max = num * assetCount;
				value = num * assetIndex + num / 10;
			}
			long value2 = ((value - 1 < min) ? min : (value - 1));
			SetCurrentProgress(min, max, value2);
		}

		private void builder_DoWork(object sender, DoWorkEventArgs e)
		{
			//IL_0036: Unknown result type (might be due to invalid IL or missing references)
			//IL_003b: Unknown result type (might be due to invalid IL or missing references)
			//IL_003c: Unknown result type (might be due to invalid IL or missing references)
			//IL_003d: Unknown result type (might be due to invalid IL or missing references)
			//IL_003e: Unknown result type (might be due to invalid IL or missing references)
			//IL_0058: Expected I4, but got Unknown
			if (projectIds == null)
			{
				projectIds = model.SolutionBuilder.get_ActiveSolution().get_Projects().Keys.ToArray();
			}
			Task val = task;
			Task val2 = val;
			switch ((int)val2)
			{
			case 0:
				BuildProjects();
				break;
			case 2:
				CleanProjects();
				break;
			case 1:
				RebuildProjects();
				break;
			case 4:
				RepageProjects();
				break;
			}
			building = false;
			EnableCloseButton(enable: true);
			if (!Canceled)
			{
				buildLogger.AddLogFinisher();
			}
			else
			{
				buildLogger.AddLogFinishCanceling();
			}
			if (CloseOnFinished && (!buildLogger.ContainsErrors() || (ForceCloseOnFinished && buildLogger.ContainsAtlassingErrors())))
			{
				((Control)this).BeginInvoke((Delegate)(MethodInvoker)delegate
				{
					((Form)this).Close();
				});
			}
		}

		public void EnableCloseButton(bool enable)
		{
			if (buttonClose.InvokeRequired)
			{
				buttonClose.Invoke((Action)delegate
				{
					EnableCloseButton(enable);
				});
			}
			else
			{
				buttonClose.Enabled = enable;
				buttonCancel.Enabled = !enable;
			}
		}

		private void BuildReportingHandler_OnInfoHandler(ProjectBuilder source, BuildProcess processId, BuildIssue buildIssue)
		{
			//IL_0016: Unknown result type (might be due to invalid IL or missing references)
			infos++;
			buildLogger.AddItem(BuildErrorType.Info, processId, buildIssue);
		}

		private void BuildReportingHandler_OnWarningHandler(ProjectBuilder source, BuildProcess processId, BuildIssue buildIssue)
		{
			//IL_0016: Unknown result type (might be due to invalid IL or missing references)
			warnings++;
			buildLogger.AddItem(BuildErrorType.Warning, processId, buildIssue);
		}

		private ErrorAction BuildReportingHandler_OnErrorHandler(ProjectBuilder source, BuildProcess processId, BuildIssue buildIssue)
		{
			//IL_0016: Unknown result type (might be due to invalid IL or missing references)
			//IL_001f: Unknown result type (might be due to invalid IL or missing references)
			//IL_0022: Unknown result type (might be due to invalid IL or missing references)
			errors++;
			buildLogger.AddItem(BuildErrorType.Error, processId, buildIssue);
			return (ErrorAction)1;
		}

		private void BuildReportingHandler_OnFatalErrorHandler(ProjectBuilder source, BuildProcess processId, BuildIssue buildIssue)
		{
			//IL_0016: Unknown result type (might be due to invalid IL or missing references)
			errors++;
			buildLogger.AddItem(BuildErrorType.FatalError, processId, buildIssue);
		}

		private void SetCurrentProgress(long min, long max, long value)
		{
			if (((BaseItem)currentStepItem).get_InvokeRequired())
			{
				((BaseItem)currentStepItem).Invoke((Delegate)(Action)delegate
				{
					SetCurrentProgress(min, max, value);
				});
			}
			else
			{
				currentStepItem.set_Minimum((int)min);
				currentStepItem.set_Maximum((int)max);
				currentStepItem.set_Value((int)value);
			}
		}

		private void SetProgressForAll(long min, long max, long value)
		{
			//IL_0067: Unknown result type (might be due to invalid IL or missing references)
			//IL_006d: Expected O, but got Unknown
			if (((Control)(object)progressSteps1).InvokeRequired)
			{
				((Control)(object)progressSteps1).Invoke((Delegate)(Action)delegate
				{
					SetProgressForAll(min, max, value);
				});
				return;
			}
			foreach (StepItem item in (CollectionBase)(object)progressSteps1.get_Items())
			{
				StepItem val = item;
				val.set_Maximum((int)max);
				val.set_Value((int)value);
				val.set_Minimum((int)min);
			}
		}

		private void ResetProgress()
		{
			SetProgressForAll(0L, 100L, 0L);
		}

		private void SetFullProgress()
		{
			SetProgressForAll(0L, 100L, 100L);
		}

		private void SetFormTitle()
		{
			//IL_0002: Unknown result type (might be due to invalid IL or missing references)
			//IL_0007: Unknown result type (might be due to invalid IL or missing references)
			//IL_0008: Unknown result type (might be due to invalid IL or missing references)
			//IL_0009: Unknown result type (might be due to invalid IL or missing references)
			//IL_000a: Unknown result type (might be due to invalid IL or missing references)
			//IL_001c: Expected I4, but got Unknown
			Task val = task;
			Task val2 = val;
			switch ((int)val2)
			{
			case 1:
				((Control)(object)this).Text = "Rebuilding";
				break;
			case 0:
				((Control)(object)this).Text = "Building";
				break;
			case 2:
				((Control)(object)this).Text = "Cleaning";
				break;
			}
		}

		private void BuildForm_Load(object sender, EventArgs e)
		{
			//IL_0009: Unknown result type (might be due to invalid IL or missing references)
			//IL_000f: Invalid comparison between Unknown and I4
			//IL_0083: Unknown result type (might be due to invalid IL or missing references)
			//IL_0089: Invalid comparison between Unknown and I4
			SetFormTitle();
			if ((int)task == 2)
			{
				((BaseItem)stepItemPreprocess).set_Visible(false);
				((BaseItem)stepItemImport).set_Visible(false);
				((BaseItem)stepItemComposeAndCode).set_Visible(false);
				((BaseItem)stepItemBuild).set_Visible(false);
				stepItemClean.set_MinimumSize(new Size(((Control)(object)progressSteps1).Size.Width, ((BaseItem)stepItemClean).get_Size().Height));
			}
			if ((int)task == 0)
			{
				((BaseItem)stepItemClean).set_Visible(false);
			}
			BackgroundWorker backgroundWorker = new BackgroundWorker();
			backgroundWorker.DoWork += builder_DoWork;
			backgroundWorker.RunWorkerAsync();
		}

		private void BuildForm_FormClosing(object sender, FormClosingEventArgs e)
		{
			if (building)
			{
				MessageBox.Show("You cannot exit during a build. Please wait until the build is completed or cancel the build.", "Building", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
				e.Cancel = true;
			}
		}

		private void buttonClose_Click(object sender, EventArgs e)
		{
			((Form)this).Close();
		}

		private void buttonCancel_Click(object sender, EventArgs e)
		{
			Canceled = true;
			CancelSolution();
			SetText((Control)(object)labelText, "Canceling after remaining process...\n" + ((Control)(object)labelText).Text);
			buildLogger.AddInfoText("Build Canceled.");
			buttonCancel.Enabled = false;
		}

		private void BuildForm_FormClosed(object sender, FormClosedEventArgs e)
		{
			taskBarProgressMonitor.Stop();
		}

		protected override void Dispose(bool disposing)
		{
			if (disposing && components != null)
			{
				components.Dispose();
			}
			((OfficeForm)this).Dispose(disposing);
		}

		private void InitializeComponent()
		{
			//IL_0002: Unknown result type (might be due to invalid IL or missing references)
			//IL_000c: Expected O, but got Unknown
			//IL_000d: Unknown result type (might be due to invalid IL or missing references)
			//IL_0017: Expected O, but got Unknown
			//IL_0018: Unknown result type (might be due to invalid IL or missing references)
			//IL_0022: Expected O, but got Unknown
			//IL_0023: Unknown result type (might be due to invalid IL or missing references)
			//IL_002d: Expected O, but got Unknown
			//IL_002e: Unknown result type (might be due to invalid IL or missing references)
			//IL_0038: Expected O, but got Unknown
			//IL_0039: Unknown result type (might be due to invalid IL or missing references)
			//IL_0043: Expected O, but got Unknown
			//IL_0044: Unknown result type (might be due to invalid IL or missing references)
			//IL_004e: Expected O, but got Unknown
			//IL_004f: Unknown result type (might be due to invalid IL or missing references)
			//IL_0059: Expected O, but got Unknown
			progressSteps1 = new ProgressSteps();
			stepItemClean = new StepItem();
			stepItemPreprocess = new StepItem();
			stepItemImport = new StepItem();
			stepItemComposeAndCode = new StepItem();
			stepItemBuild = new StepItem();
			labelText = new LabelX();
			labelProject = new LabelX();
			buttonClose = new Button();
			buildLoggerList = new BuildLoggerList();
			buttonCancel = new Button();
			((Control)this).SuspendLayout();
			((ItemControl)progressSteps1).get_BackgroundStyle().set_Class("ProgressSteps");
			((ItemControl)progressSteps1).get_BackgroundStyle().set_CornerType((eCornerType)1);
			((ItemControl)progressSteps1).set_ContainerControlProcessDialogKey(true);
			progressSteps1.get_Items().AddRange((BaseItem[])(object)new BaseItem[5]
			{
				(BaseItem)stepItemClean,
				(BaseItem)stepItemPreprocess,
				(BaseItem)stepItemImport,
				(BaseItem)stepItemComposeAndCode,
				(BaseItem)stepItemBuild
			});
			progressSteps1.set_LicenseKey("F962CEC7-CD8F-4911-A9E9-CAB39962FC1F");
			((Control)(object)progressSteps1).Location = new Point(12, 75);
			((Control)(object)progressSteps1).Name = "progressSteps1";
			((Control)(object)progressSteps1).Size = new Size(800, 44);
			((Control)(object)progressSteps1).TabIndex = 9;
			stepItemClean.set_HotTracking(false);
			stepItemClean.set_MinimumSize(new Size(100, 30));
			((BaseItem)stepItemClean).set_Name("stepItemClean");
			stepItemClean.set_SymbolSize(13f);
			((BaseItem)stepItemClean).set_Text("Cleaning");
			stepItemClean.set_TextAlignment((eButtonTextAlignment)1);
			stepItemPreprocess.set_HotTracking(false);
			stepItemPreprocess.set_MinimumSize(new Size(120, 30));
			((BaseItem)stepItemPreprocess).set_Name("stepItemPreprocess");
			stepItemPreprocess.set_SymbolSize(13f);
			((BaseItem)stepItemPreprocess).set_Text("Preprocessing");
			stepItemPreprocess.set_TextAlignment((eButtonTextAlignment)1);
			stepItemImport.set_HotTracking(false);
			stepItemImport.set_MinimumSize(new Size(140, 30));
			((BaseItem)stepItemImport).set_Name("stepItemImport");
			stepItemImport.set_SymbolSize(13f);
			((BaseItem)stepItemImport).set_Text("Importing");
			stepItemImport.set_TextAlignment((eButtonTextAlignment)1);
			stepItemComposeAndCode.set_HotTracking(false);
			stepItemComposeAndCode.set_MinimumSize(new Size(300, 30));
			((BaseItem)stepItemComposeAndCode).set_Name("stepItemComposeAndCode");
			((BaseItem)stepItemComposeAndCode).set_Stretch(true);
			stepItemComposeAndCode.set_SymbolSize(13f);
			((BaseItem)stepItemComposeAndCode).set_Text("Compositing and Coding GTex Files");
			stepItemComposeAndCode.set_TextAlignment((eButtonTextAlignment)1);
			stepItemBuild.set_HotTracking(false);
			stepItemBuild.set_MinimumSize(new Size(140, 30));
			((BaseItem)stepItemBuild).set_Name("stepItemBuild");
			stepItemBuild.set_SymbolSize(13f);
			((BaseItem)stepItemBuild).set_Text("Building GTS");
			stepItemBuild.set_TextAlignment((eButtonTextAlignment)1);
			((BaseItemControl)labelText).get_BackgroundStyle().set_CornerType((eCornerType)1);
			((Control)(object)labelText).Location = new Point(12, 109);
			((Control)(object)labelText).Name = "labelText";
			((Control)(object)labelText).Size = new Size(800, 55);
			((Control)(object)labelText).TabIndex = 10;
			((Control)(object)labelText).Text = "Compositing 1 stacked texture out of 20";
			((BaseItemControl)labelProject).get_BackgroundStyle().set_CornerType((eCornerType)1);
			((Control)(object)labelProject).Location = new Point(12, 30);
			((Control)(object)labelProject).Name = "labelProject";
			((Control)(object)labelProject).Size = new Size(800, 28);
			((Control)(object)labelProject).TabIndex = 12;
			((Control)(object)labelProject).Text = "Project 1 out of 3";
			buttonClose.Anchor = AnchorStyles.Bottom | AnchorStyles.Right;
			buttonClose.Location = new Point(737, 337);
			buttonClose.Name = "buttonClose";
			buttonClose.Size = new Size(75, 23);
			buttonClose.TabIndex = 14;
			buttonClose.Text = "Close";
			buttonClose.UseVisualStyleBackColor = true;
			buttonClose.Click += buttonClose_Click;
			buildLoggerList.Anchor = AnchorStyles.Bottom | AnchorStyles.Left | AnchorStyles.Right;
			buildLoggerList.Location = new Point(12, 175);
			buildLoggerList.Name = "buildLoggerList";
			buildLoggerList.Size = new Size(800, 156);
			buildLoggerList.TabIndex = 13;
			buttonCancel.Anchor = AnchorStyles.Bottom | AnchorStyles.Right;
			buttonCancel.Location = new Point(656, 337);
			buttonCancel.Name = "buttonCancel";
			buttonCancel.Size = new Size(75, 23);
			buttonCancel.TabIndex = 15;
			buttonCancel.Text = "Cancel";
			buttonCancel.UseVisualStyleBackColor = true;
			buttonCancel.Click += buttonCancel_Click;
			((ContainerControl)this).AutoScaleDimensions = new SizeF(6f, 13f);
			((ContainerControl)this).AutoScaleMode = AutoScaleMode.Font;
			((Form)this).ClientSize = new Size(824, 372);
			((Control)this).Controls.Add(buttonCancel);
			((Control)this).Controls.Add(buttonClose);
			((Control)this).Controls.Add(buildLoggerList);
			((Control)this).Controls.Add((Control)(object)labelProject);
			((Control)this).Controls.Add((Control)(object)labelText);
			((Control)this).Controls.Add((Control)(object)progressSteps1);
			((Control)(object)this).DoubleBuffered = true;
			((Control)(object)this).Font = new Font("Segoe UI", 8.25f, FontStyle.Regular, GraphicsUnit.Point, 0);
			((Form)this).FormBorderStyle = FormBorderStyle.FixedDialog;
			((Form)this).MaximizeBox = false;
			((Form)this).MinimizeBox = false;
			((Control)this).Name = "BuildForm";
			((Form)this).ShowIcon = false;
			((Form)this).ShowInTaskbar = false;
			((Form)this).StartPosition = FormStartPosition.CenterParent;
			((Control)(object)this).Text = "Building";
			((Form)this).FormClosing += BuildForm_FormClosing;
			((Form)this).FormClosed += BuildForm_FormClosed;
			((Form)this).Load += BuildForm_Load;
			((Control)this).ResumeLayout(performLayout: false);
		}
	}
	public class BuildLogger
	{
		private class BuildLogContext
		{
			public int lastMessageIdx;

			public int fatalerrors;

			public int errors;

			public int warnings;

			public int infos;

			public int atlaserrors;
		}

		private BuildLoggerList list;

		private BuildLogContext context;

		public BuildLogger(BuildLoggerList list)
		{
			context = new BuildLogContext();
			this.list = list;
			Clear();
		}

		public bool ContainsErrors()
		{
			if (context.errors == 0)
			{
				return context.fatalerrors != 0;
			}
			return true;
		}

		public bool ContainsAtlassingErrors()
		{
			return context.atlaserrors != 0;
		}

		public void AddItem(BuildErrorType messageType, BuildProcess processId, BuildIssue buildIssue)
		{
			//IL_00b2: Unknown result type (might be due to invalid IL or missing references)
			context.fatalerrors += ((messageType == BuildErrorType.FatalError) ? 1 : 0);
			context.errors += ((messageType == BuildErrorType.Error) ? 1 : 0);
			context.warnings += ((messageType == BuildErrorType.Warning) ? 1 : 0);
			context.infos += ((messageType == BuildErrorType.Info) ? 1 : 0);
			context.lastMessageIdx++;
			context.atlaserrors += (((messageType == BuildErrorType.FatalError || messageType == BuildErrorType.Error) && buildIssue is AtlasIssue) ? 1 : 0);
			list.AddItem(context.lastMessageIdx, messageType, processId, buildIssue);
		}

		public void AddInfoText(string message)
		{
			context.lastMessageIdx++;
			list.AddInfoText(context.lastMessageIdx, message);
		}

		public void AddErrorText(string message)
		{
			context.lastMessageIdx++;
			list.AddError(context.lastMessageIdx, message);
		}

		public void AddLogFinisher(string task = "building")
		{
			string message = string.Format("Finished " + task + " (Errors: {0}, Warnings: {1})", new object[2]
			{
				context.errors + context.fatalerrors,
				context.warnings
			});
			AddInfoText(message);
		}

		public void AddLogFinishCanceling()
		{
			string message = string.Format("Build canceled by user (Errors: {0}, Warnings: {1})", new object[2]
			{
				context.errors + context.fatalerrors,
				context.warnings
			});
			AddInfoText(message);
		}

		public void AddLogStarter()
		{
			string message = "Building...";
			AddInfoText(message);
		}

		public void Clear()
		{
			list.Clear();
		}
	}
	public class BuildLoggerList : UserControl
	{
		private IContainer components;

		private ListViewEx listView;

		private ColumnHeader columnHeaderSpacer;

		private ColumnHeader columnHeaderIndex;

		private ColumnHeader columnHeaderDescription;

		private ContextMenuStrip contextMenuStripCopyToClipBoard;

		private ToolStripMenuItem copyToClipboardToolStripMenuItem;

		private ImageList imageList1;

		public BuildLoggerList()
		{
			InitializeComponent();
		}

		public void AddItem(int messageIndex, BuildErrorType messageType, BuildProcess processId, BuildIssue buildIssue)
		{
			//IL_001c: Unknown result type (might be due to invalid IL or missing references)
			//IL_001d: Unknown result type (might be due to invalid IL or missing references)
			if (((Control)(object)listView).InvokeRequired)
			{
				((Control)(object)listView).Invoke((Delegate)(Action)delegate
				{
					//IL_0014: Unknown result type (might be due to invalid IL or missing references)
					AddItem(messageIndex, messageType, processId, buildIssue);
				});
				return;
			}
			ListViewItem listViewItem = new ListViewItem();
			listViewItem.Text = "";
			listViewItem.ImageIndex = (int)messageType;
			int num = messageIndex;
			listViewItem.SubItems.Add(num.ToString());
			listViewItem.SubItems.Add(buildIssue.get_InnerMessage());
			listViewItem.ToolTipText = buildIssue.get_InnerMessage();
			((ListView)(object)listView).Items.Add(listViewItem);
			columnHeaderDescription.AutoResize(ColumnHeaderAutoResizeStyle.ColumnContent);
			((ListView)(object)listView).EnsureVisible(listViewItem.Index);
		}

		public void AddError(int messageIndex, string message)
		{
			if (((Control)(object)listView).InvokeRequired)
			{
				((Control)(object)listView).Invoke((Delegate)(Action)delegate
				{
					AddError(messageIndex, message);
				});
				return;
			}
			ListViewItem listViewItem = new ListViewItem();
			listViewItem.Text = "";
			listViewItem.ImageIndex = 1;
			int num = messageIndex;
			listViewItem.SubItems.Add(num.ToString());
			listViewItem.SubItems.Add(message);
			((ListView)(object)listView).Items.Add(listViewItem);
			columnHeaderDescription.AutoResize(ColumnHeaderAutoResizeStyle.ColumnContent);
			((ListView)(object)listView).EnsureVisible(listViewItem.Index);
		}

		public void AddInfoText(int messageIndex, string message)
		{
			if (((Control)(object)listView).InvokeRequired)
			{
				((Control)(object)listView).Invoke((Delegate)(Action)delegate
				{
					AddInfoText(messageIndex, message);
				});
				return;
			}
			ListViewItem listViewItem = new ListViewItem();
			listViewItem.Text = "";
			listViewItem.ImageIndex = 3;
			int num = messageIndex;
			listViewItem.SubItems.Add(num.ToString());
			listViewItem.SubItems.Add(message);
			((ListView)(object)listView).Items.Add(listViewItem);
			columnHeaderDescription.AutoResize(ColumnHeaderAutoResizeStyle.ColumnContent);
			((ListView)(object)listView).EnsureVisible(listViewItem.Index);
		}

		public void Clear()
		{
			if (((Control)(object)listView).InvokeRequired)
			{
				((Control)(object)listView).Invoke((Delegate)(Action)delegate
				{
					Clear();
				});
			}
			else
			{
				columnHeaderDescription.AutoResize(ColumnHeaderAutoResizeStyle.HeaderSize);
				((ListView)(object)listView).Items.Clear();
			}
		}

		public string GetText()
		{
			string text = string.Empty;
			for (int i = 0; ((ListView)(object)listView).Items.Count > i; i++)
			{
				text += ((ListView)(object)listView).Items[i].SubItems[1].Text;
				text += "\r\t";
				text += ((ListView)(object)listView).Items[i].SubItems[2].Text;
				text += "\r\n";
			}
			return text.Substring(0, text.Length - 2);
		}

		private void copyToClipboardToolStripMenuItem_Click(object sender, EventArgs e)
		{
			ClipboardHelper.CopyText(GetText());
		}

		private void listView_MouseUp(object sender, MouseEventArgs e)
		{
			if (e.Button == MouseButtons.Right)
			{
				contextMenuStripCopyToClipBoard.Show(PointToScreen(e.Location));
			}
		}

		protected override void Dispose(bool disposing)
		{
			if (disposing && components != null)
			{
				components.Dispose();
			}
			base.Dispose(disposing);
		}

		private void InitializeComponent()
		{
			//IL_0042: Unknown result type (might be due to invalid IL or missing references)
			//IL_004c: Expected O, but got Unknown
			this.components = new System.ComponentModel.Container();
			System.Windows.Forms.ListViewItem listViewItem = new System.Windows.Forms.ListViewItem(new string[3] { "", "1", "Image 'world.topo.bathy.200412.3x21600x21600.B0.png' could not be imported..." }, 0);
			System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(GrBuildStudio.BuildLoggerList));
			this.listView = new ListViewEx();
			this.columnHeaderSpacer = new System.Windows.Forms.ColumnHeader();
			this.columnHeaderIndex = new System.Windows.Forms.ColumnHeader();
			this.columnHeaderDescription = new System.Windows.Forms.ColumnHeader();
			this.imageList1 = new System.Windows.Forms.ImageList(this.components);
			this.contextMenuStripCopyToClipBoard = new System.Windows.Forms.ContextMenuStrip(this.components);
			this.copyToClipboardToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
			this.contextMenuStripCopyToClipBoard.SuspendLayout();
			base.SuspendLayout();
			((System.Windows.Forms.Control)(object)this.listView).BackColor = System.Drawing.Color.White;
			this.listView.get_Border().set_Class("ListViewBorder");
			this.listView.get_Border().set_CornerType((eCornerType)1);
			((System.Windows.Forms.ListView)(object)this.listView).Columns.AddRange(new System.Windows.Forms.ColumnHeader[3] { this.columnHeaderSpacer, this.columnHeaderIndex, this.columnHeaderDescription });
			this.listView.set_DisabledBackColor(System.Drawing.Color.Empty);
			((System.Windows.Forms.Control)(object)this.listView).Dock = System.Windows.Forms.DockStyle.Fill;
			((System.Windows.Forms.Control)(object)this.listView).ForeColor = System.Drawing.Color.Black;
			((System.Windows.Forms.ListView)(object)this.listView).FullRowSelect = true;
			((System.Windows.Forms.ListView)(object)this.listView).Items.AddRange(new System.Windows.Forms.ListViewItem[1] { listViewItem });
			((System.Windows.Forms.Control)(object)this.listView).Location = new System.Drawing.Point(0, 0);
			((System.Windows.Forms.Control)(object)this.listView).Name = "listView";
			((System.Windows.Forms.ListView)(object)this.listView).ShowItemToolTips = true;
			((System.Windows.Forms.Control)(object)this.listView).Size = new System.Drawing.Size(665, 168);
			((System.Windows.Forms.ListView)(object)this.listView).SmallImageList = this.imageList1;
			((System.Windows.Forms.Control)(object)this.listView).TabIndex = 1;
			((System.Windows.Forms.ListView)(object)this.listView).UseCompatibleStateImageBehavior = false;
			((System.Windows.Forms.ListView)(object)this.listView).View = System.Windows.Forms.View.Details;
			((System.Windows.Forms.Control)(object)this.listView).MouseUp += new System.Windows.Forms.MouseEventHandler(listView_MouseUp);
			this.columnHeaderSpacer.Text = "";
			this.columnHeaderSpacer.Width = 25;
			this.columnHeaderIndex.Text = "";
			this.columnHeaderIndex.Width = 28;
			this.columnHeaderDescription.Text = "Description";
			this.columnHeaderDescription.Width = 533;
			this.imageList1.ImageStream = (System.Windows.Forms.ImageListStreamer)resources.GetObject("imageList1.ImageStream");
			this.imageList1.TransparentColor = System.Drawing.Color.Transparent;
			this.imageList1.Images.SetKeyName(0, "fatalerror.png");
			this.imageList1.Images.SetKeyName(1, "error.png");
			this.imageList1.Images.SetKeyName(2, "warning.png");
			this.imageList1.Images.SetKeyName(3, "info.png");
			this.contextMenuStripCopyToClipBoard.Items.AddRange(new System.Windows.Forms.ToolStripItem[1] { this.copyToClipboardToolStripMenuItem });
			this.contextMenuStripCopyToClipBoard.Name = "contextMenuStripCopyToClipBoard";
			this.contextMenuStripCopyToClipBoard.Size = new System.Drawing.Size(172, 26);
			this.copyToClipboardToolStripMenuItem.Name = "copyToClipboardToolStripMenuItem";
			this.copyToClipboardToolStripMenuItem.Size = new System.Drawing.Size(171, 22);
			this.copyToClipboardToolStripMenuItem.Text = "Copy to Clipboard";
			this.copyToClipboardToolStripMenuItem.Click += new System.EventHandler(copyToClipboardToolStripMenuItem_Click);
			base.AutoScaleDimensions = new System.Drawing.SizeF(6f, 13f);
			base.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;
			base.Controls.Add((System.Windows.Forms.Control)(object)this.listView);
			base.Name = "BuildLoggerList";
			base.Size = new System.Drawing.Size(665, 168);
			this.contextMenuStripCopyToClipBoard.ResumeLayout(false);
			base.ResumeLayout(false);
		}
	}
	public class BuildLoggerReporter
	{
		private BuildLogger buildLogger;

		private ProjectBuilder builder;

		private BuildLoggerReportForm form;

		private FormMode formMode;

		public int ErrorCount { get; private set; }

		public int WarningCount { get; private set; }

		public int InfoCount { get; private set; }

		public bool HasErrors => ErrorCount > 0;

		public bool HasWarnings => WarningCount > 0;

		public bool HasInfo => InfoCount > 0;

		public bool HasSomethingToReport
		{
			get
			{
				if (ErrorCount <= 0 && WarningCount <= 0)
				{
					return InfoCount > 0;
				}
				return true;
			}
		}

		public bool IsListening { get; private set; }

		public BuildLoggerReporter()
		{
			formMode = FormMode.ChildWindow;
			form = new BuildLoggerReportForm(formMode);
			buildLogger = new BuildLogger(form.BuildLoggerList);
			ErrorCount = 0;
			WarningCount = 0;
			InfoCount = 0;
		}

		public BuildLoggerReporter(FormMode formMode)
		{
			this.formMode = formMode;
			form = new BuildLoggerReportForm(formMode);
			buildLogger = new BuildLogger(form.BuildLoggerList);
			ErrorCount = 0;
			WarningCount = 0;
			InfoCount = 0;
		}

		public void StartListening(ProjectBuilder builder)
		{
			//IL_0015: Unknown result type (might be due to invalid IL or missing references)
			//IL_001f: Expected O, but got Unknown
			//IL_002d: Unknown result type (might be due to invalid IL or missing references)
			//IL_0037: Expected O, but got Unknown
			//IL_0045: Unknown result type (might be due to invalid IL or missing references)
			//IL_004f: Expected O, but got Unknown
			//IL_005d: Unknown result type (might be due to invalid IL or missing references)
			//IL_0067: Expected O, but got Unknown
			this.builder = builder;
			builder.get_BuildReportingHandler().add_OnErrorHandler(new OnBuildError(BuildReportingHandler_OnErrorHandler));
			builder.get_BuildReportingHandler().add_OnFatalErrorHandler(new OnBuildFatalError(BuildReportingHandler_OnFatalErrorHandler));
			builder.get_BuildReportingHandler().add_OnWarningHandler(new OnBuildWarning(BuildReportingHandler_OnWarningHandler));
			builder.get_BuildReportingHandler().add_OnInfoHandler(new OnBuildInfo(BuildReportingHandler_OnInfoHandler));
			IsListening = true;
		}

		public void AddFinishedMessage(string task = "importing")
		{
			if (task != null && task.Length != 0)
			{
				buildLogger.AddLogFinisher(task);
			}
		}

		public void StopListening()
		{
			//IL_0013: Unknown result type (might be due to invalid IL or missing references)
			//IL_001d: Expected O, but got Unknown
			//IL_0030: Unknown result type (might be due to invalid IL or missing references)
			//IL_003a: Expected O, but got Unknown
			//IL_004d: Unknown result type (might be due to invalid IL or missing references)
			//IL_0057: Expected O, but got Unknown
			//IL_006a: Unknown result type (might be due to invalid IL or missing references)
			//IL_0074: Expected O, but got Unknown
			builder.get_BuildReportingHandler().remove_OnErrorHandler(new OnBuildError(BuildReportingHandler_OnErrorHandler));
			builder.get_BuildReportingHandler().remove_OnFatalErrorHandler(new OnBuildFatalError(BuildReportingHandler_OnFatalErrorHandler));
			builder.get_BuildReportingHandler().remove_OnWarningHandler(new OnBuildWarning(BuildReportingHandler_OnWarningHandler));
			builder.get_BuildReportingHandler().remove_OnInfoHandler(new OnBuildInfo(BuildReportingHandler_OnInfoHandler));
			IsListening = false;
		}

		public void Reset()
		{
			if (IsListening)
			{
				StopListening();
			}
			form = new BuildLoggerReportForm(formMode);
			buildLogger = new BuildLogger(form.BuildLoggerList);
			ErrorCount = 0;
			WarningCount = 0;
			InfoCount = 0;
		}

		public void ShowDialog()
		{
			form.Mode = (HasErrors ? BuildLoggerReportForm.ReportMode.Error : (HasWarnings ? BuildLoggerReportForm.ReportMode.Warning : BuildLoggerReportForm.ReportMode.Info));
			((Form)(object)form).ShowDialog();
		}

		private void BuildReportingHandler_OnInfoHandler(ProjectBuilder source, BuildProcess processId, BuildIssue buildIssue)
		{
			//IL_0008: Unknown result type (might be due to invalid IL or missing references)
			buildLogger.AddItem(BuildErrorType.Info, processId, buildIssue);
			InfoCount++;
		}

		private void BuildReportingHandler_OnWarningHandler(ProjectBuilder source, BuildProcess processId, BuildIssue buildIssue)
		{
			//IL_0008: Unknown result type (might be due to invalid IL or missing references)
			buildLogger.AddItem(BuildErrorType.Warning, processId, buildIssue);
			WarningCount++;
		}

		private ErrorAction BuildReportingHandler_OnErrorHandler(ProjectBuilder source, BuildProcess processId, BuildIssue buildIssue)
		{
			//IL_0008: Unknown result type (might be due to invalid IL or missing references)
			//IL_0022: Unknown result type (might be due to invalid IL or missing references)
			//IL_0025: Unknown result type (might be due to invalid IL or missing references)
			buildLogger.AddItem(BuildErrorType.Error, processId, buildIssue);
			ErrorCount++;
			return (ErrorAction)0;
		}

		private void BuildReportingHandler_OnFatalErrorHandler(ProjectBuilder source, BuildProcess processId, BuildIssue buildIssue)
		{
			//IL_0008: Unknown result type (might be due to invalid IL or missing references)
			buildLogger.AddItem(BuildErrorType.FatalError, processId, buildIssue);
			ErrorCount++;
		}
	}
	public class BuildLoggerReportForm : OfficeForm
	{
		public enum ReportMode
		{
			Info,
			Warning,
			Error
		}

		private IContainer components;

		private BuildLoggerList buildLoggerList;

		private Button buttonClose;

		private LabelX labelBuildRequired;

		public string TaskDescription { get; set; }

		public ReportMode Mode { get; set; }

		public BuildLoggerList BuildLoggerList => buildLoggerList;

		private BuildLoggerReportForm()
		{
			InitializeComponent();
		}

		public BuildLoggerReportForm(FormMode formMode)
		{
			InitializeComponent();
			((Form)this).ShowInTaskbar = formMode == FormMode.Standalone;
		}

		private void BuildLoggerReportForm_Load(object sender, EventArgs e)
		{
			if (Mode == ReportMode.Error)
			{
				((Control)(object)labelBuildRequired).Text = "Errors or warnings occurred during import. Please inspect them.";
				labelBuildRequired.set_Image((Image)Resources.error);
			}
			else if (Mode == ReportMode.Warning)
			{
				((Control)(object)labelBuildRequired).Text = "Warnings occurred during import. Please inspect them.";
				labelBuildRequired.set_Image((Image)Resources.warning);
			}
			else if (Mode == ReportMode.Info)
			{
				((Control)(object)labelBuildRequired).Text = "Additional information messages were generated during import. Please inspect them.";
				labelBuildRequired.set_Image((Image)Resources.info);
			}
			else
			{
				((Control)(object)labelBuildRequired).Visible = false;
			}
		}

		protected override void Dispose(bool disposing)
		{
			if (disposing && components != null)
			{
				components.Dispose();
			}
			((OfficeForm)this).Dispose(disposing);
		}

		private void InitializeComponent()
		{
			//IL_0018: Unknown result type (might be due to invalid IL or missing references)
			//IL_0022: Expected O, but got Unknown
			buildLoggerList = new BuildLoggerList();
			buttonClose = new Button();
			labelBuildRequired = new LabelX();
			((Control)this).SuspendLayout();
			buildLoggerList.Anchor = AnchorStyles.Top | AnchorStyles.Bottom | AnchorStyles.Left | AnchorStyles.Right;
			buildLoggerList.Location = new Point(12, 57);
			buildLoggerList.Name = "buildLoggerList";
			buildLoggerList.Size = new Size(715, 299);
			buildLoggerList.TabIndex = 14;
			buttonClose.Anchor = AnchorStyles.Bottom | AnchorStyles.Right;
			buttonClose.DialogResult = DialogResult.OK;
			buttonClose.Location = new Point(652, 362);
			buttonClose.Name = "buttonClose";
			buttonClose.Size = new Size(75, 23);
			buttonClose.TabIndex = 15;
			buttonClose.Text = "Close";
			buttonClose.UseVisualStyleBackColor = true;
			((BaseItemControl)labelBuildRequired).get_BackgroundStyle().set_CornerType((eCornerType)1);
			labelBuildRequired.set_Image((Image)Resources.warning);
			((Control)(object)labelBuildRequired).Location = new Point(12, 19);
			((Control)(object)labelBuildRequired).Name = "labelBuildRequired";
			((Control)(object)labelBuildRequired).Size = new Size(715, 23);
			((Control)(object)labelBuildRequired).TabIndex = 25;
			((Control)(object)labelBuildRequired).Text = "Errors or warnings occurred. Please inspect them.";
			((Form)this).AcceptButton = buttonClose;
			((Form)this).ClientSize = new Size(739, 397);
			((Control)this).Controls.Add((Control)(object)labelBuildRequired);
			((Control)this).Controls.Add(buttonClose);
			((Control)this).Controls.Add(buildLoggerList);
			((Control)(object)this).DoubleBuffered = true;
			((Form)this).MinimizeBox = false;
			((Control)this).Name = "BuildLoggerReportForm";
			((Form)this).ShowIcon = false;
			((Form)this).ShowInTaskbar = false;
			((Form)this).StartPosition = FormStartPosition.CenterParent;
			((Control)(object)this).Text = "Operation Summary";
			((Form)this).Load += BuildLoggerReportForm_Load;
			((Control)this).ResumeLayout(performLayout: false);
		}
	}
	public class BuildSummaryDetails : UserControl
	{
		private ProjectBuilder builder;

		private IContainer components;

		private TextBox textBoxFiles;

		private TextBox textBoxPath;

		private Label label20;

		private Label label17;

		private Button buttonOpen;

		private Button buttonOpenGTS;

		private Label label16;

		private LabelX labelBuildRequired;

		private Label labelSize;

		private ToolTip ToolTip;

		public BuildSummaryDetails()
		{
			InitializeComponent();
		}

		public void SetProject(ProjectBuilder builder)
		{
			this.builder = builder;
			Reload();
		}

		public void Reload()
		{
			LoadForm();
		}

		private void LoadForm()
		{
			if (((Control)(object)labelBuildRequired).InvokeRequired)
			{
				((Control)(object)labelBuildRequired).Invoke((Delegate)(Action)delegate
				{
					LoadForm();
				});
				return;
			}
			buttonOpen.Enabled = builder != null;
			buttonOpenGTS.Enabled = builder != null;
			if (builder == null || builder.get_ActiveProject() == null)
			{
				((Control)(object)labelBuildRequired).Visible = false;
				textBoxPath.Text = string.Empty;
				textBoxFiles.Text = string.Empty;
				labelSize.Text = string.Empty;
				return;
			}
			if (builder.get_BuildStateSummary() == null)
			{
				builder.QueryAssetBuildStates();
			}
			((Control)(object)labelBuildRequired).Visible = builder.get_BuildStateSummary().get_BuildRequired();
			Directory.SetCurrentDirectory(builder.GetProjectPath());
			string fullPath = Path.GetFullPath(builder.get_ActiveProject().get_BuildConfiguration().get_OutputDirectory());
			string outputFilename = builder.get_ActiveProject().get_BuildConfiguration().get_OutputFilename();
			string text = Path.Combine(fullPath, outputFilename);
			if (!File.Exists(text))
			{
				buttonOpenGTS.Enabled = false;
			}
			else
			{
				buttonOpenGTS.Enabled = true;
				buttonOpen.Enabled = true;
			}
			GtsInfo gtsInfo = default(GtsInfo);
			if (GTSBuilderTools.GetGtsInfo(text, ref gtsInfo) != 0)
			{
				textBoxFiles.Text = string.Empty;
				textBoxPath.Text = fullPath;
				labelSize.Text = string.Empty;
			}
			else
			{
				List<string> list = default(List<string>);
				if (!GTSBuilderTools.GetGTPFiles(text, ref list))
				{
					return;
				}
				long num = new FileInfo(text).Length;
				string text2 = builder.get_ActiveProject().get_BuildConfiguration().get_OutputFilename();
				foreach (string item in list)
				{
					try
					{
						num += new FileInfo(Path.Combine(fullPath, item)).Length;
						text2 = text2 + Environment.NewLine + item;
					}
					catch
					{
					}
				}
				textBoxFiles.Text = text2;
				textBoxPath.Text = fullPath;
				labelSize.Text = Various.FormatBytes(num);
			}
		}

		private void buttonOpen_Click(object sender, EventArgs e)
		{
			ShellTools.OpenGtsInExplorer(builder);
		}

		private void buttonOpenGTS_Click(object sender, EventArgs e)
		{
			try
			{
				ShellTools.OpenGTSInViewer(builder);
			}
			catch (Exception ex)
			{
				string text = "Could not open TileSetViewer application. Underlying error message: '" + ex.Message + "' Please make sure the Tools SDK was installed correctly.";
				((Logger)StudioLogger.Global).LogError(text);
			}
		}

		protected override void Dispose(bool disposing)
		{
			if (disposing && components != null)
			{
				components.Dispose();
			}
			base.Dispose(disposing);
		}

		private void InitializeComponent()
		{
			//IL_004f: Unknown result type (might be due to invalid IL or missing references)
			//IL_0059: Expected O, but got Unknown
			//IL_0108: Unknown result type (might be due to invalid IL or missing references)
			//IL_0112: Expected O, but got Unknown
			//IL_01b7: Unknown result type (might be due to invalid IL or missing references)
			//IL_01c1: Expected O, but got Unknown
			//IL_0551: Unknown result type (might be due to invalid IL or missing references)
			//IL_055b: Expected O, but got Unknown
			//IL_0594: Unknown result type (might be due to invalid IL or missing references)
			//IL_059e: Expected O, but got Unknown
			this.textBoxFiles = new System.Windows.Forms.TextBox();
			this.textBoxPath = new System.Windows.Forms.TextBox();
			this.label20 = new System.Windows.Forms.Label();
			this.label17 = new System.Windows.Forms.Label();
			this.buttonOpen = new System.Windows.Forms.Button();
			this.buttonOpenGTS = new System.Windows.Forms.Button();
			this.label16 = new System.Windows.Forms.Label();
			this.labelBuildRequired = new LabelX();
			this.labelSize = new System.Windows.Forms.Label();
			this.ToolTip = new GrBuildStudio.ToolTip();
			base.SuspendLayout();
			this.textBoxFiles.Anchor = System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Left | System.Windows.Forms.AnchorStyles.Right;
			this.textBoxFiles.Location = new System.Drawing.Point(91, 39);
			this.textBoxFiles.Multiline = true;
			this.textBoxFiles.Name = "textBoxFiles";
			this.textBoxFiles.ReadOnly = true;
			this.textBoxFiles.ScrollBars = System.Windows.Forms.ScrollBars.Both;
			this.textBoxFiles.Size = new System.Drawing.Size(168, 92);
			((SuperTooltip)this.ToolTip).SetSuperTooltip((System.ComponentModel.IComponent)this.textBoxFiles, new SuperTooltipInfo("Replace the resource tag in text", "", "TT_BUILDSUMMARY_OUTPUTFILES", (System.Drawing.Image)null, (System.Drawing.Image)null, (eTooltipColor)17));
			this.textBoxFiles.TabIndex = 21;
			this.textBoxFiles.Text = "Marble.gts\r\nMarble_0.gtp\r\nMarble_1.gtp\r\nMarble_2.gtp\r\nMarble_3.gtp\r\nMarble_4.gtp";
			this.textBoxFiles.WordWrap = false;
			this.textBoxPath.Anchor = System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Left | System.Windows.Forms.AnchorStyles.Right;
			this.textBoxPath.Location = new System.Drawing.Point(91, 13);
			this.textBoxPath.Name = "textBoxPath";
			this.textBoxPath.ReadOnly = true;
			this.textBoxPath.Size = new System.Drawing.Size(168, 20);
			((SuperTooltip)this.ToolTip).SetSuperTooltip((System.ComponentModel.IComponent)this.textBoxPath, new SuperTooltipInfo("Replace the resource tag in text", "", "TT_BUILDSUMMARY_OUTPUTPATH", (System.Drawing.Image)null, (System.Drawing.Image)null, (eTooltipColor)17));
			this.textBoxPath.TabIndex = 20;
			this.textBoxPath.Text = "E:\\Output\\";
			this.label20.AutoSize = true;
			this.label20.Location = new System.Drawing.Point(15, 37);
			this.label20.Name = "label20";
			this.label20.Size = new System.Drawing.Size(66, 13);
			this.label20.TabIndex = 19;
			this.label20.Text = "Output Files:";
			this.label17.Anchor = System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Left;
			this.label17.AutoSize = true;
			this.label17.Location = new System.Drawing.Point(17, 140);
			this.label17.Name = "label17";
			this.label17.Size = new System.Drawing.Size(30, 13);
			this.label17.TabIndex = 18;
			this.label17.Text = "Size:";
			this.buttonOpen.Anchor = System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Right;
			this.buttonOpen.Location = new System.Drawing.Point(265, 13);
			this.buttonOpen.Name = "buttonOpen";
			this.buttonOpen.Size = new System.Drawing.Size(75, 23);
			this.buttonOpen.TabIndex = 16;
			this.buttonOpen.Text = "Open...";
			this.buttonOpen.UseVisualStyleBackColor = true;
			this.buttonOpen.Click += new System.EventHandler(buttonOpen_Click);
			this.buttonOpenGTS.Anchor = System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Right;
			this.buttonOpenGTS.Location = new System.Drawing.Point(265, 108);
			this.buttonOpenGTS.Name = "buttonOpenGTS";
			this.buttonOpenGTS.Size = new System.Drawing.Size(75, 23);
			this.buttonOpenGTS.TabIndex = 17;
			this.buttonOpenGTS.Text = "Open GTS...";
			this.buttonOpenGTS.UseVisualStyleBackColor = true;
			this.buttonOpenGTS.Click += new System.EventHandler(buttonOpenGTS_Click);
			this.label16.AutoSize = true;
			this.label16.Location = new System.Drawing.Point(15, 16);
			this.label16.Name = "label16";
			this.label16.Size = new System.Drawing.Size(67, 13);
			this.label16.TabIndex = 14;
			this.label16.Text = "Output Path:";
			((System.Windows.Forms.Control)(object)this.labelBuildRequired).Anchor = System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Left;
			((System.Windows.Forms.Control)(object)this.labelBuildRequired).AutoSize = true;
			((BaseItemControl)this.labelBuildRequired).get_BackgroundStyle().set_CornerType((eCornerType)1);
			this.labelBuildRequired.set_Image((System.Drawing.Image)GrBuildStudio.Properties.Resources.warning);
			((System.Windows.Forms.Control)(object)this.labelBuildRequired).Location = new System.Drawing.Point(18, 163);
			((System.Windows.Forms.Control)(object)this.labelBuildRequired).Name = "labelBuildRequired";
			((System.Windows.Forms.Control)(object)this.labelBuildRequired).Size = new System.Drawing.Size(252, 20);
			((System.Windows.Forms.Control)(object)this.labelBuildRequired).TabIndex = 24;
			((System.Windows.Forms.Control)(object)this.labelBuildRequired).Text = "Project is newer than output file. Please Build...";
			this.labelSize.Anchor = System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Left | System.Windows.Forms.AnchorStyles.Right;
			this.labelSize.Location = new System.Drawing.Point(88, 140);
			this.labelSize.Name = "labelSize";
			this.labelSize.Size = new System.Drawing.Size(150, 13);
			((SuperTooltip)this.ToolTip).SetSuperTooltip((System.ComponentModel.IComponent)this.labelSize, new SuperTooltipInfo("Replace the resource tag in text", "", "TT_BUILDSUMMARY_SIZE", (System.Drawing.Image)null, (System.Drawing.Image)null, (eTooltipColor)17));
			this.labelSize.TabIndex = 25;
			this.labelSize.Text = "1024MB";
			((SuperTooltip)this.ToolTip).set_DefaultTooltipSettings(new SuperTooltipInfo("Replace the resource tag in text", "", "TT_NO_TOOLTIP", (System.Drawing.Image)null, (System.Drawing.Image)null, (eTooltipColor)17));
			((SuperTooltip)this.ToolTip).set_LicenseKey("F962CEC7-CD8F-4911-A9E9-CAB39962FC1F");
			base.AutoScaleDimensions = new System.Drawing.SizeF(6f, 13f);
			base.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;
			this.AutoSize = true;
			this.BackColor = System.Drawing.Color.Transparent;
			base.Controls.Add(this.labelSize);
			base.Controls.Add((System.Windows.Forms.Control)(object)this.labelBuildRequired);
			base.Controls.Add(this.textBoxFiles);
			base.Controls.Add(this.textBoxPath);
			base.Controls.Add(this.label20);
			base.Controls.Add(this.label17);
			base.Controls.Add(this.buttonOpen);
			base.Controls.Add(this.buttonOpenGTS);
			base.Controls.Add(this.label16);
			this.MinimumSize = new System.Drawing.Size(300, 150);
			base.Name = "BuildSummaryDetails";
			base.Size = new System.Drawing.Size(359, 195);
			base.ResumeLayout(false);
			base.PerformLayout();
		}
	}
	[ComImport]
	[Guid("77F10CF0-3DB5-4966-B520-B7C54FD35ED6")]
	[ClassInterface(ClassInterfaceType.None)]
	internal class CDestinationList
	{
		[MethodImpl(MethodImplOptions.InternalCall)]
		public extern CDestinationList();
	}
	[ComImport]
	[Guid("2D3468C1-36A7-43B6-AC24-D3F02FD9607A")]
	[ClassInterface(ClassInterfaceType.None)]
	internal class CEnumerableObjectCollection
	{
		[MethodImpl(MethodImplOptions.InternalCall)]
		public extern CEnumerableObjectCollection();
	}
	public class CleanForm : Office2007Form
	{
		private IContainer components;

		private Button NoButton;

		private Button YesButton;

		private CheckBoxX GTSCheckbox;

		private CheckBoxX GAssetsCheckBox;

		private CheckBoxX IntermediateCheckBox;

		private LabelX labelQuestion;

		public CleanOperationParameters CleanParameters { get; private set; }

		public CleanForm()
		{
			InitializeComponent();
		}

		private void YesButton_Click(object sender, EventArgs e)
		{
			//IL_0003: Unknown result type (might be due to invalid IL or missing references)
			//IL_0040: Unknown result type (might be due to invalid IL or missing references)
			CleanOperationParameters cleanParameters = default(CleanOperationParameters);
			cleanParameters.intermediates = IntermediateCheckBox.get_Checked();
			cleanParameters.tileSet = GTSCheckbox.get_Checked();
			cleanParameters.soups = GAssetsCheckBox.get_Checked();
			CleanParameters = cleanParameters;
		}

		protected override void Dispose(bool disposing)
		{
			if (disposing && components != null)
			{
				components.Dispose();
			}
			((OfficeForm)this).Dispose(disposing);
		}

		private void InitializeComponent()
		{
			//IL_0018: Unknown result type (might be due to invalid IL or missing references)
			//IL_0022: Expected O, but got Unknown
			//IL_0023: Unknown result type (might be due to invalid IL or missing references)
			//IL_002d: Expected O, but got Unknown
			//IL_002e: Unknown result type (might be due to invalid IL or missing references)
			//IL_0038: Expected O, but got Unknown
			//IL_0039: Unknown result type (might be due to invalid IL or missing references)
			//IL_0043: Expected O, but got Unknown
			NoButton = new Button();
			YesButton = new Button();
			GTSCheckbox = new CheckBoxX();
			GAssetsCheckBox = new CheckBoxX();
			IntermediateCheckBox = new CheckBoxX();
			labelQuestion = new LabelX();
			((Control)this).SuspendLayout();
			NoButton.AccessibleRole = AccessibleRole.PushButton;
			NoButton.Anchor = AnchorStyles.Bottom | AnchorStyles.Right;
			NoButton.DialogResult = DialogResult.Cancel;
			NoButton.Location = new Point(226, 161);
			NoButton.Name = "NoButton";
			NoButton.Size = new Size(75, 23);
			NoButton.TabIndex = 11;
			NoButton.Text = "Cancel";
			YesButton.AccessibleRole = AccessibleRole.PushButton;
			YesButton.Anchor = AnchorStyles.Bottom | AnchorStyles.Right;
			YesButton.DialogResult = DialogResult.OK;
			YesButton.Location = new Point(142, 161);
			YesButton.Name = "YesButton";
			YesButton.Size = new Size(78, 23);
			YesButton.TabIndex = 10;
			YesButton.Text = "Clean";
			YesButton.Click += YesButton_Click;
			((BaseItemControl)GTSCheckbox).get_BackgroundStyle().set_CornerType((eCornerType)1);
			((Control)(object)GTSCheckbox).Location = new Point(28, 117);
			((Control)(object)GTSCheckbox).Name = "GTSCheckbox";
			((Control)(object)GTSCheckbox).Size = new Size(152, 23);
			((BaseItemControl)GTSCheckbox).set_Style((eDotNetBarStyle)9);
			((Control)(object)GTSCheckbox).TabIndex = 9;
			((Control)(object)GTSCheckbox).Text = "Delete GTS Tile Set file";
			((BaseItemControl)GAssetsCheckBox).get_BackgroundStyle().set_CornerType((eCornerType)1);
			((Control)(object)GAssetsCheckBox).Location = new Point(28, 88);
			((Control)(object)GAssetsCheckBox).Name = "GAssetsCheckBox";
			((Control)(object)GAssetsCheckBox).Size = new Size(152, 23);
			((BaseItemControl)GAssetsCheckBox).set_Style((eDotNetBarStyle)9);
			((Control)(object)GAssetsCheckBox).TabIndex = 8;
			((Control)(object)GAssetsCheckBox).Text = "Delete GTEX Files";
			((BaseItemControl)IntermediateCheckBox).get_BackgroundStyle().set_CornerType((eCornerType)1);
			IntermediateCheckBox.set_Checked(true);
			IntermediateCheckBox.set_CheckState(CheckState.Checked);
			IntermediateCheckBox.set_CheckValue((object)"Y");
			((Control)(object)IntermediateCheckBox).Location = new Point(28, 59);
			((Control)(object)IntermediateCheckBox).Name = "IntermediateCheckBox";
			((Control)(object)IntermediateCheckBox).Size = new Size(152, 23);
			((BaseItemControl)IntermediateCheckBox).set_Style((eDotNetBarStyle)9);
			((Control)(object)IntermediateCheckBox).TabIndex = 7;
			((Control)(object)IntermediateCheckBox).Text = "Delete Intermediate Files";
			((Control)(object)labelQuestion).Anchor = AnchorStyles.Top | AnchorStyles.Left | AnchorStyles.Right;
			((BaseItemControl)labelQuestion).get_BackgroundStyle().set_CornerType((eCornerType)1);
			((Control)(object)labelQuestion).Location = new Point(12, 12);
			((Control)(object)labelQuestion).Name = "labelQuestion";
			((Control)(object)labelQuestion).Size = new Size(289, 47);
			((Control)(object)labelQuestion).TabIndex = 6;
			((Control)(object)labelQuestion).Text = "Which files do you want to clean?";
			labelQuestion.set_WordWrap(true);
			((Form)this).AcceptButton = YesButton;
			((ContainerControl)this).AutoScaleDimensions = new SizeF(6f, 13f);
			((ContainerControl)this).AutoScaleMode = AutoScaleMode.Font;
			((Form)this).CancelButton = NoButton;
			((Form)this).ClientSize = new Size(313, 196);
			((Control)this).Controls.Add(NoButton);
			((Control)this).Controls.Add(YesButton);
			((Control)this).Controls.Add((Control)(object)GTSCheckbox);
			((Control)this).Controls.Add((Control)(object)GAssetsCheckBox);
			((Control)this).Controls.Add((Control)(object)IntermediateCheckBox);
			((Control)this).Controls.Add((Control)(object)labelQuestion);
			((Control)(object)this).DoubleBuffered = true;
			((Form)this).FormBorderStyle = FormBorderStyle.FixedDialog;
			((Form)this).MaximizeBox = false;
			((Form)this).MinimizeBox = false;
			((Control)this).Name = "CleanForm";
			((Form)this).ShowIcon = false;
			((Form)this).ShowInTaskbar = false;
			((Form)this).StartPosition = FormStartPosition.CenterParent;
			((Control)(object)this).Text = "Clean";
			((Control)this).ResumeLayout(performLayout: false);
		}
	}
	[Obfuscation(Exclude = true, ApplyToMembers = true)]
	internal class CommandLineOptions
	{
		[CommandLineParameter(Name = "open", ShortName = "o", ValueName = "<solution>", Atomic = false, Description = "(-o) Open an existing solution")]
		public string solutionPath;

		[CommandLineParameter(Name = "build", ShortName = "b", Description = "(-b) Build the solution after opening. Should be used with -o or -i.")]
		public bool build;

		[CommandLineParameter(Name = "rebuild", ShortName = "reb", Description = "(-reb) Rebuild the solution. Should be used with -b")]
		public bool rebuild;

		[CommandLineParameter(Name = "optimal", ShortName = "opt", Description = "(-opt) Build the solution using the 'Optimized' code path. If not specified, use the 'Fast' build path. Should be used with -b.")]
		public bool optimized;

		[CommandLineParameter(Name = "quit", ShortName = "q", Description = "(-q) Quit after successful building. Should be used with -b.")]
		public bool quit;

		[CommandLineParameter(Name = "import", ShortName = "i", ValueName = "<solution_xml>", Atomic = false, Description = "(-i) Import a solution based on the provided xml file")]
		public string ImportSolutionFromXml;

		[CommandLineParameter(Name = "exclusive", ShortName = "e", Description = "(-e) Import the solution in exclusive mode. Should be used with -i")]
		public bool ImportExclusive;

		[CommandLineParameter(Name = "deamon", ShortName = "d", Description = "(-d) Deamon mode. Deletes the entire folder of the imported solution, should be used with -i")]
		public bool deamon;

		[CommandLineParameter(Name = "Hidden", ShortName = "h", Description = "(-h) Only show the building form. should always be used with -b AND -q")]
		public bool hidden;

		[CommandLineParameter(Name = "SilentAtlasErrors", ShortName = "silatl", Description = "(-silatl) Application silently exits on atlas errors which are only reported by the return code")]
		public bool silentAtlasErrors;

		[CommandLineParameter(Name = "SilentImport", ShortName = "SilImp", Description = "(-SilImp) Do not show any import warnings")]
		public bool IgnoreImportWarnings;

		[CommandLineParameter(Name = "buildgtsforgtex", ShortName = "buildgtsforgtex", Description = "Build a GTS file")]
		public bool buildGTSforGTex;

		[CommandLineParameter(Name = "forceusegtex", ShortName = "forceusegtex", Description = "Force using existing GTex files, even if the GTex files are out dated.")]
		public bool forceUseGTex;

		[CommandLineParameter(Name = "allowforeigngtex", ShortName = "allowforeigngtex", Description = "Allow the use of GTex files built by another project (use together with the 'forceusegtex' flag).")]
		public bool allowForeignGTex;

		[CommandLineParameter(Name = "buildnotileset", ShortName = "buildnotileset", Description = "No GTS file is written by the tools. The build process ends after GTex files are created.")]
		public bool omitGTS;
	}
	[AttributeUsage(AttributeTargets.Method | AttributeTargets.Field)]
	[Obfuscation(Exclude = true, ApplyToMembers = true)]
	public sealed class CommandLineParameterAttribute : Attribute
	{
		public string Name { get; set; }

		public string ShortName { get; set; }

		public bool RequiredSequential { get; set; }

		public string ValueName { get; set; }

		public string Description { get; set; }

		public bool Atomic { get; set; }

		public bool Hidden { get; set; }

		public CommandLineParameterAttribute()
		{
			ValueName = "value";
		}
	}
	[Obfuscation(Exclude = true, ApplyToMembers = true)]
	public class CommandLineParser
	{
		private readonly object _optionsObject;

		private readonly Queue<MemberInfo> _requiredOptions = new Queue<MemberInfo>();

		private readonly Dictionary<string, MemberInfo> _optionalOptions = new Dictionary<string, MemberInfo>();

		private readonly Dictionary<string, MemberInfo> _shortOptions = new Dictionary<string, MemberInfo>();

		private readonly Dictionary<string, MemberInfo> _atomicOptions = new Dictionary<string, MemberInfo>();

		private readonly Dictionary<string, MemberInfo> _atomicShortOptions = new Dictionary<string, MemberInfo>();

		private readonly List<string> _requiredUsageHelp = new List<string>();

		public string Title { get; set; }

		public CommandLineParser(object optionsObject)
		{
			_optionsObject = optionsObject;
			FieldInfo[] fields = optionsObject.GetType().GetFields();
			FieldInfo[] array = fields;
			foreach (FieldInfo fieldInfo in array)
			{
				CommandLineParameterAttribute attribute = GetAttribute<CommandLineParameterAttribute>(fieldInfo);
				if (attribute == null)
				{
					continue;
				}
				if (attribute.RequiredSequential)
				{
					_requiredOptions.Enqueue(fieldInfo);
					_requiredUsageHelp.Add("<" + attribute.Name + ">");
				}
				else if (attribute.Atomic)
				{
					_atomicOptions.Add(attribute.Name.ToLowerInvariant(), fieldInfo);
					if (!string.IsNullOrEmpty(attribute.ShortName))
					{
						_atomicShortOptions.Add(attribute.ShortName.ToLowerInvariant(), fieldInfo);
					}
				}
				else
				{
					_optionalOptions.Add(attribute.Name.ToLowerInvariant(), fieldInfo);
					if (!string.IsNullOrEmpty(attribute.ShortName))
					{
						_shortOptions.Add(attribute.ShortName.ToLowerInvariant(), fieldInfo);
					}
				}
			}
			MethodInfo[] methods = optionsObject.GetType().GetMethods();
			MethodInfo[] array2 = methods;
			foreach (MethodInfo methodInfo in array2)
			{
				CommandLineParameterAttribute attribute2 = GetAttribute<CommandLineParameterAttribute>(methodInfo);
				if (attribute2 == null)
				{
					continue;
				}
				if (methodInfo.GetParameters().Length > 1)
				{
					throw new NotSupportedException("Methods must have one or zero parameters.");
				}
				if (attribute2.RequiredSequential)
				{
					_requiredOptions.Enqueue(methodInfo);
					_requiredUsageHelp.Add("<" + attribute2.Name + ">");
				}
				else if (attribute2.Atomic)
				{
					_atomicOptions.Add(attribute2.Name.ToLowerInvariant(), methodInfo);
					if (!string.IsNullOrEmpty(attribute2.ShortName))
					{
						_atomicShortOptions.Add(attribute2.ShortName.ToLowerInvariant(), methodInfo);
					}
				}
				else
				{
					_optionalOptions.Add(attribute2.Name.ToLowerInvariant(), methodInfo);
					if (!string.IsNullOrEmpty(attribute2.ShortName))
					{
						_shortOptions.Add(attribute2.ShortName.ToLowerInvariant(), methodInfo);
					}
				}
			}
		}

		public bool ParseCommandLine(string[] args)
		{
			bool result = true;
			for (int i = 0; i < args.Length; i++)
			{
				if (args[i].StartsWith("-"))
				{
					string text = args[i];
					string value = "true";
					if (i + 1 < args.Length && !args[i + 1].StartsWith("-"))
					{
						value = args[i + 1];
						i++;
					}
					MemberInfo value2;
					if (text.StartsWith("--"))
					{
						text = text.Substring(2);
						if (_atomicOptions.TryGetValue(text.ToLowerInvariant(), out value2))
						{
							return SetOption(value2, value);
						}
						if (!_optionalOptions.TryGetValue(text.ToLowerInvariant(), out value2))
						{
							ShowError("Unknown option '{0}'", text);
							return false;
						}
					}
					else
					{
						text = text.Substring(1);
						if (_atomicShortOptions.TryGetValue(text.ToLowerInvariant(), out value2))
						{
							return SetOption(value2, value);
						}
						if (!_shortOptions.TryGetValue(text.ToLowerInvariant(), out value2))
						{
							ShowError("Unknown option '{0}'", text);
							return false;
						}
					}
					if (!SetOption(value2, value))
					{
						return false;
					}
				}
				else
				{
					if (_requiredOptions.Count <= 0)
					{
						ShowError("Too many arguments");
						return false;
					}
					MemberInfo memberInfo = _requiredOptions.Peek();
					if (!IsList(memberInfo))
					{
						_requiredOptions.Dequeue();
					}
					SetOption(memberInfo, args[i]);
				}
			}
			MemberInfo memberInfo2 = _requiredOptions.FirstOrDefault((MemberInfo field) => !IsList(field) || GetList(field).Count == 0);
			if (memberInfo2 != null)
			{
				ShowError("Missing argument '{0}'", GetAttribute<CommandLineParameterAttribute>(memberInfo2).Name);
				return false;
			}
			return result;
		}

		private bool SetOption(MemberInfo member, string value)
		{
			try
			{
				if (IsList(member))
				{
					GetList(member).Add(ChangeType(value, ListElementType(member as FieldInfo)));
				}
				else if (member is MethodInfo)
				{
					MethodInfo methodInfo = member as MethodInfo;
					ParameterInfo[] parameters = methodInfo.GetParameters();
					if (parameters.Length == 0)
					{
						methodInfo.Invoke(_optionsObject, null);
					}
					else
					{
						methodInfo.Invoke(_optionsObject, new object[1] { ChangeType(value, parameters[0].ParameterType) });
					}
				}
				else
				{
					FieldInfo fieldInfo = member as FieldInfo;
					fieldInfo.SetValue(_optionsObject, ChangeType(value, fieldInfo.FieldType));
				}
				return true;
			}
			catch
			{
				ShowError("Invalid value '{0}' for option '{1}'", value, GetAttribute<CommandLineParameterAttribute>(member).Name);
				return false;
			}
		}

		private static object ChangeType(string value, Type type)
		{
			return TypeDescriptor.GetConverter(type).ConvertFromInvariantString(value);
		}

		private static bool IsList(MemberInfo field)
		{
			if (field is MethodInfo)
			{
				return false;
			}
			return typeof(IList).IsAssignableFrom((field as FieldInfo).FieldType);
		}

		private IList GetList(MemberInfo field)
		{
			return (IList)(field as FieldInfo).GetValue(_optionsObject);
		}

		private static Type ListElementType(FieldInfo field)
		{
			return (from i in field.FieldType.GetInterfaces()
				where i.IsGenericType && i.GetGenericTypeDefinition() == typeof(IEnumerable<>)
				select i).First().GetGenericArguments()[0];
		}

		public void ShowUsage()
		{
			ShowError(null);
		}

		public void ShowError(string message, params object[] args)
		{
			string fileNameWithoutExtension = Path.GetFileNameWithoutExtension(Process.GetCurrentProcess().ProcessName);
			if (!string.IsNullOrEmpty(Title))
			{
				Console.Error.WriteLine(Title);
				Console.Error.WriteLine();
			}
			if (!string.IsNullOrEmpty(message))
			{
				Console.Error.WriteLine(message, args);
				Console.Error.WriteLine();
			}
			Dictionary<string, MemberInfo> dictionary = _optionalOptions.Concat(_atomicOptions).ToDictionary((KeyValuePair<string, MemberInfo> e) => e.Key, (KeyValuePair<string, MemberInfo> e) => e.Value);
			Console.Error.WriteLine("Usage: {0} {1}{2}", fileNameWithoutExtension, string.Join(" ", _requiredUsageHelp.ToArray()), (dictionary.Count > 0) ? " <Options>" : string.Empty);
			if (dictionary.Count <= 0)
			{
				return;
			}
			Console.Error.WriteLine();
			Console.Error.WriteLine("Options:\n");
			foreach (KeyValuePair<string, MemberInfo> item in dictionary)
			{
				FieldInfo fieldInfo = item.Value as FieldInfo;
				MethodInfo methodInfo = item.Value as MethodInfo;
				CommandLineParameterAttribute attribute = GetAttribute<CommandLineParameterAttribute>(item.Value);
				if ((fieldInfo != null && fieldInfo.FieldType != typeof(bool)) || (methodInfo != null && methodInfo.GetParameters().Length != 0))
				{
					if (string.IsNullOrEmpty(attribute.ShortName))
					{
						Console.Error.WriteLine("  -{0} {1}\n", attribute.ShortName, attribute.ValueName);
					}
					Console.Error.WriteLine("  --{0} {1}\n     {2}\n", attribute.Name, attribute.ValueName, attribute.Description);
				}
				else if (!attribute.Hidden)
				{
					if (string.IsNullOrEmpty(attribute.ShortName))
					{
						Console.Error.WriteLine("  -{0}\n", attribute.ShortName);
					}
					Console.Error.WriteLine("  --{0}\n     {1}\n", attribute.Name, attribute.Description);
				}
			}
		}

		private static T GetAttribute<T>(ICustomAttributeProvider provider) where T : Attribute
		{
			return provider.GetCustomAttributes(typeof(T), inherit: false).OfType<T>().FirstOrDefault();
		}
	}
	public class Constants
	{
		private static string[] defaultLayerNames = new string[4] { "diffuse", "normal", "specular", "roughness" };

		public static DataType[] SupportedDataTypes => new DataType[13]
		{
			DataType.R8G8B8_SRGB,
			DataType.R8G8B8A8_SRGB,
			DataType.R8G8B8_LINEAR,
			DataType.R8G8B8A8_LINEAR,
			DataType.X8Y8Z0_TANGENT,
			DataType.X8,
			DataType.X8Y8,
			DataType.X8Y8Z8,
			DataType.X8Y8Z8W8,
			DataType.R16G16B16_FLOAT,
			DataType.R16G16B16A16_FLOAT,
			DataType.R32G32B32_FLOAT,
			DataType.R32G32B32A32_FLOAT
		};

		public static string[] SupportedQualityProfiles => new string[5] { "Low", "Medium", "High", "Lossless", "Uncompressed" };

		public static string SolutionExtension => "grsln";

		public static string ProjectExtension => "grproj";

		public static QualityLevel DefaultQualityLevel => QualityLevel.Default;

		public static string OnlineDocumentationUrl => "https://documentation.graphinesoftware.com/";

		public static string OnlineSupportUrl => "https://support.graphinesoftware.com/";

		public static string OnlineSupportEmail => "support@graphinesoftware.com";

		public static string DefaultTileSetName => "TileSet";

		public static string DefaultSolutionName => "Solution";

		public static string ProjectSettingFile => "user.settings";

		public static ColorItem[][] CustomStandardColorPickerColors
		{
			get
			{
				//IL_0029: Unknown result type (might be due to invalid IL or missing references)
				//IL_002f: Expected O, but got Unknown
				//IL_0054: Unknown result type (might be due to invalid IL or missing references)
				//IL_005a: Expected O, but got Unknown
				//IL_0079: Unknown result type (might be due to invalid IL or missing references)
				//IL_007f: Expected O, but got Unknown
				//IL_009b: Unknown result type (might be due to invalid IL or missing references)
				//IL_00a1: Expected O, but got Unknown
				//IL_00c6: Unknown result type (might be due to invalid IL or missing references)
				//IL_00cc: Expected O, but got Unknown
				//IL_00ed: Unknown result type (might be due to invalid IL or missing references)
				//IL_00f3: Expected O, but got Unknown
				//IL_0115: Unknown result type (might be due to invalid IL or missing references)
				//IL_011b: Expected O, but got Unknown
				//IL_013d: Unknown result type (might be due to invalid IL or missing references)
				//IL_0143: Expected O, but got Unknown
				//IL_0162: Unknown result type (might be due to invalid IL or missing references)
				//IL_0168: Expected O, but got Unknown
				ColorItem[][] array = new ColorItem[1][] { (ColorItem[])(object)new ColorItem[9]
				{
					new ColorItem("Black", "Black", System.Drawing.Color.FromArgb(255, 0, 0, 0)),
					new ColorItem("White", "White", System.Drawing.Color.FromArgb(255, 255, 255, 255)),
					new ColorItem("", "Flat Normal", System.Drawing.Color.FromArgb(255, 127, 127, 255)),
					new ColorItem("", "Middle Grey 127", System.Drawing.Color.FromArgb(255, 127, 127, 127)),
					new ColorItem("", "Middle Grey 128", System.Drawing.Color.FromArgb(255, 128, 128, 128)),
					new ColorItem("", "Hot Pink", System.Drawing.Color.FromArgb(255, 255, 0, 255)),
					new ColorItem("", "Graphine Blue", System.Drawing.Color.FromArgb(255, 15, 150, 241)),
					new ColorItem("", "Graphine Orange", System.Drawing.Color.FromArgb(255, 240, 134, 44)),
					new ColorItem("", "Nixel", System.Drawing.Color.FromArgb(255, 198, 113, 113))
				} };
				for (int i = 0; i < array.Length; i++)
				{
					for (int j = 0; j < array[i].Length; j++)
					{
						((BaseItem)array[i][j]).set_Tooltip(((BaseItem)array[i][j]).get_Text());
					}
				}
				return array;
			}
		}

		public static string[] DefaultLayerNames
		{
			get
			{
				return defaultLayerNames;
			}
			set
			{
				defaultLayerNames = value;
			}
		}

		public static char ChannelPackedLayerSplitLiteral => '+';

		public static SwizzlePreset[] SwizzlePresets => new SwizzlePreset[6]
		{
			SwizzlePreset.RGBA,
			SwizzlePreset.BGRA,
			SwizzlePreset.RtoA,
			SwizzlePreset.BtoA,
			SwizzlePreset.GtoA,
			SwizzlePreset.AtoRGB
		};
	}
	public class CrashReportForm : Form
	{
		[Serializable]
		public class CrashReport
		{
			public string Application { get; set; }

			public DateTime TimeStamp { get; set; }

			public string Message { get; set; }

			public string DetailedMessage { get; set; }

			public string StackTrace { get; set; }

			public string AssemblyVersion { get; set; }

			public string AssemblyDescription { get; set; }

			public CrashReport()
			{
			}

			public CrashReport(string message, Exception e)
			{
				Application = AssemblyHelper.AssemblyProduct;
				TimeStamp = DateTime.Now;
				Message = message;
				DetailedMessage = e.ToString();
				StackTrace = e.StackTrace;
				AssemblyDescription = AssemblyHelper.AssemblyDescription;
				AssemblyVersion = AssemblyHelper.AssemblyInformationalVersion;
			}

			public override string ToString()
			{
				return string.Format("Fatal Exception in {1} at {2}{0}Message: {3}{0}Detailed: {4}{0}StackTrace: {5}{0}Version: {6}{0}AssemblyInfo: {7}", Environment.NewLine, Application, TimeStamp, Message, DetailedMessage, StackTrace, AssemblyVersion, AssemblyDescription);
			}
		}

		public enum DisplayMode
		{
			FatalError,
			Error
		}

		private IContainer components;

		private Label labelTitle;

		private PictureBox pictureBox1;

		private TextBox textBoxMessage;

		private Label label2;

		private Button buttonQuit;

		private Button buttonSaveReport;

		private Label label3;

		private TextBox textBoxStackTrace;

		private Button buttonCopyClipboard;

		public string Message { get; set; }

		public Exception Exception { get; set; }

		public DisplayMode Mode { get; set; }

		public CrashReportForm()
		{
			InitializeComponent();
		}

		private void buttonSaveReport_Click(object sender, EventArgs e)
		{
			SaveFileDialog saveFileDialog = new SaveFileDialog();
			saveFileDialog.Filter = "GrBuild Bug Report (*.gbr)|*.gbr;";
			if (saveFileDialog.ShowDialog() == DialogResult.OK && SaveReport(saveFileDialog.FileName))
			{
				MessageBox.Show(string.Format("Successfully saved the crash report. Please send it to Graphine support via the support platform ({0}) or by email({1}).", new object[2]
				{
					Constants.OnlineSupportUrl,
					Constants.OnlineSupportEmail
				}), "Crash report saved", MessageBoxButtons.OK, MessageBoxIcon.Asterisk);
			}
		}

		private void buttonQuit_Click(object sender, EventArgs e)
		{
			Close();
		}

		private void CrashReportForm_Load(object sender, EventArgs e)
		{
			CrashReport crashReport = new CrashReport(Message, Exception);
			textBoxMessage.Text = crashReport.Message;
			textBoxStackTrace.Text = crashReport.ToString();
			if (Mode == DisplayMode.Error)
			{
				buttonQuit.Text = "Try Resume";
			}
			else
			{
				buttonQuit.Text = "Quit";
			}
		}

		private bool SaveReport(string filename)
		{
			try
			{
				XmlSerializer xmlSerializer = new XmlSerializer(typeof(CrashReport));
				CrashReport o = new CrashReport(Message, Exception);
				using StringWriter stringWriter = new StringWriter();
				using XmlWriter xmlWriter = XmlWriter.Create(stringWriter);
				xmlSerializer.Serialize(xmlWriter, o);
				using StreamWriter streamWriter = new StreamWriter(filename);
				streamWriter.Write(stringWriter.ToString());
			}
			catch
			{
				MessageBox.Show("Error writing crash report to output file. Make sure you have write access. Choose another folder and try again.", "Error", MessageBoxButtons.OK, MessageBoxIcon.Hand);
				return false;
			}
			return true;
		}

		private void buttonCopyClipboard_Click(object sender, EventArgs e)
		{
			ClipboardHelper.CopyText(new CrashReport(Message, Exception).ToString());
		}

		protected override void Dispose(bool disposing)
		{
			if (disposing && components != null)
			{
				components.Dispose();
			}
			base.Dispose(disposing);
		}

		private void InitializeComponent()
		{
			System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(GrBuildStudio.CrashReportForm));
			this.labelTitle = new System.Windows.Forms.Label();
			this.pictureBox1 = new System.Windows.Forms.PictureBox();
			this.textBoxMessage = new System.Windows.Forms.TextBox();
			this.label2 = new System.Windows.Forms.Label();
			this.buttonQuit = new System.Windows.Forms.Button();
			this.buttonSaveReport = new System.Windows.Forms.Button();
			this.label3 = new System.Windows.Forms.Label();
			this.textBoxStackTrace = new System.Windows.Forms.TextBox();
			this.buttonCopyClipboard = new System.Windows.Forms.Button();
			((System.ComponentModel.ISupportInitialize)this.pictureBox1).BeginInit();
			base.SuspendLayout();
			this.labelTitle.Anchor = System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Left | System.Windows.Forms.AnchorStyles.Right;
			this.labelTitle.Location = new System.Drawing.Point(58, 33);
			this.labelTitle.Name = "labelTitle";
			this.labelTitle.Size = new System.Drawing.Size(400, 75);
			this.labelTitle.TabIndex = 0;
			this.labelTitle.Text = resources.GetString("labelTitle.Text");
			this.pictureBox1.Image = GrBuildStudio.Properties.Resources.big_warning;
			this.pictureBox1.Location = new System.Drawing.Point(16, 33);
			this.pictureBox1.Name = "pictureBox1";
			this.pictureBox1.Size = new System.Drawing.Size(36, 36);
			this.pictureBox1.TabIndex = 1;
			this.pictureBox1.TabStop = false;
			this.textBoxMessage.Anchor = System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Left | System.Windows.Forms.AnchorStyles.Right;
			this.textBoxMessage.Location = new System.Drawing.Point(72, 120);
			this.textBoxMessage.Multiline = true;
			this.textBoxMessage.Name = "textBoxMessage";
			this.textBoxMessage.ReadOnly = true;
			this.textBoxMessage.Size = new System.Drawing.Size(386, 57);
			this.textBoxMessage.TabIndex = 2;
			this.label2.AutoSize = true;
			this.label2.Location = new System.Drawing.Point(13, 123);
			this.label2.Name = "label2";
			this.label2.Size = new System.Drawing.Size(53, 13);
			this.label2.TabIndex = 3;
			this.label2.Text = "Message:";
			this.buttonQuit.Anchor = System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Right;
			this.buttonQuit.DialogResult = System.Windows.Forms.DialogResult.OK;
			this.buttonQuit.Location = new System.Drawing.Point(383, 275);
			this.buttonQuit.Name = "buttonQuit";
			this.buttonQuit.Size = new System.Drawing.Size(75, 23);
			this.buttonQuit.TabIndex = 4;
			this.buttonQuit.Text = "Quit";
			this.buttonQuit.UseVisualStyleBackColor = true;
			this.buttonQuit.Click += new System.EventHandler(buttonQuit_Click);
			this.buttonSaveReport.Anchor = System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Right;
			this.buttonSaveReport.Location = new System.Drawing.Point(256, 275);
			this.buttonSaveReport.Name = "buttonSaveReport";
			this.buttonSaveReport.Size = new System.Drawing.Size(121, 23);
			this.buttonSaveReport.TabIndex = 5;
			this.buttonSaveReport.Text = "Save Bug Report";
			this.buttonSaveReport.UseVisualStyleBackColor = true;
			this.buttonSaveReport.Click += new System.EventHandler(buttonSaveReport_Click);
			this.label3.AutoSize = true;
			this.label3.Location = new System.Drawing.Point(13, 194);
			this.label3.Name = "label3";
			this.label3.Size = new System.Drawing.Size(42, 13);
			this.label3.TabIndex = 7;
			this.label3.Text = "Details:";
			this.textBoxStackTrace.Anchor = System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Left | System.Windows.Forms.AnchorStyles.Right;
			this.textBoxStackTrace.Location = new System.Drawing.Point(72, 191);
			this.textBoxStackTrace.Multiline = true;
			this.textBoxStackTrace.Name = "textBoxStackTrace";
			this.textBoxStackTrace.ReadOnly = true;
			this.textBoxStackTrace.Size = new System.Drawing.Size(386, 57);
			this.textBoxStackTrace.TabIndex = 6;
			this.buttonCopyClipboard.Anchor = System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Right;
			this.buttonCopyClipboard.Location = new System.Drawing.Point(72, 275);
			this.buttonCopyClipboard.Name = "buttonCopyClipboard";
			this.buttonCopyClipboard.Size = new System.Drawing.Size(121, 23);
			this.buttonCopyClipboard.TabIndex = 8;
			this.buttonCopyClipboard.Text = "Copy to Clipboard";
			this.buttonCopyClipboard.UseVisualStyleBackColor = true;
			this.buttonCopyClipboard.Click += new System.EventHandler(buttonCopyClipboard_Click);
			base.AcceptButton = this.buttonQuit;
			base.AutoScaleDimensions = new System.Drawing.SizeF(6f, 13f);
			base.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;
			base.ClientSize = new System.Drawing.Size(482, 310);
			base.Controls.Add(this.buttonCopyClipboard);
			base.Controls.Add(this.label3);
			base.Controls.Add(this.textBoxStackTrace);
			base.Controls.Add(this.buttonSaveReport);
			base.Controls.Add(this.buttonQuit);
			base.Controls.Add(this.label2);
			base.Controls.Add(this.textBoxMessage);
			base.Controls.Add(this.pictureBox1);
			base.Controls.Add(this.labelTitle);
			base.FormBorderStyle = System.Windows.Forms.FormBorderStyle.FixedDialog;
			base.MaximizeBox = false;
			base.MinimizeBox = false;
			base.Name = "CrashReportForm";
			base.ShowIcon = false;
			this.Text = "Unexcepted Error";
			base.Load += new System.EventHandler(CrashReportForm_Load);
			((System.ComponentModel.ISupportInitialize)this.pictureBox1).EndInit();
			base.ResumeLayout(false);
			base.PerformLayout();
		}
	}
	[ComImport]
	[Guid("56FDF344-FD6D-11d0-958A-006097C9A090")]
	[ClassInterface(ClassInterfaceType.None)]
	internal class CTaskbarList
	{
		[MethodImpl(MethodImplOptions.InternalCall)]
		public extern CTaskbarList();
	}
	public class CustomLayerLayoutControl : UserControl
	{
		private class ControlRow
		{
			public CheckBox checkBox;

			public TextBox nameBox;

			public ComboBox dataType;

			public ComboBox codingProfile;

			public ComboBox qualityProfile;

			public ColorPickerButton colorButton;
		}

		private class ColorButtonInfo
		{
			public bool UserSet { get; set; }
		}

		private struct RowValues
		{
			internal string LayerName { get; set; }

			internal DataType DataType { get; set; }

			internal string CodingProfile { get; set; }

			internal string Qualityprofile { get; set; }

			internal string DefaultColor { get; set; }
		}

		public delegate void OnLayerEnabledDelegate(int activeLayerCount);

		public bool cancelClose;

		private List<ControlRow> controlRows;

		private bool withAddButton = true;

		private int[] columnWidths = new int[6] { 30, 180, 150, 120, 110, 120 };

		private string[] columnNames = new string[6] { "Add", "Name", "Datatype", "Compression Format", "Default Quality", "Default Color" };

		private int controlHeight = 20;

		private int controlMargin = 20;

		private List<DataType> dataTypes;

		private IContainer components;

		private ScrollableEditList scrollableEditList;

		private ToolTip ToolTip;

		public BuildProfile ActiveBuildProfile { get; set; }

		public ProjectTemplate ProjectTemplate { get; private set; }

		public event OnLayerEnabledDelegate OnLayerEnabledEvent;

		public CustomLayerLayoutControl()
		{
			InitializeComponent();
			dataTypes = new List<DataType>(Constants.SupportedDataTypes);
		}

		private void SetupLayout()
		{
			scrollableEditList.Columns.Clear();
			int num = 0;
			if (!withAddButton)
			{
				num = 1;
			}
			for (int i = num; i < columnNames.Length; i++)
			{
				scrollableEditList.Columns.Add(new ScrollableEditList.ColumnItem(columnNames[i], columnWidths[i]));
			}
			controlRows = new List<ControlRow>();
		}

		public void InitializeForCreation(BuildProfile buildProfile)
		{
			ActiveBuildProfile = buildProfile;
			SuspendLayout();
			scrollableEditList.SuspendLayout();
			scrollableEditList.Clear();
			SetupLayout();
			DataType dataType = Constants.SupportedDataTypes[0];
			for (int i = 0; i < Constants.get_MaxLayers(); i++)
			{
				ScrollableEditList.Row row = null;
				string layerName = $"layer{i + 1}";
				if (i < Constants.DefaultLayerNames.Length)
				{
					layerName = Constants.DefaultLayerNames[i];
				}
				RowValues values = default(RowValues);
				values.LayerName = layerName;
				values.DataType = dataType;
				values.CodingProfile = "default";
				values.Qualityprofile = "default";
				values.DefaultColor = "";
				MakeRow(i, values, out row, out var controls);
				scrollableEditList.Rows.Add(row);
				controlRows.Add(controls);
			}
			scrollableEditList.ResumeLayout();
			ResumeLayout();
		}

		public void InitializeForLayerConfig(LayerConfig config, BuildProfile buildProfile)
		{
			ActiveBuildProfile = buildProfile;
			SuspendLayout();
			scrollableEditList.SuspendLayout();
			scrollableEditList.Clear();
			withAddButton = false;
			SetupLayout();
			for (int i = 0; i < config.get_Layers().Count; i++)
			{
				LayerDescription val = config.get_Layers()[i];
				ScrollableEditList.Row row = null;
				RowValues values = default(RowValues);
				values.LayerName = val.get_LayerName();
				values.DataType = val.get_DataType();
				values.CodingProfile = ((val.get_CodingProfile() != null) ? val.get_CodingProfile().ToString() : string.Empty);
				values.Qualityprofile = ((val.get_QualityProfile() != null) ? val.get_QualityProfile().ToString() : string.Empty);
				values.DefaultColor = val.get_DefaultColor();
				MakeRow(i, values, out row, out var controls);
				scrollableEditList.Rows.Add(row);
				controlRows.Add(controls);
			}
			scrollableEditList.ResumeLayout();
			ResumeLayout();
		}

		private void MakeRow(int layerIndex, RowValues values, out ScrollableEditList.Row row, out ControlRow controls)
		{
			//IL_00c6: Unknown result type (might be due to invalid IL or missing references)
			//IL_00cb: Unknown result type (might be due to invalid IL or missing references)
			//IL_00d5: Expected O, but got Unknown
			//IL_0178: Unknown result type (might be due to invalid IL or missing references)
			//IL_017d: Unknown result type (might be due to invalid IL or missing references)
			//IL_0187: Expected O, but got Unknown
			//IL_0239: Unknown result type (might be due to invalid IL or missing references)
			//IL_023e: Unknown result type (might be due to invalid IL or missing references)
			//IL_0248: Expected O, but got Unknown
			//IL_02f4: Unknown result type (might be due to invalid IL or missing references)
			//IL_02f9: Unknown result type (might be due to invalid IL or missing references)
			//IL_0303: Expected O, but got Unknown
			//IL_03b5: Unknown result type (might be due to invalid IL or missing references)
			//IL_03ba: Unknown result type (might be due to invalid IL or missing references)
			//IL_03c4: Expected O, but got Unknown
			//IL_03c8: Unknown result type (might be due to invalid IL or missing references)
			//IL_03d2: Expected O, but got Unknown
			//IL_04c7: Unknown result type (might be due to invalid IL or missing references)
			//IL_04cc: Unknown result type (might be due to invalid IL or missing references)
			//IL_04d6: Expected O, but got Unknown
			controls = new ControlRow();
			if (withAddButton)
			{
				controls.checkBox = new CheckBox();
				controls.checkBox.Tag = controls;
				controls.checkBox.BackColor = System.Drawing.Color.Transparent;
				controls.checkBox.TabIndex = 10 * (layerIndex + 1);
				controls.checkBox.CheckedChanged += checkBox_CheckedChanged;
				controls.checkBox.Padding = new Padding(5, 0, 0, 0);
				((SuperTooltip)ToolTip).SetSuperTooltip((IComponent)controls.checkBox, new SuperTooltipInfo("", "", "TT_CUSTOMLAYOUT_CHECKLAYER", (Image)null, (Image)null, ((SuperTooltip)ToolTip).get_DefaultTooltipSettings().get_Color()));
			}
			controls.nameBox = new TextBox();
			controls.nameBox.Size = new Size(columnWidths[1] - 2 * controlMargin, controlHeight);
			controls.nameBox.Text = values.LayerName;
			controls.nameBox.Tag = controls;
			controls.nameBox.TabIndex = 10 * (layerIndex + 1) + 2;
			((SuperTooltip)ToolTip).SetSuperTooltip((IComponent)controls.nameBox, new SuperTooltipInfo("", "", "TT_CUSTOMLAYOUT_LAYERNAME", (Image)null, (Image)null, ((SuperTooltip)ToolTip).get_DefaultTooltipSettings().get_Color()));
			controls.dataType = new ComboBox();
			controls.dataType.DropDownStyle = ComboBoxStyle.DropDownList;
			controls.dataType.Size = new Size(columnWidths[2] - 2 * controlMargin, controlHeight);
			controls.dataType.Tag = controls;
			controls.dataType.TabIndex = 10 * (layerIndex + 1) + 4;
			controls.dataType.SelectedValueChanged += dataType_SelectedValueChanged;
			((SuperTooltip)ToolTip).SetSuperTooltip((IComponent)controls.dataType, new SuperTooltipInfo("", "", "TT_CUSTOMLAYOUT_DATATYPE", (Image)null, (Image)null, ((SuperTooltip)ToolTip).get_DefaultTooltipSettings().get_Color()));
			ComboBoxHelper.FillComboBox(controls.dataType, dataTypes);
			controls.qualityProfile = new ComboBox();
			controls.qualityProfile.DropDownStyle = ComboBoxStyle.DropDownList;
			controls.qualityProfile.Size = new Size(columnWidths[3] - 2 * controlMargin, controlHeight);
			controls.qualityProfile.Tag = controls;
			controls.qualityProfile.TabIndex = 10 * (layerIndex + 1) + 6;
			((SuperTooltip)ToolTip).SetSuperTooltip((IComponent)controls.qualityProfile, new SuperTooltipInfo("", "", "TT_CUSTOMLAYOUT_QUALITYPROFILE", (Image)null, (Image)null, ((SuperTooltip)ToolTip).get_DefaultTooltipSettings().get_Color()));
			controls.codingProfile = new ComboBox();
			controls.codingProfile.DropDownStyle = ComboBoxStyle.DropDownList;
			controls.codingProfile.Size = new Size(columnWidths[3] - 2 * controlMargin, controlHeight);
			controls.codingProfile.Tag = controls;
			controls.codingProfile.TabIndex = 10 * (layerIndex + 1) + 6;
			controls.codingProfile.SelectedValueChanged += codingProfile_SelectedValueChanged;
			((SuperTooltip)ToolTip).SetSuperTooltip((IComponent)controls.codingProfile, new SuperTooltipInfo("", "", "TT_CUSTOMLAYOUT_CODINGPROFILE", (Image)null, (Image)null, ((SuperTooltip)ToolTip).get_DefaultTooltipSettings().get_Color()));
			controls.colorButton = new ColorPickerButton();
			((Control)(object)controls.colorButton).AccessibleRole = AccessibleRole.PushButton;
			((ButtonX)controls.colorButton).set_ColorTable((eButtonColor)3);
			controls.colorButton.add_SelectedColorChanged((EventHandler)colorButton_SelectedColorChanged);
			System.Drawing.Color selectedColor = HexToColor(values.DefaultColor, values.DataType);
			controls.colorButton.set_SelectedColor(selectedColor);
			controls.colorButton.set_DisplayThemeColors(false);
			controls.colorButton.set_CustomStandardColors(Constants.CustomStandardColorPickerColors);
			ColorButtonInfo colorButtonInfo = new ColorButtonInfo();
			colorButtonInfo.UserSet = values.DefaultColor != null && !values.DefaultColor.Equals(string.Empty);
			((Control)(object)controls.colorButton).Tag = colorButtonInfo;
			((SuperTooltip)ToolTip).SetSuperTooltip((IComponent)controls.colorButton, new SuperTooltipInfo("", "", "TT_CUSTOMLAYOUT_DEFAULTCOLOR", (Image)null, (Image)null, ((SuperTooltip)ToolTip).get_DefaultTooltipSettings().get_Color()));
			row = new ScrollableEditList.Row();
			if (withAddButton)
			{
				row.RowItems.Add(new ScrollableEditList.RowItem(controls.checkBox));
			}
			row.RowItems.Add(new ScrollableEditList.RowItem(controls.nameBox));
			row.RowItems.Add(new ScrollableEditList.RowItem(controls.dataType));
			row.RowItems.Add(new ScrollableEditList.RowItem(controls.codingProfile));
			row.RowItems.Add(new ScrollableEditList.RowItem(controls.qualityProfile));
			row.RowItems.Add(new ScrollableEditList.RowItem((Control)(object)controls.colorButton));
			controls.dataType.Text = values.DataType.ToString();
			Func<CodingProfile, bool> selector = (CodingProfile cp) => cp.get_Name().ToLowerInvariant().Equals(values.CodingProfile.ToLowerInvariant());
			ComboBoxHelper.SelectComboBoxItem(controls.codingProfile, selector);
			controls.qualityProfile.Text = values.Qualityprofile.ToLowerInvariant();
		}

		private string ColorToHex(System.Drawing.Color c)
		{
			return "#" + c.R.ToString("X2") + c.G.ToString("X2") + c.B.ToString("X2") + c.A.ToString("X2");
		}

		private System.Drawing.Color HexToColor(string hex, DataType layertype)
		{
			if (hex == null || hex == string.Empty)
			{
				return AssetTools.NixelColorToColor(AssetTools.ParseNixelColor(hex, layertype));
			}
			if (hex.StartsWith("#"))
			{
				hex = hex.Substring(1);
			}
			if (hex.Length != 8)
			{
				if (hex.Length != 6)
				{
					throw new Exception("Color not valid");
				}
				hex += "00";
			}
			return System.Drawing.Color.FromArgb(int.Parse(hex.Substring(6, 2), NumberStyles.HexNumber), int.Parse(hex.Substring(0, 2), NumberStyles.HexNumber), int.Parse(hex.Substring(2, 2), NumberStyles.HexNumber), int.Parse(hex.Substring(4, 2), NumberStyles.HexNumber));
		}

		private Bitmap CreateColorIcon(System.Drawing.Color c)
		{
			Bitmap bitmap = new Bitmap(16, 16);
			using Graphics graphics = Graphics.FromImage(bitmap);
			graphics.FillRectangle(new SolidBrush(c), 0, 0, 16, 16);
			return bitmap;
		}

		private void colorButton_SelectedColorChanged(object sender, EventArgs e)
		{
			ColorPickerButton val = (ColorPickerButton)((sender is ColorPickerButton) ? sender : null);
			((ButtonX)val).set_Image((Image)CreateColorIcon(val.get_SelectedColor()));
			((Control)(object)val).Text = ColorToHex(val.get_SelectedColor());
			ColorButtonInfo colorButtonInfo = (ColorButtonInfo)((Control)(object)val).Tag;
			if (colorButtonInfo != null)
			{
				colorButtonInfo.UserSet = true;
			}
			((Control)(object)val).Tag = colorButtonInfo;
		}

		protected virtual void OnLayerEnabled()
		{
			this.OnLayerEnabledEvent?.Invoke(HasLayerSelected());
		}

		private void checkBox_CheckedChanged(object sender, EventArgs e)
		{
			OnLayerEnabled();
		}

		private void dataType_SelectedValueChanged(object sender, EventArgs e)
		{
			ComboBox comboBox = (ComboBox)sender;
			if (comboBox == null)
			{
				return;
			}
			ControlRow controlRow = (ControlRow)comboBox.Tag;
			if (controlRow != null)
			{
				controlRow.codingProfile.Items.Clear();
				DataType selectedEnumValue = ComboBoxHelper.GetSelectedEnumValue<DataType>(controlRow.dataType);
				List<CodingProfile> availableCodingProfiles = CodingProfileHelper.GetAvailableCodingProfiles(ActiveBuildProfile, selectedEnumValue);
				string defaultCodingProfile = "";
				if (ActiveBuildProfile.get_DefaultCodingProfiles().ContainsKey(selectedEnumValue))
				{
					defaultCodingProfile = ActiveBuildProfile.get_DefaultCodingProfiles()[selectedEnumValue];
				}
				Func<CodingProfile, bool> equalsDefault = (CodingProfile cp) => cp.get_Name().ToLowerInvariant().Equals(defaultCodingProfile.ToLowerInvariant());
				Func<CodingProfile, string> toString = (CodingProfile cp) => (!equalsDefault(cp)) ? cp.get_DisplayName() : (cp.get_DisplayName() + " (default)");
				ComboBoxHelper.FillComboboxValues(controlRow.codingProfile, availableCodingProfiles, toString);
				if (ActiveBuildProfile.get_DefaultCodingProfiles().ContainsKey(selectedEnumValue) && controlRow.codingProfile.Items.Count > 0)
				{
					ComboBoxHelper.SelectComboBoxItem(controlRow.codingProfile, equalsDefault);
				}
			}
		}

		private void codingProfile_SelectedValueChanged(object sender, EventArgs e)
		{
			ComboBox comboBox = (ComboBox)sender;
			if (comboBox == null)
			{
				return;
			}
			ControlRow controlRow = (ControlRow)comboBox.Tag;
			if (controlRow != null)
			{
				DataType selectedEnumValue = ComboBoxHelper.GetSelectedEnumValue<DataType>(controlRow.dataType);
				List<string> availableQualityProfiles = CodingProfileHelper.GetAvailableQualityProfiles(ComboBoxHelper.GetSelectedValue<CodingProfile>(controlRow.codingProfile), selectedEnumValue, false, true);
				ComboBoxHelper.FillComboBox(controlRow.qualityProfile, availableQualityProfiles);
				if (controlRow.qualityProfile.Items.Count > 0)
				{
					controlRow.qualityProfile.SelectedIndex = 0;
				}
			}
		}

		private List<string> EnumToStringList<T>()
		{
			List<string> list = new List<string>();
			Array values = System.Enum.GetValues(typeof(T));
			for (int i = 0; i < values.Length; i++)
			{
				list.Add(values.GetValue(i).ToString());
			}
			return list;
		}

		private List<string> EnumToStringList(DataType[] dataTypes)
		{
			List<string> list = new List<string>();
			for (int i = 0; i < dataTypes.Length; i++)
			{
				list.Add(dataTypes.GetValue(i).ToString());
			}
			return list;
		}

		public int HasLayerSelected()
		{
			if (!withAddButton)
			{
				return -1;
			}
			int num = 0;
			for (int i = 0; i < controlRows.Count; i++)
			{
				if (controlRows[i].checkBox.Checked)
				{
					num++;
				}
			}
			return num;
		}

		public void ApplyLayerConfiguration()
		{
			//IL_002f: Unknown result type (might be due to invalid IL or missing references)
			//IL_0039: Expected O, but got Unknown
			//IL_015e: Unknown result type (might be due to invalid IL or missing references)
			//IL_0168: Expected O, but got Unknown
			if (HasLayerSelected() == 0)
			{
				MessageBox.Show("Please select at least one layer.", "Error", MessageBoxButtons.OK, MessageBoxIcon.Hand);
				cancelClose = true;
				return;
			}
			ProjectTemplate = new ProjectTemplate();
			for (int i = 0; i < controlRows.Count; i++)
			{
				bool flag = true;
				if (withAddButton && !controlRows[i].checkBox.Checked)
				{
					flag = false;
				}
				if (flag)
				{
					DataType dataType = (DataType)System.Enum.Parse(typeof(DataType), controlRows[i].dataType.Text);
					string text = string.Empty;
					ColorButtonInfo colorButtonInfo = (ColorButtonInfo)((Control)(object)controlRows[i].colorButton).Tag;
					if (colorButtonInfo != null && colorButtonInfo.UserSet)
					{
						text = ColorToHex(controlRows[i].colorButton.get_SelectedColor());
					}
					CodingProfile selectedValue = ComboBoxHelper.GetSelectedValue<CodingProfile>(controlRows[i].codingProfile);
					ProjectTemplate.get_LayerConfig().get_Layers().Add(new LayerDescription(dataType, selectedValue.get_Name(), controlRows[i].qualityProfile.Text, controlRows[i].nameBox.Text, text));
				}
			}
		}

		protected override void Dispose(bool disposing)
		{
			if (disposing && components != null)
			{
				components.Dispose();
			}
			base.Dispose(disposing);
		}

		private void InitializeComponent()
		{
			//IL_0092: Unknown result type (might be due to invalid IL or missing references)
			//IL_009c: Expected O, but got Unknown
			this.scrollableEditList = new GrBuildStudio.Controls.ScrollableEditList();
			this.ToolTip = new GrBuildStudio.ToolTip();
			base.SuspendLayout();
			this.scrollableEditList.Anchor = System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Left | System.Windows.Forms.AnchorStyles.Right;
			this.scrollableEditList.Location = new System.Drawing.Point(0, 0);
			this.scrollableEditList.Name = "scrollableEditList";
			this.scrollableEditList.Size = new System.Drawing.Size(759, 258);
			this.scrollableEditList.TabIndex = 64;
			((SuperTooltip)this.ToolTip).set_DefaultTooltipSettings(new SuperTooltipInfo("Replace the resource tag in text", "", "TT_NO_TOOLTIP", (System.Drawing.Image)null, (System.Drawing.Image)null, (eTooltipColor)17));
			((SuperTooltip)this.ToolTip).set_LicenseKey("F962CEC7-CD8F-4911-A9E9-CAB39962FC1F");
			this.BackColor = System.Drawing.Color.Transparent;
			base.Controls.Add(this.scrollableEditList);
			this.DoubleBuffered = true;
			base.Name = "CustomLayerLayoutControl";
			base.Size = new System.Drawing.Size(759, 258);
			base.ResumeLayout(false);
		}
	}
	public class CustomLayerLayoutForm : OfficeForm
	{
		private IContainer components;

		private ToolTip ToolTip;

		private CustomLayerLayoutControl customLayerLayoutControl1;

		private Button buttonCancel;

		private Button buttonCreate;

		public ProjectTemplate ProjectTemplate => customLayerLayoutControl1.ProjectTemplate;

		public CustomLayerLayoutForm()
		{
			InitializeComponent();
		}

		public void InitializeForCreation()
		{
			((Control)this).SuspendLayout();
			customLayerLayoutControl1.InitializeForCreation(Defaults.get_DefaultBuildProfile());
			customLayerLayoutControl1.OnLayerEnabledEvent += customLayerLayoutControl1_OnLayerEnabledEvent;
			((Control)this).ResumeLayout();
			EnableControls();
		}

		private void customLayerLayoutControl1_OnLayerEnabledEvent(int activeLayerCount)
		{
			EnableControls();
		}

		public void InitializeForLayerConfig(LayerConfig config)
		{
			((Control)this).SuspendLayout();
			customLayerLayoutControl1.InitializeForLayerConfig(config, Defaults.get_DefaultBuildProfile());
			((Control)this).ResumeLayout();
			EnableControls();
		}

		private void EnableControls()
		{
			buttonCreate.Enabled = customLayerLayoutControl1.HasLayerSelected() > 0;
		}

		private void CustomLayerLayoutForm_FormClosing(object sender, FormClosingEventArgs e)
		{
			e.Cancel = customLayerLayoutControl1.cancelClose;
			customLayerLayoutControl1.cancelClose = false;
		}

		private void buttonCreate_Click(object sender, EventArgs e)
		{
			customLayerLayoutControl1.ApplyLayerConfiguration();
		}

		protected override void Dispose(bool disposing)
		{
			if (disposing && components != null)
			{
				components.Dispose();
			}
			((OfficeForm)this).Dispose(disposing);
		}

		private void InitializeComponent()
		{
			//IL_004d: Unknown result type (might be due to invalid IL or missing references)
			//IL_0057: Expected O, but got Unknown
			ToolTip = new ToolTip();
			customLayerLayoutControl1 = new CustomLayerLayoutControl();
			buttonCancel = new Button();
			buttonCreate = new Button();
			((Control)this).SuspendLayout();
			((SuperTooltip)ToolTip).set_DefaultTooltipSettings(new SuperTooltipInfo("Replace the resource tag in text", "", "TT_NO_TOOLTIP", (Image)null, (Image)null, (eTooltipColor)17));
			((SuperTooltip)ToolTip).set_LicenseKey("F962CEC7-CD8F-4911-A9E9-CAB39962FC1F");
			customLayerLayoutControl1.BackColor = System.Drawing.Color.Transparent;
			customLayerLayoutControl1.Location = new Point(12, 12);
			customLayerLayoutControl1.Name = "customLayerLayoutControl1";
			customLayerLayoutControl1.Size = new Size(760, 274);
			customLayerLayoutControl1.TabIndex = 0;
			buttonCancel.Anchor = AnchorStyles.Top | AnchorStyles.Bottom | AnchorStyles.Left | AnchorStyles.Right;
			buttonCancel.DialogResult = DialogResult.Cancel;
			buttonCancel.Location = new Point(697, 292);
			buttonCancel.Name = "buttonCancel";
			buttonCancel.Size = new Size(75, 23);
			buttonCancel.TabIndex = 1;
			buttonCancel.Text = "Cancel";
			buttonCancel.UseVisualStyleBackColor = true;
			buttonCreate.Anchor = AnchorStyles.Bottom | AnchorStyles.Left | AnchorStyles.Right;
			buttonCreate.DialogResult = DialogResult.OK;
			buttonCreate.Location = new Point(616, 292);
			buttonCreate.Name = "buttonCreate";
			buttonCreate.Size = new Size(75, 23);
			buttonCreate.TabIndex = 2;
			buttonCreate.Text = "Create";
			buttonCreate.UseVisualStyleBackColor = true;
			buttonCreate.Click += buttonCreate_Click;
			((Form)this).AcceptButton = buttonCreate;
			((Form)this).CancelButton = buttonCancel;
			((Form)this).ClientSize = new Size(784, 321);
			((Control)this).Controls.Add(buttonCreate);
			((Control)this).Controls.Add(buttonCancel);
			((Control)this).Controls.Add(customLayerLayoutControl1);
			((Control)(object)this).DoubleBuffered = true;
			((Form)this).FormBorderStyle = FormBorderStyle.FixedDialog;
			((Form)this).MaximizeBox = false;
			((Form)this).MinimizeBox = false;
			((Control)this).Name = "CustomLayerLayoutForm";
			((Form)this).ShowInTaskbar = false;
			((Form)this).StartPosition = FormStartPosition.CenterParent;
			((Control)(object)this).Text = "Custom Layer Layout";
			((Form)this).FormClosing += CustomLayerLayoutForm_FormClosing;
			((Control)this).ResumeLayout(performLayout: false);
		}
	}
	public class DeleteProjectForm : OfficeForm
	{
		private SolutionModel model;

		private IContainer components;

		private LabelX labelQuestion;

		private CheckBoxX IntermediateCheckBox;

		private CheckBoxX OutputCheckBox;

		private CheckBoxX ProjectCheckbox;

		private Button YesButton;

		private Button NoButton;

		public DeleteProjectForm()
		{
			InitializeComponent();
		}

		public void InitForProject(SolutionModel _model)
		{
			model = _model;
			((Control)(object)this).Text = "Delete " + model.ActiveSolutionProject.get_Name() + "?";
			((Control)(object)labelQuestion).Text = "Do you want to delete project '" + model.ActiveSolutionProject.get_Name() + "' from this solution? \r\n\r\nNote that this operation will delete all files on disk (unless requested below)";
		}

		private void YesButton_Click(object sender, EventArgs e)
		{
			//IL_0057: Unknown result type (might be due to invalid IL or missing references)
			//IL_005c: Unknown result type (might be due to invalid IL or missing references)
			//IL_005d: Unknown result type (might be due to invalid IL or missing references)
			//IL_005f: Invalid comparison between Unknown and I4
			if (model.ActiveSolutionProject != null)
			{
				Error val = model.RemoveProject(model.ActiveSolutionProject.get_Id(), !IntermediateCheckBox.get_Checked(), !OutputCheckBox.get_Checked(), !ProjectCheckbox.get_Checked());
				if ((int)val == 0)
				{
					((Form)this).Close();
				}
				else
				{
					MessageBox.Show((IWin32Window)this, "During the excluding of the project, the following error occurred: " + ((object)(Error)(ref val)).ToString(), "Error excluding", MessageBoxButtons.OK, MessageBoxIcon.Hand);
				}
			}
		}

		private void NoButton_Click(object sender, EventArgs e)
		{
			((Form)this).Close();
		}

		protected override void Dispose(bool disposing)
		{
			if (disposing && components != null)
			{
				components.Dispose();
			}
			((OfficeForm)this).Dispose(disposing);
		}

		private void InitializeComponent()
		{
			//IL_0002: Unknown result type (might be due to invalid IL or missing references)
			//IL_000c: Expected O, but got Unknown
			//IL_000d: Unknown result type (might be due to invalid IL or missing references)
			//IL_0017: Expected O, but got Unknown
			//IL_0018: Unknown result type (might be due to invalid IL or missing references)
			//IL_0022: Expected O, but got Unknown
			//IL_0023: Unknown result type (might be due to invalid IL or missing references)
			//IL_002d: Expected O, but got Unknown
			labelQuestion = new LabelX();
			IntermediateCheckBox = new CheckBoxX();
			OutputCheckBox = new CheckBoxX();
			ProjectCheckbox = new CheckBoxX();
			YesButton = new Button();
			NoButton = new Button();
			((Control)this).SuspendLayout();
			((BaseItemControl)labelQuestion).get_BackgroundStyle().set_CornerType((eCornerType)1);
			((Control)(object)labelQuestion).Location = new Point(12, 12);
			((Control)(object)labelQuestion).Name = "labelQuestion";
			((Control)(object)labelQuestion).Size = new Size(381, 47);
			((Control)(object)labelQuestion).TabIndex = 0;
			((Control)(object)labelQuestion).Text = "Do you want to delete project 'Tileset1'? \r\n\r\nNote that this operation will delete all files on disk (unless requested below)";
			labelQuestion.set_WordWrap(true);
			((BaseItemControl)IntermediateCheckBox).get_BackgroundStyle().set_CornerType((eCornerType)1);
			((Control)(object)IntermediateCheckBox).Location = new Point(12, 67);
			((Control)(object)IntermediateCheckBox).Name = "IntermediateCheckBox";
			((Control)(object)IntermediateCheckBox).Size = new Size(152, 23);
			((BaseItemControl)IntermediateCheckBox).set_Style((eDotNetBarStyle)9);
			((Control)(object)IntermediateCheckBox).TabIndex = 1;
			((Control)(object)IntermediateCheckBox).Text = "Keep Intermediate Files";
			((BaseItemControl)OutputCheckBox).get_BackgroundStyle().set_CornerType((eCornerType)1);
			((Control)(object)OutputCheckBox).Location = new Point(12, 96);
			((Control)(object)OutputCheckBox).Name = "OutputCheckBox";
			((Control)(object)OutputCheckBox).Size = new Size(152, 23);
			((BaseItemControl)OutputCheckBox).set_Style((eDotNetBarStyle)9);
			((Control)(object)OutputCheckBox).TabIndex = 2;
			((Control)(object)OutputCheckBox).Text = "Keep Output Files";
			((BaseItemControl)ProjectCheckbox).get_BackgroundStyle().set_CornerType((eCornerType)1);
			((Control)(object)ProjectCheckbox).Location = new Point(12, 125);
			((Control)(object)ProjectCheckbox).Name = "ProjectCheckbox";
			((Control)(object)ProjectCheckbox).Size = new Size(152, 23);
			((BaseItemControl)ProjectCheckbox).set_Style((eDotNetBarStyle)9);
			((Control)(object)ProjectCheckbox).TabIndex = 3;
			((Control)(object)ProjectCheckbox).Text = "Keep Project Files";
			YesButton.AccessibleRole = AccessibleRole.PushButton;
			YesButton.Anchor = AnchorStyles.Bottom | AnchorStyles.Right;
			YesButton.Location = new Point(223, 150);
			YesButton.Name = "YesButton";
			YesButton.Size = new Size(78, 23);
			YesButton.TabIndex = 4;
			YesButton.Text = "Yes";
			YesButton.Click += YesButton_Click;
			NoButton.AccessibleRole = AccessibleRole.PushButton;
			NoButton.Anchor = AnchorStyles.Bottom | AnchorStyles.Right;
			NoButton.DialogResult = DialogResult.Cancel;
			NoButton.Location = new Point(307, 150);
			NoButton.Name = "NoButton";
			NoButton.Size = new Size(75, 23);
			NoButton.TabIndex = 5;
			NoButton.Text = "No";
			NoButton.Click += NoButton_Click;
			((Form)this).AcceptButton = YesButton;
			((ContainerControl)this).AutoScaleDimensions = new SizeF(6f, 13f);
			((ContainerControl)this).AutoScaleMode = AutoScaleMode.Font;
			((Form)this).CancelButton = NoButton;
			((Form)this).ClientSize = new Size(394, 185);
			((Control)this).Controls.Add(NoButton);
			((Control)this).Controls.Add(YesButton);
			((Control)this).Controls.Add((Control)(object)ProjectCheckbox);
			((Control)this).Controls.Add((Control)(object)OutputCheckBox);
			((Control)this).Controls.Add((Control)(object)IntermediateCheckBox);
			((Control)this).Controls.Add((Control)(object)labelQuestion);
			((Control)(object)this).DoubleBuffered = true;
			((Form)this).FormBorderStyle = FormBorderStyle.FixedDialog;
			((Form)this).MaximizeBox = false;
			((Form)this).MinimizeBox = false;
			((Control)this).Name = "DeleteProjectDialog";
			((Form)this).ShowInTaskbar = false;
			((Form)this).StartPosition = FormStartPosition.CenterParent;
			((Control)(object)this).Text = "ExcludeProjectDialog";
			((Control)this).ResumeLayout(performLayout: false);
		}
	}
	public class FilterBar : UserControl
	{
		public delegate void FilterRequestEventHandler(object sender);

		public delegate void CancelClickEventHandler(object sender);

		private IContainer components;

		private TextBox textBoxWhat;

		private Label label1;

		private Button buttonClose;

		private Label label2;

		public string Filter
		{
			get
			{
				return textBoxWhat.Text;
			}
			set
			{
				textBoxWhat.Text = value;
			}
		}

		public event FilterRequestEventHandler FilterRequest;

		public event CancelClickEventHandler CancelClick;

		public FilterBar()
		{
			InitializeComponent();
		}

		public void Activate()
		{
			textBoxWhat.SelectAll();
			textBoxWhat.Focus();
		}

		public void Reset()
		{
			Filter = string.Empty;
		}

		protected virtual void OnFilterRequest()
		{
			this.FilterRequest?.Invoke(this);
		}

		protected virtual void OnCancelClick()
		{
			this.CancelClick?.Invoke(this);
		}

		private void buttonClose_Click(object sender, EventArgs e)
		{
			OnCancelClick();
		}

		private void textBoxWhat_TextChanged(object sender, EventArgs e)
		{
			OnFilterRequest();
		}

		protected override void Dispose(bool disposing)
		{
			if (disposing && components != null)
			{
				components.Dispose();
			}
			base.Dispose(disposing);
		}

		private void InitializeComponent()
		{
			this.textBoxWhat = new System.Windows.Forms.TextBox();
			this.label1 = new System.Windows.Forms.Label();
			this.buttonClose = new System.Windows.Forms.Button();
			this.label2 = new System.Windows.Forms.Label();
			base.SuspendLayout();
			this.textBoxWhat.Location = new System.Drawing.Point(167, 10);
			this.textBoxWhat.Name = "textBoxWhat";
			this.textBoxWhat.Size = new System.Drawing.Size(186, 20);
			this.textBoxWhat.TabIndex = 1;
			this.textBoxWhat.TextChanged += new System.EventHandler(textBoxWhat_TextChanged);
			this.label1.AutoSize = true;
			this.label1.ImageAlign = System.Drawing.ContentAlignment.MiddleLeft;
			this.label1.Location = new System.Drawing.Point(42, 13);
			this.label1.Name = "label1";
			this.label1.Size = new System.Drawing.Size(119, 13);
			this.label1.TabIndex = 1;
			this.label1.Text = "Filter Stacked Textures:";
			this.buttonClose.Location = new System.Drawing.Point(384, 8);
			this.buttonClose.Name = "buttonClose";
			this.buttonClose.Size = new System.Drawing.Size(75, 23);
			this.buttonClose.TabIndex = 4;
			this.buttonClose.Text = "Close";
			this.buttonClose.UseVisualStyleBackColor = true;
			this.buttonClose.Click += new System.EventHandler(buttonClose_Click);
			this.label2.Image = GrBuildStudio.Properties.Resources.magnifier;
			this.label2.Location = new System.Drawing.Point(21, 10);
			this.label2.Name = "label2";
			this.label2.Size = new System.Drawing.Size(20, 23);
			this.label2.TabIndex = 5;
			base.AutoScaleDimensions = new System.Drawing.SizeF(6f, 13f);
			base.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;
			base.Controls.Add(this.label2);
			base.Controls.Add(this.buttonClose);
			base.Controls.Add(this.label1);
			base.Controls.Add(this.textBoxWhat);
			base.Name = "FilterBar";
			base.Size = new System.Drawing.Size(471, 36);
			base.ResumeLayout(false);
			base.PerformLayout();
		}
	}
	public enum FlipOption
	{
		None,
		Horizontal,
		Vertical,
		Both
	}
	public enum HResult
	{
		Ok = 0,
		False = 1,
		InvalidArguments = -2147024809,
		OutOfMemory = -2147024882,
		NoInterface = -2147467262,
		Fail = -2147467259,
		ElementNotFound = -2147023728,
		TypeElementNotFound = -2147319765,
		NoObject = -2147221019,
		Win32ErrorCanceled = 1223,
		Canceled = -2147023673,
		ResourceInUse = -2147024726,
		AccessDenied = -2147287035
	}
	[ComImport]
	[Guid("6332DEBF-87B5-4670-90C0-5E57B408A49E")]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	internal interface ICustomDestinationList
	{
		void SetAppID([MarshalAs(UnmanagedType.LPWStr)] string pszAppID);

		[PreserveSig]
		HResult BeginList(out uint cMaxSlots, ref Guid riid, [MarshalAs(UnmanagedType.Interface)] out object ppvObject);

		[PreserveSig]
		HResult AppendCategory([MarshalAs(UnmanagedType.LPWStr)] string pszCategory, [MarshalAs(UnmanagedType.Interface)] IObjectArray poa);

		void AppendKnownCategory([MarshalAs(UnmanagedType.I4)] KnownDestinationCategory category);

		[PreserveSig]
		HResult AddUserTasks([MarshalAs(UnmanagedType.Interface)] IObjectArray poa);

		void CommitList();

		void GetRemovedDestinations(ref Guid riid, [MarshalAs(UnmanagedType.Interface)] out object ppvObject);

		void DeleteList([MarshalAs(UnmanagedType.LPWStr)] string pszAppID);

		void AbortList();
	}
	public class ImportAssetForm : OfficeForm
	{
		private class ControlRow
		{
			public ChannelPickerControl picker;

			public ImportTemplateInfo[] templateInfos = (ImportTemplateInfo[])(object)new ImportTemplateInfo[4];

			public ButtonX optionsButton;

			public ButtonX infoButton;

			public Label descriptionLabel;

			public LayerAssetDetailsControl details;

			public int layerIndex;

			public SwizzleControl[] swizzles = new SwizzleControl[4];

			public ButtonItem[] swizzleMenuButtons = (ButtonItem[])(object)new ButtonItem[4];

			public ButtonItem[] forceTypeMenuButtons = (ButtonItem[])(object)new ButtonItem[4];
		}

		public enum OverrideTextureType
		{
			Auto,
			Single,
			UDim,
			Tiled
		}

		private struct PresetControlPair
		{
			internal SwizzleControl Control { get; set; }

			internal SwizzlePreset Preset { get; set; }

			internal PresetControlPair(SwizzleControl control, SwizzlePreset preset)
			{
				this = default(PresetControlPair);
				Control = control;
				Preset = preset;
			}
		}

		private struct OptionsButtonContext
		{
			public delegate void OptionSelectedEventHandler(object sender, OptionsButtonContext context);

			public ControlRow row;

			public int layerIndex;

			public int subTexIndex;

			public event OptionSelectedEventHandler OptionSelected;

			public OptionsButtonContext(ControlRow row, int layerIndex, int subTexIndex)
			{
				this = default(OptionsButtonContext);
				this.row = row;
				this.layerIndex = layerIndex;
				this.subTexIndex = subTexIndex;
			}

			public void RaiseOptionSelected()
			{
				this.OptionSelected?.Invoke(this, this);
			}
		}

		public Asset AssetToEdit;

		private SolutionModel model;

		private UserSettings userSettings;

		private ProjectSettings projectSettings;

		private List<ControlRow> controlRows;

		private List<string> SuggestedNames = new List<string>();

		private string firstLayername = string.Empty;

		private bool cancelClose;

		private string[] columnNames = new string[6] { "", "Texture", "File", "Info", "", "" };

		private int[] columnWidths = new int[6] { 30, 120, 300, 140, 60, 60 };

		private int controlHeight = 20;

		private int controlMargin = 20;

		private int rowMargin = 16;

		private IContainer components;

		private Button buttonCancel;

		private Button buttonImport;

		private ScrollableEditList scrollableEditList;

		private Label labelName;

		private ComboBox comboBoxName;

		private Label label10;

		private ToolTip ToolTip;

		private CheckBox checkBoxCubemap;

		private Label label1;

		private ControlContainerItem controlContainerItem1;

		public LayerConfig LayerConfig { private get; set; }

		public AssetImportDescription AssetImportDescription { get; private set; }

		private ImportAssetForm()
		{
			InitializeComponent();
		}

		public ImportAssetForm(SolutionModel model, UserSettings settings)
		{
			InitializeComponent();
			this.model = model;
			userSettings = settings;
		}

		private void ImportAssetForm_Load(object sender, EventArgs e)
		{
			((Control)this).Width = 118 + columnWidths.Sum();
			projectSettings = userSettings.Solution[model.ActiveProjectBuilder.get_ActiveProject().get_Id()];
			for (int i = 0; i < columnNames.Length; i++)
			{
				scrollableEditList.Columns.Add(new ScrollableEditList.ColumnItem(columnNames[i], columnWidths[i]));
			}
			if (LayerConfig != null)
			{
				controlRows = new List<ControlRow>();
				for (int j = 0; j < LayerConfig.get_Layers().Count; j++)
				{
					ScrollableEditList.Row row = null;
					MakeRow(j, out row, out var controls);
					scrollableEditList.Rows.Add(row);
					controlRows.Add(controls);
				}
			}
			UpdateSuggestedNames();
			UpdateExampleName();
			if (AssetToEdit != null)
			{
				LoadAsset();
			}
		}

		private void SetOptionButtonToValue<T>(ControlRow row, int buttonOptionIdx, T selectedEnum) where T : struct, IConvertible
		{
			//IL_0048: Unknown result type (might be due to invalid IL or missing references)
			//IL_004e: Expected O, but got Unknown
			if (!typeof(T).IsEnum)
			{
				throw new ArgumentException("T must be an enumerated type");
			}
			foreach (ButtonItem item in (CollectionBase)(object)row.optionsButton.get_SubItems().get_Item(buttonOptionIdx).get_SubItems())
			{
				ButtonItem val = item;
				val.set_Checked(((BaseItem)val).get_Text() == selectedEnum.ToString());
			}
		}

		private void LoadAsset()
		{
			//IL_0036: Unknown result type (might be due to invalid IL or missing references)
			//IL_003c: Invalid comparison between Unknown and I4
			//IL_012a: Unknown result type (might be due to invalid IL or missing references)
			//IL_013b: Unknown result type (might be due to invalid IL or missing references)
			//IL_0148: Unknown result type (might be due to invalid IL or missing references)
			//IL_014d: Unknown result type (might be due to invalid IL or missing references)
			//IL_014f: Unknown result type (might be due to invalid IL or missing references)
			//IL_0151: Unknown result type (might be due to invalid IL or missing references)
			//IL_0153: Unknown result type (might be due to invalid IL or missing references)
			//IL_0156: Unknown result type (might be due to invalid IL or missing references)
			//IL_0168: Expected I4, but got Unknown
			//IL_01b2: Unknown result type (might be due to invalid IL or missing references)
			//IL_01b8: Invalid comparison between Unknown and I4
			ImportAsset val = null;
			string projectPath = model.ActiveProjectBuilder.GetProjectPath();
			if (!AssetTools.AssetToImportAsset(AssetToEdit, projectPath, ref val))
			{
				return;
			}
			checkBoxCubemap.Checked = (int)val.get_Type() == 1;
			labelName.Text = val.get_Name();
			comboBoxName.Items.Clear();
			comboBoxName.Items.Add(val.get_Name());
			comboBoxName.SelectedIndex = 0;
			firstLayername = "";
			UpdateExampleName();
			buttonImport.Text = "Update";
			for (int i = 0; i < LayerConfig.get_Layers().Count; i++)
			{
				ImportAssetLayer val2 = val.get_Layers()[i];
				ControlRow controlRow = controlRows[i];
				if (string.IsNullOrEmpty(val2.get_QualityProfile()))
				{
					val2.set_QualityProfile("Default");
				}
				QualityLevel selectedEnum = (QualityLevel)System.Enum.Parse(typeof(QualityLevel), val2.get_QualityProfile(), ignoreCase: true);
				SetOptionButtonToValue(controlRow, 1, selectedEnum);
				this.SetOptionButtonToValue<Flip>(controlRow, 2, val2.get_Flip());
				this.SetOptionButtonToValue<TextureMipSourceType>(controlRow, 3, val2.get_MipSourceType());
				AssetPackingMode packingMode = val2.get_PackingMode();
				AssetPackingMode val3 = packingMode;
				switch (val3 - 1)
				{
				case 0:
					controlRow.picker.ActiveSourceMode = SourceMode.MultiSource;
					break;
				case 1:
					controlRow.picker.ActiveSourceMode = SourceMode.MultiSource3;
					break;
				case 2:
					controlRow.picker.ActiveSourceMode = SourceMode.MultiSource4;
					break;
				default:
					controlRow.picker.ActiveSourceMode = SourceMode.SingleSource;
					break;
				}
				checkBoxCubemap.Enabled = (int)val2.get_PackingMode() == 0;
				int srcIdx;
				for (srcIdx = 0; srcIdx < 4; srcIdx++)
				{
					List<Item> list = val2.get_Source().Sources.Where((Item _src) => _src.SubIndex == srcIdx).ToList();
					if (list.Count > 0)
					{
						if (list.Count > 1)
						{
							MessageBox.Show((IWin32Window)this, "More subtextures found than anticipated ! found " + list.Count + ". only using first", "internal error", MessageBoxButtons.OK, MessageBoxIcon.Hand);
						}
						string fullPath = Path.GetFullPath(list.First().Source);
						ImportTemplateInfo val4 = updatePickers(controlRow, srcIdx, fullPath);
						controlRow.picker.SetDisplayText(srcIdx, val4.get_DisplayString());
						controlRow.swizzles[srcIdx].maxChannels = DataTypeInfo.GetNumChannels(LayerConfig.get_Layers()[i].get_DataType());
						controlRow.swizzles[srcIdx].LoadSwizzle(val2.get_Swizzle()[srcIdx]);
					}
				}
			}
		}

		private void MakeRow(int layerIndex, out ScrollableEditList.Row row, out ControlRow controls)
		{
			//IL_01e0: Unknown result type (might be due to invalid IL or missing references)
			//IL_01e5: Unknown result type (might be due to invalid IL or missing references)
			//IL_01ef: Expected O, but got Unknown
			//IL_027e: Unknown result type (might be due to invalid IL or missing references)
			//IL_0288: Expected O, but got Unknown
			controls = new ControlRow();
			controls.layerIndex = layerIndex;
			controls.picker = new ChannelPickerControl(LayerConfig.get_Layers()[layerIndex].get_DataType());
			controls.picker.Name = "assetPicker";
			controls.picker.BackColor = System.Drawing.Color.Transparent;
			controls.picker.PickerPicked += picker_Picked;
			controls.picker.PickerReset += picker_Reset;
			controls.picker.SourceModeChanged += picker_SourceModeChanged;
			controls.picker.SourceModeChanging += picker_SourceModeChanging;
			controls.picker.PickerFileDropped += picker_PickerFileDropped;
			controls.picker.Tag = controls;
			controls.picker.Init(ToolTip, "TT_SINGLEASSET_TEMPLATE_TBOX", layerIndex, ChannelPickerControl.FileFolderMode.File);
			controls.picker.Size = new Size(columnWidths[2] - 2 * controlMargin, controls.picker.Size.Height);
			controls.descriptionLabel = new Label();
			controls.descriptionLabel.Name = "descriptionLabel";
			controls.descriptionLabel.Size = new Size(columnWidths[3] - 2 * controlMargin, controlHeight + rowMargin);
			controls.descriptionLabel.BackColor = System.Drawing.Color.Transparent;
			controls.descriptionLabel.TextAlign = ContentAlignment.MiddleLeft;
			controls.descriptionLabel.TabIndex = 10 * (layerIndex + 1) + 4;
			((SuperTooltip)ToolTip).SetSuperTooltip((IComponent)controls.descriptionLabel, new SuperTooltipInfo("", "", "TT_SINGLEASSET_DESC_LABEL", (Image)null, (Image)null, ((SuperTooltip)ToolTip).get_DefaultTooltipSettings().get_Color()));
			controls.optionsButton = SetupOptionsButton(controls, layerIndex);
			((Control)(object)controls.optionsButton).Tag = controls;
			((Control)(object)controls.optionsButton).TabIndex = 10 * (layerIndex + 1) + 6;
			controls.details = new LayerAssetDetailsControl();
			controls.details.Tag = controls;
			controls.infoButton = SetupInfoButton(controls.details);
			((Control)(object)controls.infoButton).Tag = controls;
			((Control)(object)controls.infoButton).TabIndex = 10 * (layerIndex + 1) + 8;
			controls.details.UpdateTree(new ImportTemplateInfo());
			row = new ScrollableEditList.Row();
			row.RowItems.Add(new ScrollableEditList.RowItem(""));
			row.RowItems.Add(new ScrollableEditList.RowItem(LayerConfig.get_Layers()[layerIndex].get_LayerName()));
			row.RowItems.Add(new ScrollableEditList.RowItem(controls.picker));
			row.RowItems.Add(new ScrollableEditList.RowItem(controls.descriptionLabel));
			row.RowItems.Add(new ScrollableEditList.RowItem((Control)(object)controls.optionsButton));
			row.RowItems.Add(new ScrollableEditList.RowItem((Control)(object)controls.infoButton));
			controls.picker.ActiveSourceMode = PreferredSourceMode(LayerConfig.get_Layers()[layerIndex].get_LayerName());
		}

		private SourceMode PreferredSourceMode(string layerName)
		{
			int num = layerName.Count((char f) => f == Constants.ChannelPackedLayerSplitLiteral);
			if (1 == 0)
			{
			}
			SourceMode result = num switch
			{
				0 => SourceMode.SingleSource, 
				1 => SourceMode.MultiSource, 
				2 => SourceMode.MultiSource3, 
				3 => SourceMode.MultiSource4, 
				_ => SourceMode.SingleSource, 
			};
			if (1 == 0)
			{
			}
			return result;
		}

		private void picker_PickerFileDropped(object sender, int subIndex, string filePath)
		{
			ChannelPickerControl channelPickerControl = (ChannelPickerControl)sender;
			ControlRow row = (ControlRow)channelPickerControl.Tag;
			if (projectSettings != null)
			{
				projectSettings.SingleAssetImportLocation = Paths.GetDirectoryName(filePath);
			}
			ImportTemplateInfo val = updatePickers(row, subIndex, filePath);
			channelPickerControl.SetDisplayText(subIndex, val.get_DisplayString());
		}

		private void picker_Picked(object sender, EventArgs e, int subtextureIndex)
		{
			ChannelPickerControl channelPickerControl = (ChannelPickerControl)sender;
			ControlRow row = (ControlRow)channelPickerControl.Tag;
			OpenFileDialog openFileDialog = new OpenFileDialog();
			openFileDialog.Filter = string.Format("Image Files ({0})|{0}|All Files (*.*)|*.*", GrimTools.GetExtensionsFilterString());
			if (projectSettings != null)
			{
				openFileDialog.InitialDirectory = projectSettings.SingleAssetImportLocation;
			}
			if (openFileDialog.ShowDialog() == DialogResult.OK)
			{
				if (projectSettings != null)
				{
					projectSettings.SingleAssetImportLocation = Paths.GetDirectoryName(openFileDialog.FileName);
				}
				ImportTemplateInfo val = updatePickers(row, subtextureIndex, openFileDialog.FileName);
				channelPickerControl.SetDisplayText(subtextureIndex, val.get_DisplayString());
			}
		}

		private TextureType OverridenTextureType(OverrideTextureType t)
		{
			//IL_001c: Unknown result type (might be due to invalid IL or missing references)
			//IL_0020: Unknown result type (might be due to invalid IL or missing references)
			//IL_0024: Unknown result type (might be due to invalid IL or missing references)
			//IL_0028: Unknown result type (might be due to invalid IL or missing references)
			//IL_002f: Unknown result type (might be due to invalid IL or missing references)
			//IL_0030: Unknown result type (might be due to invalid IL or missing references)
			//IL_0033: Unknown result type (might be due to invalid IL or missing references)
			if (1 == 0)
			{
			}
			TextureType result = (TextureType)(t switch
			{
				OverrideTextureType.Single => 1, 
				OverrideTextureType.Tiled => 3, 
				OverrideTextureType.UDim => 2, 
				_ => 0, 
			});
			if (1 == 0)
			{
			}
			return result;
		}

		private ImportTemplateInfo updatePickers(ControlRow row, int subtextureIndex, string fileName)
		{
			//IL_0023: Unknown result type (might be due to invalid IL or missing references)
			ButtonItem parent = row.forceTypeMenuButtons[subtextureIndex];
			OverrideTextureType overrideTextureType = RetrieveSelectedEnumButtonItem(parent, OverrideTextureType.Auto);
			ImportTemplateInfo val = null;
			val = ((overrideTextureType != 0) ? ImportTemplateConstructor.TemplateFromFilename(fileName, OverridenTextureType(overrideTextureType)) : ImportTemplateConstructor.TemplateFromFilename(fileName));
			row.templateInfos[subtextureIndex] = val;
			UpdateDescriptionAndDetails(row);
			if (!SuggestedNames.Contains(val.get_SuggestedAssetName()))
			{
				SuggestedNames.Add(val.get_SuggestedAssetName());
			}
			UpdateSuggestedNames();
			return val;
		}

		private void UpdateDescriptionAndDetails(ControlRow row)
		{
			string text = "";
			int num = 1;
			float num2 = 1f;
			ChannelMask val = null;
			Dictionary<AssetPackingMode, ChannelMask> dictionary = new Dictionary<AssetPackingMode, ChannelMask>();
			ChannelMerging.GetAllChannelMasks(LayerConfig.get_Layers()[row.layerIndex].get_DataType(), ref dictionary);
			switch (row.picker.ActiveSourceMode)
			{
			case SourceMode.MultiSource4:
				num = 4;
				val = dictionary[(AssetPackingMode)3];
				num2 = 2f;
				break;
			case SourceMode.MultiSource3:
				num = 3;
				val = dictionary[(AssetPackingMode)2];
				num2 = 1.5f;
				break;
			case SourceMode.MultiSource:
				num = 2;
				val = dictionary[(AssetPackingMode)1];
				break;
			}
			for (int i = 0; i < num; i++)
			{
				if (i > 0)
				{
					text += "\n";
				}
				if (num > 1)
				{
					text = text + val.humanReadable[i] + ": ";
				}
				text += ((row.templateInfos[i] != null) ? GetDescriptiveTextForInfo(row.templateInfos[i]) : "Empty");
			}
			row.descriptionLabel.Text = text;
			MaskInfo maskInfo = default(MaskInfo);
			maskInfo.MaskCount = num;
			maskInfo.Infos = (ImportTemplateInfo[])(object)new ImportTemplateInfo[4];
			maskInfo.Names = new string[4];
			for (int j = 0; j < num; j++)
			{
				maskInfo.Infos[j] = row.templateInfos[j];
				maskInfo.Names[j] = ((val != null) ? val.humanReadable[j] : string.Empty);
			}
			row.details.UpdateTree(maskInfo);
			bool visible = row.picker.ActiveSourceMode == SourceMode.MultiSource || row.picker.ActiveSourceMode == SourceMode.MultiSource3 || row.picker.ActiveSourceMode == SourceMode.MultiSource4;
			bool visible2 = row.picker.ActiveSourceMode == SourceMode.MultiSource3 || row.picker.ActiveSourceMode == SourceMode.MultiSource4;
			bool visible3 = row.picker.ActiveSourceMode == SourceMode.MultiSource4;
			((BaseItem)row.swizzleMenuButtons[0]).set_Text((row.picker.ActiveSourceMode == SourceMode.SingleSource) ? "Swizzle" : "Swizzle 0");
			((BaseItem)row.swizzleMenuButtons[1]).set_Visible(visible);
			((BaseItem)row.swizzleMenuButtons[2]).set_Visible(visible2);
			((BaseItem)row.swizzleMenuButtons[3]).set_Visible(visible3);
			((BaseItem)row.forceTypeMenuButtons[0]).set_Text((row.picker.ActiveSourceMode == SourceMode.SingleSource) ? "Force Type" : "Force Type 0");
			((BaseItem)row.forceTypeMenuButtons[1]).set_Visible(visible);
			((BaseItem)row.forceTypeMenuButtons[2]).set_Visible(visible2);
			((BaseItem)row.forceTypeMenuButtons[3]).set_Visible(visible3);
			Size size = row.descriptionLabel.Size;
			size.Height = controlHeight + (int)((float)rowMargin * num2);
			row.descriptionLabel.Size = size;
		}

		private void picker_Reset(object sender, int idx)
		{
			ControlRow controlRow = (ControlRow)((ChannelPickerControl)sender).Tag;
			controlRow.templateInfos[idx] = null;
			UpdateDescriptionAndDetails(controlRow);
		}

		private void picker_SourceModeChanged(object sender, SourceMode mode)
		{
			ControlRow row = (ControlRow)((ChannelPickerControl)sender).Tag;
			UpdateDescriptionAndDetails(row);
		}

		private bool picker_SourceModeChanging(object sender, SourceMode from, SourceMode to)
		{
			if (to == SourceMode.MultiSource || to == SourceMode.MultiSource3 || to == SourceMode.MultiSource4)
			{
				if (checkBoxCubemap.Checked)
				{
					MessageBox.Show("Cubemaps cannot have multiple sources (channel packing).", "Cubemaps do not support channel packing", MessageBoxButtons.OK, MessageBoxIcon.Hand);
					return false;
				}
				checkBoxCubemap.Enabled = false;
				checkBoxCubemap.Checked = false;
			}
			else
			{
				bool enabled = true;
				if (LayerConfig != null)
				{
					for (int i = 0; i < LayerConfig.get_Layers().Count; i++)
					{
						if (controlRows[i].picker != sender && (controlRows[i].picker.ActiveSourceMode == SourceMode.MultiSource || controlRows[i].picker.ActiveSourceMode == SourceMode.MultiSource3 || controlRows[i].picker.ActiveSourceMode == SourceMode.MultiSource4))
						{
							enabled = false;
							break;
						}
					}
				}
				checkBoxCubemap.Enabled = enabled;
			}
			return true;
		}

		private string GetDescriptiveTextForInfo(ImportTemplateInfo info)
		{
			//IL_0002: Unknown result type (might be due to invalid IL or missing references)
			//IL_0007: Unknown result type (might be due to invalid IL or missing references)
			//IL_000c: Unknown result type (might be due to invalid IL or missing references)
			//IL_000e: Unknown result type (might be due to invalid IL or missing references)
			//IL_0020: Expected I4, but got Unknown
			//IL_005a: Unknown result type (might be due to invalid IL or missing references)
			//IL_005f: Unknown result type (might be due to invalid IL or missing references)
			//IL_0075: Unknown result type (might be due to invalid IL or missing references)
			//IL_007a: Unknown result type (might be due to invalid IL or missing references)
			TextureType type = info.get_Type();
			if (1 == 0)
			{
			}
			string result;
			switch (type - 1)
			{
			case 0:
				result = "Single File";
				break;
			case 1:
				result = $"UDIM - {info.get_FoundTextureFiles().get_NumberOfTextures()} patches";
				break;
			case 2:
			{
				object[] array = new object[2];
				PatternRange range = info.get_FoundTextureFiles().get_Range();
				array[0] = ((PatternRange)(ref range)).GetTiledWidth();
				range = info.get_FoundTextureFiles().get_Range();
				array[1] = ((PatternRange)(ref range)).GetTiledHeight();
				result = string.Format("Tiled - {0} x {1}", array);
				break;
			}
			default:
				result = "No File";
				break;
			}
			if (1 == 0)
			{
			}
			return result;
		}

		private bool DoesAssetExists(string name)
		{
			if (AssetToEdit != null && name == AssetToEdit.get_Name())
			{
				return false;
			}
			return model.ActiveProjectBuilder.GetAsset(AssetImportDescription.Name) != null;
		}

		private void buttonImport_Click(object sender, EventArgs e)
		{
			//IL_0080: Unknown result type (might be due to invalid IL or missing references)
			//IL_00b6: Unknown result type (might be due to invalid IL or missing references)
			//IL_00be: Unknown result type (might be due to invalid IL or missing references)
			//IL_00c6: Unknown result type (might be due to invalid IL or missing references)
			//IL_01d0: Unknown result type (might be due to invalid IL or missing references)
			//IL_0238: Unknown result type (might be due to invalid IL or missing references)
			//IL_023f: Expected O, but got Unknown
			//IL_02c6: Unknown result type (might be due to invalid IL or missing references)
			//IL_02cd: Expected O, but got Unknown
			//IL_0354: Unknown result type (might be due to invalid IL or missing references)
			//IL_035b: Expected O, but got Unknown
			//IL_0381: Unknown result type (might be due to invalid IL or missing references)
			AssetImportDescription = new AssetImportDescription();
			AssetImportDescription.Name = comboBoxName.Text.Replace("*", firstLayername);
			AssetImportDescription.Type = (AssetType)(checkBoxCubemap.Checked ? 1 : 0);
			if (LayerConfig == null)
			{
				return;
			}
			bool flag = false;
			for (int i = 0; i < LayerConfig.get_Layers().Count; i++)
			{
				LayerAssetImportDescription layerAssetImportDescription = new LayerAssetImportDescription();
				layerAssetImportDescription.Name = null;
				int num = 1;
				AssetPackingMode packingMode = (AssetPackingMode)0;
				switch (controlRows[i].picker.ActiveSourceMode)
				{
				case SourceMode.MultiSource:
					packingMode = (AssetPackingMode)1;
					num = 2;
					break;
				case SourceMode.MultiSource3:
					packingMode = (AssetPackingMode)2;
					num = 3;
					break;
				case SourceMode.MultiSource4:
					packingMode = (AssetPackingMode)3;
					num = 4;
					break;
				}
				for (int j = 0; j < 4; j++)
				{
					bool flag2 = controlRows[i].templateInfos[j] != null;
					if (j >= num)
					{
						flag2 = false;
					}
					flag = flag || flag2;
					ImportTemplateInfo val = (flag2 ? controlRows[i].templateInfos[j] : ImportTemplateInfo.get_Empty());
					if (flag2)
					{
						layerAssetImportDescription.FileSources.AddSource(val.get_TemplateString(), j);
					}
					if (layerAssetImportDescription.Name == null && flag2)
					{
						layerAssetImportDescription.Name = val.get_SuggestedAssetName();
					}
					layerAssetImportDescription.Swizzle[j] = controlRows[i].swizzles[j].Swizzle;
					if (layerAssetImportDescription.Swizzle[j].Equals(SwizzlePreset.Default.Pattern))
					{
						layerAssetImportDescription.Swizzle[j] = "";
					}
				}
				layerAssetImportDescription.PackingMode = packingMode;
				if (layerAssetImportDescription.Name == null)
				{
					layerAssetImportDescription.Name = LayerConfig.get_Layers()[i].get_LayerName();
				}
				foreach (ButtonItem item in (CollectionBase)(object)controlRows[i].optionsButton.get_SubItems().get_Item(1).get_SubItems())
				{
					ButtonItem val2 = item;
					if (val2.get_Checked())
					{
						layerAssetImportDescription.Quality = (QualityLevel)System.Enum.Parse(typeof(QualityLevel), ((BaseItem)val2).get_Text());
						break;
					}
				}
				foreach (ButtonItem item2 in (CollectionBase)(object)controlRows[i].optionsButton.get_SubItems().get_Item(2).get_SubItems())
				{
					ButtonItem val3 = item2;
					if (val3.get_Checked())
					{
						layerAssetImportDescription.Flip = (FlipOption)System.Enum.Parse(typeof(FlipOption), ((BaseItem)val3).get_Text());
						break;
					}
				}
				foreach (ButtonItem item3 in (CollectionBase)(object)controlRows[i].optionsButton.get_SubItems().get_Item(3).get_SubItems())
				{
					ButtonItem val4 = item3;
					if (val4.get_Checked())
					{
						layerAssetImportDescription.MipSourceType = (TextureMipSourceType)System.Enum.Parse(typeof(TextureMipSourceType), ((BaseItem)val4).get_Text());
						break;
					}
				}
				AssetImportDescription.LayerAssets.Add(layerAssetImportDescription);
			}
			if (!flag)
			{
				MessageBox.Show("No layer textures set. Set at least one texture in a layer!", "Import Error", MessageBoxButtons.OK, MessageBoxIcon.Hand);
			}
			else if (DoesAssetExists(AssetImportDescription.Name) && MessageBox.Show("The Stacked Textures with name '" + AssetImportDescription.Name + "' already exist and will be updated with the new information. Proceed?", "Warning", MessageBoxButtons.YesNo, MessageBoxIcon.Question) == DialogResult.No)
			{
				((Form)this).DialogResult = DialogResult.Cancel;
				cancelClose = true;
			}
			else
			{
				userSettings.Solution[model.ActiveProjectBuilder.get_ActiveProject().get_Id()] = projectSettings;
				((Form)this).DialogResult = DialogResult.OK;
			}
		}

		private List<string> EnumToStringList<T>()
		{
			List<string> list = new List<string>();
			Array values = System.Enum.GetValues(typeof(T));
			for (int i = 0; i < values.Length; i++)
			{
				list.Add(values.GetValue(i).ToString());
			}
			return list;
		}

		private ButtonItem SetupEnumButtonItems<T>(T defaultValue, string title)
		{
			//IL_0001: Unknown result type (might be due to invalid IL or missing references)
			//IL_0007: Expected O, but got Unknown
			//IL_0046: Unknown result type (might be due to invalid IL or missing references)
			//IL_004d: Expected O, but got Unknown
			ButtonItem val = new ButtonItem();
			((BaseItem)val).set_GlobalItem(false);
			((BaseItem)val).set_Text(title);
			string text = defaultValue.ToString();
			foreach (string item in EnumToStringList<T>())
			{
				bool @checked = text.Equals(item);
				ButtonItem val2 = new ButtonItem();
				val2.set_Checked(@checked);
				((BaseItem)val2).set_Text(item);
				((BaseItem)val2).set_Tag((object)item);
				((BaseItem)val2).add_Click((EventHandler)sub_Click);
				((BaseItem)val).get_SubItems().Add((BaseItem)(object)val2);
			}
			return val;
		}

		private ButtonItem SetupEnumButtonItems<T>(T defaultValue, string title, List<string> filterList)
		{
			//IL_0001: Unknown result type (might be due to invalid IL or missing references)
			//IL_0007: Expected O, but got Unknown
			//IL_0059: Unknown result type (might be due to invalid IL or missing references)
			//IL_0060: Expected O, but got Unknown
			ButtonItem val = new ButtonItem();
			((BaseItem)val).set_GlobalItem(false);
			((BaseItem)val).set_Text(title);
			string text = defaultValue.ToString();
			foreach (string item in EnumToStringList<T>())
			{
				if (filterList.Contains(item, StringComparer.OrdinalIgnoreCase))
				{
					bool @checked = text.Equals(item);
					ButtonItem val2 = new ButtonItem();
					val2.set_Checked(@checked);
					((BaseItem)val2).set_Text(item);
					((BaseItem)val2).set_Tag((object)item);
					((BaseItem)val2).add_Click((EventHandler)sub_Click);
					((BaseItem)val).get_SubItems().Add((BaseItem)(object)val2);
				}
			}
			return val;
		}

		private T RetrieveSelectedEnumButtonItem<T>(ButtonItem parent, T defaultValue)
		{
			//IL_0016: Unknown result type (might be due to invalid IL or missing references)
			//IL_001c: Expected O, but got Unknown
			foreach (ButtonItem item in (CollectionBase)(object)((BaseItem)parent).get_SubItems())
			{
				ButtonItem val = item;
				if (val.get_Checked())
				{
					return (T)System.Enum.Parse(typeof(T), ((BaseItem)val).get_Text(), ignoreCase: true);
				}
			}
			return defaultValue;
		}

		private void sub_Click(object sender, EventArgs e)
		{
			//IL_0002: Unknown result type (might be due to invalid IL or missing references)
			//IL_0008: Expected O, but got Unknown
			//IL_001c: Unknown result type (might be due to invalid IL or missing references)
			//IL_0022: Expected O, but got Unknown
			//IL_0044: Unknown result type (might be due to invalid IL or missing references)
			//IL_004b: Expected O, but got Unknown
			//IL_0051: Unknown result type (might be due to invalid IL or missing references)
			//IL_0056: Invalid comparison between O and Unknown
			ButtonItem val = (ButtonItem)sender;
			if (val == null)
			{
				return;
			}
			ButtonItem val2 = (ButtonItem)((BaseItem)val).get_Parent();
			if (val2 == null)
			{
				return;
			}
			foreach (ButtonItem item in (CollectionBase)(object)((BaseItem)val2).get_SubItems())
			{
				ButtonItem val3 = item;
				val3.set_Checked((object)val3 == (object)(ButtonItem)sender);
			}
			if (((BaseItem)val2).get_Tag() is OptionsButtonContext)
			{
				((OptionsButtonContext)((BaseItem)val2).get_Tag()).RaiseOptionSelected();
			}
		}

		private List<string> GetAvailableQualityProfiles(LayerConfig layerConfig, int layerIdx)
		{
			DataType dataType = layerConfig.get_Layers()[layerIdx].get_DataType();
			return CodingProfileHelper.GetAvailableQualityProfiles(layerConfig.get_Layers()[layerIdx].get_CodingProfile(), dataType, false, true);
		}

		private ButtonX SetupOptionsButton(ControlRow row, int layerIndex)
		{
			//IL_0001: Unknown result type (might be due to invalid IL or missing references)
			//IL_0007: Expected O, but got Unknown
			//IL_005c: Unknown result type (might be due to invalid IL or missing references)
			//IL_0062: Expected O, but got Unknown
			//IL_0111: Unknown result type (might be due to invalid IL or missing references)
			//IL_0116: Unknown result type (might be due to invalid IL or missing references)
			//IL_0120: Expected O, but got Unknown
			//IL_0167: Unknown result type (might be due to invalid IL or missing references)
			//IL_016c: Unknown result type (might be due to invalid IL or missing references)
			//IL_0176: Expected O, but got Unknown
			//IL_018f: Unknown result type (might be due to invalid IL or missing references)
			//IL_0196: Expected O, but got Unknown
			//IL_01ff: Unknown result type (might be due to invalid IL or missing references)
			//IL_0206: Expected O, but got Unknown
			ButtonX val = new ButtonX();
			((Control)(object)val).Name = "button";
			((Control)(object)val).Text = "Options";
			((Control)(object)val).Size = new Size(columnWidths[4] - 2 * controlMargin, controlHeight);
			((Control)(object)val).AccessibleRole = AccessibleRole.PushButton;
			val.set_AutoExpandOnClick(true);
			((PopupItemControl)val).set_Style((eDotNetBarStyle)9);
			ButtonItem val2 = new ButtonItem();
			((BaseItem)val2).set_Name("clearButton");
			((BaseItem)val2).set_Text("Clear this layer");
			((BaseItem)val2).set_Tag((object)row);
			((BaseItem)val2).add_Click((EventHandler)clearButton_Click);
			val.get_SubItems().Add((BaseItem)(object)val2);
			List<string> availableQualityProfiles = GetAvailableQualityProfiles(LayerConfig, layerIndex);
			ButtonItem val3 = SetupEnumButtonItems(Constants.DefaultQualityLevel, "QualityLevel", availableQualityProfiles);
			((BaseItem)val3).set_Name("qualityLevelButton");
			((BaseItem)val3).set_BeginGroup(true);
			val.get_SubItems().Add((BaseItem)(object)val3);
			((SuperTooltip)ToolTip).SetSuperTooltip((IComponent)val.get_SubItems().get_Item(0), new SuperTooltipInfo("", "", "TT_OPTION_QUALITYLEVEL", (Image)null, (Image)null, ((SuperTooltip)ToolTip).get_DefaultTooltipSettings().get_Color()));
			val.get_SubItems().Add((BaseItem)(object)SetupEnumButtonItems(FlipOption.None, "Flip"));
			((SuperTooltip)ToolTip).SetSuperTooltip((IComponent)val.get_SubItems().get_Item(1), new SuperTooltipInfo("", "", "TT_OPTION_FLIP", (Image)null, (Image)null, ((SuperTooltip)ToolTip).get_DefaultTooltipSettings().get_Color()));
			val.get_SubItems().Add((BaseItem)(object)SetupEnumButtonItems<TextureMipSourceType>((TextureMipSourceType)0, "Mip map Source"));
			ButtonItem val4 = new ButtonItem();
			((BaseItem)val4).set_Name("swizzleButton");
			((BaseItem)val4).set_Text("Swizzle");
			val.get_SubItems().Add((BaseItem)(object)val4);
			for (int i = 0; i < 4; i++)
			{
				row.swizzleMenuButtons[i] = SetupSwizzlingButtonItem(i, row, layerIndex);
				((BaseItem)val4).get_SubItems().Add((BaseItem)(object)row.swizzleMenuButtons[i]);
			}
			ButtonItem val5 = new ButtonItem();
			((BaseItem)val5).set_Name("forceButton");
			((BaseItem)val5).set_Text("Force Type");
			((BaseItem)val5).set_BeginGroup(true);
			val.get_SubItems().Add((BaseItem)(object)val5);
			for (int j = 0; j < 4; j++)
			{
				ButtonItem val6 = SetupForceTypeButtonItems(j, row, layerIndex);
				((BaseItem)val5).get_SubItems().Add((BaseItem)(object)val6);
			}
			return val;
		}

		private void clearButton_Click(object sender, EventArgs e)
		{
			//IL_0002: Unknown result type (might be due to invalid IL or missing references)
			((ControlRow)((BaseItem)(ButtonItem)sender).get_Tag()).picker.Reset();
		}

		private ButtonX SetupInfoButton(LayerAssetDetailsControl detailControl)
		{
			//IL_0001: Unknown result type (might be due to invalid IL or missing references)
			//IL_0006: Unknown result type (might be due to invalid IL or missing references)
			//IL_0011: Expected O, but got Unknown
			//IL_0012: Unknown result type (might be due to invalid IL or missing references)
			//IL_001d: Expected O, but got Unknown
			//IL_001e: Unknown result type (might be due to invalid IL or missing references)
			//IL_0040: Expected O, but got Unknown
			//IL_0041: Unknown result type (might be due to invalid IL or missing references)
			//IL_0049: Expected O, but got Unknown
			//IL_004a: Unknown result type (might be due to invalid IL or missing references)
			//IL_0052: Unknown result type (might be due to invalid IL or missing references)
			//IL_005c: Expected O, but got Unknown
			//IL_005c: Unknown result type (might be due to invalid IL or missing references)
			//IL_0061: Unknown result type (might be due to invalid IL or missing references)
			//IL_0069: Unknown result type (might be due to invalid IL or missing references)
			//IL_0071: Unknown result type (might be due to invalid IL or missing references)
			//IL_007a: Expected O, but got Unknown
			ButtonX val = new ButtonX();
			((Control)val).Name = "button";
			((Control)val).Text = "Info";
			((Control)val).Size = new Size(columnWidths[5] - 2 * controlMargin, controlHeight);
			((Control)val).AccessibleRole = AccessibleRole.PushButton;
			val.set_AutoExpandOnClick(true);
			((PopupItemControl)val).set_Style((eDotNetBarStyle)9);
			ButtonX val2 = val;
			ControlContainerItem val3 = new ControlContainerItem();
			val3.set_AllowItemResize(true);
			val3.set_MenuVisibility((eMenuVisibility)0);
			val3.set_Control((Control)detailControl);
			ControlContainerItem val4 = val3;
			val2.get_SubItems().Add((BaseItem)(object)val4);
			return val2;
		}

		private ButtonItem SetupSwizzlingButtonItem(int subIdx, ControlRow row, int layerIndex)
		{
			//IL_0001: Unknown result type (might be due to invalid IL or missing references)
			//IL_0007: Expected O, but got Unknown
			//IL_0037: Unknown result type (might be due to invalid IL or missing references)
			//IL_003d: Expected O, but got Unknown
			//IL_008c: Unknown result type (might be due to invalid IL or missing references)
			//IL_0093: Expected O, but got Unknown
			//IL_00e8: Unknown result type (might be due to invalid IL or missing references)
			//IL_00ef: Expected O, but got Unknown
			//IL_012d: Unknown result type (might be due to invalid IL or missing references)
			//IL_0134: Expected O, but got Unknown
			//IL_014b: Unknown result type (might be due to invalid IL or missing references)
			//IL_0152: Expected O, but got Unknown
			ButtonItem val = new ButtonItem();
			((BaseItem)val).set_Name("swizzleButton" + subIdx);
			((BaseItem)val).set_Text("Swizzle " + subIdx);
			ButtonItem val2 = new ButtonItem();
			((BaseItem)val2).set_Text("Load Preset");
			((BaseItem)val).get_SubItems().Add((BaseItem)(object)val2);
			SwizzleControl swizzleControl = new SwizzleControl();
			row.swizzles[subIdx] = swizzleControl;
			swizzleControl.Padding = new Padding(4, 4, 4, 4);
			SwizzlePreset[] swizzlePresets = Constants.SwizzlePresets;
			SwizzlePreset[] array = swizzlePresets;
			foreach (SwizzlePreset swizzlePreset in array)
			{
				ButtonItem val3 = new ButtonItem();
				((BaseItem)val3).set_Text(swizzlePreset.Name);
				((BaseItem)val3).set_Tag((object)new PresetControlPair(swizzleControl, swizzlePreset));
				((BaseItem)val3).add_Click((EventHandler)presetButton_Click);
				((BaseItem)val2).get_SubItems().Add((BaseItem)(object)val3);
			}
			ControlContainerItem val4 = new ControlContainerItem();
			val4.set_AllowItemResize(false);
			((BaseItem)val4).set_BeginGroup(false);
			((BaseItem)val4).set_GlobalItem(false);
			val4.set_MenuVisibility((eMenuVisibility)0);
			((BaseItem)val4).set_Name("controlContainerItem1");
			((BaseItem)val4).set_Text("Swizzle");
			LabelItem val5 = new LabelItem();
			((BaseItem)val5).set_Text("Custom: ");
			val5.set_PaddingLeft(32);
			ItemContainer val6 = new ItemContainer();
			((BaseItem)val6).set_BeginGroup(true);
			((BaseItem)val6).get_SubItems().Add((BaseItem)(object)val5);
			((BaseItem)val6).get_SubItems().Add((BaseItem)(object)val4);
			int numChannels = DataTypeInfo.GetNumChannels(LayerConfig.get_Layers()[layerIndex].get_DataType());
			swizzleControl.Initialize(numChannels, SwizzlePreset.RGBA.Pattern);
			val4.set_Control((Control)swizzleControl);
			((BaseItem)val).get_SubItems().Add((BaseItem)(object)val6);
			return val;
		}

		private ButtonItem SetupForceTypeButtonItems(int subIdx, ControlRow row, int layerIndex)
		{
			ButtonItem val = SetupEnumButtonItems(OverrideTextureType.Auto, "Force Type " + subIdx);
			OptionsButtonContext optionsButtonContext = new OptionsButtonContext(row, layerIndex, subIdx);
			optionsButtonContext.OptionSelected += context_OptionSelected;
			((BaseItem)val).set_Tag((object)optionsButtonContext);
			row.forceTypeMenuButtons[subIdx] = val;
			return val;
		}

		private void context_OptionSelected(object sender, OptionsButtonContext context)
		{
			if (context.row.templateInfos[context.subTexIndex] != null)
			{
				string templateConstructorInput = context.row.templateInfos[context.subTexIndex].get_TemplateConstructorInput();
				ImportTemplateInfo val = updatePickers(context.row, context.subTexIndex, templateConstructorInput);
				context.row.picker.SetDisplayText(context.subTexIndex, val.get_DisplayString());
			}
		}

		private void presetButton_Click(object sender, EventArgs e)
		{
			//IL_0002: Unknown result type (might be due to invalid IL or missing references)
			PresetControlPair presetControlPair = (PresetControlPair)((BaseItem)(ButtonItem)sender).get_Tag();
			presetControlPair.Control.LoadSwizzle(presetControlPair.Preset.Pattern);
		}

		private void comboBoxName_Leave(object sender, EventArgs e)
		{
			UpdateExampleName();
		}

		private void UpdateSuggestedNames()
		{
			string value = null;
			for (int i = 0; i < controlRows.Count; i++)
			{
				for (int j = 0; j < 4; j++)
				{
					if (controlRows[i].templateInfos[j] != null)
					{
						value = controlRows[i].templateInfos[j].get_SuggestedAssetName();
						break;
					}
				}
				if (!string.IsNullOrEmpty(value))
				{
					break;
				}
			}
			firstLayername = value;
			_ = string.Empty;
			_ = comboBoxName.Text;
			_ = string.Empty;
			comboBoxName.Items.Clear();
			if (AssetToEdit == null)
			{
				comboBoxName.Items.Add("MyName");
				comboBoxName.Items.Add("*");
			}
			foreach (string suggestedName in SuggestedNames)
			{
				comboBoxName.Items.Add(suggestedName);
			}
			UpdateExampleName();
		}

		private void UpdateExampleName()
		{
			string text = comboBoxName.Text;
			text = ((!(firstLayername != string.Empty)) ? text.Replace("*", "MyName") : text.Replace("*", firstLayername));
			labelName.Text = "Example: \t\"" + text + "\"";
		}

		private void comboBoxName_Enter(object sender, EventArgs e)
		{
			UpdateExampleName();
		}

		private void ImportAssetForm_FormClosing(object sender, FormClosingEventArgs e)
		{
			e.Cancel = cancelClose;
			cancelClose = false;
		}

		private void checkBoxCubemap_Clicked(object sender, EventArgs e)
		{
			if (LayerConfig != null)
			{
				for (int i = 0; i < LayerConfig.get_Layers().Count; i++)
				{
					if (controlRows[i].picker.ActiveSourceMode == SourceMode.MultiSource)
					{
						checkBoxCubemap.CheckState = CheckState.Unchecked;
						MessageBox.Show("Cubemaps cannot have multiple sources (channel packing). Please validate '" + LayerConfig.get_Layers()[i].get_LayerName() + "'", "Cubemaps do not support channel packing", MessageBoxButtons.OK, MessageBoxIcon.Hand);
						return;
					}
				}
			}
			checkBoxCubemap.Checked = !checkBoxCubemap.Checked;
		}

		protected override void Dispose(bool disposing)
		{
			if (disposing && components != null)
			{
				components.Dispose();
			}
			((OfficeForm)this).Dispose(disposing);
		}

		private void InitializeComponent()
		{
			//IL_004f: Unknown result type (might be due to invalid IL or missing references)
			//IL_0059: Expected O, but got Unknown
			//IL_0210: Unknown result type (might be due to invalid IL or missing references)
			//IL_021a: Expected O, but got Unknown
			//IL_02d3: Unknown result type (might be due to invalid IL or missing references)
			//IL_02dd: Expected O, but got Unknown
			//IL_056a: Unknown result type (might be due to invalid IL or missing references)
			//IL_0574: Expected O, but got Unknown
			buttonCancel = new Button();
			buttonImport = new Button();
			labelName = new Label();
			comboBoxName = new ComboBox();
			label10 = new Label();
			checkBoxCubemap = new CheckBox();
			label1 = new Label();
			controlContainerItem1 = new ControlContainerItem();
			scrollableEditList = new ScrollableEditList();
			ToolTip = new ToolTip();
			((Control)this).SuspendLayout();
			buttonCancel.Anchor = AnchorStyles.Bottom | AnchorStyles.Right;
			buttonCancel.DialogResult = DialogResult.Cancel;
			buttonCancel.Location = new Point(705, 310);
			buttonCancel.Name = "buttonCancel";
			buttonCancel.Size = new Size(75, 23);
			buttonCancel.TabIndex = 510;
			buttonCancel.Text = "Cancel";
			buttonCancel.UseVisualStyleBackColor = true;
			buttonImport.Anchor = AnchorStyles.Bottom | AnchorStyles.Right;
			buttonImport.Location = new Point(624, 310);
			buttonImport.Name = "buttonImport";
			buttonImport.Size = new Size(75, 23);
			buttonImport.TabIndex = 500;
			buttonImport.Text = "Add";
			buttonImport.UseVisualStyleBackColor = true;
			buttonImport.Click += buttonImport_Click;
			labelName.Anchor = AnchorStyles.Bottom | AnchorStyles.Left;
			labelName.Location = new Point(360, 267);
			labelName.Name = "labelName";
			labelName.Size = new Size(420, 18);
			((SuperTooltip)ToolTip).SetSuperTooltip((IComponent)labelName, new SuperTooltipInfo("", "", "Stacked texture's name", (Image)null, (Image)null, (eTooltipColor)17, false, false, new Size(0, 0)));
			labelName.TabIndex = 45;
			labelName.Text = "world.topo.bathy.200412.3x21600x21600";
			comboBoxName.Anchor = AnchorStyles.Bottom | AnchorStyles.Left;
			comboBoxName.FormattingEnabled = true;
			comboBoxName.Items.AddRange(new object[1] { "MyName" });
			comboBoxName.Location = new Point(65, 264);
			comboBoxName.Name = "comboBoxName";
			comboBoxName.Size = new Size(289, 21);
			((SuperTooltip)ToolTip).SetSuperTooltip((IComponent)comboBoxName, new SuperTooltipInfo("Replace the resource tag in text", "", "TT_SINGLEASSET_NAME_COMBOBOX", (Image)null, (Image)null, (eTooltipColor)17));
			comboBoxName.TabIndex = 490;
			comboBoxName.Text = "*";
			comboBoxName.Enter += comboBoxName_Enter;
			comboBoxName.Leave += comboBoxName_Leave;
			label10.Anchor = AnchorStyles.Bottom | AnchorStyles.Left;
			label10.AutoSize = true;
			label10.Location = new Point(12, 267);
			label10.Name = "label10";
			label10.Size = new Size(35, 13);
			label10.TabIndex = 43;
			label10.Text = "Name";
			checkBoxCubemap.Anchor = AnchorStyles.Bottom | AnchorStyles.Left;
			checkBoxCubemap.AutoCheck = false;
			checkBoxCubemap.AutoSize = true;
			checkBoxCubemap.Location = new Point(65, 296);
			checkBoxCubemap.Name = "checkBoxCubemap";
			checkBoxCubemap.Size = new Size(15, 14);
			checkBoxCubemap.TabIndex = 511;
			checkBoxCubemap.UseVisualStyleBackColor = true;
			checkBoxCubemap.Click += checkBoxCubemap_Clicked;
			label1.Anchor = AnchorStyles.Bottom | AnchorStyles.Left;
			label1.AutoSize = true;
			label1.Location = new Point(12, 297);
			label1.Name = "label1";
			label1.Size = new Size(52, 13);
			label1.TabIndex = 512;
			label1.Text = "Cubemap";
			controlContainerItem1.set_AllowItemResize(false);
			((BaseItem)controlContainerItem1).set_GlobalItem(false);
			controlContainerItem1.set_MenuVisibility((eMenuVisibility)0);
			((BaseItem)controlContainerItem1).set_Name("controlContainerItem1");
			scrollableEditList.Anchor = AnchorStyles.Top | AnchorStyles.Bottom | AnchorStyles.Left | AnchorStyles.Right;
			scrollableEditList.Location = new Point(12, 12);
			scrollableEditList.Name = "scrollableEditList";
			scrollableEditList.Size = new Size(767, 241);
			scrollableEditList.TabIndex = 42;
			((SuperTooltip)ToolTip).set_DefaultTooltipSettings(new SuperTooltipInfo("Replace the resource tag in text", "", "TT_NO_TOOLTIP", (Image)null, (Image)null, (eTooltipColor)17));
			((SuperTooltip)ToolTip).set_LicenseKey("F962CEC7-CD8F-4911-A9E9-CAB39962FC1F");
			((Form)this).AcceptButton = buttonImport;
			((Form)this).CancelButton = buttonCancel;
			((Form)this).ClientSize = new Size(792, 345);
			((Control)this).Controls.Add(label1);
			((Control)this).Controls.Add(checkBoxCubemap);
			((Control)this).Controls.Add(labelName);
			((Control)this).Controls.Add(comboBoxName);
			((Control)this).Controls.Add(label10);
			((Control)this).Controls.Add(scrollableEditList);
			((Control)this).Controls.Add(buttonCancel);
			((Control)this).Controls.Add(buttonImport);
			((Control)(object)this).DoubleBuffered = true;
			((Form)this).FormBorderStyle = FormBorderStyle.FixedDialog;
			((Form)this).MaximizeBox = false;
			((Form)this).MinimizeBox = false;
			((Control)this).Name = "ImportAssetForm";
			((Form)this).ShowInTaskbar = false;
			((Form)this).StartPosition = FormStartPosition.CenterParent;
			((Control)(object)this).Text = "Import Single Stacked texture in Tile Set 'Loft'";
			((Form)this).FormClosing += ImportAssetForm_FormClosing;
			((Form)this).Load += ImportAssetForm_Load;
			((Control)this).ResumeLayout(performLayout: false);
			((Control)this).PerformLayout();
		}
	}
	public enum InfoType
	{
		None,
		File
	}
	[ComImport]
	[Guid("92CA9DCD-5622-4BBA-A805-5E9F541BD8C9")]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	internal interface IObjectArray
	{
		void GetCount(out uint cObjects);

		void GetAt(uint iIndex, ref Guid riid, [MarshalAs(UnmanagedType.Interface)] out object ppvObject);
	}
	[ComImport]
	[Guid("5632B1A4-E38A-400A-928A-D4CD63230295")]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	internal interface IObjectCollection
	{
		[PreserveSig]
		void GetCount(out uint cObjects);

		[PreserveSig]
		void GetAt(uint iIndex, ref Guid riid, [MarshalAs(UnmanagedType.Interface)] out object ppvObject);

		void AddObject([MarshalAs(UnmanagedType.Interface)] object pvObject);

		void AddFromArray([MarshalAs(UnmanagedType.Interface)] IObjectArray poaSource);

		void RemoveObject(uint uiIndex);

		void Clear();
	}
	[ComImport]
	[Guid("c43dc798-95d1-4bea-9030-bb99e2983a1a")]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	internal interface ITaskbarList4
	{
		[PreserveSig]
		void HrInit();

		[PreserveSig]
		void AddTab(IntPtr hwnd);

		[PreserveSig]
		void DeleteTab(IntPtr hwnd);

		[PreserveSig]
		void ActivateTab(IntPtr hwnd);

		[PreserveSig]
		void SetActiveAlt(IntPtr hwnd);

		[PreserveSig]
		void MarkFullscreenWindow(IntPtr hwnd, [MarshalAs(UnmanagedType.Bool)] bool fFullscreen);

		[PreserveSig]
		void SetProgressValue(IntPtr hwnd, ulong ullCompleted, ulong ullTotal);

		[PreserveSig]
		void SetProgressState(IntPtr hwnd, TaskbarProgressBarStatus tbpFlags);

		[PreserveSig]
		void RegisterTab(IntPtr hwndTab, IntPtr hwndMDI);

		[PreserveSig]
		void UnregisterTab(IntPtr hwndTab);

		[PreserveSig]
		void SetTabOrder(IntPtr hwndTab, IntPtr hwndInsertBefore);

		[PreserveSig]
		void SetTabActive(IntPtr hwndTab, IntPtr hwndInsertBefore, uint dwReserved);

		[PreserveSig]
		HResult ThumbBarAddButtons(IntPtr hwnd, uint cButtons, [MarshalAs(UnmanagedType.LPArray)] ThumbButton[] pButtons);

		[PreserveSig]
		HResult ThumbBarUpdateButtons(IntPtr hwnd, uint cButtons, [MarshalAs(UnmanagedType.LPArray)] ThumbButton[] pButtons);

		[PreserveSig]
		void ThumbBarSetImageList(IntPtr hwnd, IntPtr himl);

		[PreserveSig]
		void SetOverlayIcon(IntPtr hwnd, IntPtr hIcon, [MarshalAs(UnmanagedType.LPWStr)] string pszDescription);

		[PreserveSig]
		void SetThumbnailTooltip(IntPtr hwnd, [MarshalAs(UnmanagedType.LPWStr)] string pszTip);

		[PreserveSig]
		void SetThumbnailClip(IntPtr hwnd, IntPtr prcClip);

		void SetTabProperties(IntPtr hwndTab, SetTabPropertiesOption stpFlags);
	}
	internal enum KnownDestinationCategory
	{
		Frequent = 1,
		Recent
	}
	public class LayerAssetDetailsControl : UserControl
	{
		private IContainer components;

		private AdvTree detailTree;

		private Node node7;

		private Node node8;

		private Node node;

		private Node node12;

		private NodeConnector nodeConnector2;

		private ElementStyle elementStyle2;

		private Button bDetails;

		private ToolTip ToolTip;

		private string Template { get; set; }

		public LayerAssetDetailsControl()
		{
			InitializeComponent();
			((CollectionBase)(object)detailTree.get_Nodes()).Clear();
		}

		public void UpdateTree(ImportTemplateInfo info)
		{
			MaskInfo maskInfo = default(MaskInfo);
			maskInfo.MaskCount = 1;
			maskInfo.Infos = (ImportTemplateInfo[])(object)new ImportTemplateInfo[1] { info };
			maskInfo.Names = new string[1] { "" };
			UpdateTree(maskInfo);
		}

		public void UpdateTree(MaskInfo maskInfo)
		{
			//IL_001f: Unknown result type (might be due to invalid IL or missing references)
			//IL_0025: Expected O, but got Unknown
			((CollectionBase)(object)detailTree.get_Nodes()).Clear();
			int maskCount = maskInfo.MaskCount;
			for (int i = 0; i < maskCount; i++)
			{
				Node val = new Node();
				UpdateTreeNode(maskInfo, i, val);
				detailTree.get_Nodes().Add(val);
			}
		}

		private void UpdateTreeNode(MaskInfo maskInfo, int index, Node a)
		{
			//IL_0091: Unknown result type (might be due to invalid IL or missing references)
			//IL_0096: Unknown result type (might be due to invalid IL or missing references)
			//IL_0098: Unknown result type (might be due to invalid IL or missing references)
			//IL_009a: Unknown result type (might be due to invalid IL or missing references)
			//IL_009c: Unknown result type (might be due to invalid IL or missing references)
			//IL_00b3: Expected I4, but got Unknown
			//IL_011a: Unknown result type (might be due to invalid IL or missing references)
			//IL_011f: Unknown result type (might be due to invalid IL or missing references)
			//IL_0142: Unknown result type (might be due to invalid IL or missing references)
			//IL_0147: Unknown result type (might be due to invalid IL or missing references)
			//IL_01c7: Unknown result type (might be due to invalid IL or missing references)
			//IL_01cc: Unknown result type (might be due to invalid IL or missing references)
			//IL_01db: Unknown result type (might be due to invalid IL or missing references)
			//IL_01e2: Expected O, but got Unknown
			if (maskInfo.Infos[index] == null)
			{
				if (!string.IsNullOrEmpty(maskInfo.Names[index]))
				{
					a.set_Text(maskInfo.Names[index] + ": Empty");
				}
				else
				{
					a.set_Text("Empty");
				}
			}
			else
			{
				string text = string.Empty;
				if (maskInfo.MaskCount > 1)
				{
					text = maskInfo.Names[index] + ": ";
				}
				ImportTemplateInfo val = maskInfo.Infos[index];
				TextureType type = val.get_Type();
				TextureType val2 = type;
				switch ((int)val2)
				{
				case 1:
					a.set_Text(text + "Single File");
					break;
				case 2:
					a.set_Text(text + "UDIM with " + val.get_FoundTextureFiles().get_NumberOfTextures() + " patches found.");
					break;
				case 3:
				{
					string[] obj = new string[6] { text, "Tiled texture with ", null, null, null, null };
					PatternRange range = val.get_FoundTextureFiles().get_Range();
					obj[2] = ((PatternRange)(ref range)).GetTiledHeight().ToString();
					obj[3] = " row(s) and ";
					range = val.get_FoundTextureFiles().get_Range();
					obj[4] = ((PatternRange)(ref range)).GetTiledWidth().ToString();
					obj[5] = " column(s) found.";
					a.set_Text(string.Concat(obj));
					break;
				}
				case 0:
					a.set_Text(text + "Multiple files (" + val.get_FoundTextureFiles().get_NumberOfTextures() + ")");
					break;
				default:
					a.set_Text(text + "No files found. ");
					break;
				}
				foreach (TextureFile textureFile in val.get_FoundTextureFiles().get_TextureFiles())
				{
					TextureFile current = textureFile;
					Node val3 = new Node(Path.GetFileName(((TextureFile)(ref current)).get_Filename()));
					val3.set_Tag((object)new NodeContext(InfoType.File, ((TextureFile)(ref current)).get_Filename()));
					val3.add_NodeDoubleClick((EventHandler)node_NodeDoubleClick);
					a.get_Nodes().Add(val3);
				}
			}
			a.set_Tag((object)new NodeContext(InfoType.None, ""));
		}

		private void button1_Click(object sender, EventArgs e)
		{
			if (((CollectionBase)(object)detailTree.get_Nodes()).Count >= 1 && ((CollectionBase)(object)detailTree.get_Nodes().get_Item(0).get_Nodes()).Count >= 1)
			{
				NodeContext nodeContext = ((detailTree.get_SelectedNode() != null) ? ((NodeContext)detailTree.get_SelectedNode().get_Tag()) : ((NodeContext)detailTree.get_Nodes().get_Item(0).get_Nodes()
					.get_Item(0)
					.get_Tag()));
				if (nodeContext.type == InfoType.File)
				{
					OpenFileInExplorer(nodeContext.path);
				}
			}
		}

		private void OpenFileInExplorer(string filename)
		{
			if (File.Exists(filename))
			{
				ShellTools.OpenExplorerAndSelect(filename);
			}
		}

		private void node_NodeDoubleClick(object sender, EventArgs e)
		{
			if (detailTree.get_SelectedNode() != null)
			{
				NodeContext nodeContext = (NodeContext)detailTree.get_SelectedNode().get_Tag();
				if (nodeContext.type == InfoType.File)
				{
					OpenFileInExplorer(nodeContext.path);
				}
			}
		}

		protected override void Dispose(bool disposing)
		{
			if (disposing && components != null)
			{
				components.Dispose();
			}
			base.Dispose(disposing);
		}

		private void InitializeComponent()
		{
			//IL_0002: Unknown result type (might be due to invalid IL or missing references)
			//IL_000c: Expected O, but got Unknown
			//IL_000d: Unknown result type (might be due to invalid IL or missing references)
			//IL_0017: Expected O, but got Unknown
			//IL_0018: Unknown result type (might be due to invalid IL or missing references)
			//IL_0022: Expected O, but got Unknown
			//IL_0023: Unknown result type (might be due to invalid IL or missing references)
			//IL_002d: Expected O, but got Unknown
			//IL_002e: Unknown result type (might be due to invalid IL or missing references)
			//IL_0038: Expected O, but got Unknown
			//IL_0039: Unknown result type (might be due to invalid IL or missing references)
			//IL_0043: Expected O, but got Unknown
			//IL_0044: Unknown result type (might be due to invalid IL or missing references)
			//IL_004e: Expected O, but got Unknown
			//IL_01ce: Unknown result type (might be due to invalid IL or missing references)
			//IL_01d8: Expected O, but got Unknown
			//IL_0401: Unknown result type (might be due to invalid IL or missing references)
			//IL_040b: Expected O, but got Unknown
			this.detailTree = new AdvTree();
			this.node7 = new Node();
			this.node8 = new Node();
			this.node = new Node();
			this.node12 = new Node();
			this.nodeConnector2 = new NodeConnector();
			this.elementStyle2 = new ElementStyle();
			this.bDetails = new System.Windows.Forms.Button();
			this.ToolTip = new GrBuildStudio.ToolTip();
			((System.ComponentModel.ISupportInitialize)this.detailTree).BeginInit();
			base.SuspendLayout();
			((System.Windows.Forms.Control)(object)this.detailTree).AccessibleRole = System.Windows.Forms.AccessibleRole.Outline;
			((System.Windows.Forms.Control)(object)this.detailTree).AllowDrop = true;
			((System.Windows.Forms.Control)(object)this.detailTree).Anchor = System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Left | System.Windows.Forms.AnchorStyles.Right;
			((System.Windows.Forms.Control)(object)this.detailTree).BackColor = System.Drawing.SystemColors.Window;
			this.detailTree.get_BackgroundStyle().set_Class("TreeBorderKey");
			this.detailTree.get_BackgroundStyle().set_CornerType((eCornerType)1);
			this.detailTree.set_DragDropEnabled(false);
			this.detailTree.set_DragDropNodeCopyEnabled(false);
			this.detailTree.set_LicenseKey("F962CEC7-CD8F-4911-A9E9-CAB39962FC1F");
			((System.Windows.Forms.Control)(object)this.detailTree).Location = new System.Drawing.Point(3, 3);
			((System.Windows.Forms.Control)(object)this.detailTree).Name = "detailTree";
			this.detailTree.get_Nodes().AddRange((Node[])(object)new Node[1] { this.node7 });
			this.detailTree.set_NodesConnector(this.nodeConnector2);
			this.detailTree.set_NodeStyle(this.elementStyle2);
			this.detailTree.set_PathSeparator(";");
			((System.Windows.Forms.Control)(object)this.detailTree).Size = new System.Drawing.Size(380, 227);
			this.detailTree.get_Styles().Add(this.elementStyle2);
			((SuperTooltip)this.ToolTip).SetSuperTooltip((System.ComponentModel.IComponent)this.detailTree, new SuperTooltipInfo("Replace the resource tag in text", "", "TT_LAYERASSETDETAILS_CONTROL", (System.Drawing.Image)null, (System.Drawing.Image)null, (eTooltipColor)17));
			((System.Windows.Forms.Control)(object)this.detailTree).TabIndex = 12;
			((System.Windows.Forms.Control)(object)this.detailTree).Text = "advTree2";
			this.node7.set_Expanded(true);
			this.node7.set_Name("node7");
			this.node7.get_Nodes().AddRange((Node[])(object)new Node[1] { this.node8 });
			this.node7.set_Text("Found 40 UDIM patches, from 1001 to 1040");
			this.node8.set_Expanded(true);
			this.node8.set_Name("node8");
			this.node8.get_Nodes().AddRange((Node[])(object)new Node[2] { this.node, this.node12 });
			this.node8.set_Text("click to expand...");
			this.node.set_Expanded(true);
			this.node.set_Name("node");
			this.node.set_Text("HIGH_QUAL_TEXTURES_color.1001.exr");
			this.node.add_NodeDoubleClick(new System.EventHandler(node_NodeDoubleClick));
			this.node12.set_Expanded(true);
			this.node12.set_Name("node12");
			this.node12.set_Text("HIGH_QUAL_TEXTURES_color.1002.exr");
			this.nodeConnector2.set_LineColor(System.Drawing.SystemColors.ControlText);
			this.elementStyle2.set_CornerType((eCornerType)1);
			this.elementStyle2.set_Name("elementStyle2");
			this.elementStyle2.set_TextColor(System.Drawing.SystemColors.ControlText);
			this.bDetails.Anchor = System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Right;
			this.bDetails.Location = new System.Drawing.Point(308, 236);
			this.bDetails.Name = "bDetails";
			this.bDetails.Size = new System.Drawing.Size(75, 23);
			this.bDetails.TabIndex = 13;
			this.bDetails.Text = "Details...";
			this.bDetails.UseVisualStyleBackColor = true;
			this.bDetails.Click += new System.EventHandler(button1_Click);
			((SuperTooltip)this.ToolTip).set_DefaultTooltipSettings(new SuperTooltipInfo("Replace the resource tag in text", "", "TT_NO_TOOLTIP", (System.Drawing.Image)null, (System.Drawing.Image)null, (eTooltipColor)17));
			((SuperTooltip)this.ToolTip).set_LicenseKey("F962CEC7-CD8F-4911-A9E9-CAB39962FC1F");
			base.AutoScaleDimensions = new System.Drawing.SizeF(6f, 13f);
			base.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;
			this.BackColor = System.Drawing.Color.Transparent;
			base.Controls.Add(this.bDetails);
			base.Controls.Add((System.Windows.Forms.Control)(object)this.detailTree);
			base.Name = "LayerAssetDetailsControl";
			base.Size = new System.Drawing.Size(386, 264);
			((System.ComponentModel.ISupportInitialize)this.detailTree).EndInit();
			base.ResumeLayout(false);
		}
	}
	public class LayerAssetImportDescription
	{
		public string Name { get; set; }

		public CombinedTextureSource FileSources { get; set; }

		public AssetPackingMode PackingMode { get; set; }

		public QualityLevel Quality { get; set; }

		public FlipOption Flip { get; set; }

		public TextureMipSourceType MipSourceType { get; set; }

		public ColorSpace ColorSpace { get; set; }

		public string[] Swizzle { get; set; }

		public LayerAssetImportDescription()
		{
			//IL_0009: Unknown result type (might be due to invalid IL or missing references)
			//IL_0013: Expected O, but got Unknown
			FileSources = new CombinedTextureSource();
			Swizzle = new string[4];
		}
	}
	public class LayerTemplateImportDescription
	{
		public string Name { get; set; }

		public List<LayerAssetImportDescription> LayerTemplates { get; private set; }

		public uint AssetBorder { get; set; }

		public LayerTemplateImportDescription()
		{
			LayerTemplates = new List<LayerAssetImportDescription>();
		}
	}
	public class MainForm : Office2007Form
	{
		public class StartupContext
		{
			public string solutionToLoadPath;

			public bool buildSolution;

			public bool rebuildSolution;

			public bool quitAfterSuccessBuild;

			public bool optimizedBuild;

			public bool silentAtlasErrors;

			public bool hideMainWindow;

			public bool buildForGtex;

			public bool allowForeignGtex;

			public bool forceGtex;

			public bool buildnotileset;
		}

		private SolutionModel model;

		private UserSettings userSettings;

		private OpenFileDialog openSolutionDialog;

		private OpenFileDialog openScriptDialog;

		private SaveFileDialog saveScriptDialog;

		private StartupContext startupContext;

		private BuildLoggerReporter buildLoggerReporter;

		private List<Guid> selectedNodes;

		private SlowTaskMonitor slowTaskMonitor;

		private MRUMenuManager mruMenuManager;

		private bool surpressBuildLoggerDialog;

		private IContainer components;

		private DotNetBarManager dotNetBarManager1;

		private DockSite dockSite4;

		private DockSite dockSite1;

		private DockSite dockSite2;

		private DockSite dockSite3;

		private DockSite dockSite5;

		private DockSite dockSite6;

		private DockSite dockSite7;

		private DockSite dockSite8;

		private StyleManager styleManager1;

		private Bar bar3;

		private ButtonItem buttonItemFile;

		private Bar bar4;

		private ButtonItem buttonItemOpenSolution;

		private ButtonItem buttonItemFileExit;

		private DockSite dockSite9;

		private Bar bar2;

		private PanelDockContainer panelDockContainer1;

		private DockContainerItem dockContainerItem1;

		private Node node3;

		private Node node4;

		private Node node7;

		private Node node8;

		private ImageList imageListBuildLog;

		private ButtonItem buttonItemFileExcludeTileSet;

		private ButtonItem buttonItemImport;

		private ButtonItem buttonItemBuildSolution;

		private ButtonItem buttonItemToolbarNewSolution;

		private ComboItem comboItem1;

		private ComboItem comboItem2;

		private ComboItem comboItem3;

		private ComboItem comboItem4;

		private Bar bar6;

		private PanelDockContainer panelDockContainer5;

		private DockContainerItem dockContainerItem5;

		private Cell cell3;

		private Bar bar8;

		private ComboItem comboItem5;

		private ComboItem comboItem6;

		private Cell cell1;

		private Cell cell2;

		private Cell cell5;

		private PanelDockContainer panelDockContainer8;

		private DockContainerItem dockContainerItem8;

		private ButtonItem buttonItemTileSetImport;

		private ButtonItem buttonItemTileSetImportSingleAsset;

		private ButtonItem buttonItemTileSetImportBatch;

		private ButtonItem buttonItemTileSetImportFromScript;

		private ButtonItem buttonItemImportSingleAsset;

		private ButtonItem buttonItemBatchImport;

		private ButtonItem buttonItemImportFromScript;

		private ButtonItem buttonItemFileNewSolution;

		private ButtonItem buttonItemFileOpenSolution;

		private AdvTree advTree3;

		private ColumnHeader columnHeader5;

		private ColumnHeader columnHeader6;

		private Node node18;

		private Node node20;

		private Node node23;

		private Node node24;

		private Node node25;

		private Node node26;

		private Node node27;

		private Cell cell10;

		private Node node28;

		private Node node29;

		private Node node30;

		private Node node31;

		private Node node32;

		private Node node33;

		private NodeConnector nodeConnector3;

		private ElementStyle elementStyle3;

		private Node node34;

		private AdvTree advTree1;

		private ColumnHeader columnHeader3;

		private ColumnHeader columnHeader4;

		private Node node1;

		private Node node2;

		private Node node5;

		private Node node6;

		private Node node9;

		private Node node10;

		private Node node35;

		private Cell cell4;

		private Node node36;

		private Node node37;

		private Node node38;

		private Node node39;

		private Node node41;

		private Node node42;

		private NodeConnector nodeConnector4;

		private ElementStyle elementStyle2;

		private AdvTree advTree2;

		private ColumnHeader columnHeader7;

		private ColumnHeader columnHeader8;

		private Node node11;

		private Node node17;

		private Node node19;

		private Node node12;

		private Node node13;

		private Node node14;

		private Node node15;

		private Cell cell6;

		private Node node16;

		private Node node21;

		private Node node22;

		private Node node40;

		private Node node43;

		private Node node44;

		private NodeConnector nodeConnector1;

		private ElementStyle elementStyle1;

		private Node node45;

		private Node node46;

		private Node node47;

		private Node node48;

		private NodeConnector nodeConnector2;

		private ElementStyle elementStyle8;

		private ElementStyle elementStyle4;

		private ButtonItem buttonItemBuild;

		private ButtonItem buttonItemBuildBuildSolution;

		private ButtonItem buttonItemBuildRebuildSolution;

		private ButtonItem buttonItemBuildCleanSolution;

		private ButtonItem buttonItemTileSet;

		private ButtonItem buttonItemTileSetOpenViewer;

		private ButtonItem buttonItemTileSetOpenExplorer;

		private ButtonItem buttonItemHelp;

		private ButtonItem buttonItemHelpAbout;

		private ButtonItem buttonItemTileSetProperties;

		private Cell cell7;

		private Cell cell9;

		private Cell cell8;

		private Cell cell11;

		private ButtonItem buttonItemHelpOnlineDocs;

		private ButtonItem buttonItemRescan;

		private SolutionTree solutionTree;

		private AssetDetails assetDetails;

		private BuildSummaryDetails buildSummaryDetails;

		private ContextMenuStrip contextMenuStripAssetSelected;

		private ToolStripMenuItem toolStripMenuItemRemoveAsset;

		private ButtonItem buttonItemViewGTS;

		private ToolStripMenuItem importSingleAssetToolStripMenuItem;

		private ToolStripMenuItem singleAssetToolStripMenuItem;

		private ToolStripMenuItem batchImportToolStripMenuItem;

		private ToolStripMenuItem fromImportScriptToolStripMenuItem;

		private ToolStripMenuItem toolStripMenuItem1;

		private ToolStripMenuItem openTileSetToolStripMenuItem;

		private ContextMenuStrip contextMenuStripRightClickProject;

		private ButtonItem buttonRebuild;

		private ButtonItem buttonClean;

		private ToolStripSeparator seperatorToolStripMenuItem;

		private ToolStripSeparator seperator2ToolStripMenuItem;

		private ToolTip ToolTip;

		private ButtonItem buttonItemOpenlog;

		private ButtonItem buttonItemTileSetExportToScript;

		private ButtonItem buttonItemFileCloseSolution;

		private ButtonItem buttonRescan;

		private ToolStripMenuItem showTileSetInWindowsExplorerToolStripMenuItem;

		private ToolStripMenuItem copyOutputFileNameToolStripMenuItem;

		private ButtonItem buttonItemFileMRU;

		private ButtonItem buttonItemList;

		private ToolStripMenuItem buildToolStripMenuItem;

		private ToolStripMenuItem rebuildToolStripMenuItem;

		private ToolStripMenuItem cleanToolStripMenuItem;

		private ToolStripSeparator toolStripSeparator1;

		private ButtonItem buttonItemBuildBuildProject;

		private ButtonItem buttonItemBuildRebuildProject;

		private ButtonItem buttonItemBuildCleanProject;

		private ToolStripMenuItem toolStripMenuItemRenameAsset;

		private ToolStripSeparator toolStripSeparator2;

		private ToolStripMenuItem excludeFromSolutionToolStripMenuItem;

		private ButtonItem buttonItemFileAddNewTileSet;

		private ToolStripMenuItem toolStripMenuItemEditAsset;

		private ButtonItem buttonItemBuildRepageSolution;

		private ButtonItem buttonItem1;

		private ButtonItem buttonItemBuildRepageProject;

		private ButtonItem buttonItemFilter;

		private ButtonItem buttonItemFileMigrateTextures;

		private ToolStripSeparator toolStripSeparator3;

		private ToolStripMenuItem toolStripMenuItemMigrateAsset;

		private MessageBar readOnlyMessageBar;

		private ButtonItem buttonItemBuildBuildProjectForGTex;

		private ButtonItem buttonItemBuildBuildSolutionForGTexStreaming;

		private ButtonItem buttonItemBuildRebuildProjectForGTex;

		private ButtonItem buttonItemBuildRebuildSolutionForGTex;

		public AutoBuildReport AutoBuildReport { get; private set; }

		public MainForm()
		{
			//IL_00b9: Unknown result type (might be due to invalid IL or missing references)
			//IL_00c3: Expected O, but got Unknown
			//IL_00db: Unknown result type (might be due to invalid IL or missing references)
			//IL_00e5: Expected O, but got Unknown
			//IL_00fd: Unknown result type (might be due to invalid IL or missing references)
			//IL_0107: Expected O, but got Unknown
			//IL_011f: Unknown result type (might be due to invalid IL or missing references)
			//IL_0129: Expected O, but got Unknown
			//IL_01f0: Unknown result type (might be due to invalid IL or missing references)
			//IL_01fa: Expected O, but got Unknown
			//IL_020d: Unknown result type (might be due to invalid IL or missing references)
			//IL_0217: Expected O, but got Unknown
			InitializeComponent();
			StudioLogger.Global.SetOwnerWindow((Form)(object)this);
			AutoBuildReport = new AutoBuildReport();
			selectedNodes = new List<Guid>();
			try
			{
				string fullName = new FileInfo(Assembly.GetEntryAssembly().Location).Directory.FullName;
				string currentDirectory = Directory.GetCurrentDirectory();
				Directory.SetCurrentDirectory(fullName);
				Directory.SetCurrentDirectory(currentDirectory);
			}
			catch (Exception ex)
			{
				MessageBox.Show(ex.Message, "Error", MessageBoxButtons.OK, MessageBoxIcon.Hand);
				Environment.Exit(1);
			}
			model = new SolutionModel();
			userSettings = new UserSettings(model);
			model.SolutionBuilder.add_SolutionClosing(new SolutionClosingEventHandler(userSettings.OnSolutionClosing));
			model.SolutionBuilder.add_SolutionLoaded(new SolutionLoadedEventHandler(userSettings.OnSolutionLoaded));
			model.SolutionBuilder.add_ProjectAdded(new ProjectAddedEventHandler(userSettings.OnProjectAddedToSolution));
			model.SolutionBuilder.add_ProjectRemoved(new ProjectRemovedEventHandler(userSettings.OnProjectRemovedFromSolution));
			solutionTree.Create(model);
			assetDetails.Create(model);
			model.ActiveProjectChanged += model_ActiveProjectChanged;
			model.ProjectStateChanged += model_ProjectStateChanged;
			model.ProjectOutputChanged += model_ProjectOutputChanged;
			model.AssetImportStarted += model_AssetImportStarted;
			model.AssetImportFinished += model_AssetImportFinished;
			model.AssetRemoving += model_AssetRemoving;
			model.SolutionBuilder.add_SolutionLoaded(new SolutionLoadedEventHandler(SolutionBuilder_SolutionLoaded));
			model.SolutionBuilder.add_ProjectUpgrading(new ProjectUpgradingEventHandler(SolutionBuilder_ProjectUpgrading));
			openSolutionDialog = new OpenFileDialog();
			openSolutionDialog.Filter = DialogUtil.SolutionOpenDialogFilter;
			openScriptDialog = new OpenFileDialog();
			openScriptDialog.Filter = DialogUtil.ImportScriptOpenDialogFilter;
			saveScriptDialog = new SaveFileDialog();
			saveScriptDialog.Filter = DialogUtil.ImportScriptOpenDialogFilter;
			solutionTree.AssetNodeClicked += solutionTree_AssetNodeClicked;
			solutionTree.AssetNodeDoubleClicked += solutionTree_AssetNodeDoubleClicked;
			solutionTree.AssetNodeRightClicked += solutionTree_AssetNodeRightClicked;
			solutionTree.RightClicked += solutionTree_RightClicked;
			solutionTree.DeletePressed += solutionTree_DeletePressed;
			solutionTree.AssetRenamed += solutionTree_AssetRenamed;
			solutionTree.AssetMoveRequest += solutionTree_AssetMoveRequest;
			solutionTree.SelectionChanged += solutionTree_SelectionChanged;
			EnableContextualMenus();
			buildSummaryDetails.SetProject(null);
			assetDetails.Clear();
			assetDetails.AssetChanged += assetDetails_AssetChanged;
			readOnlyMessageBar.Visible = false;
			MRUManager mRUManager = new MRUManager(new MRUSerializerInRegistry("SOFTWARE\\Graphine\\TileSetStudio"), 5);
			mruMenuManager = new MRUMenuManager(mRUManager, buttonItemFileMRU, 50);
			mruMenuManager.MRUItemClicked += mruMenuManager_MRUItemClicked;
			string[] fileList = mRUManager.FileList;
			if (fileList != null && fileList.Length >= 1)
			{
				DialogUtil.SolutionLocation = Paths.GetDirectoryName(fileList[0]);
			}
		}

		private void SolutionBuilder_ProjectUpgrading(object sender, ProjectBuilder builder, UpgradeInfo info)
		{
			if (((Control)this).InvokeRequired)
			{
				((Control)this).Invoke((Delegate)(Action)delegate
				{
					SolutionBuilder_ProjectUpgrading(sender, builder, info);
				});
			}
			else if (info.get_WillUpgradeCodingProfiles2dot7())
			{
				string text = "The project '" + builder.get_ActiveProject().get_Name() + "' will upgrade to the latest version. Layer compression formats and Stacked Texture's quality profiles could be altered. Please inspect them after loading.";
				MessageBox.Show((IWin32Window)this, text, "Upgrading...", MessageBoxButtons.OK, MessageBoxIcon.Asterisk);
			}
		}

		private void solutionTree_SelectionChanged(object sender)
		{
			Guid activeProject = solutionTree.ActiveProject;
			if (!solutionTree.SelectedAssets.ContainsKey(activeProject) || (solutionTree.SelectedAssets.ContainsKey(activeProject) && solutionTree.SelectedAssets[activeProject].Count != 1))
			{
				assetDetails.Clear();
				return;
			}
			SolutionTree.NodeContext selectedAsset = solutionTree.SelectedAsset;
			AssetDetails.SelectionContext selection = default(AssetDetails.SelectionContext);
			switch (selectedAsset.Type)
			{
			case ProjectTree.AssetNodeType.AssetGroup:
				selection = new AssetDetails.SelectionContext(selectedAsset.ProjectId, selectedAsset.Asset.get_AssetGroupId());
				break;
			case ProjectTree.AssetNodeType.Asset:
				selection = new AssetDetails.SelectionContext(selectedAsset.ProjectId, selectedAsset.Asset.get_Id());
				break;
			case ProjectTree.AssetNodeType.Layer:
				selection = new AssetDetails.SelectionContext(selectedAsset.ProjectId, selectedAsset.Asset.get_Id(), selectedAsset.Layer);
				break;
			case ProjectTree.AssetNodeType.Texture:
				selection = new AssetDetails.SelectionContext(selectedAsset.ProjectId, selectedAsset.Asset.get_Id(), selectedAsset.Layer, selectedAsset.Texture);
				break;
			}
			assetDetails.SetSelection(selection);
			EnableContextualMenus();
		}

		private void mruMenuManager_MRUItemClicked(object sender, string filename)
		{
			OpenSolution(filename);
		}

		private void buttonItemFileCloseSolution_Click(object sender, EventArgs e)
		{
			CloseSolution();
		}

		private void AskAndDeleteSelectedAssets()
		{
			if (selectedNodes.Count < 1)
			{
				return;
			}
			Guid id = model.ActiveSolutionProject.get_Id();
			bool flag = false;
			foreach (Guid selectedNode in selectedNodes)
			{
				Asset val = model.FindAsset(id, selectedNode);
				if (val != null && !string.IsNullOrEmpty(val.get_AssetGroupId()))
				{
					flag = true;
					break;
				}
			}
			string empty = string.Empty;
			if (flag)
			{
				empty = "Some of the selected Stacked Textures belong to Stacked Texture Groups. For these Stacked Textures, the entire group will be deleted. ";
				empty += "Are you sure that you want to delete the selected Stacked Textures?";
			}
			else
			{
				empty = "Are you sure that you want to delete " + selectedNodes.Count + " selected Stacked Textures?";
			}
			if (MessageBox.Show((IWin32Window)this, empty, "Confirm", MessageBoxButtons.YesNo, MessageBoxIcon.Question) == DialogResult.Yes)
			{
				DeleteSelectedAssets();
			}
		}

		private bool RenameSelectedAsset(ProjectTree.RenameAsset renameAsset)
		{
			if (renameAsset == null || renameAsset.assetId == Guid.Empty || string.IsNullOrEmpty(renameAsset.newName))
			{
				return false;
			}
			if (model.IsAssetNameAvailable(model.ActiveSolutionProject.get_Id(), renameAsset.newName))
			{
				model.RenameAsset(model.ActiveSolutionProject.get_Id(), renameAsset.assetId, renameAsset.newName);
				ProjectNodeModel projectNode = solutionTree.GetProjectNode(model.ActiveSolutionProject.get_Id());
				AssetDetails.SelectionContext selection = new AssetDetails.SelectionContext(model.ActiveSolutionProject.get_Id(), projectNode.Tree.SelectedAsset.Asset.get_Id());
				assetDetails.SetSelection(selection);
				return true;
			}
			string text = "The name " + renameAsset.newName + " is already used inside the project. Each asset needs to have an unique name";
			MessageBox.Show((IWin32Window)this, text, "invalid name", MessageBoxButtons.OK, MessageBoxIcon.Hand);
			return false;
		}

		private void MoveAssets(Guid srcProjectId, List<Asset> assets, Guid destProjectId, bool keepCopy)
		{
			model.MoveAssets(srcProjectId, assets, destProjectId, keepCopy, MigrateAssetsForm.ConversionProblemsCallback);
		}

		private void solutionTree_DeletePressed(List<SolutionTree.NodeContext> contexts)
		{
			selectedNodes.Clear();
			foreach (SolutionTree.NodeContext context in contexts)
			{
				if (context.Type == ProjectTree.AssetNodeType.Asset || context.Type == ProjectTree.AssetNodeType.AssetGroup)
				{
					selectedNodes.Add(context.Asset.get_Id());
				}
			}
			AskAndDeleteSelectedAssets();
		}

		private bool solutionTree_AssetRenamed(ProjectTree.RenameAsset renameAsset)
		{
			return RenameSelectedAsset(renameAsset);
		}

		private void solutionTree_AssetMoveRequest(object sender, Guid srcProjectId, List<Asset> assets, Guid destProjectId, bool keepCopy)
		{
			MoveAssets(srcProjectId, assets, destProjectId, keepCopy);
		}

		private void removeToolStripMenuItem_Click(object sender, EventArgs e)
		{
			AskAndDeleteSelectedAssets();
		}

		private void renameStackedTextureToolStripMenuItem_Click(object sender, EventArgs e)
		{
			solutionTree.StartRename();
		}

		private void buttonItemTileSetImportSingleAsset_Click(object sender, EventArgs e)
		{
			ImportSingleAsset();
		}

		private void buttonItemFileExit_Click(object sender, EventArgs e)
		{
			((Form)this).Close();
		}

		private void buttonItemBuildSolution_Click(object sender, EventArgs e)
		{
			BuildSolution();
		}

		private void buttonItemBuildBuildSolution_Click(object sender, EventArgs e)
		{
			BuildSolution();
		}

		private void buttonItemBuildRepageSolution_Click(object sender, EventArgs e)
		{
			RepageSolution();
		}

		private void buttonItemBuildRebuildSolution_Click(object sender, EventArgs e)
		{
			RebuildSolution();
		}

		private void buttonItemBuildCleanSolution_Click(object sender, EventArgs e)
		{
			CleanSolution();
		}

		private void buttonItemBuildBuildProject_Click(object sender, EventArgs e)
		{
			BuildProject(model.ActiveProjectBuilder.get_ActiveProject().get_Id());
		}

		private void buttonItemBuildRebuildProject_Click(object sender, EventArgs e)
		{
			RebuildProject(model.ActiveProjectBuilder.get_ActiveProject().get_Id());
		}

		private void buttonItemBuildCleanProject_Click(object sender, EventArgs e)
		{
			CleanProject(model.ActiveProjectBuilder.get_ActiveProject().get_Id());
		}

		private void buttonItemBuildRepageProject_Click(object sender, EventArgs e)
		{
			RepageProject(model.ActiveProjectBuilder.get_ActiveProject().get_Id());
		}

		private void buttonItemRescan_Click(object sender, EventArgs e)
		{
			Rescan();
		}

		private void buttonItemHelpAbout_Click(object sender, EventArgs e)
		{
			new AboutBox().ShowDialog();
		}

		private void buttonItemTileSetProperties_Click(object sender, EventArgs e)
		{
			OpenProperties();
		}

		private void buttonItemTileSetImportBatch_Click(object sender, EventArgs e)
		{
			BatchImport();
		}

		private void buttonItemImportSingleAsset_Click(object sender, EventArgs e)
		{
			ImportSingleAsset();
		}

		private void buttonItemBatchImport_Click(object sender, EventArgs e)
		{
			BatchImport();
		}

		private void buttonItemTileSetOpenViewer_Click(object sender, EventArgs e)
		{
			OpenTileSetViewer();
		}

		private void buttonItemViewGTS_Click(object sender, EventArgs e)
		{
			OpenTileSetViewer();
		}

		private void MainForm_FormClosing(object sender, FormClosingEventArgs e)
		{
			//IL_0012: Expected O, but got Unknown
			try
			{
				model.Close();
			}
			catch (UnspecifiedException val)
			{
				UnspecifiedException val2 = val;
				((Logger)StudioLogger.Global).LogError(((Exception)(object)val2).Message);
			}
			catch (Exception e2)
			{
				StudioLogger.Global.LogException(e2);
			}
		}

		private void buttonItemFileOpenSolution_Click(object sender, EventArgs e)
		{
			OpenSolution();
		}

		private void buttonItemOpenSolution_Click(object sender, EventArgs e)
		{
			OpenSolution();
		}

		private void buttonItemTileSetImportFromScript_Click(object sender, EventArgs e)
		{
			ImportFromScript();
		}

		private void buttonItemImportFromScript_Click(object sender, EventArgs e)
		{
			ImportFromScript();
		}

		private void buttonItemTileSetExportToScript_Click(object sender, EventArgs e)
		{
			ExportToScript();
		}

		private void buildToolStripMenuItem_Click(object sender, EventArgs e)
		{
			BuildProject(model.ActiveProjectBuilder.get_ActiveProject().get_Id());
		}

		private void rebuildToolStripMenuItem_Click(object sender, EventArgs e)
		{
			RebuildProject(model.ActiveProjectBuilder.get_ActiveProject().get_Id());
		}

		private void cleanToolStripMenuItem_Click(object sender, EventArgs e)
		{
			CleanProject(model.ActiveProjectBuilder.get_ActiveProject().get_Id());
		}

		private void buttonItemBuildBuildProjectForGTex_Click(object sender, EventArgs e)
		{
			BuildProjectForGTex(model.ActiveProjectBuilder.get_ActiveProject().get_Id());
		}

		private void buttonItemBuildRebuildProjectForGTex_Click(object sender, EventArgs e)
		{
			RebuildProjectForGTex(model.ActiveProjectBuilder.get_ActiveProject().get_Id());
		}

		private void buttonItemBuildBuildSolutionForGTexStreaming_Click(object sender, EventArgs e)
		{
			BuildSolutionForGTex();
		}

		private void buttonItemBuildRebuildSolutionForGTex_Click(object sender, EventArgs e)
		{
			RebuildSolutionForGTex();
		}

		private void solutionTree_RightClicked(object sender, Point location)
		{
			contextMenuStripRightClickProject.Show(location);
		}

		private void SolutionBuilder_SolutionLoaded(object sender, Solution solution)
		{
			EnableContextualMenus();
		}

		private void model_AssetRemoving(object sender, Guid assetId, Guid projectId)
		{
			if (assetDetails.Asset != null && assetDetails.Asset.get_Id().Equals(assetId))
			{
				assetDetails.Clear();
			}
		}

		private void model_AssetImportFinished(object sender, ProjectBuilder builder)
		{
			if (surpressBuildLoggerDialog)
			{
				return;
			}
			if (slowTaskMonitor != null)
			{
				slowTaskMonitor.End();
			}
			if (buildLoggerReporter != null)
			{
				if (buildLoggerReporter.HasSomethingToReport)
				{
					buildLoggerReporter.AddFinishedMessage();
					buildLoggerReporter.ShowDialog();
				}
				buildLoggerReporter.StopListening();
			}
		}

		private void model_AssetImportStarted(object sender, ProjectBuilder builder)
		{
			if (!surpressBuildLoggerDialog)
			{
				buildLoggerReporter = new BuildLoggerReporter();
				buildLoggerReporter.StartListening(builder);
				slowTaskMonitor = new SlowTaskMonitor("Importing Stacked Textures", (Form)(object)this);
				slowTaskMonitor.Type = SlowTaskMonitor.ProgressBarType.Marquee;
				slowTaskMonitor.Start();
			}
		}

		private void assetDetails_AssetChanged(object sender, Asset asset, ProjectBuilder builder)
		{
			//IL_001e: Expected O, but got Unknown
			try
			{
				model.UpdateAsset(builder.get_ActiveProject().get_Id(), asset);
			}
			catch (UnspecifiedException val)
			{
				UnspecifiedException val2 = val;
				((Logger)StudioLogger.Global).LogError(((Exception)(object)val2).Message);
			}
			catch (Exception e)
			{
				StudioLogger.Global.LogException(e);
			}
		}

		private void solutionTree_AssetNodeRightClicked(object sender, List<SolutionTree.NodeContext> contexts, Point location)
		{
			selectedNodes.Clear();
			foreach (SolutionTree.NodeContext context in contexts)
			{
				if (context.Type == ProjectTree.AssetNodeType.Asset || context.Type == ProjectTree.AssetNodeType.AssetGroup)
				{
					selectedNodes.Add(context.Asset.get_Id());
				}
			}
			IsSolutionOrProjectReadOnly(out var projReadOnly, out var _);
			int count = selectedNodes.Count;
			toolStripMenuItemEditAsset.Enabled = count == 1 && !projReadOnly;
			toolStripMenuItemRenameAsset.Enabled = count == 1 && !projReadOnly;
			toolStripMenuItemRemoveAsset.Enabled = count > 0 && !projReadOnly;
			toolStripMenuItemMigrateAsset.Enabled = count > 0 && !projReadOnly;
			contextMenuStripAssetSelected.Show(location);
		}

		private void model_ActiveProjectChanged(object sender)
		{
			EnableContextualMenus();
			buildSummaryDetails.SetProject(model.ActiveProjectBuilder);
			if (model.ActiveSolutionProject != null)
			{
				ProjectNodeModel projectNode = solutionTree.GetProjectNode(model.ActiveSolutionProject.get_Id());
				if (projectNode != null && projectNode.Tree.SelectedAsset != null && solutionTree.SelectedAssets[model.ActiveSolutionProject.get_Id()].Count == 1)
				{
					AssetDetails.SelectionContext selection = new AssetDetails.SelectionContext(model.ActiveSolutionProject.get_Id(), projectNode.Tree.SelectedAsset.Asset.get_Id());
					assetDetails.SetSelection(selection);
				}
				else
				{
					AssetDetails.SelectionContext selection2 = new AssetDetails.SelectionContext(model.ActiveProjectBuilder.get_ActiveProject().get_Id(), default(Guid));
					assetDetails.SetSelection(selection2);
				}
			}
			else
			{
				assetDetails.Clear();
			}
		}

		private void model_ProjectStateChanged(object sender, Guid projectId)
		{
			if (((Control)this).IsHandleCreated)
			{
				((Control)this).BeginInvoke((Delegate)(MethodInvoker)delegate
				{
					assetDetails.Clear();
				});
			}
			buildSummaryDetails.Reload();
		}

		private void model_ProjectOutputChanged(object sender, Guid projectId)
		{
			buildSummaryDetails.Reload();
		}

		private void EnableDisableMenuSubItems(ButtonItem bi, bool enable)
		{
			((BaseItem)bi).set_Visible(enable);
			((BaseItem)bi).get_Parent().Refresh();
		}

		private void EnableContextualMenus()
		{
			bool flag = model.ActiveSolutionProject != null;
			bool flag2 = model.SolutionBuilder.get_ActiveSolution() != null;
			bool hasSelectedAssets = solutionTree.HasSelectedAssets;
			EnableDisableMenuSubItems(buttonItemTileSet, flag && flag2);
			EnableDisableMenuSubItems(buttonItemBuild, flag2);
			((BaseItem)buttonRescan).set_Enabled(flag2);
			((BaseItem)buttonClean).set_Enabled(flag2);
			((BaseItem)buttonRebuild).set_Enabled(flag2);
			((BaseItem)buttonItemFilter).set_Enabled(flag2);
			((BaseItem)buttonItemViewGTS).set_Enabled(flag);
			((BaseItem)buttonItemFileCloseSolution).set_Enabled(flag2);
			((BaseItem)buttonItemBuildSolution).set_Enabled(flag2);
			EnableDisableMenuSubItems(buttonItemBuildBuildProject, flag);
			EnableDisableMenuSubItems(buttonItemBuildRebuildProject, flag);
			EnableDisableMenuSubItems(buttonItemBuildCleanProject, flag);
			string text = "selected project";
			if (flag && model != null && model.ActiveProjectBuilder != null)
			{
				text = model.ActiveProjectBuilder.get_ActiveProject().get_Name();
			}
			((BaseItem)buttonItemBuildBuildProject).set_Text("Build " + text);
			((BaseItem)buttonItemBuildRebuildProject).set_Text("Rebuild " + text);
			((BaseItem)buttonItemBuildCleanProject).set_Text("Clean " + text);
			IsSolutionOrProjectReadOnly(out var projReadOnly, out var solReadOnly);
			((BaseItem)buttonItemFileAddNewTileSet).set_Enabled(flag2 && !solReadOnly);
			((BaseItem)buttonItemFileExcludeTileSet).set_Enabled(flag2 && !solReadOnly);
			((BaseItem)buttonItemFileMigrateTextures).set_Enabled(hasSelectedAssets && !model.ReadOnlyMode);
			((BaseItem)buttonItemTileSetImport).set_Enabled(flag2 && !projReadOnly);
			((BaseItem)buttonItemImport).set_Enabled(flag && !projReadOnly);
		}

		private void solutionTree_AssetNodeDoubleClicked(object sender, SolutionTree.NodeContext context)
		{
			if (context.Type == ProjectTree.AssetNodeType.Texture)
			{
				ShellTools.OpenExplorerAndSelect(context.Texture.get_Source());
			}
		}

		private void solutionTree_AssetNodeClicked(object sender, SolutionTree.NodeContext context)
		{
		}

		private void SelectDefaultConfiguration()
		{
			solutionTree.SelectFirstProject();
		}

		public void SetStartupContext(StartupContext context)
		{
			startupContext = context;
		}

		private void ImportSingleAsset()
		{
			//IL_00a8: Expected O, but got Unknown
			if (model.ActiveSolutionProject == null && model.ActiveProjectBuilder == null)
			{
				return;
			}
			ImportAssetForm importAssetForm = new ImportAssetForm(model, userSettings);
			importAssetForm.LayerConfig = model.ActiveProjectBuilder.get_ActiveProject().get_LayerConfiguration();
			((Control)(object)importAssetForm).Text = "Add Single Stacked Texture in Tile Set '" + model.ActiveProjectBuilder.get_ActiveProject().get_Name() + "'";
			if (((Form)(object)importAssetForm).ShowDialog((IWin32Window)this) == DialogResult.OK)
			{
				try
				{
					model.ImportAsset(importAssetForm.AssetImportDescription);
				}
				catch (UnspecifiedException val)
				{
					UnspecifiedException val2 = val;
					((Logger)StudioLogger.Global).LogError(((Exception)(object)val2).Message);
				}
				catch (Exception e)
				{
					StudioLogger.Global.LogException(e);
				}
			}
		}

		private void buttonItemFileNewSolution_Click(object sender, EventArgs e)
		{
			NewProjectForm newProjectForm = new NewProjectForm();
			newProjectForm.CreateNewSolutionDefault = true;
			newProjectForm.AllowUserNewSolutionCreation = true;
			newProjectForm.SolutionPath = DialogUtil.SolutionLocation;
			if (((Form)(object)newProjectForm).ShowDialog() == DialogResult.OK)
			{
				if (model.ActiveSolution != null)
				{
					CloseSolution();
				}
				string text = "";
				if (!newProjectForm.SolutionName.EndsWith(Constants.SolutionExtension))
				{
					text = "." + Constants.SolutionExtension;
				}
				string fileName = Path.Combine(newProjectForm.SolutionPath, newProjectForm.SolutionName + text);
				CreateSolution(fileName, newProjectForm.ProjectName, newProjectForm.ProjectTemplate);
				DialogUtil.SolutionLocation = newProjectForm.SolutionPath;
			}
		}

		private bool CreateSolution(string fileName, string projectName, ProjectTemplate projectTemplate)
		{
			//IL_0002: Unknown result type (might be due to invalid IL or missing references)
			//IL_0010: Unknown result type (might be due to invalid IL or missing references)
			//IL_0015: Unknown result type (might be due to invalid IL or missing references)
			//IL_0016: Unknown result type (might be due to invalid IL or missing references)
			//IL_0018: Invalid comparison between Unknown and I4
			//IL_0084: Unknown result type (might be due to invalid IL or missing references)
			//IL_008a: Invalid comparison between Unknown and I4
			//IL_009c: Expected O, but got Unknown
			Error val = (Error)0;
			try
			{
				val = model.SolutionBuilder.NewSolution(fileName);
				if ((int)val > 0)
				{
					((Logger)StudioLogger.Global).LogError("Could not create new solution. General error: " + ((object)(Error)(ref val)).ToString());
					return false;
				}
				if (model.ProjectExists(projectName))
				{
					string text = "A project with the name '" + projectName + "' is already exists in the selected folder. Please choose a different project name or folder.";
					((Logger)StudioLogger.Global).LogError(text);
					return false;
				}
				if ((int)model.CreateProject(projectName, projectTemplate) > 0)
				{
					return false;
				}
			}
			catch (UnspecifiedException val2)
			{
				UnspecifiedException val3 = val2;
				((Logger)StudioLogger.Global).LogError(((Exception)(object)val3).Message);
				return false;
			}
			catch (Exception e)
			{
				StudioLogger.Global.LogException(e);
				return false;
			}
			mruMenuManager.AddMRUFile(fileName);
			return true;
		}

		private void OpenSolution()
		{
			openSolutionDialog.InitialDirectory = DialogUtil.SolutionLocation;
			if (openSolutionDialog.ShowDialog() == DialogResult.OK)
			{
				OpenSolution(openSolutionDialog.FileName);
			}
		}

		private bool OpenSolution(string filename)
		{
			//IL_0047: Unknown result type (might be due to invalid IL or missing references)
			//IL_0056: Unknown result type (might be due to invalid IL or missing references)
			//IL_005b: Unknown result type (might be due to invalid IL or missing references)
			//IL_0063: Expected O, but got Unknown
			//IL_009f: Unknown result type (might be due to invalid IL or missing references)
			//IL_00c4: Expected O, but got Unknown
			//IL_013d: Unknown result type (might be due to invalid IL or missing references)
			//IL_0144: Expected O, but got Unknown
			//IL_0154: Unknown result type (might be due to invalid IL or missing references)
			//IL_0155: Unknown result type (might be due to invalid IL or missing references)
			//IL_0157: Unknown result type (might be due to invalid IL or missing references)
			//IL_0159: Unknown result type (might be due to invalid IL or missing references)
			//IL_015b: Unknown result type (might be due to invalid IL or missing references)
			//IL_0164: Unknown result type (might be due to invalid IL or missing references)
			//IL_0168: Invalid comparison between Unknown and I4
			slowTaskMonitor = new SlowTaskMonitor("Opening Project", (Form)(object)this);
			slowTaskMonitor.Type = SlowTaskMonitor.ProgressBarType.Marquee;
			slowTaskMonitor.Start();
			if (model.ActiveSolution != null)
			{
				CloseSolution();
			}
			Error val = (Error)0;
			try
			{
				val = model.SolutionBuilder.LoadSolution(filename, false);
			}
			catch (UnspecifiedException val2)
			{
				UnspecifiedException val3 = val2;
				if (slowTaskMonitor != null)
				{
					slowTaskMonitor.End();
					slowTaskMonitor = null;
				}
				string text = string.Format("Could not load solution. Detailed error message: '{0}'. Error code: '{1}'.", new object[2]
				{
					((Exception)(object)val3).Message,
					val3.get_ErrorCode()
				});
				((Logger)StudioLogger.Global).LogError(text);
			}
			catch (GrInvalidProjectCompatibilityVersionException val4)
			{
				GrInvalidProjectCompatibilityVersionException val5 = val4;
				if (slowTaskMonitor != null)
				{
					slowTaskMonitor.End();
					slowTaskMonitor = null;
				}
				((Logger)StudioLogger.Global).LogError(((Exception)(object)val5).Message);
			}
			catch (Exception ex)
			{
				if (slowTaskMonitor != null)
				{
					slowTaskMonitor.End();
					slowTaskMonitor = null;
				}
				UnspecifiedException e = new UnspecifiedException("Could not load solution. Detailed error message: '" + ex.Message + "'.", ex);
				StudioLogger.Global.LogException((Exception)(object)e);
			}
			Error val6 = val;
			Error val7 = val6;
			if ((int)val7 != 0)
			{
				if ((int)val7 == 13)
				{
					if (slowTaskMonitor != null)
					{
						slowTaskMonitor.End();
						slowTaskMonitor = null;
					}
					((Logger)StudioLogger.Global).LogError("Solution is already open in another instance. Please close the other instance or open a different solution.");
					SelectDefaultConfiguration();
					return true;
				}
				mruMenuManager.RemoveMRUFile(filename);
				((Logger)StudioLogger.Global).LogError("Could not open solution. General error: " + ((object)(Error)(ref val)).ToString());
				SelectDefaultConfiguration();
				if (slowTaskMonitor != null)
				{
					slowTaskMonitor.End();
					slowTaskMonitor = null;
				}
				return false;
			}
			SelectDefaultConfiguration();
			if (slowTaskMonitor != null)
			{
				slowTaskMonitor.End();
				slowTaskMonitor = null;
			}
			mruMenuManager.AddMRUFile(filename);
			DialogUtil.SolutionLocation = Paths.GetDirectoryName(filename);
			UpdateReadOnlyMode();
			UpdateDialogTitle();
			return true;
		}

		private void UpdateDialogTitle()
		{
			if (model != null && model.ActiveSolution != null)
			{
				((Control)(object)this).Text = model.ActiveSolution.get_Name() + " - Tile Set Studio";
			}
			else
			{
				((Control)(object)this).Text = "Tile Set Studio";
			}
		}

		private void buttonItemToolbarNewSolution_Click(object sender, EventArgs e)
		{
			buttonItemFileNewSolution_Click(sender, e);
		}

		private void BuildSolution()
		{
			//IL_0040: Unknown result type (might be due to invalid IL or missing references)
			BuildForm buildForm = new BuildForm((Form)(object)this);
			buildForm.Create(model);
			ProjectBuildOptions projectBuildOptions = default(ProjectBuildOptions);
			((ProjectBuildOptions)(ref projectBuildOptions))._002Ector((BuildMode)0, startupContext.allowForeignGtex, startupContext.forceGtex, startupContext.buildnotileset);
			buildForm.ShowAndBuild((Task)0, projectBuildOptions);
		}

		private void BuildSolutionForGTex()
		{
			//IL_0040: Unknown result type (might be due to invalid IL or missing references)
			BuildForm buildForm = new BuildForm((Form)(object)this);
			buildForm.Create(model);
			ProjectBuildOptions projectBuildOptions = default(ProjectBuildOptions);
			((ProjectBuildOptions)(ref projectBuildOptions))._002Ector((BuildMode)1, startupContext.allowForeignGtex, startupContext.forceGtex, startupContext.buildnotileset);
			buildForm.ShowAndBuild((Task)0, projectBuildOptions);
		}

		private void RebuildSolutionForGTex()
		{
			//IL_0040: Unknown result type (might be due to invalid IL or missing references)
			BuildForm buildForm = new BuildForm((Form)(object)this);
			buildForm.Create(model);
			ProjectBuildOptions projectBuildOptions = default(ProjectBuildOptions);
			((ProjectBuildOptions)(ref projectBuildOptions))._002Ector((BuildMode)1, startupContext.allowForeignGtex, startupContext.forceGtex, startupContext.buildnotileset);
			buildForm.ShowAndBuild((Task)1, projectBuildOptions);
		}

		private void RebuildSolution()
		{
			//IL_0040: Unknown result type (might be due to invalid IL or missing references)
			BuildForm buildForm = new BuildForm((Form)(object)this);
			buildForm.Create(model);
			ProjectBuildOptions projectBuildOptions = default(ProjectBuildOptions);
			((ProjectBuildOptions)(ref projectBuildOptions))._002Ector((BuildMode)0, startupContext.allowForeignGtex, startupContext.forceGtex, startupContext.buildnotileset);
			buildForm.ShowAndBuild((Task)1, projectBuildOptions);
		}

		private void CleanSolution()
		{
			//IL_0055: Unknown result type (might be due to invalid IL or missing references)
			//IL_005a: Unknown result type (might be due to invalid IL or missing references)
			CleanForm cleanForm = new CleanForm();
			if (((Form)(object)cleanForm).ShowDialog() == DialogResult.OK)
			{
				BuildForm buildForm = new BuildForm((Form)(object)this);
				buildForm.Create(model);
				ProjectBuildOptions projectBuildOptions = default(ProjectBuildOptions);
				((ProjectBuildOptions)(ref projectBuildOptions))._002Ector((BuildMode)0, startupContext.allowForeignGtex, startupContext.forceGtex, startupContext.buildnotileset);
				buildForm.ShowAndBuild((Task)2, cleanForm.CleanParameters, projectBuildOptions);
			}
		}

		private void RepageSolution()
		{
			//IL_0040: Unknown result type (might be due to invalid IL or missing references)
			BuildForm buildForm = new BuildForm((Form)(object)this);
			buildForm.Create(model);
			ProjectBuildOptions projectBuildOptions = default(ProjectBuildOptions);
			((ProjectBuildOptions)(ref projectBuildOptions))._002Ector((BuildMode)0, startupContext.allowForeignGtex, startupContext.forceGtex, startupContext.buildnotileset);
			buildForm.ShowAndBuild((Task)4, projectBuildOptions);
		}

		private void BuildProject(Guid projectID)
		{
			//IL_004e: Unknown result type (might be due to invalid IL or missing references)
			BuildForm buildForm = new BuildForm((Form)(object)this);
			buildForm.Create(model);
			ProjectBuildOptions projectBuildOptions = default(ProjectBuildOptions);
			((ProjectBuildOptions)(ref projectBuildOptions))._002Ector((BuildMode)0, startupContext.allowForeignGtex, startupContext.forceGtex, startupContext.buildnotileset);
			buildForm.ShowAndBuild((Task)0, new Guid[1] { projectID }, projectBuildOptions);
		}

		private void BuildProjectForGTex(Guid projectID)
		{
			//IL_004e: Unknown result type (might be due to invalid IL or missing references)
			BuildForm buildForm = new BuildForm((Form)(object)this);
			buildForm.Create(model);
			ProjectBuildOptions projectBuildOptions = default(ProjectBuildOptions);
			((ProjectBuildOptions)(ref projectBuildOptions))._002Ector((BuildMode)1, startupContext.allowForeignGtex, startupContext.forceGtex, startupContext.buildnotileset);
			buildForm.ShowAndBuild((Task)0, new Guid[1] { projectID }, projectBuildOptions);
		}

		private void RebuildProjectForGTex(Guid projectID)
		{
			//IL_004e: Unknown result type (might be due to invalid IL or missing references)
			BuildForm buildForm = new BuildForm((Form)(object)this);
			buildForm.Create(model);
			ProjectBuildOptions projectBuildOptions = default(ProjectBuildOptions);
			((ProjectBuildOptions)(ref projectBuildOptions))._002Ector((BuildMode)1, startupContext.allowForeignGtex, startupContext.forceGtex, startupContext.buildnotileset);
			buildForm.ShowAndBuild((Task)1, new Guid[1] { projectID }, projectBuildOptions);
		}

		private void RebuildProject(Guid projectID)
		{
			//IL_004e: Unknown result type (might be due to invalid IL or missing references)
			BuildForm buildForm = new BuildForm((Form)(object)this);
			buildForm.Create(model);
			ProjectBuildOptions projectBuildOptions = default(ProjectBuildOptions);
			((ProjectBuildOptions)(ref projectBuildOptions))._002Ector((BuildMode)0, startupContext.allowForeignGtex, startupContext.forceGtex, startupContext.buildnotileset);
			buildForm.ShowAndBuild((Task)1, new Guid[1] { projectID }, projectBuildOptions);
		}

		private void CleanProject(Guid projectID)
		{
			//IL_0063: Unknown result type (might be due to invalid IL or missing references)
			//IL_0068: Unknown result type (might be due to invalid IL or missing references)
			CleanForm cleanForm = new CleanForm();
			if (((Form)(object)cleanForm).ShowDialog() == DialogResult.OK)
			{
				BuildForm buildForm = new BuildForm((Form)(object)this);
				buildForm.Create(model);
				ProjectBuildOptions projectBuildOptions = default(ProjectBuildOptions);
				((ProjectBuildOptions)(ref projectBuildOptions))._002Ector((BuildMode)0, startupContext.allowForeignGtex, startupContext.forceGtex, startupContext.buildnotileset);
				buildForm.ShowAndBuild((Task)2, new Guid[1] { projectID }, cleanForm.CleanParameters, projectBuildOptions);
			}
		}

		private void RepageProject(Guid projectID)
		{
			//IL_004e: Unknown result type (might be due to invalid IL or missing references)
			BuildForm buildForm = new BuildForm((Form)(object)this);
			buildForm.Create(model);
			ProjectBuildOptions projectBuildOptions = default(ProjectBuildOptions);
			((ProjectBuildOptions)(ref projectBuildOptions))._002Ector((BuildMode)0, startupContext.allowForeignGtex, startupContext.forceGtex, startupContext.buildnotileset);
			buildForm.ShowAndBuild((Task)4, new Guid[1] { projectID }, projectBuildOptions);
		}

		private void MainForm_Load(object sender, EventArgs e)
		{
			if (!startupContext.hideMainWindow)
			{
				((Control)this).BeginInvoke((Delegate)(MethodInvoker)delegate
				{
					LoadAndBuild();
				});
			}
		}

		public void LoadAndBuild()
		{
			//IL_0050: Unknown result type (might be due to invalid IL or missing references)
			//IL_0058: Unknown result type (might be due to invalid IL or missing references)
			//IL_0064: Expected O, but got Unknown
			//IL_00d7: Unknown result type (might be due to invalid IL or missing references)
			//IL_0112: Unknown result type (might be due to invalid IL or missing references)
			//IL_0113: Unknown result type (might be due to invalid IL or missing references)
			AutoBuildReport = new AutoBuildReport();
			if (startupContext.solutionToLoadPath != null)
			{
				OpenSolution(startupContext.solutionToLoadPath);
			}
			if (!startupContext.buildSolution)
			{
				return;
			}
			TargetConfiguration targetConfiguration = (TargetConfiguration)1;
			try
			{
				model.SetTargetConfiguration(targetConfiguration);
			}
			catch (UnspecifiedException val)
			{
				UnspecifiedException val2 = val;
				((Logger)StudioLogger.Global).LogError(((Exception)(object)val2).Message);
			}
			catch (Exception e)
			{
				StudioLogger.Global.LogException(e);
			}
			BuildForm buildForm = new BuildForm((Form)(object)this, FormMode.Standalone);
			buildForm.Create(model);
			buildForm.CloseOnFinished = startupContext.quitAfterSuccessBuild;
			buildForm.ForceCloseOnFinished = startupContext.silentAtlasErrors;
			Task task = (Task)(startupContext.rebuildSolution ? 1 : 0);
			ProjectBuildOptions projectBuildOptions = default(ProjectBuildOptions);
			((ProjectBuildOptions)(ref projectBuildOptions))._002Ector((BuildMode)(startupContext.buildForGtex ? 1 : 0), startupContext.allowForeignGtex, startupContext.forceGtex, startupContext.buildnotileset);
			buildForm.ShowAndBuild(task, projectBuildOptions);
			if (!buildForm.ErrorOccurred() && startupContext.quitAfterSuccessBuild)
			{
				((Form)this).Close();
			}
			if (buildForm.ErrorOccurred())
			{
				AutoBuildReport.ErrorsOccurred = true;
				if (buildForm.AtlassingErrorOccurred() && startupContext.silentAtlasErrors)
				{
					AutoBuildReport.AtlassingErrorsOccurred = true;
					((Form)this).Close();
				}
			}
		}

		private void buttonItemFileAddNewTileSet_Click(object sender, EventArgs e)
		{
			//IL_00e5: Unknown result type (might be due to invalid IL or missing references)
			//IL_00f1: Expected O, but got Unknown
			NewProjectForm newProjectForm = new NewProjectForm();
			newProjectForm.CreateNewSolutionDefault = false;
			newProjectForm.AllowUserNewSolutionCreation = false;
			newProjectForm.SolutionPath = model.SolutionBuilder.get_ActiveSolutionFullPath();
			newProjectForm.ProjectName = UserExperience.SuggestProjectName(model);
			if (((Form)(object)newProjectForm).ShowDialog() != DialogResult.OK)
			{
				return;
			}
			try
			{
				if (model.HasProject(newProjectForm.ProjectName))
				{
					string text = "A project with the name '" + newProjectForm.ProjectName + "' is already in the solution. Please choose a different name.";
					((Logger)StudioLogger.Global).LogError(text);
				}
				else if (model.ProjectExists(newProjectForm.ProjectName))
				{
					string text2 = "A project with the name '" + newProjectForm.ProjectName + "' is already exists in the selected folder. Please choose a different project name or folder.";
					((Logger)StudioLogger.Global).LogError(text2);
				}
				else
				{
					model.CreateProject(newProjectForm.ProjectName, newProjectForm.ProjectTemplate);
				}
			}
			catch (UnspecifiedException val)
			{
				UnspecifiedException val2 = val;
				((Logger)StudioLogger.Global).LogError(((Exception)(object)val2).Message);
			}
			catch (Exception e2)
			{
				StudioLogger.Global.LogException(e2);
			}
		}

		private void buttonItemHelpOnlineDocs_Click(object sender, EventArgs e)
		{
			Process.Start(Constants.OnlineDocumentationUrl);
		}

		private void ImportFromScript()
		{
			//IL_0078: Expected O, but got Unknown
			//IL_00a5: Expected O, but got Unknown
			//IL_00ce: Expected O, but got Unknown
			ProjectSettings projectSettings = userSettings.Solution[model.ActiveProjectBuilder.get_ActiveProject().get_Id()];
			if (projectSettings != null)
			{
				openScriptDialog.InitialDirectory = projectSettings.ImportScriptLocation;
			}
			if (openScriptDialog.ShowDialog() == DialogResult.OK)
			{
				try
				{
					model.ImportFromScript(openScriptDialog.FileName);
				}
				catch (GrXmlException val)
				{
					GrXmlException val2 = val;
					((Logger)StudioLogger.Global).LogError("A parsing error occurred when parsing the XML file. Details of the error: " + ((Exception)(object)val2).Message + " Please consult the documentation for more information on XML script syntax.");
					return;
				}
				catch (InvalidLayerConfigurationException val3)
				{
					InvalidLayerConfigurationException val4 = val3;
					((Logger)StudioLogger.Global).LogError("A parsing error occurred when parsing the XML file: an invalid layer configuration was found. Details of the error: " + ((Exception)(object)val4).Message + " Please consult the documentation for more information on XML script syntax.");
					return;
				}
				catch (MissingLayerConfigurationException val5)
				{
					MissingLayerConfigurationException val6 = val5;
					((Logger)StudioLogger.Global).LogError("A parsing error occurred when parsing the XML file: no layer configuration was found. Details of the error: " + ((Exception)(object)val6).Message + " Please consult the documentation for more information on XML script syntax.");
					return;
				}
				catch (IOException ex)
				{
					((Logger)StudioLogger.Global).LogError("The file '" + openScriptDialog.FileName + "' could not be found or not read. Details of the error: " + ex.Message + " Please make sure the file is accessible.");
					return;
				}
				catch (Exception ex2)
				{
					((Logger)StudioLogger.Global).LogError("Unspecified error when importing file '" + openScriptDialog.FileName + "'. Details of the error: " + ex2.Message + " Contact Graphine if the error persists.");
					return;
				}
				if (projectSettings != null)
				{
					projectSettings.ImportScriptLocation = Paths.GetDirectoryName(openScriptDialog.FileName);
					userSettings.Solution[model.ActiveProjectBuilder.get_ActiveProject().get_Id()] = projectSettings;
				}
			}
		}

		private void OpenTileSetViewer()
		{
			try
			{
				Directory.SetCurrentDirectory(model.ActiveProjectBuilder.GetProjectPath());
				ShellTools.OpenGTSInViewer(Path.Combine(model.ActiveProjectBuilder.get_ActiveProject().get_BuildConfiguration().get_OutputDirectory(), model.ActiveProjectBuilder.get_ActiveProject().get_BuildConfiguration().get_OutputFilename()));
			}
			catch
			{
				((Logger)StudioLogger.Global).LogError("Unable to open file in viewer.");
			}
		}

		private void DeleteSelectedAssets()
		{
			//IL_007b: Expected O, but got Unknown
			if (selectedNodes.Count != 0)
			{
				slowTaskMonitor = new SlowTaskMonitor("Removing Stacked Texture(s)", (Form)(object)this);
				slowTaskMonitor.Type = SlowTaskMonitor.ProgressBarType.Marquee;
				slowTaskMonitor.Start();
				buildLoggerReporter = new BuildLoggerReporter();
				buildLoggerReporter.StartListening(model.ActiveProjectBuilder);
				try
				{
					model.RemoveAssets(selectedNodes, autoRemoveGroups: true);
				}
				catch (UnspecifiedException val)
				{
					UnspecifiedException val2 = val;
					((Logger)StudioLogger.Global).LogError(((Exception)(object)val2).Message);
				}
				catch (Exception e)
				{
					StudioLogger.Global.LogException(e);
				}
				selectedNodes.Clear();
				assetDetails.SetSelection(new AssetDetails.SelectionContext(model.ActiveSolutionProject.get_Id(), default(Guid)));
				if (buildLoggerReporter.HasSomethingToReport)
				{
					buildLoggerReporter.AddFinishedMessage("deleting");
					buildLoggerReporter.ShowDialog();
				}
				buildLoggerReporter.StopListening();
				SelectDefaultConfiguration();
				if (slowTaskMonitor != null)
				{
					slowTaskMonitor.End();
				}
			}
		}

		private void ClearAssetQualityProfiles(ProjectBuilder builder, bool[] layerChanged)
		{
			for (int i = 0; i < layerChanged.Length; i++)
			{
				if (!layerChanged[i])
				{
					continue;
				}
				foreach (Asset value in builder.get_ActiveProject().get_Assets().Values)
				{
					value.get_AssetLayers()[i].set_QualityProfile("default");
				}
			}
		}

		private void UpdateAssetPackingModes(ProjectBuilder builder, bool[] layerChanged)
		{
			//IL_0068: Unknown result type (might be due to invalid IL or missing references)
			//IL_006d: Unknown result type (might be due to invalid IL or missing references)
			//IL_0070: Unknown result type (might be due to invalid IL or missing references)
			//IL_00b2: Unknown result type (might be due to invalid IL or missing references)
			//IL_00b6: Unknown result type (might be due to invalid IL or missing references)
			//IL_00d0: Unknown result type (might be due to invalid IL or missing references)
			for (int i = 0; i < layerChanged.Length; i++)
			{
				if (!layerChanged[i])
				{
					continue;
				}
				DataType dataType = builder.get_ActiveProject().get_LayerConfiguration().get_Layers()[i].get_DataType();
				foreach (Asset value in builder.get_ActiveProject().get_Assets().Values)
				{
					AssetPackingMode packingMode = value.get_AssetLayers()[i].get_PackingMode();
					if (!ChannelMerging.isValidPackingModeForDataType(dataType, packingMode))
					{
						int count = value.get_AssetLayers()[i].get_Textures().Count;
						value.get_AssetLayers()[i].set_PackingMode(ChannelMerging.UpdatePackingMode(dataType, packingMode, count));
						int maxSubIdx = ChannelMerging.GetMaxValidSubTextureIdx(value.get_AssetLayers()[i].get_PackingMode());
						value.get_AssetLayers()[i].get_Textures().RemoveAll((Texture _tex) => _tex.get_SubIndex() > maxSubIdx);
					}
				}
			}
		}

		private void OpenProperties()
		{
			if (model.ActiveProjectBuilder == null)
			{
				return;
			}
			slowTaskMonitor = new SlowTaskMonitor("Preparing Properties", (Form)(object)this);
			slowTaskMonitor.Type = SlowTaskMonitor.ProgressBarType.Marquee;
			slowTaskMonitor.Start();
			bool readOnly = model.ActiveProjectBuilder.get_ReadOnly();
			ProjectPropertiesForm projectPropertiesForm = new ProjectPropertiesForm(readOnly);
			projectPropertiesForm.Properties = GetProjectProperties();
			projectPropertiesForm.ProjectPath = model.ActiveProjectBuilder.GetProjectPath();
			projectPropertiesForm.ProjectBuilder = model.ActiveProjectBuilder;
			((Control)(object)projectPropertiesForm).Text = "Project '" + model.ActiveProjectBuilder.get_ActiveProject().get_Name() + "' Properties";
			slowTaskMonitor.End();
			if (((Form)(object)projectPropertiesForm).ShowDialog((IWin32Window)this) == DialogResult.OK && !readOnly)
			{
				SetProjectProperties(projectPropertiesForm.Properties);
				if (projectPropertiesForm.Properties.CodingProfileChanged)
				{
					ClearAssetQualityProfiles(model.ActiveProjectBuilder, projectPropertiesForm.Properties.CodingProfileLayerChanged);
				}
				if (projectPropertiesForm.Properties.DataTypesChanged)
				{
					UpdateAssetPackingModes(model.ActiveProjectBuilder, projectPropertiesForm.Properties.DataTypeLayerChanged);
				}
				Rescan();
			}
		}

		private void SetProjectProperties(ProjectProperties properties)
		{
			//IL_00f9: Unknown result type (might be due to invalid IL or missing references)
			//IL_0135: Unknown result type (might be due to invalid IL or missing references)
			//IL_0147: Unknown result type (might be due to invalid IL or missing references)
			//IL_0168: Expected O, but got Unknown
			slowTaskMonitor = new SlowTaskMonitor("Setting Properties", (Form)(object)this);
			slowTaskMonitor.Type = SlowTaskMonitor.ProgressBarType.Marquee;
			slowTaskMonitor.Start();
			try
			{
				model.UpdateProfiles(properties.BuildProfile);
				model.UpdateGTSOutputFilename(properties.OutputFilename);
				model.UpdateSoupOutputFilename(properties.SoupOutputFolder);
				model.UpdatePageFiles(properties.PagesFolder);
				model.UpdatePatching(properties.Patching);
				model.UpdateHighQualityCoding(properties.HighQualityCoding);
				model.UpdateNoUniform(properties.NoUniformCoding);
				model.UpdateNoRedirection(properties.NoRedirection);
				model.UpdateNoSharedMips(properties.NoSharedMipGeneration);
				model.UpdateMipStripping(properties.MipStripping);
				model.UpdateMaxAnisotropy(properties.MaxAnisotropy);
				model.UpdateTargetDisk(properties.TargetDisk);
				model.UpdatePageSize(properties.PageSize);
				model.UpdateTileSize(properties.TileWidth, properties.TileHeight);
				model.UpdateTilingmode(properties.TilingMode);
				model.UpdatePagingStrategy(properties.PagingStrategy);
				model.UpdateLayerConfiguration(properties.LayerConfiguration);
			}
			catch (UnspecifiedException val)
			{
				UnspecifiedException val2 = val;
				((Logger)StudioLogger.Global).LogError(((Exception)(object)val2).Message);
			}
			catch (Exception e)
			{
				StudioLogger.Global.LogException(e);
			}
			slowTaskMonitor.End();
		}

		private ProjectProperties GetProjectProperties()
		{
			//IL_0123: Unknown result type (might be due to invalid IL or missing references)
			//IL_0135: Unknown result type (might be due to invalid IL or missing references)
			//IL_0147: Unknown result type (might be due to invalid IL or missing references)
			ProjectProperties projectProperties = new ProjectProperties();
			ProjectBuilder activeProjectBuilder = model.ActiveProjectBuilder;
			Project activeProject = activeProjectBuilder.get_ActiveProject();
			projectProperties.ProjectName = activeProject.get_Name();
			projectProperties.BuildProfile = activeProject.get_BuildProfile();
			projectProperties.OutputFilename = Path.Combine(activeProject.get_BuildConfiguration().get_OutputDirectory(), activeProject.get_BuildConfiguration().get_OutputFilename());
			projectProperties.SoupOutputFolder = activeProject.get_BuildConfiguration().get_SoupOutputDirectory();
			projectProperties.NoUniformCoding = !activeProjectBuilder.get_EnableUniformCoding();
			projectProperties.Patching = !activeProjectBuilder.get_NoPatching();
			projectProperties.NoSharedMipGeneration = !activeProjectBuilder.get_EnableSharedMipGeneration();
			projectProperties.MipStripping = activeProjectBuilder.get_EnableMipStripping();
			projectProperties.NoRedirection = !activeProjectBuilder.get_EnableRedirection();
			projectProperties.HighQualityCoding = activeProjectBuilder.get_EnableHighQualityCoding();
			projectProperties.PagesFolder = activeProject.get_BuildConfiguration().get_PagesDirectory();
			projectProperties.MaxAnisotropy = activeProject.get_BuildConfiguration().get_MaximumAnisotropy();
			projectProperties.TileHeight = activeProject.get_BuildConfiguration().get_TileHeight();
			projectProperties.TileWidth = activeProject.get_BuildConfiguration().get_TileWidth();
			projectProperties.PageSize = activeProject.get_BuildConfiguration().get_PageSize();
			projectProperties.TargetDisk = activeProject.get_BuildConfiguration().get_TargetDisk();
			projectProperties.TilingMode = activeProject.get_BuildConfiguration().get_TilingMode();
			projectProperties.PagingStrategy = activeProject.get_BuildConfiguration().get_PagingStrategy();
			projectProperties.LayerConfiguration = activeProject.get_LayerConfiguration();
			return projectProperties;
		}

		private void BatchImport()
		{
			//IL_0091: Expected O, but got Unknown
			if (model.ActiveSolutionProject == null)
			{
				return;
			}
			BatchImportAssetsForm batchImportAssetsForm = new BatchImportAssetsForm(model.ActiveProjectBuilder.get_ActiveProject().get_LayerConfiguration(), model, userSettings);
			((Control)(object)batchImportAssetsForm).Text = "Add Multiple Stacked Textures in Tile Set '" + model.ActiveProjectBuilder.get_ActiveProject().get_Name() + "'";
			if (((Form)(object)batchImportAssetsForm).ShowDialog((IWin32Window)this) != DialogResult.OK)
			{
				return;
			}
			try
			{
				model.ImportAssetTemplate(batchImportAssetsForm.LayerTemplateImportDescription);
			}
			catch (UnspecifiedException val)
			{
				UnspecifiedException val2 = val;
				((Logger)StudioLogger.Global).LogError(((Exception)(object)val2).Message);
			}
			catch (Exception e)
			{
				StudioLogger.Global.LogException(e);
			}
		}

		private void buttonItemOpenlog_Click(object sender, EventArgs e)
		{
			try
			{
				string fullPath = Path.GetFullPath(model.ActiveProjectBuilder.GetProjectPath());
				string logFile = model.ActiveProjectBuilder.get_ActiveProject().get_BuildConfiguration().get_LogFile();
				Process.Start(Path.Combine(fullPath, logFile));
			}
			catch
			{
				((Logger)StudioLogger.Global).LogError("Unable to open log file.");
			}
		}

		private void ExportToScript()
		{
			//IL_00cd: Expected O, but got Unknown
			ProjectSettings projectSettings = userSettings.Solution[model.ActiveProjectBuilder.get_ActiveProject().get_Id()];
			if (projectSettings != null)
			{
				saveScriptDialog.InitialDirectory = projectSettings.ExportScriptLocation;
			}
			saveScriptDialog.FileName = model.ActiveProjectBuilder.get_ActiveProject().get_Name() + ".xml";
			if (saveScriptDialog.ShowDialog() == DialogResult.OK)
			{
				slowTaskMonitor = new SlowTaskMonitor("Exporting", (Form)(object)this);
				slowTaskMonitor.Type = SlowTaskMonitor.ProgressBarType.Marquee;
				slowTaskMonitor.Start();
				bool flag = false;
				try
				{
					flag = model.ExportToImportScript(saveScriptDialog.FileName);
				}
				catch (UnspecifiedException val)
				{
					UnspecifiedException val2 = val;
					((Logger)StudioLogger.Global).LogError(((Exception)(object)val2).Message);
				}
				catch (Exception e)
				{
					StudioLogger.Global.LogException(e);
				}
				slowTaskMonitor.End();
				if (flag)
				{
					((Logger)StudioLogger.Global).LogInfo("Successfully exported to file.");
				}
				else
				{
					((Logger)StudioLogger.Global).LogError("Failed to export to XML import script.");
				}
				if (projectSettings != null)
				{
					projectSettings.ExportScriptLocation = Paths.GetDirectoryName(saveScriptDialog.FileName);
					userSettings.Solution[model.ActiveProjectBuilder.get_ActiveProject().get_Id()] = projectSettings;
				}
			}
		}

		private void Rescan()
		{
			//IL_003c: Expected O, but got Unknown
			slowTaskMonitor = new SlowTaskMonitor("Rescanning Stacked Textures", (Form)(object)this);
			slowTaskMonitor.Type = SlowTaskMonitor.ProgressBarType.Marquee;
			slowTaskMonitor.Start();
			try
			{
				model.ScanAssets();
			}
			catch (UnspecifiedException val)
			{
				UnspecifiedException val2 = val;
				((Logger)StudioLogger.Global).LogError(((Exception)(object)val2).Message);
			}
			catch (Exception e)
			{
				StudioLogger.Global.LogException(e);
			}
			slowTaskMonitor.End();
		}

		private void CloseSolution()
		{
			//IL_0012: Expected O, but got Unknown
			try
			{
				model.Close();
			}
			catch (UnspecifiedException val)
			{
				UnspecifiedException val2 = val;
				((Logger)StudioLogger.Global).LogError(((Exception)(object)val2).Message);
			}
			catch (Exception e)
			{
				StudioLogger.Global.LogException(e);
			}
			ShowFilterBar(show: false);
			EnableContextualMenus();
			solutionTree.Delete();
			buildSummaryDetails.Reload();
			assetDetails.Clear();
			UpdateDialogTitle();
			UpdateReadOnlyMode();
		}

		protected override bool ProcessCmdKey(ref Message msg, Keys keyData)
		{
			if (model != null && model.ActiveSolution != null)
			{
				switch (keyData)
				{
				case Keys.R | Keys.Control:
					Rescan();
					return true;
				case Keys.B | Keys.Shift | Keys.Control:
					BuildSolution();
					return true;
				case Keys.R | Keys.Shift | Keys.Control:
					RebuildSolution();
					return true;
				case Keys.C | Keys.Shift | Keys.Control:
					CleanSolution();
					return true;
				case Keys.I | Keys.Control:
					ImportSingleAsset();
					return true;
				case Keys.I | Keys.Shift | Keys.Control:
					BatchImport();
					return true;
				case Keys.P | Keys.Control:
					ImportFromScript();
					return true;
				case Keys.F | Keys.Control:
					ShowFilterBar(show: true);
					return true;
				default:
					return ((Form)this).ProcessCmdKey(ref msg, keyData);
				}
			}
			return ((Form)this).ProcessCmdKey(ref msg, keyData);
		}

		private void showTileSetInWindowsExplorerToolStripMenuItem_Click(object sender, EventArgs e)
		{
			ShellTools.OpenGtsInExplorer(model.ActiveProjectBuilder);
		}

		private void copyOutputFileNameToolStripMenuItem_Click(object sender, EventArgs e)
		{
			string gtsPath = ShellTools.GetGtsPath(model.ActiveProjectBuilder);
			if (gtsPath != null)
			{
				ClipboardHelper.CopyText(gtsPath);
			}
		}

		private void excludeFromSolutionToolStripMenuItem_Click(object sender, EventArgs e)
		{
			ExcludeSelectedProjectFromSolution();
		}

		private void excludeFromSolutionMenu_Click(object sender, EventArgs e)
		{
			ExcludeSelectedProjectFromSolution();
		}

		private void ExcludeSelectedProjectFromSolution()
		{
			if (model.ActiveProjectBuilder != null)
			{
				DeleteProjectForm deleteProjectForm = new DeleteProjectForm();
				deleteProjectForm.InitForProject(model);
				((Form)(object)deleteProjectForm).ShowDialog((IWin32Window)this);
			}
		}

		private void editToolStripMenuItem_Click(object sender, EventArgs e)
		{
			EditSelectedAsset();
		}

		private void EditSelectedAsset()
		{
			//IL_0125: Unknown result type (might be due to invalid IL or missing references)
			//IL_012b: Unknown result type (might be due to invalid IL or missing references)
			//IL_015a: Unknown result type (might be due to invalid IL or missing references)
			//IL_0160: Invalid comparison between Unknown and I4
			//IL_01d2: Expected O, but got Unknown
			if (selectedNodes.Count < 1 || (model.ActiveSolutionProject == null && model.ActiveProjectBuilder == null))
			{
				return;
			}
			Guid id = model.ActiveSolutionProject.get_Id();
			Asset val = model.FindAsset(id, selectedNodes[0]);
			if (val == null)
			{
				return;
			}
			if (!string.IsNullOrEmpty(val.get_AssetGroupId()) && val.get_Face() != 0)
			{
				val = model.FindFirstAssetInGroup(id, val.get_AssetGroupId());
				if (val == null)
				{
					return;
				}
			}
			ImportAssetForm importAssetForm = new ImportAssetForm(model, userSettings);
			importAssetForm.LayerConfig = model.ActiveProjectBuilder.get_ActiveProject().get_LayerConfiguration();
			((Control)(object)importAssetForm).Text = "Editing " + val.get_Name();
			importAssetForm.AssetToEdit = val;
			if (((Form)(object)importAssetForm).ShowDialog((IWin32Window)this) != DialogResult.OK)
			{
				return;
			}
			try
			{
				if (importAssetForm.AssetImportDescription.Type != val.get_Type())
				{
					List<Guid> list = new List<Guid>();
					list.Add(val.get_Id());
					model.RemoveAssets(list, (int)val.get_Type() == 1);
					model.ImportAsset(importAssetForm.AssetImportDescription);
				}
				else
				{
					if (importAssetForm.AssetImportDescription.Name != val.get_Name())
					{
						model.RenameAsset(id, val.get_Id(), importAssetForm.AssetImportDescription.Name);
					}
					model.ReImportAsset(importAssetForm.AssetImportDescription);
				}
			}
			catch (UnspecifiedException val2)
			{
				UnspecifiedException val3 = val2;
				((Logger)StudioLogger.Global).LogError(((Exception)(object)val3).Message);
			}
			catch (Exception e)
			{
				StudioLogger.Global.LogException(e);
			}
		}

		private void buttonItemFilter_Click(object sender, EventArgs e)
		{
			ShowFilterBar(!buttonItemFilter.get_Checked());
		}

		private void ShowFilterBar(bool show)
		{
			solutionTree.EnableFilter(show);
			buttonItemFilter.set_Checked(show);
		}

		private void solutionTree_FilterBarClosed(object sender)
		{
			buttonItemFilter.set_Checked(false);
		}

		private void buttonItemTilesetMigrateTextures_Click(object sender, EventArgs e)
		{
			MigrateTextures();
		}

		private void toolStripMenuItemMigrateAsset_Click(object sender, EventArgs e)
		{
			MigrateTextures();
		}

		private void MigrateTextures()
		{
			surpressBuildLoggerDialog = true;
			MigrateAssetsForm migrateAssetsForm = new MigrateAssetsForm();
			migrateAssetsForm.Initialize(model, solutionTree.SelectedAssets);
			((Form)(object)migrateAssetsForm).ShowDialog();
			surpressBuildLoggerDialog = false;
		}

		private void UpdateReadOnlyMode()
		{
			string empty = string.Empty;
			empty = ((model.SolutionBuilder.get_ReadOnly() && !model.SolutionBuilder.get_ProjectsReadOnly()) ? "The solution is opened in read-only mode. You can build and edit, but not add or delete projects." : ((model.SolutionBuilder.get_ReadOnly() || !model.SolutionBuilder.get_ProjectsReadOnly()) ? "The solution or one or more projects are opened in read-only mode. You can build but not add, delete, or edit projects." : "One or more projects are opened in read-only mode. You can build these projects but not edit them."));
			readOnlyMessageBar.MessageText = empty;
			bool visible = model != null && model.ReadOnlyMode;
			readOnlyMessageBar.Visible = visible;
		}

		private void IsSolutionOrProjectReadOnly(out bool projReadOnly, out bool solReadOnly)
		{
			projReadOnly = false;
			solReadOnly = false;
			if (model.ActiveSolutionProject == null || model.SolutionBuilder == null)
			{
				solReadOnly = true;
			}
			else
			{
				solReadOnly = model.SolutionBuilder.get_ReadOnly();
			}
			if (model.ActiveProjectBuilder == null)
			{
				projReadOnly = true;
			}
			else
			{
				projReadOnly = model.ActiveProjectBuilder.get_ReadOnly();
			}
		}

		private void contextMenuStripRightClickProject_Opening(object sender, CancelEventArgs e)
		{
			IsSolutionOrProjectReadOnly(out var projReadOnly, out var _);
			importSingleAssetToolStripMenuItem.Enabled = !projReadOnly;
			excludeFromSolutionToolStripMenuItem.Enabled = !projReadOnly;
		}

		protected override void Dispose(bool disposing)
		{
			if (disposing && components != null)
			{
				components.Dispose();
			}
			((OfficeForm)this).Dispose(disposing);
		}

		private void InitializeComponent()
		{
			//IL_0023: Unknown result type (might be due to invalid IL or missing references)
			//IL_002d: Expected O, but got Unknown
			//IL_002e: Unknown result type (might be due to invalid IL or missing references)
			//IL_0038: Expected O, but got Unknown
			//IL_0039: Unknown result type (might be due to invalid IL or missing references)
			//IL_0043: Expected O, but got Unknown
			//IL_0044: Unknown result type (might be due to invalid IL or missing references)
			//IL_004e: Expected O, but got Unknown
			//IL_004f: Unknown result type (might be due to invalid IL or missing references)
			//IL_0059: Expected O, but got Unknown
			//IL_0065: Unknown result type (might be due to invalid IL or missing references)
			//IL_006f: Expected O, but got Unknown
			//IL_0070: Unknown result type (might be due to invalid IL or missing references)
			//IL_007a: Expected O, but got Unknown
			//IL_007b: Unknown result type (might be due to invalid IL or missing references)
			//IL_0085: Expected O, but got Unknown
			//IL_0086: Unknown result type (might be due to invalid IL or missing references)
			//IL_0090: Expected O, but got Unknown
			//IL_0091: Unknown result type (might be due to invalid IL or missing references)
			//IL_009b: Expected O, but got Unknown
			//IL_00a7: Unknown result type (might be due to invalid IL or missing references)
			//IL_00b1: Expected O, but got Unknown
			//IL_00b2: Unknown result type (might be due to invalid IL or missing references)
			//IL_00bc: Expected O, but got Unknown
			//IL_00bd: Unknown result type (might be due to invalid IL or missing references)
			//IL_00c7: Expected O, but got Unknown
			//IL_00d3: Unknown result type (might be due to invalid IL or missing references)
			//IL_00dd: Expected O, but got Unknown
			//IL_00de: Unknown result type (might be due to invalid IL or missing references)
			//IL_00e8: Expected O, but got Unknown
			//IL_00e9: Unknown result type (might be due to invalid IL or missing references)
			//IL_00f3: Expected O, but got Unknown
			//IL_00f4: Unknown result type (might be due to invalid IL or missing references)
			//IL_00fe: Expected O, but got Unknown
			//IL_00ff: Unknown result type (might be due to invalid IL or missing references)
			//IL_0109: Expected O, but got Unknown
			//IL_010a: Unknown result type (might be due to invalid IL or missing references)
			//IL_0114: Expected O, but got Unknown
			//IL_0115: Unknown result type (might be due to invalid IL or missing references)
			//IL_011f: Expected O, but got Unknown
			//IL_0120: Unknown result type (might be due to invalid IL or missing references)
			//IL_012a: Expected O, but got Unknown
			//IL_012b: Unknown result type (might be due to invalid IL or missing references)
			//IL_0135: Expected O, but got Unknown
			//IL_0136: Unknown result type (might be due to invalid IL or missing references)
			//IL_0140: Expected O, but got Unknown
			//IL_0141: Unknown result type (might be due to invalid IL or missing references)
			//IL_014b: Expected O, but got Unknown
			//IL_014c: Unknown result type (might be due to invalid IL or missing references)
			//IL_0156: Expected O, but got Unknown
			//IL_0157: Unknown result type (might be due to invalid IL or missing references)
			//IL_0161: Expected O, but got Unknown
			//IL_0162: Unknown result type (might be due to invalid IL or missing references)
			//IL_016c: Expected O, but got Unknown
			//IL_016d: Unknown result type (might be due to invalid IL or missing references)
			//IL_0177: Expected O, but got Unknown
			//IL_0178: Unknown result type (might be due to invalid IL or missing references)
			//IL_0182: Expected O, but got Unknown
			//IL_0183: Unknown result type (might be due to invalid IL or missing references)
			//IL_018d: Expected O, but got Unknown
			//IL_018e: Unknown result type (might be due to invalid IL or missing references)
			//IL_0198: Expected O, but got Unknown
			//IL_0199: Unknown result type (might be due to invalid IL or missing references)
			//IL_01a3: Expected O, but got Unknown
			//IL_01a4: Unknown result type (might be due to invalid IL or missing references)
			//IL_01ae: Expected O, but got Unknown
			//IL_01af: Unknown result type (might be due to invalid IL or missing references)
			//IL_01b9: Expected O, but got Unknown
			//IL_01ba: Unknown result type (might be due to invalid IL or missing references)
			//IL_01c4: Expected O, but got Unknown
			//IL_01c5: Unknown result type (might be due to invalid IL or missing references)
			//IL_01cf: Expected O, but got Unknown
			//IL_01d0: Unknown result type (might be due to invalid IL or missing references)
			//IL_01da: Expected O, but got Unknown
			//IL_01db: Unknown result type (might be due to invalid IL or missing references)
			//IL_01e5: Expected O, but got Unknown
			//IL_01e6: Unknown result type (might be due to invalid IL or missing references)
			//IL_01f0: Expected O, but got Unknown
			//IL_01f1: Unknown result type (might be due to invalid IL or missing references)
			//IL_01fb: Expected O, but got Unknown
			//IL_01fc: Unknown result type (might be due to invalid IL or missing references)
			//IL_0206: Expected O, but got Unknown
			//IL_0207: Unknown result type (might be due to invalid IL or missing references)
			//IL_0211: Expected O, but got Unknown
			//IL_0212: Unknown result type (might be due to invalid IL or missing references)
			//IL_021c: Expected O, but got Unknown
			//IL_021d: Unknown result type (might be due to invalid IL or missing references)
			//IL_0227: Expected O, but got Unknown
			//IL_0228: Unknown result type (might be due to invalid IL or missing references)
			//IL_0232: Expected O, but got Unknown
			//IL_0233: Unknown result type (might be due to invalid IL or missing references)
			//IL_023d: Expected O, but got Unknown
			//IL_023e: Unknown result type (might be due to invalid IL or missing references)
			//IL_0248: Expected O, but got Unknown
			//IL_0249: Unknown result type (might be due to invalid IL or missing references)
			//IL_0253: Expected O, but got Unknown
			//IL_0254: Unknown result type (might be due to invalid IL or missing references)
			//IL_025e: Expected O, but got Unknown
			//IL_025f: Unknown result type (might be due to invalid IL or missing references)
			//IL_0269: Expected O, but got Unknown
			//IL_026a: Unknown result type (might be due to invalid IL or missing references)
			//IL_0274: Expected O, but got Unknown
			//IL_0275: Unknown result type (might be due to invalid IL or missing references)
			//IL_027f: Expected O, but got Unknown
			//IL_0280: Unknown result type (might be due to invalid IL or missing references)
			//IL_028a: Expected O, but got Unknown
			//IL_028b: Unknown result type (might be due to invalid IL or missing references)
			//IL_0295: Expected O, but got Unknown
			//IL_0296: Unknown result type (might be due to invalid IL or missing references)
			//IL_02a0: Expected O, but got Unknown
			//IL_02a1: Unknown result type (might be due to invalid IL or missing references)
			//IL_02ab: Expected O, but got Unknown
			//IL_02ac: Unknown result type (might be due to invalid IL or missing references)
			//IL_02b6: Expected O, but got Unknown
			//IL_02b7: Unknown result type (might be due to invalid IL or missing references)
			//IL_02c1: Expected O, but got Unknown
			//IL_02c2: Unknown result type (might be due to invalid IL or missing references)
			//IL_02cc: Expected O, but got Unknown
			//IL_02cd: Unknown result type (might be due to invalid IL or missing references)
			//IL_02d7: Expected O, but got Unknown
			//IL_02d8: Unknown result type (might be due to invalid IL or missing references)
			//IL_02e2: Expected O, but got Unknown
			//IL_02e3: Unknown result type (might be due to invalid IL or missing references)
			//IL_02ed: Expected O, but got Unknown
			//IL_02ee: Unknown result type (might be due to invalid IL or missing references)
			//IL_02f8: Expected O, but got Unknown
			//IL_02f9: Unknown result type (might be due to invalid IL or missing references)
			//IL_0303: Expected O, but got Unknown
			//IL_0304: Unknown result type (might be due to invalid IL or missing references)
			//IL_030e: Expected O, but got Unknown
			//IL_030f: Unknown result type (might be due to invalid IL or missing references)
			//IL_0319: Expected O, but got Unknown
			//IL_031a: Unknown result type (might be due to invalid IL or missing references)
			//IL_0324: Expected O, but got Unknown
			//IL_0325: Unknown result type (might be due to invalid IL or missing references)
			//IL_032f: Expected O, but got Unknown
			//IL_0330: Unknown result type (might be due to invalid IL or missing references)
			//IL_033a: Expected O, but got Unknown
			//IL_033b: Unknown result type (might be due to invalid IL or missing references)
			//IL_0345: Expected O, but got Unknown
			//IL_0346: Unknown result type (might be due to invalid IL or missing references)
			//IL_0350: Expected O, but got Unknown
			//IL_0351: Unknown result type (might be due to invalid IL or missing references)
			//IL_035b: Expected O, but got Unknown
			//IL_035c: Unknown result type (might be due to invalid IL or missing references)
			//IL_0366: Expected O, but got Unknown
			//IL_0378: Unknown result type (might be due to invalid IL or missing references)
			//IL_0382: Expected O, but got Unknown
			//IL_0383: Unknown result type (might be due to invalid IL or missing references)
			//IL_038d: Expected O, but got Unknown
			//IL_038e: Unknown result type (might be due to invalid IL or missing references)
			//IL_0398: Expected O, but got Unknown
			//IL_0399: Unknown result type (might be due to invalid IL or missing references)
			//IL_03a3: Expected O, but got Unknown
			//IL_03a4: Unknown result type (might be due to invalid IL or missing references)
			//IL_03ae: Expected O, but got Unknown
			//IL_03af: Unknown result type (might be due to invalid IL or missing references)
			//IL_03b9: Expected O, but got Unknown
			//IL_03ba: Unknown result type (might be due to invalid IL or missing references)
			//IL_03c4: Expected O, but got Unknown
			//IL_03c5: Unknown result type (might be due to invalid IL or missing references)
			//IL_03cf: Expected O, but got Unknown
			//IL_03d0: Unknown result type (might be due to invalid IL or missing references)
			//IL_03da: Expected O, but got Unknown
			//IL_03db: Unknown result type (might be due to invalid IL or missing references)
			//IL_03e5: Expected O, but got Unknown
			//IL_03e6: Unknown result type (might be due to invalid IL or missing references)
			//IL_03f0: Expected O, but got Unknown
			//IL_03f1: Unknown result type (might be due to invalid IL or missing references)
			//IL_03fb: Expected O, but got Unknown
			//IL_03fc: Unknown result type (might be due to invalid IL or missing references)
			//IL_0406: Expected O, but got Unknown
			//IL_0407: Unknown result type (might be due to invalid IL or missing references)
			//IL_0411: Expected O, but got Unknown
			//IL_0412: Unknown result type (might be due to invalid IL or missing references)
			//IL_041c: Expected O, but got Unknown
			//IL_041d: Unknown result type (might be due to invalid IL or missing references)
			//IL_0427: Expected O, but got Unknown
			//IL_0428: Unknown result type (might be due to invalid IL or missing references)
			//IL_0432: Expected O, but got Unknown
			//IL_0433: Unknown result type (might be due to invalid IL or missing references)
			//IL_043d: Expected O, but got Unknown
			//IL_043e: Unknown result type (might be due to invalid IL or missing references)
			//IL_0448: Expected O, but got Unknown
			//IL_0449: Unknown result type (might be due to invalid IL or missing references)
			//IL_0453: Expected O, but got Unknown
			//IL_0454: Unknown result type (might be due to invalid IL or missing references)
			//IL_045e: Expected O, but got Unknown
			//IL_045f: Unknown result type (might be due to invalid IL or missing references)
			//IL_0469: Expected O, but got Unknown
			//IL_046a: Unknown result type (might be due to invalid IL or missing references)
			//IL_0474: Expected O, but got Unknown
			//IL_0475: Unknown result type (might be due to invalid IL or missing references)
			//IL_047f: Expected O, but got Unknown
			//IL_0480: Unknown result type (might be due to invalid IL or missing references)
			//IL_048a: Expected O, but got Unknown
			//IL_048b: Unknown result type (might be due to invalid IL or missing references)
			//IL_0495: Expected O, but got Unknown
			//IL_0496: Unknown result type (might be due to invalid IL or missing references)
			//IL_04a0: Expected O, but got Unknown
			//IL_04a1: Unknown result type (might be due to invalid IL or missing references)
			//IL_04ab: Expected O, but got Unknown
			//IL_04ac: Unknown result type (might be due to invalid IL or missing references)
			//IL_04b6: Expected O, but got Unknown
			//IL_04b7: Unknown result type (might be due to invalid IL or missing references)
			//IL_04c1: Expected O, but got Unknown
			//IL_04c2: Unknown result type (might be due to invalid IL or missing references)
			//IL_04cc: Expected O, but got Unknown
			//IL_04cd: Unknown result type (might be due to invalid IL or missing references)
			//IL_04d7: Expected O, but got Unknown
			//IL_04d8: Unknown result type (might be due to invalid IL or missing references)
			//IL_04e2: Expected O, but got Unknown
			//IL_04e3: Unknown result type (might be due to invalid IL or missing references)
			//IL_04ed: Expected O, but got Unknown
			//IL_04ee: Unknown result type (might be due to invalid IL or missing references)
			//IL_04f8: Expected O, but got Unknown
			//IL_04f9: Unknown result type (might be due to invalid IL or missing references)
			//IL_0503: Expected O, but got Unknown
			//IL_0504: Unknown result type (might be due to invalid IL or missing references)
			//IL_050e: Expected O, but got Unknown
			//IL_050f: Unknown result type (might be due to invalid IL or missing references)
			//IL_0519: Expected O, but got Unknown
			//IL_051a: Unknown result type (might be due to invalid IL or missing references)
			//IL_0524: Expected O, but got Unknown
			//IL_0525: Unknown result type (might be due to invalid IL or missing references)
			//IL_052f: Expected O, but got Unknown
			//IL_0530: Unknown result type (might be due to invalid IL or missing references)
			//IL_053a: Expected O, but got Unknown
			//IL_053b: Unknown result type (might be due to invalid IL or missing references)
			//IL_0545: Expected O, but got Unknown
			//IL_0546: Unknown result type (might be due to invalid IL or missing references)
			//IL_0550: Expected O, but got Unknown
			//IL_0551: Unknown result type (might be due to invalid IL or missing references)
			//IL_055b: Expected O, but got Unknown
			//IL_055c: Unknown result type (might be due to invalid IL or missing references)
			//IL_0566: Expected O, but got Unknown
			//IL_0567: Unknown result type (might be due to invalid IL or missing references)
			//IL_0571: Expected O, but got Unknown
			//IL_0572: Unknown result type (might be due to invalid IL or missing references)
			//IL_057c: Expected O, but got Unknown
			//IL_057d: Unknown result type (might be due to invalid IL or missing references)
			//IL_0587: Expected O, but got Unknown
			//IL_0588: Unknown result type (might be due to invalid IL or missing references)
			//IL_0592: Expected O, but got Unknown
			//IL_0593: Unknown result type (might be due to invalid IL or missing references)
			//IL_059d: Expected O, but got Unknown
			//IL_059e: Unknown result type (might be due to invalid IL or missing references)
			//IL_05a8: Expected O, but got Unknown
			//IL_05a9: Unknown result type (might be due to invalid IL or missing references)
			//IL_05b3: Expected O, but got Unknown
			//IL_05b4: Unknown result type (might be due to invalid IL or missing references)
			//IL_05be: Expected O, but got Unknown
			//IL_05bf: Unknown result type (might be due to invalid IL or missing references)
			//IL_05c9: Expected O, but got Unknown
			//IL_05ca: Unknown result type (might be due to invalid IL or missing references)
			//IL_05d4: Expected O, but got Unknown
			//IL_05d5: Unknown result type (might be due to invalid IL or missing references)
			//IL_05df: Expected O, but got Unknown
			//IL_05e0: Unknown result type (might be due to invalid IL or missing references)
			//IL_05ea: Expected O, but got Unknown
			//IL_05f1: Unknown result type (might be due to invalid IL or missing references)
			//IL_05fb: Expected O, but got Unknown
			//IL_05fc: Unknown result type (might be due to invalid IL or missing references)
			//IL_0606: Expected O, but got Unknown
			//IL_0607: Unknown result type (might be due to invalid IL or missing references)
			//IL_0611: Expected O, but got Unknown
			//IL_0612: Unknown result type (might be due to invalid IL or missing references)
			//IL_061c: Expected O, but got Unknown
			//IL_061d: Unknown result type (might be due to invalid IL or missing references)
			//IL_0627: Expected O, but got Unknown
			//IL_0628: Unknown result type (might be due to invalid IL or missing references)
			//IL_0632: Expected O, but got Unknown
			//IL_0633: Unknown result type (might be due to invalid IL or missing references)
			//IL_063d: Expected O, but got Unknown
			//IL_063e: Unknown result type (might be due to invalid IL or missing references)
			//IL_0648: Expected O, but got Unknown
			//IL_0649: Unknown result type (might be due to invalid IL or missing references)
			//IL_0653: Expected O, but got Unknown
			//IL_0654: Unknown result type (might be due to invalid IL or missing references)
			//IL_065e: Expected O, but got Unknown
			//IL_065f: Unknown result type (might be due to invalid IL or missing references)
			//IL_0669: Expected O, but got Unknown
			//IL_066a: Unknown result type (might be due to invalid IL or missing references)
			//IL_0674: Expected O, but got Unknown
			//IL_0675: Unknown result type (might be due to invalid IL or missing references)
			//IL_067f: Expected O, but got Unknown
			//IL_0680: Unknown result type (might be due to invalid IL or missing references)
			//IL_068a: Expected O, but got Unknown
			//IL_068b: Unknown result type (might be due to invalid IL or missing references)
			//IL_0695: Expected O, but got Unknown
			//IL_0696: Unknown result type (might be due to invalid IL or missing references)
			//IL_06a0: Expected O, but got Unknown
			//IL_06a1: Unknown result type (might be due to invalid IL or missing references)
			//IL_06ab: Expected O, but got Unknown
			//IL_06ac: Unknown result type (might be due to invalid IL or missing references)
			//IL_06b6: Expected O, but got Unknown
			//IL_06b7: Unknown result type (might be due to invalid IL or missing references)
			//IL_06c1: Expected O, but got Unknown
			//IL_06c2: Unknown result type (might be due to invalid IL or missing references)
			//IL_06cc: Expected O, but got Unknown
			//IL_06cd: Unknown result type (might be due to invalid IL or missing references)
			//IL_06d7: Expected O, but got Unknown
			//IL_06d8: Unknown result type (might be due to invalid IL or missing references)
			//IL_06e2: Expected O, but got Unknown
			//IL_06e3: Unknown result type (might be due to invalid IL or missing references)
			//IL_06ed: Expected O, but got Unknown
			//IL_06ee: Unknown result type (might be due to invalid IL or missing references)
			//IL_06f8: Expected O, but got Unknown
			//IL_06f9: Unknown result type (might be due to invalid IL or missing references)
			//IL_0703: Expected O, but got Unknown
			//IL_0ac6: Unknown result type (might be due to invalid IL or missing references)
			//IL_0ad0: Expected O, but got Unknown
			//IL_0b7a: Unknown result type (might be due to invalid IL or missing references)
			//IL_0b80: Expected O, but got Unknown
			//IL_0b81: Unknown result type (might be due to invalid IL or missing references)
			//IL_0b8b: Expected O, but got Unknown
			//IL_0f26: Unknown result type (might be due to invalid IL or missing references)
			//IL_0f30: Expected O, but got Unknown
			//IL_0fee: Unknown result type (might be due to invalid IL or missing references)
			//IL_0ff4: Expected O, but got Unknown
			//IL_1006: Unknown result type (might be due to invalid IL or missing references)
			//IL_100c: Expected O, but got Unknown
			//IL_100d: Unknown result type (might be due to invalid IL or missing references)
			//IL_1017: Expected O, but got Unknown
			//IL_268f: Unknown result type (might be due to invalid IL or missing references)
			//IL_2699: Expected O, but got Unknown
			//IL_2704: Unknown result type (might be due to invalid IL or missing references)
			//IL_270e: Expected O, but got Unknown
			//IL_27c5: Unknown result type (might be due to invalid IL or missing references)
			//IL_27cf: Expected O, but got Unknown
			//IL_2903: Unknown result type (might be due to invalid IL or missing references)
			//IL_290d: Expected O, but got Unknown
			//IL_2985: Unknown result type (might be due to invalid IL or missing references)
			//IL_298f: Expected O, but got Unknown
			//IL_2a07: Unknown result type (might be due to invalid IL or missing references)
			//IL_2a11: Expected O, but got Unknown
			//IL_2a7c: Unknown result type (might be due to invalid IL or missing references)
			//IL_2a86: Expected O, but got Unknown
			//IL_2af1: Unknown result type (might be due to invalid IL or missing references)
			//IL_2afb: Expected O, but got Unknown
			//IL_2b73: Unknown result type (might be due to invalid IL or missing references)
			//IL_2b7d: Expected O, but got Unknown
			//IL_2bc8: Unknown result type (might be due to invalid IL or missing references)
			//IL_2bd2: Expected O, but got Unknown
			//IL_3d34: Unknown result type (might be due to invalid IL or missing references)
			//IL_4b8b: Unknown result type (might be due to invalid IL or missing references)
			//IL_4b95: Expected O, but got Unknown
			components = new Container();
			ComponentResourceManager componentResourceManager = new ComponentResourceManager(typeof(MainForm));
			dotNetBarManager1 = new DotNetBarManager(components);
			dockSite4 = new DockSite();
			dockSite9 = new DockSite();
			bar2 = new Bar();
			panelDockContainer1 = new PanelDockContainer();
			solutionTree = new SolutionTree();
			dockContainerItem1 = new DockContainerItem();
			dockSite1 = new DockSite();
			dockSite2 = new DockSite();
			bar8 = new Bar();
			panelDockContainer8 = new PanelDockContainer();
			buildSummaryDetails = new BuildSummaryDetails();
			dockContainerItem8 = new DockContainerItem();
			bar6 = new Bar();
			panelDockContainer5 = new PanelDockContainer();
			assetDetails = new AssetDetails();
			dockContainerItem5 = new DockContainerItem();
			dockSite8 = new DockSite();
			dockSite5 = new DockSite();
			dockSite6 = new DockSite();
			dockSite7 = new DockSite();
			bar3 = new Bar();
			buttonItemFile = new ButtonItem();
			buttonItemFileNewSolution = new ButtonItem();
			buttonItemFileOpenSolution = new ButtonItem();
			buttonItemFileCloseSolution = new ButtonItem();
			buttonItemFileAddNewTileSet = new ButtonItem();
			buttonItemFileExcludeTileSet = new ButtonItem();
			buttonItemFileMigrateTextures = new ButtonItem();
			buttonItemFileMRU = new ButtonItem();
			buttonItemList = new ButtonItem();
			buttonItemFileExit = new ButtonItem();
			buttonItemTileSet = new ButtonItem();
			buttonItemTileSetImport = new ButtonItem();
			buttonItemTileSetImportSingleAsset = new ButtonItem();
			buttonItemTileSetImportBatch = new ButtonItem();
			buttonItemTileSetImportFromScript = new ButtonItem();
			buttonItemTileSetOpenViewer = new ButtonItem();
			buttonItemTileSetOpenExplorer = new ButtonItem();
			buttonItemOpenlog = new ButtonItem();
			buttonItemTileSetExportToScript = new ButtonItem();
			buttonItemTileSetProperties = new ButtonItem();
			buttonItemBuild = new ButtonItem();
			buttonItemRescan = new ButtonItem();
			buttonItemBuildBuildSolution = new ButtonItem();
			buttonItemBuildRebuildSolution = new ButtonItem();
			buttonItemBuildCleanSolution = new ButtonItem();
			buttonItemBuildBuildProject = new ButtonItem();
			buttonItemBuildRebuildProject = new ButtonItem();
			buttonItemBuildCleanProject = new ButtonItem();
			buttonItem1 = new ButtonItem();
			buttonItemBuildBuildProjectForGTex = new ButtonItem();
			buttonItemBuildRebuildProjectForGTex = new ButtonItem();
			buttonItemBuildBuildSolutionForGTexStreaming = new ButtonItem();
			buttonItemBuildRebuildSolutionForGTex = new ButtonItem();
			buttonItemBuildRepageSolution = new ButtonItem();
			buttonItemBuildRepageProject = new ButtonItem();
			buttonItemHelp = new ButtonItem();
			buttonItemHelpOnlineDocs = new ButtonItem();
			buttonItemHelpAbout = new ButtonItem();
			bar4 = new Bar();
			buttonItemToolbarNewSolution = new ButtonItem();
			buttonItemOpenSolution = new ButtonItem();
			buttonItemImport = new ButtonItem();
			buttonItemImportSingleAsset = new ButtonItem();
			buttonItemBatchImport = new ButtonItem();
			buttonItemImportFromScript = new ButtonItem();
			buttonItemFilter = new ButtonItem();
			buttonRescan = new ButtonItem();
			buttonItemBuildSolution = new ButtonItem();
			buttonClean = new ButtonItem();
			buttonRebuild = new ButtonItem();
			buttonItemViewGTS = new ButtonItem();
			dockSite3 = new DockSite();
			comboItem3 = new ComboItem();
			comboItem4 = new ComboItem();
			imageListBuildLog = new ImageList(components);
			advTree1 = new AdvTree();
			columnHeader3 = new ColumnHeader();
			columnHeader4 = new ColumnHeader();
			node1 = new Node();
			cell7 = new Cell();
			node2 = new Node();
			node5 = new Node();
			node6 = new Node();
			node9 = new Node();
			node10 = new Node();
			node35 = new Node();
			cell4 = new Cell();
			node36 = new Node();
			node37 = new Node();
			node38 = new Node();
			node39 = new Node();
			cell9 = new Cell();
			node41 = new Node();
			node42 = new Node();
			nodeConnector4 = new NodeConnector();
			elementStyle2 = new ElementStyle();
			advTree2 = new AdvTree();
			columnHeader7 = new ColumnHeader();
			columnHeader8 = new ColumnHeader();
			node11 = new Node();
			cell8 = new Cell();
			node17 = new Node();
			node19 = new Node();
			node12 = new Node();
			node13 = new Node();
			node14 = new Node();
			node15 = new Node();
			cell6 = new Cell();
			node16 = new Node();
			node21 = new Node();
			node22 = new Node();
			node40 = new Node();
			cell11 = new Cell();
			node43 = new Node();
			node44 = new Node();
			nodeConnector1 = new NodeConnector();
			elementStyle1 = new ElementStyle();
			node45 = new Node();
			node46 = new Node();
			elementStyle4 = new ElementStyle();
			node47 = new Node();
			node48 = new Node();
			nodeConnector2 = new NodeConnector();
			elementStyle8 = new ElementStyle();
			node3 = new Node();
			cell1 = new Cell();
			node4 = new Node();
			cell2 = new Cell();
			node7 = new Node();
			cell5 = new Cell();
			node8 = new Node();
			cell3 = new Cell();
			styleManager1 = new StyleManager(components);
			comboItem1 = new ComboItem();
			comboItem2 = new ComboItem();
			comboItem5 = new ComboItem();
			comboItem6 = new ComboItem();
			advTree3 = new AdvTree();
			columnHeader5 = new ColumnHeader();
			columnHeader6 = new ColumnHeader();
			node18 = new Node();
			node20 = new Node();
			node23 = new Node();
			node24 = new Node();
			node25 = new Node();
			node26 = new Node();
			node27 = new Node();
			cell10 = new Cell();
			node28 = new Node();
			node29 = new Node();
			node30 = new Node();
			node31 = new Node();
			node32 = new Node();
			node33 = new Node();
			nodeConnector3 = new NodeConnector();
			elementStyle3 = new ElementStyle();
			node34 = new Node();
			contextMenuStripAssetSelected = new ContextMenuStrip(components);
			toolStripMenuItemEditAsset = new ToolStripMenuItem();
			toolStripMenuItemRemoveAsset = new ToolStripMenuItem();
			toolStripMenuItemRenameAsset = new ToolStripMenuItem();
			toolStripSeparator3 = new ToolStripSeparator();
			toolStripMenuItemMigrateAsset = new ToolStripMenuItem();
			importSingleAssetToolStripMenuItem = new ToolStripMenuItem();
			singleAssetToolStripMenuItem = new ToolStripMenuItem();
			batchImportToolStripMenuItem = new ToolStripMenuItem();
			fromImportScriptToolStripMenuItem = new ToolStripMenuItem();
			toolStripMenuItem1 = new ToolStripMenuItem();
			openTileSetToolStripMenuItem = new ToolStripMenuItem();
			contextMenuStripRightClickProject = new ContextMenuStrip(components);
			seperatorToolStripMenuItem = new ToolStripSeparator();
			buildToolStripMenuItem = new ToolStripMenuItem();
			rebuildToolStripMenuItem = new ToolStripMenuItem();
			cleanToolStripMenuItem = new ToolStripMenuItem();
			toolStripSeparator1 = new ToolStripSeparator();
			showTileSetInWindowsExplorerToolStripMenuItem = new ToolStripMenuItem();
			copyOutputFileNameToolStripMenuItem = new ToolStripMenuItem();
			seperator2ToolStripMenuItem = new ToolStripSeparator();
			excludeFromSolutionToolStripMenuItem = new ToolStripMenuItem();
			toolStripSeparator2 = new ToolStripSeparator();
			readOnlyMessageBar = new MessageBar();
			ToolTip = new ToolTip();
			dockSite9.SuspendLayout();
			((ISupportInitialize)bar2).BeginInit();
			bar2.SuspendLayout();
			((Control)(object)panelDockContainer1).SuspendLayout();
			dockSite2.SuspendLayout();
			((ISupportInitialize)bar8).BeginInit();
			bar8.SuspendLayout();
			((Control)(object)panelDockContainer8).SuspendLayout();
			((ISupportInitialize)bar6).BeginInit();
			bar6.SuspendLayout();
			((Control)(object)panelDockContainer5).SuspendLayout();
			dockSite7.SuspendLayout();
			((ISupportInitialize)bar3).BeginInit();
			((ISupportInitialize)bar4).BeginInit();
			((ISupportInitialize)advTree1).BeginInit();
			((ISupportInitialize)advTree2).BeginInit();
			((ISupportInitialize)advTree3).BeginInit();
			contextMenuStripAssetSelected.SuspendLayout();
			contextMenuStripRightClickProject.SuspendLayout();
			((Control)this).SuspendLayout();
			dotNetBarManager1.get_AutoDispatchShortcuts().Add((eShortcut)112);
			dotNetBarManager1.get_AutoDispatchShortcuts().Add((eShortcut)131139);
			dotNetBarManager1.get_AutoDispatchShortcuts().Add((eShortcut)131137);
			dotNetBarManager1.get_AutoDispatchShortcuts().Add((eShortcut)131158);
			dotNetBarManager1.get_AutoDispatchShortcuts().Add((eShortcut)131160);
			dotNetBarManager1.get_AutoDispatchShortcuts().Add((eShortcut)131162);
			dotNetBarManager1.get_AutoDispatchShortcuts().Add((eShortcut)131161);
			dotNetBarManager1.get_AutoDispatchShortcuts().Add((eShortcut)46);
			dotNetBarManager1.get_AutoDispatchShortcuts().Add((eShortcut)45);
			dotNetBarManager1.set_BottomDockSite(dockSite4);
			dotNetBarManager1.set_EnableFullSizeDock(false);
			dotNetBarManager1.set_FillDockSite(dockSite9);
			dotNetBarManager1.set_LeftDockSite(dockSite1);
			dotNetBarManager1.set_LicenseKey("F962CEC7-CD8F-4911-A9E9-CAB39962FC1F");
			dotNetBarManager1.set_ParentForm((Form)(object)this);
			dotNetBarManager1.set_RightDockSite(dockSite2);
			dotNetBarManager1.set_Style((eDotNetBarStyle)9);
			dotNetBarManager1.set_ToolbarBottomDockSite(dockSite8);
			dotNetBarManager1.set_ToolbarLeftDockSite(dockSite5);
			dotNetBarManager1.set_ToolbarRightDockSite(dockSite6);
			dotNetBarManager1.set_ToolbarTopDockSite(dockSite7);
			dotNetBarManager1.set_TopDockSite(dockSite3);
			((Control)(object)dockSite4).AccessibleRole = AccessibleRole.Window;
			((Control)(object)dockSite4).Dock = DockStyle.Bottom;
			dockSite4.set_DocumentDockContainer(new DocumentDockContainer());
			((Control)(object)dockSite4).Location = new Point(0, 729);
			((Control)(object)dockSite4).Name = "dockSite4";
			((Control)(object)dockSite4).Size = new Size(1008, 0);
			((Control)(object)dockSite4).TabIndex = 3;
			((Control)(object)dockSite4).TabStop = false;
			((Control)(object)dockSite9).AccessibleRole = AccessibleRole.Window;
			((Control)(object)dockSite9).Controls.Add((Control)(object)bar2);
			((Control)(object)dockSite9).Dock = DockStyle.Fill;
			dockSite9.set_DocumentDockContainer(new DocumentDockContainer((DocumentBaseContainer[])(object)new DocumentBaseContainer[1] { (DocumentBaseContainer)new DocumentBarContainer(bar2, 651, 643) }, (eOrientation)0));
			((Control)(object)dockSite9).Location = new Point(0, 86);
			((Control)(object)dockSite9).Name = "dockSite9";
			((Control)(object)dockSite9).Size = new Size(651, 643);
			((Control)(object)dockSite9).TabIndex = 8;
			((Control)(object)dockSite9).TabStop = false;
			((Control)(object)bar2).AccessibleDescription = "DotNetBar Bar (bar2)";
			((Control)(object)bar2).AccessibleName = "DotNetBar Bar";
			((Control)(object)bar2).AccessibleRole = AccessibleRole.Grouping;
			bar2.set_CanDockBottom(false);
			bar2.set_CanDockDocument(true);
			bar2.set_CanDockLeft(false);
			bar2.set_CanDockRight(false);
			bar2.set_CanDockTop(false);
			bar2.set_CanUndock(false);
			((Control)(object)bar2).Controls.Add((Control)(object)panelDockContainer1);
			bar2.set_DockTabAlignment((eTabStripAlignment)2);
			((Control)(object)bar2).Font = new Font("Microsoft Sans Serif", 8.25f, FontStyle.Regular, GraphicsUnit.Point, 0);
			bar2.set_GrabHandleStyle((eGrabHandleStyle)8);
			bar2.set_IsMaximized(false);
			bar2.get_Items().AddRange((BaseItem[])(object)new BaseItem[1] { (BaseItem)dockContainerItem1 });
			bar2.set_LayoutType((eLayoutType)2);
			bar2.set_Location(new Point(0, 0));
			bar2.set_Name("bar2");
			bar2.set_Size(new Size(651, 643));
			bar2.set_Stretch(true);
			bar2.set_Style((eDotNetBarStyle)9);
			bar2.set_TabIndex(0);
			bar2.set_TabStop(false);
			((Control)(object)bar2).Text = "Tile Set Projects";
			((PanelEx)panelDockContainer1).set_ColorSchemeStyle((eDotNetBarStyle)9);
			((Control)(object)panelDockContainer1).Controls.Add(solutionTree);
			((PanelEx)panelDockContainer1).set_DisabledBackColor(System.Drawing.Color.Empty);
			panelDockContainer1.set_Location(new Point(3, 23));
			((Control)(object)panelDockContainer1).Name = "panelDockContainer1";
			panelDockContainer1.set_Size(new Size(645, 617));
			((PanelEx)panelDockContainer1).get_Style().set_Alignment(StringAlignment.Center);
			((PanelEx)panelDockContainer1).get_Style().get_BackColor1().set_ColorSchemePart((eColorSchemePart)51);
			((PanelEx)panelDockContainer1).get_Style().get_ForeColor().set_ColorSchemePart((eColorSchemePart)40);
			((PanelEx)panelDockContainer1).get_Style().set_GradientAngle(90);
			((Control)(object)panelDockContainer1).TabIndex = 0;
			solutionTree.ActiveProject = new Guid("00000000-0000-0000-0000-000000000000");
			solutionTree.Dock = DockStyle.Fill;
			solutionTree.Location = new Point(0, 0);
			solutionTree.Name = "solutionTree";
			solutionTree.Size = new Size(645, 617);
			solutionTree.TabIndex = 0;
			solutionTree.FilterBarClosed += solutionTree_FilterBarClosed;
			dockContainerItem1.set_Control((Control)(object)panelDockContainer1);
			((BaseItem)dockContainerItem1).set_Name("dockContainerItem1");
			((BaseItem)dockContainerItem1).set_Text("dockContainerItem1");
			((Control)(object)dockSite1).AccessibleRole = AccessibleRole.Window;
			((Control)(object)dockSite1).Dock = DockStyle.Left;
			dockSite1.set_DocumentDockContainer(new DocumentDockContainer());
			((Control)(object)dockSite1).Location = new Point(0, 86);
			((Control)(object)dockSite1).Name = "dockSite1";
			((Control)(object)dockSite1).Size = new Size(0, 643);
			((Control)(object)dockSite1).TabIndex = 0;
			((Control)(object)dockSite1).TabStop = false;
			((Control)(object)dockSite2).AccessibleRole = AccessibleRole.Window;
			((Control)(object)dockSite2).Controls.Add((Control)(object)bar8);
			((Control)(object)dockSite2).Controls.Add((Control)(object)bar6);
			((Control)(object)dockSite2).Dock = DockStyle.Right;
			dockSite2.set_DocumentDockContainer(new DocumentDockContainer((DocumentBaseContainer[])(object)new DocumentBaseContainer[2]
			{
				(DocumentBaseContainer)new DocumentBarContainer(bar6, 354, 381),
				(DocumentBaseContainer)new DocumentBarContainer(bar8, 354, 259)
			}, (eOrientation)1));
			((Control)(object)dockSite2).Location = new Point(651, 86);
			((Control)(object)dockSite2).Name = "dockSite2";
			((Control)(object)dockSite2).Size = new Size(357, 643);
			((Control)(object)dockSite2).TabIndex = 1;
			((Control)(object)dockSite2).TabStop = false;
			((Control)(object)bar8).AccessibleDescription = "DotNetBar Bar (bar8)";
			((Control)(object)bar8).AccessibleName = "DotNetBar Bar";
			((Control)(object)bar8).AccessibleRole = AccessibleRole.Grouping;
			bar8.set_CloseSingleTab(true);
			((Control)(object)bar8).Controls.Add((Control)(object)panelDockContainer8);
			((Control)(object)bar8).Font = new Font("Microsoft Sans Serif", 8.25f, FontStyle.Regular, GraphicsUnit.Point, 0);
			bar8.set_GrabHandleStyle((eGrabHandleStyle)8);
			bar8.set_IsMaximized(false);
			bar8.get_Items().AddRange((BaseItem[])(object)new BaseItem[1] { (BaseItem)dockContainerItem8 });
			bar8.set_LayoutType((eLayoutType)2);
			bar8.set_Location(new Point(3, 384));
			bar8.set_Name("bar8");
			bar8.set_Size(new Size(354, 259));
			bar8.set_Stretch(true);
			bar8.set_Style((eDotNetBarStyle)9);
			bar8.set_TabIndex(0);
			bar8.set_TabStop(false);
			((Control)(object)bar8).Text = "Build Summary";
			((PanelEx)panelDockContainer8).set_ColorSchemeStyle((eDotNetBarStyle)9);
			((Control)(object)panelDockContainer8).Controls.Add(buildSummaryDetails);
			((PanelEx)panelDockContainer8).set_DisabledBackColor(System.Drawing.Color.Empty);
			panelDockContainer8.set_Location(new Point(3, 23));
			((Control)(object)panelDockContainer8).Name = "panelDockContainer8";
			panelDockContainer8.set_Size(new Size(348, 233));
			((PanelEx)panelDockContainer8).get_Style().set_Alignment(StringAlignment.Center);
			((PanelEx)panelDockContainer8).get_Style().get_BackColor1().set_ColorSchemePart((eColorSchemePart)51);
			((PanelEx)panelDockContainer8).get_Style().get_ForeColor().set_ColorSchemePart((eColorSchemePart)40);
			((PanelEx)panelDockContainer8).get_Style().set_GradientAngle(90);
			((Control)(object)panelDockContainer8).TabIndex = 0;
			buildSummaryDetails.AutoSize = true;
			buildSummaryDetails.BackColor = System.Drawing.Color.Transparent;
			buildSummaryDetails.Dock = DockStyle.Fill;
			buildSummaryDetails.Location = new Point(0, 0);
			buildSummaryDetails.MinimumSize = new Size(300, 150);
			buildSummaryDetails.Name = "buildSummaryDetails";
			buildSummaryDetails.Size = new Size(348, 233);
			buildSummaryDetails.TabIndex = 0;
			dockContainerItem8.set_Control((Control)(object)panelDockContainer8);
			((BaseItem)dockContainerItem8).set_Name("dockContainerItem8");
			((BaseItem)dockContainerItem8).set_Text("Build Summary");
			((Control)(object)bar6).AccessibleDescription = "DotNetBar Bar (bar6)";
			((Control)(object)bar6).AccessibleName = "DotNetBar Bar";
			((Control)(object)bar6).AccessibleRole = AccessibleRole.Grouping;
			bar6.set_CloseSingleTab(true);
			((Control)(object)bar6).Controls.Add((Control)(object)panelDockContainer5);
			((Control)(object)bar6).Font = new Font("Microsoft Sans Serif", 8.25f, FontStyle.Regular, GraphicsUnit.Point, 0);
			bar6.set_GrabHandleStyle((eGrabHandleStyle)8);
			bar6.set_IsMaximized(false);
			bar6.get_Items().AddRange((BaseItem[])(object)new BaseItem[1] { (BaseItem)dockContainerItem5 });
			bar6.set_LayoutType((eLayoutType)2);
			bar6.set_Location(new Point(3, 0));
			bar6.set_Name("bar6");
			bar6.set_Size(new Size(354, 381));
			bar6.set_Stretch(true);
			bar6.set_Style((eDotNetBarStyle)9);
			bar6.set_TabIndex(0);
			bar6.set_TabStop(false);
			((Control)(object)bar6).Text = "Stacked Texture's Details";
			((PanelEx)panelDockContainer5).set_ColorSchemeStyle((eDotNetBarStyle)9);
			((Control)(object)panelDockContainer5).Controls.Add(assetDetails);
			((PanelEx)panelDockContainer5).set_DisabledBackColor(System.Drawing.Color.Empty);
			panelDockContainer5.set_Location(new Point(3, 23));
			((Control)(object)panelDockContainer5).Name = "panelDockContainer5";
			panelDockContainer5.set_Size(new Size(348, 355));
			((PanelEx)panelDockContainer5).get_Style().set_Alignment(StringAlignment.Center);
			((PanelEx)panelDockContainer5).get_Style().get_BackColor1().set_ColorSchemePart((eColorSchemePart)51);
			((PanelEx)panelDockContainer5).get_Style().get_ForeColor().set_ColorSchemePart((eColorSchemePart)40);
			((PanelEx)panelDockContainer5).get_Style().set_GradientAngle(90);
			((Control)(object)panelDockContainer5).TabIndex = 0;
			assetDetails.Asset = null;
			assetDetails.BackColor = System.Drawing.Color.Transparent;
			assetDetails.Dock = DockStyle.Fill;
			assetDetails.Location = new Point(0, 0);
			assetDetails.Name = "assetDetails";
			assetDetails.Size = new Size(348, 355);
			assetDetails.TabIndex = 2;
			dockContainerItem5.set_Control((Control)(object)panelDockContainer5);
			((BaseItem)dockContainerItem5).set_Name("dockContainerItem5");
			((BaseItem)dockContainerItem5).set_Text("Stacked texture's Details");
			((Control)(object)dockSite8).AccessibleRole = AccessibleRole.Window;
			((Control)(object)dockSite8).Dock = DockStyle.Bottom;
			((Control)(object)dockSite8).Location = new Point(0, 729);
			((Control)(object)dockSite8).Name = "dockSite8";
			((Control)(object)dockSite8).Size = new Size(1008, 0);
			((Control)(object)dockSite8).TabIndex = 7;
			((Control)(object)dockSite8).TabStop = false;
			((Control)(object)dockSite5).AccessibleRole = AccessibleRole.Window;
			((Control)(object)dockSite5).Dock = DockStyle.Left;
			((Control)(object)dockSite5).Location = new Point(0, 86);
			((Control)(object)dockSite5).Name = "dockSite5";
			((Control)(object)dockSite5).Size = new Size(0, 643);
			((Control)(object)dockSite5).TabIndex = 4;
			((Control)(object)dockSite5).TabStop = false;
			((Control)(object)dockSite6).AccessibleRole = AccessibleRole.Window;
			((Control)(object)dockSite6).Dock = DockStyle.Right;
			((Control)(object)dockSite6).Location = new Point(1008, 86);
			((Control)(object)dockSite6).Name = "dockSite6";
			((Control)(object)dockSite6).Size = new Size(0, 643);
			((Control)(object)dockSite6).TabIndex = 5;
			((Control)(object)dockSite6).TabStop = false;
			((Control)(object)dockSite7).AccessibleRole = AccessibleRole.Window;
			((Control)(object)dockSite7).Controls.Add((Control)(object)bar3);
			((Control)(object)dockSite7).Controls.Add((Control)(object)bar4);
			((Control)(object)dockSite7).Dock = DockStyle.Top;
			((Control)(object)dockSite7).Location = new Point(0, 0);
			((Control)(object)dockSite7).Name = "dockSite7";
			((Control)(object)dockSite7).Size = new Size(1008, 50);
			((Control)(object)dockSite7).TabIndex = 6;
			((Control)(object)dockSite7).TabStop = false;
			((Control)(object)bar3).AccessibleDescription = "DotNetBar Bar (bar3)";
			((Control)(object)bar3).AccessibleName = "DotNetBar Bar";
			((Control)(object)bar3).AccessibleRole = AccessibleRole.MenuBar;
			bar3.set_DockSide((eDockSide)3);
			((Control)(object)bar3).Font = new Font("Segoe UI", 9f);
			bar3.set_IsMaximized(false);
			bar3.get_Items().AddRange((BaseItem[])(object)new BaseItem[4]
			{
				(BaseItem)buttonItemFile,
				(BaseItem)buttonItemTileSet,
				(BaseItem)buttonItemBuild,
				(BaseItem)buttonItemHelp
			});
			bar3.set_ItemSpacing(4);
			bar3.set_Location(new Point(0, 0));
			bar3.set_MenuBar(true);
			bar3.set_Name("bar3");
			bar3.set_Size(new Size(1008, 24));
			bar3.set_Stretch(true);
			bar3.set_Style((eDotNetBarStyle)9);
			bar3.set_TabIndex(0);
			bar3.set_TabStop(false);
			((Control)(object)bar3).Text = "Main";
			((BaseItem)buttonItemFile).set_Name("buttonItemFile");
			((BaseItem)buttonItemFile).get_SubItems().AddRange((BaseItem[])(object)new BaseItem[8]
			{
				(BaseItem)buttonItemFileNewSolution,
				(BaseItem)buttonItemFileOpenSolution,
				(BaseItem)buttonItemFileCloseSolution,
				(BaseItem)buttonItemFileAddNewTileSet,
				(BaseItem)buttonItemFileExcludeTileSet,
				(BaseItem)buttonItemFileMigrateTextures,
				(BaseItem)buttonItemFileMRU,
				(BaseItem)buttonItemFileExit
			});
			((BaseItem)buttonItemFile).set_Text("File");
			buttonItemFileNewSolution.set_Image((Image)Resources.page_white_star);
			((BaseItem)buttonItemFileNewSolution).set_Name("buttonItemFileNewSolution");
			((BaseItem)buttonItemFileNewSolution).set_Text("New Solution...");
			((BaseItem)buttonItemFileNewSolution).add_Click((EventHandler)buttonItemFileNewSolution_Click);
			buttonItemFileOpenSolution.set_Image((Image)Resources.folder_picture);
			((BaseItem)buttonItemFileOpenSolution).set_Name("buttonItemFileOpenSolution");
			((BaseItem)buttonItemFileOpenSolution).set_Text("Open Solution...");
			((BaseItem)buttonItemFileOpenSolution).add_Click((EventHandler)buttonItemFileOpenSolution_Click);
			((BaseItem)buttonItemFileCloseSolution).set_Name("buttonItemFileCloseSolution");
			((BaseItem)buttonItemFileCloseSolution).set_Text("Close Solution...");
			((BaseItem)buttonItemFileCloseSolution).add_Click((EventHandler)buttonItemFileCloseSolution_Click);
			((BaseItem)buttonItemFileAddNewTileSet).set_BeginGroup(true);
			((BaseItem)buttonItemFileAddNewTileSet).set_Name("buttonItemFileAddNewTileSet");
			((BaseItem)buttonItemFileAddNewTileSet).set_Text("Add Tile Set Project...");
			((BaseItem)buttonItemFileAddNewTileSet).add_Click((EventHandler)buttonItemFileAddNewTileSet_Click);
			((BaseItem)buttonItemFileExcludeTileSet).set_Name("buttonItemFileExcludeTileSet");
			((BaseItem)buttonItemFileExcludeTileSet).set_Text("Delete Selected Project...");
			((BaseItem)buttonItemFileExcludeTileSet).add_Click((EventHandler)excludeFromSolutionMenu_Click);
			((BaseItem)buttonItemFileMigrateTextures).set_BeginGroup(true);
			((BaseItem)buttonItemFileMigrateTextures).set_Name("buttonItemFileMigrateTextures");
			((BaseItem)buttonItemFileMigrateTextures).set_Text("Migrate Stacked Textures...");
			((BaseItem)buttonItemFileMigrateTextures).add_Click((EventHandler)buttonItemTilesetMigrateTextures_Click);
			((BaseItem)buttonItemFileMRU).set_BeginGroup(true);
			((BaseItem)buttonItemFileMRU).set_Name("buttonItemFileMRU");
			((BaseItem)buttonItemFileMRU).get_SubItems().AddRange((BaseItem[])(object)new BaseItem[1] { (BaseItem)buttonItemList });
			((BaseItem)buttonItemFileMRU).set_Text("Recent Solutions");
			((BaseItem)buttonItemList).set_Name("buttonItemList");
			((BaseItem)buttonItemList).set_Text("buttonItem1");
			((BaseItem)buttonItemFileExit).set_BeginGroup(true);
			((BaseItem)buttonItemFileExit).set_Name("buttonItemFileExit");
			((BaseItem)buttonItemFileExit).set_Text("Exit");
			((BaseItem)buttonItemFileExit).add_Click((EventHandler)buttonItemFileExit_Click);
			((BaseItem)buttonItemTileSet).set_Name("buttonItemTileSet");
			((BaseItem)buttonItemTileSet).get_SubItems().AddRange((BaseItem[])(object)new BaseItem[6]
			{
				(BaseItem)buttonItemTileSetImport,
				(BaseItem)buttonItemTileSetOpenViewer,
				(BaseItem)buttonItemTileSetOpenExplorer,
				(BaseItem)buttonItemOpenlog,
				(BaseItem)buttonItemTileSetExportToScript,
				(BaseItem)buttonItemTileSetProperties
			});
			((BaseItem)buttonItemTileSet).set_Text("Tile Set");
			buttonItemTileSetImport.set_Image((Image)Resources.image_add);
			((BaseItem)buttonItemTileSetImport).set_Name("buttonItemTileSetImport");
			((BaseItem)buttonItemTileSetImport).get_SubItems().AddRange((BaseItem[])(object)new BaseItem[3]
			{
				(BaseItem)buttonItemTileSetImportSingleAsset,
				(BaseItem)buttonItemTileSetImportBatch,
				(BaseItem)buttonItemTileSetImportFromScript
			});
			((BaseItem)buttonItemTileSetImport).set_Text("Add Stacked Texture(s)");
			buttonItemTileSetImportSingleAsset.set_AlternateShortCutText("Ctrl+I");
			((BaseItem)buttonItemTileSetImportSingleAsset).set_Name("buttonItemTileSetImportSingleAsset");
			((BaseItem)buttonItemTileSetImportSingleAsset).set_Text("Single Stacked Texture...");
			((BaseItem)buttonItemTileSetImportSingleAsset).add_Click((EventHandler)buttonItemTileSetImportSingleAsset_Click);
			buttonItemTileSetImportBatch.set_AlternateShortCutText("Ctrl+Shift+I");
			((BaseItem)buttonItemTileSetImportBatch).set_Name("buttonItemTileSetImportBatch");
			((BaseItem)buttonItemTileSetImportBatch).set_Text("Batch Import...");
			((BaseItem)buttonItemTileSetImportBatch).add_Click((EventHandler)buttonItemTileSetImportBatch_Click);
			buttonItemTileSetImportFromScript.set_AlternateShortCutText("Ctrl+P");
			((BaseItem)buttonItemTileSetImportFromScript).set_Name("buttonItemTileSetImportFromScript");
			((BaseItem)buttonItemTileSetImportFromScript).set_Text("From Import Script...");
			((BaseItem)buttonItemTileSetImportFromScript).add_Click((EventHandler)buttonItemTileSetImportFromScript_Click);
			((BaseItem)buttonItemTileSetOpenViewer).set_BeginGroup(true);
			buttonItemTileSetOpenViewer.set_Image((Image)Resources.bar_tilesetviewer);
			((BaseItem)buttonItemTileSetOpenViewer).set_Name("buttonItemTileSetOpenViewer");
			((BaseItem)buttonItemTileSetOpenViewer).set_Text("Open Tile Set Output...");
			((BaseItem)buttonItemTileSetOpenViewer).add_Click((EventHandler)buttonItemTileSetOpenViewer_Click);
			buttonItemTileSetOpenExplorer.set_Image((Image)Resources.bar_tilesetviewer);
			((BaseItem)buttonItemTileSetOpenExplorer).set_Name("buttonItemTileSetOpenExplorer");
			((BaseItem)buttonItemTileSetOpenExplorer).set_Text("View Tile Set in Windows Explorer...");
			((BaseItem)buttonItemTileSetOpenExplorer).add_Click((EventHandler)showTileSetInWindowsExplorerToolStripMenuItem_Click);
			((BaseItem)buttonItemOpenlog).set_Name("buttonItemOpenlog");
			((BaseItem)buttonItemOpenlog).set_Text("Open Log File...");
			((BaseItem)buttonItemOpenlog).add_Click((EventHandler)buttonItemOpenlog_Click);
			((BaseItem)buttonItemTileSetExportToScript).set_BeginGroup(true);
			((BaseItem)buttonItemTileSetExportToScript).set_Name("buttonItemTileSetExportToScript");
			((BaseItem)buttonItemTileSetExportToScript).set_Text("Export to Import Script...");
			((BaseItem)buttonItemTileSetExportToScript).add_Click((EventHandler)buttonItemTileSetExportToScript_Click);
			((BaseItem)buttonItemTileSetProperties).set_BeginGroup(true);
			((BaseItem)buttonItemTileSetProperties).set_Name("buttonItemTileSetProperties");
			((BaseItem)buttonItemTileSetProperties).set_Text("Properties...");
			((BaseItem)buttonItemTileSetProperties).add_Click((EventHandler)buttonItemTileSetProperties_Click);
			((BaseItem)buttonItemBuild).set_Name("buttonItemBuild");
			((BaseItem)buttonItemBuild).get_SubItems().AddRange((BaseItem[])(object)new BaseItem[8]
			{
				(BaseItem)buttonItemRescan,
				(BaseItem)buttonItemBuildBuildSolution,
				(BaseItem)buttonItemBuildRebuildSolution,
				(BaseItem)buttonItemBuildCleanSolution,
				(BaseItem)buttonItemBuildBuildProject,
				(BaseItem)buttonItemBuildRebuildProject,
				(BaseItem)buttonItemBuildCleanProject,
				(BaseItem)buttonItem1
			});
			((BaseItem)buttonItemBuild).set_Text("Build");
			buttonItemRescan.set_AlternateShortCutText("Ctrl+R");
			buttonItemRescan.set_Image((Image)Resources.database_refresh);
			((BaseItem)buttonItemRescan).set_Name("buttonItemRescan");
			((BaseItem)buttonItemRescan).set_Text("Rescan imported Stacked Texture(s)");
			((BaseItem)buttonItemRescan).add_Click((EventHandler)buttonItemRescan_Click);
			buttonItemBuildBuildSolution.set_AlternateShortCutText("Ctrl+Shift+B");
			((BaseItem)buttonItemBuildBuildSolution).set_BeginGroup(true);
			buttonItemBuildBuildSolution.set_Image((Image)Resources.build);
			((BaseItem)buttonItemBuildBuildSolution).set_Name("buttonItemBuildBuildSolution");
			((BaseItem)buttonItemBuildBuildSolution).set_Text("Build Solution");
			((BaseItem)buttonItemBuildBuildSolution).add_Click((EventHandler)buttonItemBuildBuildSolution_Click);
			buttonItemBuildRebuildSolution.set_AlternateShortCutText("Ctrl+Shift+R");
			buttonItemBuildRebuildSolution.set_Image((Image)Resources.rebuild);
			((BaseItem)buttonItemBuildRebuildSolution).set_Name("buttonItemBuildRebuildSolution");
			((BaseItem)buttonItemBuildRebuildSolution).set_Text("Rebuild Solution");
			((BaseItem)buttonItemBuildRebuildSolution).add_Click((EventHandler)buttonItemBuildRebuildSolution_Click);
			buttonItemBuildCleanSolution.set_AlternateShortCutText("Ctrl+Shift+C");
			buttonItemBuildCleanSolution.set_Image((Image)Resources.clean);
			((BaseItem)buttonItemBuildCleanSolution).set_Name("buttonItemBuildCleanSolution");
			((BaseItem)buttonItemBuildCleanSolution).set_Text("Clean Solution");
			((BaseItem)buttonItemBuildCleanSolution).add_Click((EventHandler)buttonItemBuildCleanSolution_Click);
			((BaseItem)buttonItemBuildBuildProject).set_BeginGroup(true);
			((BaseItem)buttonItemBuildBuildProject).set_Name("buttonItemBuildBuildProject");
			((BaseItem)buttonItemBuildBuildProject).set_Text("Build Project");
			((BaseItem)buttonItemBuildBuildProject).add_Click((EventHandler)buttonItemBuildBuildProject_Click);
			((BaseItem)buttonItemBuildRebuildProject).set_Name("buttonItemBuildRebuildProject");
			((BaseItem)buttonItemBuildRebuildProject).set_Text("Rebuild Project");
			((BaseItem)buttonItemBuildRebuildProject).add_Click((EventHandler)buttonItemBuildRebuildProject_Click);
			((BaseItem)buttonItemBuildCleanProject).set_Name("buttonItemBuildCleanProject");
			((BaseItem)buttonItemBuildCleanProject).set_Text("Clean Project");
			((BaseItem)buttonItemBuildCleanProject).add_Click((EventHandler)buttonItemBuildCleanProject_Click);
			((BaseItem)buttonItem1).set_BeginGroup(true);
			((BaseItem)buttonItem1).set_Name("buttonItem1");
			((BaseItem)buttonItem1).get_SubItems().AddRange((BaseItem[])(object)new BaseItem[6]
			{
				(BaseItem)buttonItemBuildBuildProjectForGTex,
				(BaseItem)buttonItemBuildRebuildProjectForGTex,
				(BaseItem)buttonItemBuildBuildSolutionForGTexStreaming,
				(BaseItem)buttonItemBuildRebuildSolutionForGTex,
				(BaseItem)buttonItemBuildRepageSolution,
				(BaseItem)buttonItemBuildRepageProject
			});
			((BaseItem)buttonItem1).set_Text("Advanced");
			((BaseItem)buttonItemBuildBuildProjectForGTex).set_BeginGroup(true);
			((BaseItem)buttonItemBuildBuildProjectForGTex).set_Name("buttonItemBuildBuildProjectForGTex");
			((BaseItem)buttonItemBuildBuildProjectForGTex).set_Text("Build Project for GTex Streaming");
			((BaseItem)buttonItemBuildBuildProjectForGTex).add_Click((EventHandler)buttonItemBuildBuildProjectForGTex_Click);
			((BaseItem)buttonItemBuildRebuildProjectForGTex).set_Name("buttonItemBuildRebuildProjectForGTex");
			((BaseItem)buttonItemBuildRebuildProjectForGTex).set_Text("Rebuild Project for GTex Streaming");
			((BaseItem)buttonItemBuildRebuildProjectForGTex).add_Click((EventHandler)buttonItemBuildRebuildProjectForGTex_Click);
			((BaseItem)buttonItemBuildBuildSolutionForGTexStreaming).set_BeginGroup(true);
			buttonItemBuildBuildSolutionForGTexStreaming.set_Image((Image)Resources.build);
			((BaseItem)buttonItemBuildBuildSolutionForGTexStreaming).set_Name("buttonItemBuildBuildSolutionForGTexStreaming");
			((BaseItem)buttonItemBuildBuildSolutionForGTexStreaming).set_Text("Build Solution for GTex Streaming");
			((BaseItem)buttonItemBuildBuildSolutionForGTexStreaming).add_Click((EventHandler)buttonItemBuildBuildSolutionForGTexStreaming_Click);
			buttonItemBuildRebuildSolutionForGTex.set_Image((Image)Resources.rebuild);
			((BaseItem)buttonItemBuildRebuildSolutionForGTex).set_Name("buttonItemBuildRebuildSolutionForGTex");
			((BaseItem)buttonItemBuildRebuildSolutionForGTex).set_Text("Rebuild Solution for GTex Streaming");
			((BaseItem)buttonItemBuildRebuildSolutionForGTex).add_Click((EventHandler)buttonItemBuildRebuildSolutionForGTex_Click);
			((BaseItem)buttonItemBuildRepageSolution).set_BeginGroup(true);
			((BaseItem)buttonItemBuildRepageSolution).set_Name("buttonItemBuildRepageSolution");
			((BaseItem)buttonItemBuildRepageSolution).set_Text("Force Repage Solution");
			((BaseItem)buttonItemBuildRepageSolution).add_Click((EventHandler)buttonItemBuildRepageSolution_Click);
			((BaseItem)buttonItemBuildRepageProject).set_Name("buttonItemBuildRepageProject");
			((BaseItem)buttonItemBuildRepageProject).set_Text("Force Repage Current Project");
			((BaseItem)buttonItemBuildRepageProject).add_Click((EventHandler)buttonItemBuildRepageProject_Click);
			((BaseItem)buttonItemHelp).set_Name("buttonItemHelp");
			((BaseItem)buttonItemHelp).get_SubItems().AddRange((BaseItem[])(object)new BaseItem[2]
			{
				(BaseItem)buttonItemHelpOnlineDocs,
				(BaseItem)buttonItemHelpAbout
			});
			((BaseItem)buttonItemHelp).set_Text("Help");
			((BaseItem)buttonItemHelpOnlineDocs).set_Name("buttonItemHelpOnlineDocs");
			((BaseItem)buttonItemHelpOnlineDocs).set_Text("Online Documentation...");
			((BaseItem)buttonItemHelpOnlineDocs).add_Click((EventHandler)buttonItemHelpOnlineDocs_Click);
			((BaseItem)buttonItemHelpAbout).set_BeginGroup(true);
			((BaseItem)buttonItemHelpAbout).set_Name("buttonItemHelpAbout");
			((BaseItem)buttonItemHelpAbout).set_Text("About...");
			((BaseItem)buttonItemHelpAbout).add_Click((EventHandler)buttonItemHelpAbout_Click);
			((Control)(object)bar4).AccessibleDescription = "DotNetBar Bar (bar4)";
			((Control)(object)bar4).AccessibleName = "DotNetBar Bar";
			((Control)(object)bar4).AccessibleRole = AccessibleRole.ToolBar;
			bar4.set_DockLine(1);
			bar4.set_DockSide((eDockSide)3);
			((Control)(object)bar4).Font = new Font("Segoe UI", 9f);
			bar4.set_GrabHandleStyle((eGrabHandleStyle)10);
			bar4.set_IsMaximized(false);
			bar4.get_Items().AddRange((BaseItem[])(object)new BaseItem[9]
			{
				(BaseItem)buttonItemToolbarNewSolution,
				(BaseItem)buttonItemOpenSolution,
				(BaseItem)buttonItemImport,
				(BaseItem)buttonItemFilter,
				(BaseItem)buttonRescan,
				(BaseItem)buttonItemBuildSolution,
				(BaseItem)buttonClean,
				(BaseItem)buttonRebuild,
				(BaseItem)buttonItemViewGTS
			});
			bar4.set_Location(new Point(0, 25));
			bar4.set_Name("bar4");
			bar4.set_Size(new Size(250, 25));
			bar4.set_Style((eDotNetBarStyle)9);
			bar4.set_TabIndex(1);
			bar4.set_TabStop(false);
			((Control)(object)bar4).Text = "ToolBar";
			((BaseItem)buttonItemToolbarNewSolution).set_BeginGroup(true);
			buttonItemToolbarNewSolution.set_Image((Image)Resources.page_white_star);
			((BaseItem)buttonItemToolbarNewSolution).set_Name("buttonItemToolbarNewSolution");
			((SuperTooltip)ToolTip).SetSuperTooltip((IComponent)buttonItemToolbarNewSolution, new SuperTooltipInfo("Enter your resource Tag here In text", "", "TT_NEW_ICON", (Image)null, (Image)null, (eTooltipColor)17));
			((BaseItem)buttonItemToolbarNewSolution).set_Text("New");
			((BaseItem)buttonItemToolbarNewSolution).add_Click((EventHandler)buttonItemToolbarNewSolution_Click);
			buttonItemOpenSolution.set_Image((Image)Resources.folder_picture);
			((BaseItem)buttonItemOpenSolution).set_Name("buttonItemOpenSolution");
			((SuperTooltip)ToolTip).SetSuperTooltip((IComponent)buttonItemOpenSolution, new SuperTooltipInfo("Enter your resource Tag here In text", "", "TT_OPEN_ICON", (Image)null, (Image)null, (eTooltipColor)17));
			((BaseItem)buttonItemOpenSolution).set_Text("Open");
			((BaseItem)buttonItemOpenSolution).add_Click((EventHandler)buttonItemOpenSolution_Click);
			buttonItemImport.set_AutoExpandOnClick(true);
			((BaseItem)buttonItemImport).set_BeginGroup(true);
			buttonItemImport.set_Image((Image)Resources.image_add);
			((BaseItem)buttonItemImport).set_Name("buttonItemImport");
			((BaseItem)buttonItemImport).get_SubItems().AddRange((BaseItem[])(object)new BaseItem[3]
			{
				(BaseItem)buttonItemImportSingleAsset,
				(BaseItem)buttonItemBatchImport,
				(BaseItem)buttonItemImportFromScript
			});
			((SuperTooltip)ToolTip).SetSuperTooltip((IComponent)buttonItemImport, new SuperTooltipInfo("Enter your resource Tag here In text", "", "TT_IMPORT_ICON", (Image)null, (Image)null, (eTooltipColor)17));
			((BaseItem)buttonItemImport).set_Text("Import");
			buttonItemImportSingleAsset.set_AlternateShortCutText("Ctrl+I");
			((BaseItem)buttonItemImportSingleAsset).set_Name("buttonItemImportSingleAsset");
			((BaseItem)buttonItemImportSingleAsset).set_Text("Single Stacked texture...");
			((BaseItem)buttonItemImportSingleAsset).add_Click((EventHandler)buttonItemImportSingleAsset_Click);
			buttonItemBatchImport.set_AlternateShortCutText("Ctrl+Shift+I");
			((BaseItem)buttonItemBatchImport).set_Name("buttonItemBatchImport");
			((BaseItem)buttonItemBatchImport).set_Text("Batch Import...");
			((BaseItem)buttonItemBatchImport).add_Click((EventHandler)buttonItemBatchImport_Click);
			buttonItemImportFromScript.set_AlternateShortCutText("Ctrl+P");
			((BaseItem)buttonItemImportFromScript).set_Name("buttonItemImportFromScript");
			((BaseItem)buttonItemImportFromScript).set_Text("From Import Script...");
			((BaseItem)buttonItemImportFromScript).add_Click((EventHandler)buttonItemImportFromScript_Click);
			buttonItemFilter.set_Image((Image)Resources.magnifier);
			((BaseItem)buttonItemFilter).set_Name("buttonItemFilter");
			((SuperTooltip)ToolTip).SetSuperTooltip((IComponent)buttonItemFilter, new SuperTooltipInfo("Enter your resource Tag here In text", "", "TT_FILTER", (Image)null, (Image)null, (eTooltipColor)17));
			((BaseItem)buttonItemFilter).set_Text("Filter Stacked Textures");
			((BaseItem)buttonItemFilter).add_Click((EventHandler)buttonItemFilter_Click);
			((BaseItem)buttonRescan).set_BeginGroup(true);
			buttonRescan.set_Image((Image)Resources.database_refresh);
			((BaseItem)buttonRescan).set_Name("buttonRescan");
			((SuperTooltip)ToolTip).SetSuperTooltip((IComponent)buttonRescan, new SuperTooltipInfo("Enter your resource Tag here In text", "", "TT_RESCAN_ICON", (Image)null, (Image)null, (eTooltipColor)17));
			((BaseItem)buttonRescan).set_Text("Rescan");
			((BaseItem)buttonRescan).add_Click((EventHandler)buttonItemRescan_Click);
			((BaseItem)buttonItemBuildSolution).set_BeginGroup(true);
			buttonItemBuildSolution.set_Image((Image)Resources.build);
			((BaseItem)buttonItemBuildSolution).set_Name("buttonItemBuildSolution");
			((SuperTooltip)ToolTip).SetSuperTooltip((IComponent)buttonItemBuildSolution, new SuperTooltipInfo("Enter your resource Tag here In text", "", "TT_BUILD_ICON", (Image)null, (Image)null, (eTooltipColor)17));
			((BaseItem)buttonItemBuildSolution).set_Text("Build");
			((BaseItem)buttonItemBuildSolution).add_Click((EventHandler)buttonItemBuildSolution_Click);
			buttonClean.set_Image((Image)Resources.rebuild);
			((BaseItem)buttonClean).set_Name("buttonClean");
			((SuperTooltip)ToolTip).SetSuperTooltip((IComponent)buttonClean, new SuperTooltipInfo("Enter your resource Tag here In text", "", "TT_REBUILD_ICON", (Image)null, (Image)null, (eTooltipColor)17));
			((BaseItem)buttonClean).set_Text("Rebuild");
			((BaseItem)buttonClean).add_Click((EventHandler)buttonItemBuildRebuildSolution_Click);
			buttonRebuild.set_Image((Image)Resources.clean);
			((BaseItem)buttonRebuild).set_Name("buttonRebuild");
			((SuperTooltip)ToolTip).SetSuperTooltip((IComponent)buttonRebuild, new SuperTooltipInfo("Enter your resource Tag here In text", "", "TT_CLEAN_ICON", (Image)null, (Image)null, (eTooltipColor)17));
			((BaseItem)buttonRebuild).set_Text("Clean");
			((BaseItem)buttonRebuild).add_Click((EventHandler)buttonItemBuildCleanSolution_Click);
			((BaseItem)buttonItemViewGTS).set_BeginGroup(true);
			buttonItemViewGTS.set_Image((Image)Resources.bar_tilesetviewer);
			((BaseItem)buttonItemViewGTS).set_Name("buttonItemViewGTS");
			((SuperTooltip)ToolTip).SetSuperTooltip((IComponent)buttonItemViewGTS, new SuperTooltipInfo("Enter your resource Tag here In text", "", "TT_OPENGTS_ICON", (Image)null, (Image)null, (eTooltipColor)17));
			((BaseItem)buttonItemViewGTS).set_Text("OpenGts");
			((BaseItem)buttonItemViewGTS).add_Click((EventHandler)buttonItemViewGTS_Click);
			((Control)(object)dockSite3).AccessibleRole = AccessibleRole.Window;
			((Control)(object)dockSite3).Dock = DockStyle.Top;
			dockSite3.set_DocumentDockContainer(new DocumentDockContainer());
			((Control)(object)dockSite3).Location = new Point(0, 86);
			((Control)(object)dockSite3).Name = "dockSite3";
			((Control)(object)dockSite3).Size = new Size(1008, 0);
			((Control)(object)dockSite3).TabIndex = 2;
			((Control)(object)dockSite3).TabStop = false;
			comboItem3.set_Text("Fast");
			comboItem4.set_Text("Optimized");
			imageListBuildLog.ImageStream = (ImageListStreamer)componentResourceManager.GetObject("imageListBuildLog.ImageStream");
			imageListBuildLog.TransparentColor = System.Drawing.Color.Transparent;
			imageListBuildLog.Images.SetKeyName(0, "exclamation.png");
			imageListBuildLog.Images.SetKeyName(1, "exclamation.png");
			imageListBuildLog.Images.SetKeyName(2, "error.png");
			imageListBuildLog.Images.SetKeyName(3, "information.png");
			((Control)(object)advTree1).AccessibleRole = AccessibleRole.Outline;
			((Control)(object)advTree1).AllowDrop = true;
			((Control)(object)advTree1).BackColor = SystemColors.Window;
			advTree1.get_BackgroundStyle().set_Class("TreeBorderKey");
			advTree1.get_BackgroundStyle().set_CornerType((eCornerType)1);
			advTree1.get_Columns().Add(columnHeader3);
			advTree1.get_Columns().Add(columnHeader4);
			advTree1.set_LicenseKey("F962CEC7-CD8F-4911-A9E9-CAB39962FC1F");
			((Control)(object)advTree1).Location = new Point(19, 45);
			((Control)(object)advTree1).Name = "advTree1";
			advTree1.get_Nodes().AddRange((Node[])(object)new Node[4] { node1, node6, node37, node39 });
			advTree1.set_NodesConnector(nodeConnector4);
			advTree1.set_NodeStyle(elementStyle2);
			advTree1.set_PathSeparator(";");
			((Control)(object)advTree1).Size = new Size(600, 198);
			advTree1.get_Styles().Add(elementStyle2);
			((Control)(object)advTree1).TabIndex = 10;
			((Control)(object)advTree1).Text = "advTree1";
			columnHeader3.set_Name("columnHeader3");
			columnHeader3.set_StretchToFill(true);
			columnHeader3.set_Text("Stacked Texture");
			columnHeader3.get_Width().set_Absolute(150);
			columnHeader4.set_Name("columnHeader4");
			columnHeader4.set_Text("State");
			columnHeader4.get_Width().set_Absolute(150);
			node1.get_Cells().Add(cell7);
			node1.set_Image((Image)Resources.exclamation);
			node1.set_Name("node1");
			node1.get_Nodes().AddRange((Node[])(object)new Node[2] { node2, node5 });
			node1.set_Text("BlueMarble");
			cell7.set_Name("cell7");
			cell7.set_StyleMouseOver((ElementStyle)null);
			cell7.set_Text("Missing");
			node2.set_Expanded(true);
			node2.set_Name("node2");
			node2.set_Text("Diffuse: bluemarble_d.png");
			node5.set_Expanded(true);
			node5.set_Name("node5");
			node5.set_Text("Normals: bluemarble_n.png");
			node6.set_Image((Image)Resources.bullet_green);
			node6.set_Name("node6");
			node6.get_Nodes().AddRange((Node[])(object)new Node[2] { node9, node36 });
			node6.set_Text("Glider");
			node9.set_Name("node9");
			node9.get_Nodes().AddRange((Node[])(object)new Node[1] { node10 });
			node9.set_Text("Diffuse: UDIM");
			node10.set_Name("node10");
			node10.get_Nodes().AddRange((Node[])(object)new Node[1] { node35 });
			node10.set_Text("102 items found... expand to view");
			node35.get_Cells().Add(cell4);
			node35.set_Expanded(true);
			node35.set_Name("node35");
			node35.set_Text("world.topo.bathy.200412.3x21600x21600.A0_n.png");
			cell4.set_Name("cell4");
			cell4.set_StyleMouseOver((ElementStyle)null);
			cell4.set_Text("Built");
			node36.set_Expanded(true);
			node36.set_Name("node36");
			node36.set_Text("Normals: UDIM");
			node37.set_Image((Image)Resources.bullet_green);
			node37.set_Name("node37");
			node37.get_Nodes().AddRange((Node[])(object)new Node[1] { node38 });
			node37.set_Text("Loft");
			node38.set_Expanded(true);
			node38.set_Name("node38");
			node38.set_Text("node16");
			node39.get_Cells().Add(cell9);
			node39.set_Image((Image)Resources.error_add);
			node39.set_Name("node39");
			node39.get_Nodes().AddRange((Node[])(object)new Node[2] { node41, node42 });
			node39.set_Text("Asset 3");
			cell9.set_Name("cell9");
			cell9.set_StyleMouseOver((ElementStyle)null);
			cell9.set_Text("Not built");
			node41.set_Expanded(true);
			node41.set_Name("node41");
			node41.set_Text("node10");
			node42.set_Expanded(true);
			node42.set_Name("node42");
			node42.set_Text("node11");
			nodeConnector4.set_LineColor(SystemColors.ControlText);
			elementStyle2.set_CornerType((eCornerType)1);
			elementStyle2.set_Name("elementStyle2");
			elementStyle2.set_TextColor(SystemColors.ControlText);
			((Control)(object)advTree2).AccessibleRole = AccessibleRole.Outline;
			((Control)(object)advTree2).AllowDrop = true;
			((Control)(object)advTree2).BackColor = SystemColors.Window;
			advTree2.get_BackgroundStyle().set_Class("TreeBorderKey");
			advTree2.get_BackgroundStyle().set_CornerType((eCornerType)1);
			advTree2.get_Columns().Add(columnHeader7);
			advTree2.get_Columns().Add(columnHeader8);
			advTree2.set_LicenseKey("F962CEC7-CD8F-4911-A9E9-CAB39962FC1F");
			((Control)(object)advTree2).Location = new Point(19, 288);
			((Control)(object)advTree2).Name = "advTree2";
			advTree2.get_Nodes().AddRange((Node[])(object)new Node[4] { node11, node12, node21, node40 });
			advTree2.set_NodesConnector(nodeConnector1);
			advTree2.set_NodeStyle(elementStyle1);
			advTree2.set_PathSeparator(";");
			((Control)(object)advTree2).Size = new Size(600, 198);
			advTree2.get_Styles().Add(elementStyle1);
			((Control)(object)advTree2).TabIndex = 9;
			((Control)(object)advTree2).Text = "advTree1";
			columnHeader7.set_Name("columnHeader7");
			columnHeader7.set_StretchToFill(true);
			columnHeader7.set_Text("Stacked Texture");
			columnHeader7.get_Width().set_Absolute(150);
			columnHeader8.set_Name("columnHeader8");
			columnHeader8.set_Text("State");
			columnHeader8.get_Width().set_Absolute(150);
			node11.get_Cells().Add(cell8);
			node11.set_Image((Image)Resources.exclamation);
			node11.set_Name("node11");
			node11.get_Nodes().AddRange((Node[])(object)new Node[2] { node17, node19 });
			node11.set_Text("BlueMarble");
			cell8.set_Name("cell8");
			cell8.set_StyleMouseOver((ElementStyle)null);
			cell8.set_Text("Missing");
			node17.set_Expanded(true);
			node17.set_Name("node17");
			node17.set_Text("Diffuse: bluemarble_d.png");
			node19.set_Expanded(true);
			node19.set_Name("node19");
			node19.set_Text("Normals: bluemarble_n.png");
			node12.set_Image((Image)Resources.bullet_green);
			node12.set_Name("node12");
			node12.get_Nodes().AddRange((Node[])(object)new Node[2] { node13, node16 });
			node12.set_Text("Glider");
			node13.set_Name("node13");
			node13.get_Nodes().AddRange((Node[])(object)new Node[1] { node14 });
			node13.set_Text("Diffuse: UDIM");
			node14.set_Name("node14");
			node14.get_Nodes().AddRange((Node[])(object)new Node[1] { node15 });
			node14.set_Text("102 items found... expand to view");
			node15.get_Cells().Add(cell6);
			node15.set_Expanded(true);
			node15.set_Name("node15");
			node15.set_Text("world.topo.bathy.200412.3x21600x21600.A0_n.png");
			cell6.set_Name("cell6");
			cell6.set_StyleMouseOver((ElementStyle)null);
			cell6.set_Text("Built");
			node16.set_Expanded(true);
			node16.set_Name("node16");
			node16.set_Text("Normals: UDIM");
			node21.set_Image((Image)Resources.bullet_green);
			node21.set_Name("node21");
			node21.get_Nodes().AddRange((Node[])(object)new Node[1] { node22 });
			node21.set_Text("Loft");
			node22.set_Expanded(true);
			node22.set_Name("node22");
			node22.set_Text("node16");
			node40.get_Cells().Add(cell11);
			node40.set_Image((Image)Resources.error_add);
			node40.set_Name("node40");
			node40.get_Nodes().AddRange((Node[])(object)new Node[2] { node43, node44 });
			node40.set_Text("Asset 3");
			cell11.set_Name("cell11");
			cell11.set_StyleMouseOver((ElementStyle)null);
			cell11.set_Text("Not built");
			node43.set_Expanded(true);
			node43.set_Name("node43");
			node43.set_Text("node10");
			node44.set_Expanded(true);
			node44.set_Name("node44");
			node44.set_Text("node11");
			nodeConnector1.set_LineColor(SystemColors.ControlText);
			elementStyle1.set_CornerType((eCornerType)1);
			elementStyle1.set_Name("elementStyle1");
			elementStyle1.set_TextColor(SystemColors.ControlText);
			node45.set_Expanded(true);
			node45.set_Name("node45");
			node45.get_Nodes().AddRange((Node[])(object)new Node[1] { node46 });
			node45.set_Style(elementStyle4);
			node45.set_Text("<b>Tile Set 'BlueMarble'</b> - 3 layers (RGBA, Norm, RGBA)");
			node46.set_Expanded(true);
			node46.set_HostedControl((Control)(object)advTree1);
			node46.set_Name("node46");
			node46.set_Text("advTree3");
			elementStyle4.set_CornerType((eCornerType)1);
			elementStyle4.set_Font(new Font("Microsoft Sans Serif", 9.75f, FontStyle.Regular, GraphicsUnit.Point, 0));
			elementStyle4.set_MarginBottom(6);
			elementStyle4.set_MarginTop(6);
			elementStyle4.set_Name("elementStyle4");
			node47.set_Expanded(true);
			node47.set_Name("node47");
			node47.get_Nodes().AddRange((Node[])(object)new Node[1] { node48 });
			node47.set_Style(elementStyle4);
			node47.set_Text("<b>Tile Set 'Loft'</b> - 2 layers (RGB, RGBA)");
			node48.set_Expanded(true);
			node48.set_HostedControl((Control)(object)advTree2);
			node48.set_Name("node48");
			node48.set_Text("advTree1");
			nodeConnector2.set_LineColor(SystemColors.ControlText);
			elementStyle8.set_CornerType((eCornerType)1);
			elementStyle8.set_Name("elementStyle8");
			elementStyle8.set_TextColor(SystemColors.ControlText);
			node3.get_Cells().Add(cell1);
			node3.set_Expanded(true);
			node3.set_Name("node3");
			node3.set_Text("world.topo.bathy.200412.3x21600x21600.A0.png");
			cell1.set_Name("cell1");
			cell1.set_StyleMouseOver((ElementStyle)null);
			cell1.set_Text("Imported");
			node4.get_Cells().Add(cell2);
			node4.set_Name("node4");
			node4.set_Text("world.topo.bathy.200412.3x21600x21600.A1.png");
			cell2.set_Name("cell2");
			cell2.set_StyleMouseOver((ElementStyle)null);
			cell2.set_Text("Built");
			node7.get_Cells().Add(cell5);
			node7.set_ImageIndex(1);
			node7.set_Name("node7");
			node7.set_Text("world.topo.bathy.200412.3x21600x21600.B0.png");
			cell5.set_Name("cell5");
			cell5.set_StyleMouseOver((ElementStyle)null);
			cell5.set_Text("Missing");
			node8.get_Cells().Add(cell3);
			node8.set_Expanded(true);
			node8.set_ImageIndex(1);
			node8.set_Name("node8");
			node8.set_Text("world.topo.bathy.200412.3x21600x21600.B1.png");
			cell3.set_Name("cell3");
			cell3.set_StyleMouseOver((ElementStyle)null);
			cell3.set_Text("Missing");
			styleManager1.set_ManagerStyle((eStyle)10);
			styleManager1.set_MetroColorParameters(new MetroColorGeneratorParameters(System.Drawing.Color.FromArgb(239, 239, 242), System.Drawing.Color.FromArgb(0, 122, 204)));
			comboItem1.set_Text("Fast");
			comboItem2.set_Text("Optimized");
			comboItem5.set_Text("Fast");
			comboItem6.set_Text("Optimized");
			((Control)(object)advTree3).AccessibleRole = AccessibleRole.Outline;
			((Control)(object)advTree3).AllowDrop = true;
			((Control)(object)advTree3).BackColor = SystemColors.Window;
			advTree3.get_BackgroundStyle().set_Class("TreeBorderKey");
			advTree3.get_BackgroundStyle().set_CornerType((eCornerType)1);
			advTree3.get_Columns().Add(columnHeader5);
			advTree3.get_Columns().Add(columnHeader6);
			advTree3.set_LicenseKey("F962CEC7-CD8F-4911-A9E9-CAB39962FC1F");
			((Control)(object)advTree3).Location = new Point(0, 0);
			((Control)(object)advTree3).Name = "advTree3";
			advTree3.get_Nodes().AddRange((Node[])(object)new Node[4] { node18, node24, node29, node31 });
			advTree3.set_NodesConnector(nodeConnector3);
			advTree3.set_NodeStyle(elementStyle3);
			advTree3.set_PathSeparator(";");
			((Control)(object)advTree3).Size = new Size(535, 524);
			advTree3.get_Styles().Add(elementStyle3);
			((Control)(object)advTree3).TabIndex = 1;
			((Control)(object)advTree3).Text = "advTree1";
			columnHeader5.set_Name("columnHeader5");
			columnHeader5.set_StretchToFill(true);
			columnHeader5.set_Text("Stacked Texture");
			columnHeader5.get_Width().set_Absolute(150);
			columnHeader6.set_Name("columnHeader6");
			columnHeader6.set_Text("State");
			columnHeader6.get_Width().set_Absolute(150);
			node18.set_Image((Image)Resources.exclamation);
			node18.set_Name("node18");
			node18.get_Nodes().AddRange((Node[])(object)new Node[2] { node20, node23 });
			node18.set_Text("BlueMarble");
			node20.set_Expanded(true);
			node20.set_Name("node20");
			node20.set_Text("Diffuse: bluemarble_d.png");
			node23.set_Expanded(true);
			node23.set_Name("node23");
			node23.set_Text("Normals: bluemarble_n.png");
			node24.set_Image((Image)Resources.bullet_green);
			node24.set_Name("node24");
			node24.get_Nodes().AddRange((Node[])(object)new Node[2] { node25, node28 });
			node24.set_Text("Glider");
			node25.set_Name("node25");
			node25.get_Nodes().AddRange((Node[])(object)new Node[1] { node26 });
			node25.set_Text("Diffuse: UDIM");
			node26.set_Name("node26");
			node26.get_Nodes().AddRange((Node[])(object)new Node[1] { node27 });
			node26.set_Text("102 items found... expand to view");
			node27.get_Cells().Add(cell10);
			node27.set_Expanded(true);
			node27.set_Name("node27");
			node27.set_Text("world.topo.bathy.200412.3x21600x21600.A0_n.png");
			cell10.set_Name("cell10");
			cell10.set_StyleMouseOver((ElementStyle)null);
			cell10.set_Text("Built");
			node28.set_Expanded(true);
			node28.set_Name("node28");
			node28.set_Text("Normals: UDIM");
			node29.set_Image((Image)Resources.bullet_green);
			node29.set_Name("node29");
			node29.get_Nodes().AddRange((Node[])(object)new Node[1] { node30 });
			node29.set_Text("Loft");
			node30.set_Expanded(true);
			node30.set_Name("node30");
			node30.set_Text("node16");
			node31.set_Image((Image)Resources.error_add);
			node31.set_Name("node31");
			node31.get_Nodes().AddRange((Node[])(object)new Node[2] { node32, node33 });
			node31.set_Text("Asset 3");
			node32.set_Expanded(true);
			node32.set_Name("node32");
			node32.set_Text("node10");
			node33.set_Expanded(true);
			node33.set_Name("node33");
			node33.set_Text("node11");
			nodeConnector3.set_LineColor(SystemColors.ControlText);
			elementStyle3.set_CornerType((eCornerType)1);
			elementStyle3.set_Name("elementStyle3");
			elementStyle3.set_TextColor(SystemColors.ControlText);
			node34.set_Expanded(true);
			node34.set_HostedControl((Control)(object)advTree3);
			node34.set_Name("node34");
			node34.set_Text("advTree3");
			contextMenuStripAssetSelected.Items.AddRange(new ToolStripItem[5] { toolStripMenuItemEditAsset, toolStripMenuItemRemoveAsset, toolStripMenuItemRenameAsset, toolStripSeparator3, toolStripMenuItemMigrateAsset });
			contextMenuStripAssetSelected.Name = "contextMenuStripAssetSelected";
			contextMenuStripAssetSelected.Size = new Size(118, 98);
			toolStripMenuItemEditAsset.Name = "toolStripMenuItemEditAsset";
			toolStripMenuItemEditAsset.Size = new Size(117, 22);
			toolStripMenuItemEditAsset.Text = "Edit...";
			toolStripMenuItemEditAsset.Click += editToolStripMenuItem_Click;
			toolStripMenuItemRemoveAsset.Image = Resources.cross;
			toolStripMenuItemRemoveAsset.Name = "toolStripMenuItemRemoveAsset";
			toolStripMenuItemRemoveAsset.Size = new Size(117, 22);
			toolStripMenuItemRemoveAsset.Text = "Remove";
			toolStripMenuItemRemoveAsset.Click += removeToolStripMenuItem_Click;
			toolStripMenuItemRenameAsset.Name = "toolStripMenuItemRenameAsset";
			toolStripMenuItemRenameAsset.Size = new Size(117, 22);
			toolStripMenuItemRenameAsset.Text = "Rename";
			toolStripMenuItemRenameAsset.Click += renameStackedTextureToolStripMenuItem_Click;
			toolStripSeparator3.Name = "toolStripSeparator3";
			toolStripSeparator3.Size = new Size(114, 6);
			toolStripMenuItemMigrateAsset.Name = "toolStripMenuItemMigrateAsset";
			toolStripMenuItemMigrateAsset.Size = new Size(117, 22);
			toolStripMenuItemMigrateAsset.Text = "Migrate";
			toolStripMenuItemMigrateAsset.Click += toolStripMenuItemMigrateAsset_Click;
			importSingleAssetToolStripMenuItem.DropDownItems.AddRange(new ToolStripItem[3] { singleAssetToolStripMenuItem, batchImportToolStripMenuItem, fromImportScriptToolStripMenuItem });
			importSingleAssetToolStripMenuItem.Image = Resources.image_add;
			importSingleAssetToolStripMenuItem.Name = "importSingleAssetToolStripMenuItem";
			importSingleAssetToolStripMenuItem.Size = new Size(263, 22);
			importSingleAssetToolStripMenuItem.Text = "Add Stacked Texture(s)";
			singleAssetToolStripMenuItem.Name = "singleAssetToolStripMenuItem";
			singleAssetToolStripMenuItem.Size = new Size(213, 22);
			singleAssetToolStripMenuItem.Text = "Single Stacked Texture(s)...";
			singleAssetToolStripMenuItem.Click += buttonItemTileSetImportSingleAsset_Click;
			batchImportToolStripMenuItem.Name = "batchImportToolStripMenuItem";
			batchImportToolStripMenuItem.Size = new Size(213, 22);
			batchImportToolStripMenuItem.Text = "Batch Import...";
			batchImportToolStripMenuItem.Click += buttonItemTileSetImportBatch_Click;
			fromImportScriptToolStripMenuItem.Name = "fromImportScriptToolStripMenuItem";
			fromImportScriptToolStripMenuItem.Size = new Size(213, 22);
			fromImportScriptToolStripMenuItem.Text = "From Import Script...";
			fromImportScriptToolStripMenuItem.Click += buttonItemTileSetImportFromScript_Click;
			toolStripMenuItem1.Name = "toolStripMenuItem1";
			toolStripMenuItem1.Size = new Size(263, 22);
			toolStripMenuItem1.Text = "Properties...";
			toolStripMenuItem1.Click += buttonItemTileSetProperties_Click;
			openTileSetToolStripMenuItem.Image = Resources.bar_tilesetviewer;
			openTileSetToolStripMenuItem.Name = "openTileSetToolStripMenuItem";
			openTileSetToolStripMenuItem.Size = new Size(263, 22);
			openTileSetToolStripMenuItem.Text = "Open Tile Set Output...";
			openTileSetToolStripMenuItem.Click += buttonItemTileSetOpenViewer_Click;
			contextMenuStripRightClickProject.Items.AddRange(new ToolStripItem[13]
			{
				importSingleAssetToolStripMenuItem, seperatorToolStripMenuItem, buildToolStripMenuItem, rebuildToolStripMenuItem, cleanToolStripMenuItem, toolStripSeparator1, openTileSetToolStripMenuItem, showTileSetInWindowsExplorerToolStripMenuItem, copyOutputFileNameToolStripMenuItem, seperator2ToolStripMenuItem,
				excludeFromSolutionToolStripMenuItem, toolStripSeparator2, toolStripMenuItem1
			});
			contextMenuStripRightClickProject.Name = "contextMenuStripAssetSelected";
			contextMenuStripRightClickProject.Size = new Size(264, 226);
			contextMenuStripRightClickProject.Opening += contextMenuStripRightClickProject_Opening;
			seperatorToolStripMenuItem.Name = "seperatorToolStripMenuItem";
			seperatorToolStripMenuItem.Size = new Size(260, 6);
			buildToolStripMenuItem.Name = "buildToolStripMenuItem";
			buildToolStripMenuItem.Size = new Size(263, 22);
			buildToolStripMenuItem.Text = "Build Tileset";
			buildToolStripMenuItem.Click += buildToolStripMenuItem_Click;
			rebuildToolStripMenuItem.Name = "rebuildToolStripMenuItem";
			rebuildToolStripMenuItem.Size = new Size(263, 22);
			rebuildToolStripMenuItem.Text = "Rebuild Tileset";
			rebuildToolStripMenuItem.Click += rebuildToolStripMenuItem_Click;
			cleanToolStripMenuItem.Name = "cleanToolStripMenuItem";
			cleanToolStripMenuItem.Size = new Size(263, 22);
			cleanToolStripMenuItem.Text = "Clean Tileset";
			cleanToolStripMenuItem.Click += cleanToolStripMenuItem_Click;
			toolStripSeparator1.Name = "toolStripSeparator1";
			toolStripSeparator1.Size = new Size(260, 6);
			showTileSetInWindowsExplorerToolStripMenuItem.Name = "showTileSetInWindowsExplorerToolStripMenuItem";
			showTileSetInWindowsExplorerToolStripMenuItem.Size = new Size(263, 22);
			showTileSetInWindowsExplorerToolStripMenuItem.Text = "Show Output in Windows Explorer...";
			showTileSetInWindowsExplorerToolStripMenuItem.Click += showTileSetInWindowsExplorerToolStripMenuItem_Click;
			copyOutputFileNameToolStripMenuItem.Name = "copyOutputFileNameToolStripMenuItem";
			copyOutputFileNameToolStripMenuItem.Size = new Size(263, 22);
			copyOutputFileNameToolStripMenuItem.Text = "Copy Output File Name";
			copyOutputFileNameToolStripMenuItem.Click += copyOutputFileNameToolStripMenuItem_Click;
			seperator2ToolStripMenuItem.Name = "seperator2ToolStripMenuItem";
			seperator2ToolStripMenuItem.Size = new Size(260, 6);
			excludeFromSolutionToolStripMenuItem.Name = "excludeFromSolutionToolStripMenuItem";
			excludeFromSolutionToolStripMenuItem.Size = new Size(263, 22);
			excludeFromSolutionToolStripMenuItem.Text = "Delete Project...";
			excludeFromSolutionToolStripMenuItem.Click += excludeFromSolutionToolStripMenuItem_Click;
			toolStripSeparator2.Name = "toolStripSeparator2";
			toolStripSeparator2.Size = new Size(260, 6);
			readOnlyMessageBar.Dock = DockStyle.Top;
			readOnlyMessageBar.Location = new Point(0, 50);
			readOnlyMessageBar.MessageImage = (Image)componentResourceManager.GetObject("readOnlyMessageBar.MessageImage");
			readOnlyMessageBar.MessageText = "The solution or one or more projects are opened in read-only mode. You can build but not add or edit projects.";
			readOnlyMessageBar.Name = "readOnlyMessageBar";
			readOnlyMessageBar.Padding = new Padding(10, 0, 0, 0);
			readOnlyMessageBar.Size = new Size(1008, 36);
			readOnlyMessageBar.TabIndex = 10;
			((SuperTooltip)ToolTip).set_DefaultTooltipSettings(new SuperTooltipInfo("Enter your resource Tag here In text", "", "TT_NO_TOOLTIP", (Image)null, (Image)null, (eTooltipColor)17));
			((SuperTooltip)ToolTip).set_LicenseKey("F962CEC7-CD8F-4911-A9E9-CAB39962FC1F");
			((ContainerControl)this).AutoScaleDimensions = new SizeF(6f, 13f);
			((ContainerControl)this).AutoScaleMode = AutoScaleMode.Font;
			((Form)this).ClientSize = new Size(1008, 729);
			((Control)this).Controls.Add((Control)(object)dockSite9);
			((Control)this).Controls.Add((Control)(object)dockSite2);
			((Control)this).Controls.Add((Control)(object)dockSite1);
			((Control)this).Controls.Add((Control)(object)dockSite3);
			((Control)this).Controls.Add((Control)(object)dockSite4);
			((Control)this).Controls.Add((Control)(object)dockSite5);
			((Control)this).Controls.Add((Control)(object)dockSite6);
			((Control)this).Controls.Add(readOnlyMessageBar);
			((Control)this).Controls.Add((Control)(object)dockSite7);
			((Control)this).Controls.Add((Control)(object)dockSite8);
			((Control)(object)this).DoubleBuffered = true;
			((OfficeForm)this).set_Icon((Icon)componentResourceManager.GetObject("$this.Icon"));
			((Form)this).KeyPreview = true;
			((Control)this).Name = "MainForm";
			((Control)(object)this).Text = "Tile Set Studio";
			((Form)this).FormClosing += MainForm_FormClosing;
			((Form)this).Load += MainForm_Load;
			dockSite9.ResumeLayout(false);
			((ISupportInitialize)bar2).EndInit();
			bar2.ResumeLayout(false);
			((Control)(object)panelDockContainer1).ResumeLayout(performLayout: false);
			dockSite2.ResumeLayout(false);
			((ISupportInitialize)bar8).EndInit();
			bar8.ResumeLayout(false);
			((Control)(object)panelDockContainer8).ResumeLayout(performLayout: false);
			((Control)(object)panelDockContainer8).PerformLayout();
			((ISupportInitialize)bar6).EndInit();
			bar6.ResumeLayout(false);
			((Control)(object)panelDockContainer5).ResumeLayout(performLayout: false);
			dockSite7.ResumeLayout(false);
			((ISupportInitialize)bar3).EndInit();
			((ISupportInitialize)bar4).EndInit();
			((ISupportInitialize)advTree1).EndInit();
			((ISupportInitialize)advTree2).EndInit();
			((ISupportInitialize)advTree3).EndInit();
			contextMenuStripAssetSelected.ResumeLayout(performLayout: false);
			contextMenuStripRightClickProject.ResumeLayout(performLayout: false);
			((Control)this).ResumeLayout(performLayout: false);
		}
	}
	public struct MaskInfo
	{
		public int MaskCount { get; set; }

		public ImportTemplateInfo[] Infos { get; set; }

		public string[] Names { get; set; }
	}
	public class MessageBar : UserControl
	{
		private IContainer components;

		private LabelX label;

		private ButtonX buttonHide;

		public string MessageText
		{
			get
			{
				return ((Control)(object)label).Text;
			}
			set
			{
				((Control)(object)label).Text = value;
			}
		}

		public Image MessageImage
		{
			get
			{
				return label.get_Image();
			}
			set
			{
				label.set_Image(value);
			}
		}

		public MessageBar()
		{
			InitializeComponent();
		}

		private void buttonHide_Click(object sender, EventArgs e)
		{
			base.Visible = false;
		}

		protected override void Dispose(bool disposing)
		{
			if (disposing && components != null)
			{
				components.Dispose();
			}
			base.Dispose(disposing);
		}

		private void InitializeComponent()
		{
			//IL_0002: Unknown result type (might be due to invalid IL or missing references)
			//IL_000c: Expected O, but got Unknown
			//IL_000d: Unknown result type (might be due to invalid IL or missing references)
			//IL_0017: Expected O, but got Unknown
			this.label = new LabelX();
			this.buttonHide = new ButtonX();
			base.SuspendLayout();
			((System.Windows.Forms.Control)(object)this.label).Anchor = System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Left | System.Windows.Forms.AnchorStyles.Right;
			((BaseItemControl)this.label).get_BackgroundStyle().set_CornerType((eCornerType)1);
			this.label.set_Image((System.Drawing.Image)GrBuildStudio.Properties.Resources.info);
			((System.Windows.Forms.Control)(object)this.label).Location = new System.Drawing.Point(0, 4);
			((System.Windows.Forms.Control)(object)this.label).Name = "label";
			((System.Windows.Forms.Control)(object)this.label).Size = new System.Drawing.Size(595, 28);
			((BaseItemControl)this.label).set_Style((eDotNetBarStyle)9);
			((System.Windows.Forms.Control)(object)this.label).TabIndex = 10;
			((System.Windows.Forms.Control)(object)this.label).Text = "Info: One or more projects are opened in read-only mode. You can build projects but not make changes.";
			this.label.set_WordWrap(true);
			((System.Windows.Forms.Control)(object)this.buttonHide).AccessibleRole = System.Windows.Forms.AccessibleRole.PushButton;
			((System.Windows.Forms.Control)(object)this.buttonHide).Anchor = System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Right;
			this.buttonHide.set_ColorTable((eButtonColor)3);
			((System.Windows.Forms.Control)(object)this.buttonHide).Location = new System.Drawing.Point(596, 6);
			((System.Windows.Forms.Control)(object)this.buttonHide).Name = "buttonHide";
			((System.Windows.Forms.Control)(object)this.buttonHide).Size = new System.Drawing.Size(62, 23);
			((PopupItemControl)this.buttonHide).set_Style((eDotNetBarStyle)9);
			((System.Windows.Forms.Control)(object)this.buttonHide).TabIndex = 11;
			((System.Windows.Forms.Control)(object)this.buttonHide).Text = "Hide";
			((System.Windows.Forms.Control)(object)this.buttonHide).Click += new System.EventHandler(buttonHide_Click);
			base.AutoScaleDimensions = new System.Drawing.SizeF(6f, 13f);
			base.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;
			base.Controls.Add((System.Windows.Forms.Control)(object)this.buttonHide);
			base.Controls.Add((System.Windows.Forms.Control)(object)this.label);
			base.Name = "MessageBar";
			base.Size = new System.Drawing.Size(663, 35);
			base.ResumeLayout(false);
		}
	}
	public class MessageBoxLogListener : LogListener
	{
		public Verbosity VerbosityLevel { get; set; }

		public bool Supressed { get; set; }

		public Form Owner { get; set; }

		public MessageBoxLogListener()
		{
			//IL_0009: Unknown result type (might be due to invalid IL or missing references)
			VerbosityLevel = Defaults.get_Verbosity();
		}

		public MessageBoxLogListener(Form owner)
		{
			//IL_0009: Unknown result type (might be due to invalid IL or missing references)
			VerbosityLevel = Defaults.get_Verbosity();
			Owner = owner;
		}

		public void LogTitle(string title, Verbosity verbosity)
		{
		}

		public void LogConsole(string message, Verbosity verbosity)
		{
		}

		public void LogLine(Verbosity verbosity)
		{
		}

		public void LogMessage(string message, Verbosity verbosity)
		{
			if (!Supressed)
			{
				IWin32Window owner = null;
				if (!Owner.IsDisposed)
				{
					owner = Owner;
				}
				MessageBox.Show(owner, message, "Info", MessageBoxButtons.OK, MessageBoxIcon.Asterisk);
			}
		}

		public void LogCurrentLine(string message, Verbosity verbosity)
		{
			//IL_0003: Unknown result type (might be due to invalid IL or missing references)
			LogMessage(message, verbosity);
		}

		public void LogCurrentLine(string message, bool endWithNewLine, Verbosity verbosity)
		{
			//IL_0003: Unknown result type (might be due to invalid IL or missing references)
			LogMessage(message, verbosity);
		}

		public void LogError(string message)
		{
			if (Supressed)
			{
				return;
			}
			IWin32Window handle = null;
			if (Owner != null && !Owner.IsDisposed)
			{
				handle = Owner;
			}
			if (Owner != null && Owner.InvokeRequired)
			{
				Owner.Invoke((Action)delegate
				{
					MessageBox.Show(handle, message, "Error", MessageBoxButtons.OK, MessageBoxIcon.Hand);
				});
			}
			else
			{
				MessageBox.Show(handle, message, "Error", MessageBoxButtons.OK, MessageBoxIcon.Hand);
			}
		}

		public void LogWarning(string message)
		{
			if (!Supressed)
			{
				IWin32Window owner = null;
				if (Owner != null && !Owner.IsDisposed)
				{
					owner = Owner;
				}
				MessageBox.Show(owner, message, "Warning", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
			}
		}

		public void LogInfo(string message)
		{
			if (!Supressed)
			{
				IWin32Window owner = null;
				if (!Owner.IsDisposed)
				{
					owner = Owner;
				}
				MessageBox.Show(owner, message, "Info", MessageBoxButtons.OK, MessageBoxIcon.Asterisk);
			}
		}

		public void PrintProgress(string message, bool isLast, Verbosity verbosity)
		{
		}
	}
	public class MigrateAssetsForm : OfficeForm
	{
		private enum Action
		{
			Copy,
			Move
		}

		private Dictionary<Guid, List<Asset>> assetsToMigrate;

		private SolutionModel model;

		private SolutionBuilder solutionBuilder;

		private IContainer components;

		private ProjectList projectList1;

		private Label label2;

		private PickerControl pickerControl1;

		private Label label3;

		private ComboBox comboBoxAction;

		private Label label4;

		private Button buttonCancel;

		private Button buttonMigrate;

		public MigrateAssetsForm()
		{
			InitializeComponent();
		}

		public void Initialize(SolutionModel model, Dictionary<Guid, List<Asset>> assetsToMigrate)
		{
			this.model = model;
			this.assetsToMigrate = assetsToMigrate;
			ComboBoxHelper.FillEnumComboBox<Action>(comboBoxAction);
			comboBoxAction.SelectedIndex = 0;
			pickerControl1.DisplayTextBox.Text = "No Solution Loaded";
			EnableButtons();
		}

		private void EnableButtons()
		{
			buttonMigrate.Enabled = projectList1.SelectedProject != null;
		}

		private bool LoadSolution(string filename)
		{
			//IL_0009: Unknown result type (might be due to invalid IL or missing references)
			//IL_0013: Expected O, but got Unknown
			//IL_0014: Unknown result type (might be due to invalid IL or missing references)
			//IL_001e: Unknown result type (might be due to invalid IL or missing references)
			//IL_0023: Unknown result type (might be due to invalid IL or missing references)
			//IL_0028: Expected O, but got Unknown
			//IL_0040: Unknown result type (might be due to invalid IL or missing references)
			//IL_007f: Unknown result type (might be due to invalid IL or missing references)
			//IL_0086: Expected O, but got Unknown
			//IL_0097: Unknown result type (might be due to invalid IL or missing references)
			//IL_0098: Unknown result type (might be due to invalid IL or missing references)
			//IL_009a: Unknown result type (might be due to invalid IL or missing references)
			//IL_009c: Unknown result type (might be due to invalid IL or missing references)
			//IL_009e: Unknown result type (might be due to invalid IL or missing references)
			//IL_00a4: Unknown result type (might be due to invalid IL or missing references)
			//IL_00a8: Invalid comparison between Unknown and I4
			UnloadSolution();
			solutionBuilder = new SolutionBuilder();
			Error val = (Error)0;
			try
			{
				val = solutionBuilder.LoadSolution(filename, false);
			}
			catch (UnspecifiedException val2)
			{
				UnspecifiedException val3 = val2;
				string text = string.Format("Could not load solution. Detailed error message: '{0}'. Error code: '{1}'.", new object[2]
				{
					((Exception)(object)val3).Message,
					val3.get_ErrorCode()
				});
				((Logger)StudioLogger.Global).LogError(text);
				return false;
			}
			catch (Exception ex)
			{
				UnspecifiedException e = new UnspecifiedException("Could not load solution. Detailed error message: '" + ex.Message + "'.", ex);
				StudioLogger.Global.LogException((Exception)(object)e);
				return false;
			}
			Error val4 = val;
			Error val5 = val4;
			if ((int)val5 != 0)
			{
				if ((int)val5 == 13)
				{
					((Logger)StudioLogger.Global).LogError("Solution is already open in another instance. Please close the other instance or open a different solution.");
					return false;
				}
				((Logger)StudioLogger.Global).LogError("Could not open solution. General error: " + ((object)(Error)(ref val)).ToString());
				return false;
			}
			return true;
		}

		private void UnloadSolution()
		{
			if (solutionBuilder != null && solutionBuilder.IsSolutionLoaded())
			{
				solutionBuilder.CloseSolution();
			}
		}

		private void pickerControl1_Picked(object sender, EventArgs e)
		{
			OpenFileDialog openFileDialog = new OpenFileDialog();
			openFileDialog.Filter = DialogUtil.SolutionOpenDialogFilter;
			openFileDialog.InitialDirectory = DialogUtil.SolutionLocation;
			if (openFileDialog.ShowDialog() == DialogResult.OK)
			{
				string fullPath = Path.GetFullPath(openFileDialog.FileName);
				string fullPath2 = Path.GetFullPath(model.SolutionBuilder.get_ActiveSolutionFullPath());
				if (fullPath.Equals(fullPath2))
				{
					string text = "Please select a solution other than the currently loaded solution. To move Stacked Textures between projects in a loaded solution, just drag and drop Stacked Textures between the Tile Set main views.";
					((Logger)StudioLogger.Global).LogError(text);
				}
				else if (LoadSolution(fullPath))
				{
					EnableButtons();
					projectList1.Solution = solutionBuilder.get_ActiveSolution();
					pickerControl1.DisplayTextBox.Text = fullPath;
					DialogUtil.SolutionLocation = Paths.GetDirectoryName(openFileDialog.FileName);
				}
			}
		}

		private void buttonMigrate_Click(object sender, EventArgs e)
		{
			Migrate();
		}

		public static void ConversionProblemsCallback(object sender, SolutionModel.MoveAssetConvProblemsArgs e)
		{
			if (MessageBox.Show("In order to migrate at least one of the Stacked Textures, some layers will get lost. Continue?", "Continue?", MessageBoxButtons.YesNo, MessageBoxIcon.Question) == DialogResult.Yes)
			{
				e.Continue = true;
				e.Options = (AssetToImportAssetConversionOptions)1;
			}
			else
			{
				e.Continue = false;
			}
		}

		private void Migrate()
		{
			bool keepCopy = ComboBoxHelper.GetSelectedEnumValue<Action>(comboBoxAction) == Action.Copy;
			if (projectList1.SelectedProject == null)
			{
				return;
			}
			Guid id = projectList1.SelectedProject.get_Id();
			try
			{
				new BuildLoggerReporter();
				model.MoveAssets(assetsToMigrate, solutionBuilder, id, keepCopy, out var report, ConversionProblemsCallback);
				if (!report.HasErrors)
				{
					string text = $"Successfully migrated all {report.TotalAssetCount} stacked textures.";
					MessageBox.Show((IWin32Window)this, text, "Migration Completed", MessageBoxButtons.OK, MessageBoxIcon.Asterisk);
					return;
				}
				if (report.HasImportErrors)
				{
					string text2 = "Migration completed with errors. Importing the migrating stacked textures showed errors. Please press OK to inspect these.";
					((Logger)StudioLogger.Global).LogError(text2);
					report.BuildLoggerReporterImport.ShowDialog();
				}
				if (!report.HasDeletionErrors)
				{
					return;
				}
				string text3 = "Migration completed with errors. Deleting migrated stacked textures from their original tile sets showed errors. Please press OK to inspect these.";
				((Logger)StudioLogger.Global).LogError(text3);
				foreach (BuildLoggerReporter item in report.BuildLoggerReporterDeletion)
				{
					if (item.HasErrors)
					{
						item.ShowDialog();
					}
				}
			}
			catch (Exception ex)
			{
				string text4 = "Migration failed because of an unexpected error. Exception error: " + ex.ToString();
				((Logger)StudioLogger.Global).LogError(text4);
			}
		}

		private void MigrateAssetsForm_FormClosing(object sender, FormClosingEventArgs e)
		{
			UnloadSolution();
		}

		private void projectList1_SelectionChanged(object sender)
		{
			EnableButtons();
		}

		protected override void Dispose(bool disposing)
		{
			if (disposing && components != null)
			{
				components.Dispose();
			}
			((OfficeForm)this).Dispose(disposing);
		}

		private void InitializeComponent()
		{
			label2 = new Label();
			label3 = new Label();
			comboBoxAction = new ComboBox();
			label4 = new Label();
			buttonCancel = new Button();
			buttonMigrate = new Button();
			pickerControl1 = new PickerControl();
			projectList1 = new ProjectList();
			((Control)this).SuspendLayout();
			label2.AutoSize = true;
			label2.Location = new Point(10, 21);
			label2.Name = "label2";
			label2.Size = new Size(79, 13);
			label2.TabIndex = 3;
			label2.Text = "Target Solution";
			label3.AutoSize = true;
			label3.Location = new Point(12, 79);
			label3.Name = "label3";
			label3.Size = new Size(77, 13);
			label3.TabIndex = 5;
			label3.Text = "Target Project:";
			comboBoxAction.DropDownStyle = ComboBoxStyle.DropDownList;
			comboBoxAction.FormattingEnabled = true;
			comboBoxAction.Location = new Point(15, 258);
			comboBoxAction.Name = "comboBoxAction";
			comboBoxAction.Size = new Size(207, 21);
			comboBoxAction.TabIndex = 6;
			label4.AutoSize = true;
			label4.Location = new Point(12, 239);
			label4.Name = "label4";
			label4.Size = new Size(40, 13);
			label4.TabIndex = 7;
			label4.Text = "Action:";
			buttonCancel.Anchor = AnchorStyles.Bottom | AnchorStyles.Right;
			buttonCancel.DialogResult = DialogResult.Cancel;
			buttonCancel.Location = new Point(316, 300);
			buttonCancel.Name = "buttonCancel";
			buttonCancel.Size = new Size(75, 23);
			buttonCancel.TabIndex = 512;
			buttonCancel.Text = "Close";
			buttonCancel.UseVisualStyleBackColor = true;
			buttonMigrate.Anchor = AnchorStyles.Bottom | AnchorStyles.Right;
			buttonMigrate.DialogResult = DialogResult.OK;
			buttonMigrate.Location = new Point(235, 300);
			buttonMigrate.Name = "buttonMigrate";
			buttonMigrate.Size = new Size(75, 23);
			buttonMigrate.TabIndex = 511;
			buttonMigrate.Text = "Go";
			buttonMigrate.UseVisualStyleBackColor = true;
			buttonMigrate.Click += buttonMigrate_Click;
			pickerControl1.AllowFileDrop = false;
			pickerControl1.AllowFolderDrop = false;
			pickerControl1.Location = new Point(15, 41);
			pickerControl1.Name = "pickerControl1";
			pickerControl1.Size = new Size(372, 20);
			pickerControl1.TabIndex = 4;
			pickerControl1.Template = null;
			pickerControl1.Picked += pickerControl1_Picked;
			projectList1.Location = new Point(15, 98);
			projectList1.Name = "projectList1";
			projectList1.Size = new Size(376, 124);
			projectList1.Solution = null;
			projectList1.TabIndex = 2;
			projectList1.SelectionChanged += projectList1_SelectionChanged;
			((Form)this).AcceptButton = buttonMigrate;
			((ContainerControl)this).AutoScaleDimensions = new SizeF(6f, 13f);
			((ContainerControl)this).AutoScaleMode = AutoScaleMode.Font;
			((Form)this).CancelButton = buttonCancel;
			((Form)this).ClientSize = new Size(403, 335);
			((Control)this).Controls.Add(buttonCancel);
			((Control)this).Controls.Add(buttonMigrate);
			((Control)this).Controls.Add(label4);
			((Control)this).Controls.Add(comboBoxAction);
			((Control)this).Controls.Add(label3);
			((Control)this).Controls.Add(pickerControl1);
			((Control)this).Controls.Add(label2);
			((Control)this).Controls.Add(projectList1);
			((Control)(object)this).DoubleBuffered = true;
			((Form)this).FormBorderStyle = FormBorderStyle.FixedDialog;
			((Form)this).MaximizeBox = false;
			((Form)this).MinimizeBox = false;
			((Control)this).Name = "MigrateAssetsForm";
			((Form)this).ShowInTaskbar = false;
			((Form)this).StartPosition = FormStartPosition.CenterParent;
			((Control)(object)this).Text = "Migrate Stacked Textures";
			((Form)this).FormClosing += MigrateAssetsForm_FormClosing;
			((Control)this).ResumeLayout(performLayout: false);
			((Control)this).PerformLayout();
		}
	}
	internal class MRUManager
	{
		private List<string> list;

		private MRUSerializer serializer;

		public string[] FileList => ReverseList(list);

		public int MaximumLength { get; private set; }

		public MRUManager(MRUSerializer serializer, int maximumLength)
		{
			this.serializer = serializer;
			list = new List<string>();
			MaximumLength = maximumLength;
			Load();
		}

		private void Load()
		{
			serializer.Load(out var mruList);
			list.Clear();
			for (int i = 0; i < mruList.Length; i++)
			{
				list.Add(mruList[i]);
			}
		}

		private void Save()
		{
			serializer.Save(list.ToArray());
		}

		private string[] ReverseList(List<string> list)
		{
			List<string> list2 = new List<string>(list);
			list2.Reverse();
			return list2.ToArray();
		}

		private void DequeueIfRequired()
		{
			if (list.Count > 0 && list.Count > MaximumLength)
			{
				list.RemoveAt(0);
			}
		}

		public void AddFile(string filename)
		{
			if (list.Contains(filename))
			{
				list.Remove(filename);
				list.Add(filename);
			}
			else
			{
				list.Add(filename);
			}
			DequeueIfRequired();
			Save();
		}

		public void RemoveFile(string filename)
		{
			if (list.Contains(filename))
			{
				list.Remove(filename);
			}
			Save();
		}
	}
	internal class MRUMenuManager
	{
		public delegate void MRUItemClickedEventHandler(object sender, string filename);

		private MRUManager mruManager;

		private ButtonItem parentButton;

		private int maximumButtonCaptionLength;

		public event MRUItemClickedEventHandler MRUItemClicked;

		protected virtual void OnMRUItemClicked(string filename)
		{
			this.MRUItemClicked?.Invoke(this, filename);
		}

		public MRUMenuManager(MRUManager manager, ButtonItem parentButton, int maximumButtonCaptionLength)
		{
			mruManager = manager;
			this.parentButton = parentButton;
			this.maximumButtonCaptionLength = maximumButtonCaptionLength;
			SetupMenu();
		}

		private void SetupMenu()
		{
			//IL_0028: Unknown result type (might be due to invalid IL or missing references)
			//IL_002e: Expected O, but got Unknown
			//IL_0076: Unknown result type (might be due to invalid IL or missing references)
			//IL_007d: Expected O, but got Unknown
			string[] fileList = mruManager.FileList;
			((CollectionBase)(object)((BaseItem)parentButton).get_SubItems()).Clear();
			if (fileList.Length == 0)
			{
				ButtonItem val = new ButtonItem();
				((BaseItem)val).set_Text("");
				((BaseItem)val).set_Enabled(false);
				((BaseItem)val).set_Tag((object)null);
				((BaseItem)parentButton).get_SubItems().Add((BaseItem)(object)val);
				return;
			}
			for (int i = 0; i < fileList.Length; i++)
			{
				string text = ShellTools.ShortenPathname(fileList[i], maximumButtonCaptionLength);
				ButtonItem val2 = new ButtonItem();
				((BaseItem)val2).set_Text(i + 1 + " - " + text);
				((BaseItem)val2).set_Tag((object)fileList[i]);
				((BaseItem)val2).set_Name("Test");
				((BaseItem)val2).add_Click((EventHandler)ButtonItemMRUItem_Click);
				((BaseItem)parentButton).get_SubItems().Add((BaseItem)(object)val2);
			}
		}

		private void ButtonItemMRUItem_Click(object sender, EventArgs e)
		{
			//IL_0002: Unknown result type (might be due to invalid IL or missing references)
			string filename = (string)((BaseItem)(ButtonItem)sender).get_Tag();
			OnMRUItemClicked(filename);
		}

		public void AddMRUFile(string filename)
		{
			mruManager.AddFile(filename);
			SetupMenu();
		}

		public void RemoveMRUFile(string filename)
		{
			mruManager.RemoveFile(filename);
			SetupMenu();
		}

		public void Refresh()
		{
			SetupMenu();
		}
	}
	internal interface MRUSerializer
	{
		bool Save(string[] mruList);

		bool Load(out string[] mruList);
	}
	internal class MRUSerializerInMemory : MRUSerializer
	{
		private string[] list;

		public MRUSerializerInMemory()
		{
			list = new string[0];
		}

		public bool Save(string[] mruList)
		{
			list = mruList;
			return true;
		}

		public bool Load(out string[] mruList)
		{
			mruList = list;
			return true;
		}
	}
	internal class MRUSerializerInRegistry : MRUSerializer
	{
		private string folderPath;

		public MRUSerializerInRegistry(string folderPath)
		{
			this.folderPath = folderPath;
		}

		public bool Save(string[] mruList)
		{
			try
			{
				RegistryKey registryKey = Registry.CurrentUser.CreateSubKey(folderPath);
				if (registryKey == null)
				{
					return false;
				}
				StringBuilder stringBuilder = new StringBuilder();
				for (int i = 0; i < mruList.Length; i++)
				{
					stringBuilder.Append(mruList[i]);
					if (i != mruList.Length - 1)
					{
						stringBuilder.Append(";");
					}
				}
				registryKey.SetValue("MRUList", stringBuilder.ToString());
				registryKey.Close();
			}
			catch
			{
			}
			return true;
		}

		public bool Load(out string[] mruList)
		{
			mruList = new string[0];
			try
			{
				RegistryKey registryKey = Registry.CurrentUser.CreateSubKey(folderPath);
				if (registryKey == null)
				{
					return false;
				}
				string text = (string)registryKey.GetValue("MRUList", string.Empty);
				if (text == null)
				{
					return false;
				}
				string[] array = text.Split(';');
				List<string> list = new List<string>();
				string[] array2 = array;
				string[] array3 = array2;
				foreach (string text2 in array3)
				{
					if (text2.Length != 0)
					{
						list.Add(text2);
					}
				}
				mruList = list.ToArray();
				registryKey.Close();
			}
			catch
			{
			}
			return true;
		}
	}
	public class NewProjectForm : OfficeForm
	{
		private class TemplateLayerDescription
		{
			public string Title { get; set; }

			public string LayerName { get; set; }

			public DataType Datatype { get; set; }

			public TemplateLayerDescription(string title, string layername, DataType datatype)
			{
				Title = title;
				LayerName = layername;
				Datatype = datatype;
			}
		}

		private class TemplateDescription
		{
			public string Title { get; set; }

			public TemplateLayerDescription[] Layers { get; set; }

			public string GroupName { get; set; }

			public int ImageIndex { get; set; }

			public string Description { get; set; }

			public TemplateDescription(string title, TemplateLayerDescription[] layers, string groupName, int imageIndex, string description)
			{
				Title = title;
				Layers = layers;
				GroupName = groupName;
				ImageIndex = imageIndex;
				Description = description;
			}

			public TemplateDescription(TemplateLayerDescription[] layers, string groupName, int imageIndex, string description)
			{
				Layers = layers;
				GroupName = groupName;
				ImageIndex = imageIndex;
				Description = description;
				Title = FormatTitle(layers);
			}

			private string FormatTitle(TemplateLayerDescription[] layers)
			{
				StringBuilder stringBuilder = new StringBuilder();
				for (int i = 0; i < layers.Length; i++)
				{
					stringBuilder.Append(layers[i].Title);
					if (i != layers.Length - 1)
					{
						stringBuilder.Append(" + ");
					}
				}
				return stringBuilder.ToString();
			}
		}

		private struct TemplateButton
		{
			public TemplateDescription template;

			public string groupname;

			public string title;

			public int imageIndex;

			public string description;

			public TemplateButton(TemplateDescription template)
			{
				groupname = template.GroupName;
				title = template.Title;
				imageIndex = template.ImageIndex;
				description = template.Description;
				this.template = template;
			}
		}

		private List<TemplateButton> buttons;

		private IContainer components;

		private ListView listView;

		private ImageList imageList1;

		private Label label1;

		private TextBox textBoxProjectName;

		private Button buttonCancel;

		private Button buttonCreate;

		private Label label3;

		private TextBox textBoxSolutionName;

		private Label label4;

		private PathBoxControl pathBoxSolutionLocation;

		private Label label2;

		private ToolTip ToolTip;

		private Panel NewSolutionPanel;

		private ListViewEx listViewInfo;

		private ColumnHeader columnHeaderLayer;

		private ColumnHeader columnHeaderType;

		private Label label5;

		private Label labelLayers;

		private RichTextBoxEx richTextBoxExSelection;

		private Label label7;

		private Label labelSelection;

		public string ProjectName
		{
			get
			{
				return textBoxProjectName.Text;
			}
			set
			{
				textBoxProjectName.Text = value;
			}
		}

		public string SolutionName
		{
			get
			{
				return textBoxSolutionName.Text;
			}
			set
			{
				textBoxSolutionName.Text = value;
			}
		}

		public string SolutionPath
		{
			get
			{
				return pathBoxSolutionLocation.Path;
			}
			set
			{
				pathBoxSolutionLocation.Path = value;
			}
		}

		public ProjectTemplate ProjectTemplate { get; set; }

		public bool AllowUserNewSolutionCreation { get; set; }

		public bool CreateNewSolutionDefault { get; set; }

		private List<TemplateDescription> CreateDefaultTemplates()
		{
			TemplateLayerDescription templateLayerDescription = new TemplateLayerDescription("Diffuse", "diffuse", DataType.R8G8B8A8_SRGB);
			TemplateLayerDescription templateLayerDescription2 = new TemplateLayerDescription("Normals", "normals", DataType.X8Y8Z0_TANGENT);
			TemplateLayerDescription templateLayerDescription3 = new TemplateLayerDescription("Specular", "specular", DataType.R8G8B8_SRGB);
			TemplateLayerDescription templateLayerDescription4 = new TemplateLayerDescription("Roughness", "roughness", DataType.R8G8B8_SRGB);
			TemplateLayerDescription templateLayerDescription5 = new TemplateLayerDescription("Grayscale/Heightmap", "grayscale", DataType.X8);
			new TemplateLayerDescription("Metallic", "metallic", DataType.X8);
			new TemplateLayerDescription("Glossiness", "glossiness", DataType.X8);
			TemplateLayerDescription templateLayerDescription6 = new TemplateLayerDescription("Diffuse", "diffuse", DataType.R16G16B16_FLOAT);
			TemplateLayerDescription templateLayerDescription7 = new TemplateLayerDescription("Normals", "normals", DataType.R16G16B16_FLOAT);
			TemplateLayerDescription templateLayerDescription8 = new TemplateLayerDescription("Specular", "specular", DataType.R16G16B16_FLOAT);
			TemplateLayerDescription templateLayerDescription9 = new TemplateLayerDescription("Roughness", "roughness", DataType.R16G16B16_FLOAT);
			TemplateLayerDescription templateLayerDescription10 = new TemplateLayerDescription("Base Color", "basecolor", DataType.R8G8B8_SRGB);
			TemplateLayerDescription templateLayerDescription11 = new TemplateLayerDescription("Base Color", "basecolor", DataType.R8G8B8A8_SRGB);
			TemplateLayerDescription templateLayerDescription12 = templateLayerDescription2;
			TemplateLayerDescription templateLayerDescription13 = new TemplateLayerDescription("Roughness+Metallic", "roughness+metallic", DataType.X8Y8);
			new TemplateLayerDescription("Specular+Glossiness", "specular+glossiness", DataType.X8Y8);
			TemplateLayerDescription templateLayerDescription14 = new TemplateLayerDescription("Displacement", "displacement", DataType.X8);
			List<TemplateDescription> list = new List<TemplateDescription>();
			string groupName = "8-bit LDR SRGB";
			list.Add(new TemplateDescription(new TemplateLayerDescription[1] { templateLayerDescription }, groupName, 0, "Template for a single diffuse with alpha rendering workflow, low dynamic range (8-bit)."));
			list.Add(new TemplateDescription(new TemplateLayerDescription[2] { templateLayerDescription, templateLayerDescription2 }, groupName, 1, "Template for diffuse(with alpha)/normal map rendering workflow, low dynamic range (8-bit)"));
			list.Add(new TemplateDescription(new TemplateLayerDescription[3] { templateLayerDescription, templateLayerDescription2, templateLayerDescription3 }, groupName, 2, "Template for diffuse(with alpha)/normal/specular rendering workflow, low dynamic range (8-bit)."));
			list.Add(new TemplateDescription(new TemplateLayerDescription[4] { templateLayerDescription, templateLayerDescription2, templateLayerDescription3, templateLayerDescription4 }, groupName, 3, "Template for diffuse(with alpha)/normal/specular/roughness rendering workflow, low dynamic range (8-bit)"));
			list.Add(new TemplateDescription(new TemplateLayerDescription[1] { templateLayerDescription5 }, groupName, 6, ""));
			string groupName2 = "Unreal 4 PBR Compatible";
			list.Add(new TemplateDescription("Physically Based (Metallic/Roughness)", new TemplateLayerDescription[3] { templateLayerDescription10, templateLayerDescription12, templateLayerDescription13 }, groupName2, 5, "UE4-compatible template for physically based rendering using a metallic/roughness workflow. Roughness (X8) and metallic (X8) channels are combined (X8Y8)."));
			list.Add(new TemplateDescription("Physically Based (Metallic/Roughness) w/ Displacement", new TemplateLayerDescription[4] { templateLayerDescription10, templateLayerDescription12, templateLayerDescription13, templateLayerDescription14 }, groupName2, 7, "UE4-compatible template for physically based rendering using a metallic/roughness workflow including a diffuse and a displacement map. Roughness (X8) and metallic (X8) channels are combined (X8Y8)."));
			list.Add(new TemplateDescription("Physically Based (Metallic/Roughness) w/ Alpha", new TemplateLayerDescription[3] { templateLayerDescription11, templateLayerDescription12, templateLayerDescription13 }, groupName2, 5, "UE4-compatible template for physically based rendering using a metallic/roughness workflow including a diffuse with an alpha channel. Roughness (X8) and metallic (X8) channels are combined (X8Y8)."));
			list.Add(new TemplateDescription("Physically Based (Metallic/Roughness) w/ Alpha and Displacement", new TemplateLayerDescription[4] { templateLayerDescription11, templateLayerDescription12, templateLayerDescription13, templateLayerDescription14 }, groupName2, 7, "UE4-compatible template for physically based rendering using a metallic/roughness workflow including a diffuse with an alpha channel, in addition to a displacement map. Roughness (X8) and metallic (X8) channels are combined (X8Y8)."));
			string groupName3 = "16-bit HDR Float";
			list.Add(new TemplateDescription(new TemplateLayerDescription[1] { templateLayerDescription6 }, groupName3, 0, "Template for a single diffuse without alpha rendering workflow, high dynamic range (16-bit)."));
			list.Add(new TemplateDescription(new TemplateLayerDescription[2] { templateLayerDescription6, templateLayerDescription7 }, groupName3, 1, "Template for diffuse(without alpha)/normal map rendering workflow, high dynamic range (16-bit)"));
			list.Add(new TemplateDescription(new TemplateLayerDescription[3] { templateLayerDescription6, templateLayerDescription7, templateLayerDescription8 }, groupName3, 2, "Template for diffuse(without alpha)/normal/specular rendering workflow, high dynamic range (16-bit)."));
			list.Add(new TemplateDescription(new TemplateLayerDescription[4] { templateLayerDescription6, templateLayerDescription7, templateLayerDescription8, templateLayerDescription9 }, groupName3, 3, "Template for diffuse(without alpha)/normal/specular/roughness rendering workflow, high dynamic range (16-bit)"));
			return list;
		}

		public NewProjectForm()
		{
			InitializeComponent();
			CreateTemplates();
			if (listView.Items.Count > 0)
			{
				listView.Items[0].Selected = true;
			}
		}

		private void EnableNewSolutionControls()
		{
			NewSolutionPanel.Visible = AllowUserNewSolutionCreation;
			if (AllowUserNewSolutionCreation)
			{
				((Control)(object)this).Text = "New Solution";
				textBoxSolutionName.Text = UserExperience.SuggestSolutionName(SolutionPath);
				ProjectName = UserExperience.SuggestProjectNameOnDisk(SolutionPath);
			}
			else
			{
				((Control)(object)this).Text = "New Tile Set Project";
			}
			if (!NewSolutionPanel.Visible)
			{
				((Control)this).Height -= NewSolutionPanel.Height;
			}
		}

		private void checkBoxNewSolution_CheckedChanged(object sender, EventArgs e)
		{
			EnableNewSolutionControls();
		}

		private void buttonCreate_Click(object sender, EventArgs e)
		{
			if (listView.SelectedItems.Count != 1)
			{
				return;
			}
			TemplateButton templateButton = (TemplateButton)listView.SelectedItems[0].Tag;
			if (templateButton.template == null || templateButton.template.Layers.Length == 0)
			{
				CustomLayerLayoutForm customLayerLayoutForm = new CustomLayerLayoutForm();
				customLayerLayoutForm.InitializeForCreation();
				if (((Form)(object)customLayerLayoutForm).ShowDialog((IWin32Window)this) == DialogResult.OK)
				{
					ProjectTemplate = customLayerLayoutForm.ProjectTemplate;
				}
				else
				{
					((Form)this).DialogResult = DialogResult.None;
				}
			}
			else
			{
				ProjectTemplate = CreateGrBuildProjectTemplate(templateButton.template);
			}
		}

		private void NewProjectForm_Load(object sender, EventArgs e)
		{
			EnableNewSolutionControls();
			pathBoxSolutionLocation.Path = SolutionPath;
		}

		private ProjectTemplate CreateGrBuildProjectTemplate(TemplateDescription descr)
		{
			//IL_0008: Unknown result type (might be due to invalid IL or missing references)
			//IL_000e: Unknown result type (might be due to invalid IL or missing references)
			//IL_0014: Expected O, but got Unknown
			//IL_0052: Unknown result type (might be due to invalid IL or missing references)
			//IL_0059: Expected O, but got Unknown
			BuildProfile val = default(BuildProfile);
			ProfileLoader.LoadBuildProfile(ProfileLoader.GetDefaultBuildProfile(), ref val);
			ProjectTemplate val2 = new ProjectTemplate();
			for (int i = 0; i < descr.Layers.Length; i++)
			{
				string text = val.get_DefaultCodingProfiles()[descr.Layers[i].Datatype];
				LayerDescription item = new LayerDescription(descr.Layers[i].Datatype, text, "Default", descr.Layers[i].LayerName);
				val2.get_LayerConfig().get_Layers().Add(item);
			}
			return val2;
		}

		private void AddTemplate(TemplateDescription descr)
		{
			buttons.Add(new TemplateButton(descr));
		}

		private void CreateTemplates()
		{
			buttons = new List<TemplateButton>();
			listView.Groups.Clear();
			listView.Items.Clear();
			foreach (TemplateDescription item in CreateDefaultTemplates())
			{
				AddTemplate(item);
			}
			TemplateDescription template = new TemplateDescription("Custom...", new TemplateLayerDescription[0], "Custom", 4, "Create your custom layer configuration after you click the Create button.");
			buttons.Add(new TemplateButton(template));
			Dictionary<string, ListViewGroup> dictionary = new Dictionary<string, ListViewGroup>();
			foreach (TemplateButton button in buttons)
			{
				if (!dictionary.ContainsKey(button.groupname))
				{
					ListViewGroup listViewGroup = new ListViewGroup(button.groupname);
					dictionary.Add(button.groupname, listViewGroup);
					listView.Groups.Add(listViewGroup);
				}
				ListViewGroup group = dictionary[button.groupname];
				ListViewItem listViewItem = new ListViewItem(button.title, button.imageIndex, group);
				listViewItem.Tag = button;
				listViewItem.ToolTipText = button.description;
				listView.Items.Add(listViewItem);
			}
			listView.TileSize = new Size(128, 128);
		}

		private void listView_SelectedIndexChanged(object sender, EventArgs e)
		{
			buttonCreate.Enabled = listView.SelectedItems.Count > 0;
			if (listView.SelectedItems.Count == 1)
			{
				((ListView)(object)listViewInfo).Items.Clear();
				TemplateButton templateButton = (TemplateButton)listView.SelectedItems[0].Tag;
				((Control)(object)richTextBoxExSelection).Text = templateButton.template.Description;
				labelSelection.Text = templateButton.template.Title;
				labelLayers.Text = "Layers (" + templateButton.template.Layers.Length + "):";
				for (int i = 0; i < templateButton.template.Layers.Length; i++)
				{
					TemplateLayerDescription templateLayerDescription = templateButton.template.Layers[i];
					ListViewItem value = new ListViewItem(new string[2]
					{
						templateLayerDescription.Title,
						templateLayerDescription.Datatype.ToString()
					});
					((ListView)(object)listViewInfo).Items.Add(value);
				}
			}
		}

		protected override void Dispose(bool disposing)
		{
			if (disposing && components != null)
			{
				components.Dispose();
			}
			((OfficeForm)this).Dispose(disposing);
		}

		private void InitializeComponent()
		{
			//IL_011b: Unknown result type (might be due to invalid IL or missing references)
			//IL_0125: Expected O, but got Unknown
			//IL_0152: Unknown result type (might be due to invalid IL or missing references)
			//IL_015c: Expected O, but got Unknown
			//IL_04f4: Unknown result type (might be due to invalid IL or missing references)
			//IL_04fe: Expected O, but got Unknown
			//IL_0721: Unknown result type (might be due to invalid IL or missing references)
			//IL_072b: Expected O, but got Unknown
			//IL_09d7: Unknown result type (might be due to invalid IL or missing references)
			//IL_09e1: Expected O, but got Unknown
			//IL_0d6d: Unknown result type (might be due to invalid IL or missing references)
			//IL_0d77: Expected O, but got Unknown
			//IL_0d9e: Unknown result type (might be due to invalid IL or missing references)
			//IL_0da8: Expected O, but got Unknown
			components = new Container();
			ListViewGroup listViewGroup = new ListViewGroup("8-bit Low Dynamic Range", HorizontalAlignment.Left);
			ListViewGroup listViewGroup2 = new ListViewGroup("16-bit High Dynamic Range", HorizontalAlignment.Left);
			ListViewGroup listViewGroup3 = new ListViewGroup("Custom", HorizontalAlignment.Left);
			ListViewItem listViewItem = new ListViewItem("Diffuse", 0);
			ListViewItem listViewItem2 = new ListViewItem("Diffuse + Normals", 1);
			ListViewItem listViewItem3 = new ListViewItem("Diffuse + Normals + Specular", 2);
			ListViewItem listViewItem4 = new ListViewItem("Custom...", 4);
			ListViewItem listViewItem5 = new ListViewItem("Diffuse", 0);
			ListViewItem listViewItem6 = new ListViewItem("Diffuse + Normals", 1);
			ListViewItem listViewItem7 = new ListViewItem("Diffuse + Normals + Specular", 2);
			ComponentResourceManager componentResourceManager = new ComponentResourceManager(typeof(NewProjectForm));
			listView = new ListView();
			imageList1 = new ImageList(components);
			label1 = new Label();
			textBoxProjectName = new TextBox();
			buttonCancel = new Button();
			buttonCreate = new Button();
			label3 = new Label();
			textBoxSolutionName = new TextBox();
			label4 = new Label();
			label2 = new Label();
			NewSolutionPanel = new Panel();
			listViewInfo = new ListViewEx();
			columnHeaderLayer = new ColumnHeader();
			columnHeaderType = new ColumnHeader();
			label5 = new Label();
			labelLayers = new Label();
			richTextBoxExSelection = new RichTextBoxEx();
			label7 = new Label();
			labelSelection = new Label();
			pathBoxSolutionLocation = new PathBoxControl();
			ToolTip = new ToolTip();
			NewSolutionPanel.SuspendLayout();
			((Control)this).SuspendLayout();
			listView.Anchor = AnchorStyles.Top | AnchorStyles.Left | AnchorStyles.Right;
			listViewGroup.Header = "8-bit Low Dynamic Range";
			listViewGroup.Name = "listViewGroup1";
			listViewGroup2.Header = "16-bit High Dynamic Range";
			listViewGroup2.Name = "listViewGroup2";
			listViewGroup3.Header = "Custom";
			listViewGroup3.Name = "listViewGroup3";
			listView.Groups.AddRange(new ListViewGroup[3] { listViewGroup, listViewGroup2, listViewGroup3 });
			listView.HideSelection = false;
			listViewItem.Group = listViewGroup;
			listViewItem2.Group = listViewGroup;
			listViewItem3.Group = listViewGroup;
			listViewItem4.Group = listViewGroup3;
			listViewItem5.Group = listViewGroup2;
			listViewItem6.Group = listViewGroup2;
			listViewItem7.Group = listViewGroup2;
			listView.Items.AddRange(new ListViewItem[7] { listViewItem, listViewItem2, listViewItem3, listViewItem4, listViewItem5, listViewItem6, listViewItem7 });
			listView.LargeImageList = imageList1;
			listView.Location = new Point(12, 37);
			listView.MultiSelect = false;
			listView.Name = "listView";
			listView.Size = new Size(597, 539);
			listView.TabIndex = 0;
			listView.TileSize = new Size(128, 128);
			listView.UseCompatibleStateImageBehavior = false;
			listView.SelectedIndexChanged += listView_SelectedIndexChanged;
			imageList1.ImageStream = (ImageListStreamer)componentResourceManager.GetObject("imageList1.ImageStream");
			imageList1.TransparentColor = System.Drawing.Color.Transparent;
			imageList1.Images.SetKeyName(0, "template_1layers.png");
			imageList1.Images.SetKeyName(1, "template_2layers.png");
			imageList1.Images.SetKeyName(2, "template_3layers.png");
			imageList1.Images.SetKeyName(3, "template_4layers.png");
			imageList1.Images.SetKeyName(4, "template_4layers_blank.png");
			imageList1.Images.SetKeyName(5, "template_u4_4layers.png");
			imageList1.Images.SetKeyName(6, "template_1layers_gray.png");
			imageList1.Images.SetKeyName(7, "template_5layers.png");
			label1.AutoSize = true;
			label1.Location = new Point(15, 603);
			label1.Name = "label1";
			label1.Size = new Size(74, 13);
			label1.TabIndex = 3;
			label1.Text = "Tile Set Name";
			textBoxProjectName.Location = new Point(106, 600);
			textBoxProjectName.Name = "textBoxProjectName";
			textBoxProjectName.Size = new Size(340, 20);
			((SuperTooltip)ToolTip).SetSuperTooltip((IComponent)textBoxProjectName, new SuperTooltipInfo("Replace the resource tag in text", "", "TT_NEWPROJECT_TILESETNAME", (Image)null, (Image)null, (eTooltipColor)17));
			textBoxProjectName.TabIndex = 2;
			textBoxProjectName.Text = "tileSet";
			buttonCancel.Anchor = AnchorStyles.Bottom | AnchorStyles.Right;
			buttonCancel.DialogResult = DialogResult.Cancel;
			buttonCancel.Location = new Point(854, 685);
			buttonCancel.Name = "buttonCancel";
			buttonCancel.Size = new Size(75, 23);
			buttonCancel.TabIndex = 20;
			buttonCancel.Text = "Cancel";
			buttonCancel.UseVisualStyleBackColor = true;
			buttonCreate.Anchor = AnchorStyles.Bottom | AnchorStyles.Right;
			buttonCreate.DialogResult = DialogResult.OK;
			buttonCreate.Location = new Point(773, 685);
			buttonCreate.Name = "buttonCreate";
			buttonCreate.Size = new Size(75, 23);
			buttonCreate.TabIndex = 10;
			buttonCreate.Text = "Create";
			buttonCreate.UseVisualStyleBackColor = true;
			buttonCreate.Click += buttonCreate_Click;
			label3.Anchor = AnchorStyles.Bottom | AnchorStyles.Left;
			label3.AutoSize = true;
			label3.Location = new Point(0, 29);
			label3.Name = "label3";
			label3.Size = new Size(76, 13);
			label3.TabIndex = 6;
			label3.Text = "Solution Name";
			textBoxSolutionName.Anchor = AnchorStyles.Bottom | AnchorStyles.Left;
			textBoxSolutionName.Location = new Point(91, 26);
			textBoxSolutionName.Name = "textBoxSolutionName";
			textBoxSolutionName.Size = new Size(340, 20);
			((SuperTooltip)ToolTip).SetSuperTooltip((IComponent)textBoxSolutionName, new SuperTooltipInfo("Replace the resource tag in text", "", "TT_NEWPROJECT_SOLUTIONNAME", (Image)null, (Image)null, (eTooltipColor)17));
			textBoxSolutionName.TabIndex = 5;
			textBoxSolutionName.Text = "Solution1";
			label4.Anchor = AnchorStyles.Bottom | AnchorStyles.Left;
			label4.AutoSize = true;
			label4.Location = new Point(0, 55);
			label4.Name = "label4";
			label4.Size = new Size(89, 13);
			label4.TabIndex = 6;
			label4.Text = "Solution Location";
			label2.AutoSize = true;
			label2.Location = new Point(9, 17);
			label2.Name = "label2";
			label2.Size = new Size(51, 13);
			label2.TabIndex = 10;
			label2.Text = "Template";
			NewSolutionPanel.Controls.Add(label3);
			NewSolutionPanel.Controls.Add(textBoxSolutionName);
			NewSolutionPanel.Controls.Add(label4);
			NewSolutionPanel.Controls.Add(pathBoxSolutionLocation);
			NewSolutionPanel.Location = new Point(15, 626);
			NewSolutionPanel.Name = "NewSolutionPanel";
			NewSolutionPanel.Size = new Size(460, 86);
			NewSolutionPanel.TabIndex = 21;
			((Control)(object)listViewInfo).Anchor = AnchorStyles.Top | AnchorStyles.Right;
			((Control)(object)listViewInfo).BackColor = System.Drawing.Color.White;
			listViewInfo.get_Border().set_CornerType((eCornerType)1);
			((ListView)(object)listViewInfo).Columns.AddRange(new ColumnHeader[2] { columnHeaderLayer, columnHeaderType });
			listViewInfo.set_DisabledBackColor(System.Drawing.Color.Empty);
			((Control)(object)listViewInfo).ForeColor = System.Drawing.Color.Black;
			((ListView)(object)listViewInfo).FullRowSelect = true;
			((ListView)(object)listViewInfo).HeaderStyle = ColumnHeaderStyle.Nonclickable;
			((Control)(object)listViewInfo).Location = new Point(633, 264);
			((ListView)(object)listViewInfo).MultiSelect = false;
			((Control)(object)listViewInfo).Name = "listViewInfo";
			((Control)(object)listViewInfo).Size = new Size(292, 312);
			((SuperTooltip)ToolTip).SetSuperTooltip((IComponent)listViewInfo, new SuperTooltipInfo("Replace the resource tag in text", "", "TT_NEWPROJECT_LAYERLIST", (Image)null, (Image)null, (eTooltipColor)17));
			((Control)(object)listViewInfo).TabIndex = 22;
			((ListView)(object)listViewInfo).UseCompatibleStateImageBehavior = false;
			((ListView)(object)listViewInfo).View = View.Details;
			columnHeaderLayer.Text = "Name";
			columnHeaderLayer.Width = 120;
			columnHeaderType.Text = "Type";
			columnHeaderType.Width = 130;
			label5.Anchor = AnchorStyles.Top | AnchorStyles.Right;
			label5.AutoSize = true;
			label5.Location = new Point(630, 36);
			label5.Name = "label5";
			label5.Size = new Size(52, 13);
			label5.TabIndex = 24;
			label5.Text = "Selected:";
			labelLayers.Anchor = AnchorStyles.Top | AnchorStyles.Right;
			labelLayers.AutoSize = true;
			labelLayers.Location = new Point(630, 246);
			labelLayers.Name = "labelLayers";
			labelLayers.Size = new Size(41, 13);
			labelLayers.TabIndex = 25;
			labelLayers.Text = "Layers:";
			((Control)(object)richTextBoxExSelection).Anchor = AnchorStyles.Top | AnchorStyles.Right;
			((ControlWithBackgroundStyle)richTextBoxExSelection).get_BackgroundStyle().set_Class("RichTextBoxBorder");
			((ControlWithBackgroundStyle)richTextBoxExSelection).get_BackgroundStyle().set_CornerType((eCornerType)1);
			((Control)(object)richTextBoxExSelection).Location = new Point(633, 132);
			((Control)(object)richTextBoxExSelection).Name = "richTextBoxExSelection";
			richTextBoxExSelection.set_ReadOnly(true);
			richTextBoxExSelection.set_Rtf("{\\rtf1\\ansi\\ansicpg1252\\deff0\\deflang2067{\\fonttbl{\\f0\\fnil\\fcharset0 Microsoft Sans Serif;}}\r\n\\viewkind4\\uc1\\pard\\f0\\fs17\\par\r\n}\r\n");
			((Control)(object)richTextBoxExSelection).Size = new Size(292, 100);
			((Control)(object)richTextBoxExSelection).TabIndex = 26;
			label7.Anchor = AnchorStyles.Top | AnchorStyles.Right;
			label7.AutoSize = true;
			label7.Location = new Point(630, 113);
			label7.Name = "label7";
			label7.Size = new Size(63, 13);
			label7.TabIndex = 27;
			label7.Text = "Description:";
			labelSelection.Anchor = AnchorStyles.Top | AnchorStyles.Right;
			labelSelection.Location = new Point(630, 57);
			labelSelection.Name = "labelSelection";
			labelSelection.Size = new Size(295, 51);
			labelSelection.TabIndex = 28;
			labelSelection.Text = "Title";
			pathBoxSolutionLocation.Anchor = AnchorStyles.Bottom | AnchorStyles.Left;
			pathBoxSolutionLocation.LoadSave = PathBoxControl.PathBoxLoadSave.Load;
			pathBoxSolutionLocation.Location = new Point(91, 51);
			pathBoxSolutionLocation.Margin = new Padding(2);
			pathBoxSolutionLocation.Name = "pathBoxSolutionLocation";
			pathBoxSolutionLocation.Path = null;
			pathBoxSolutionLocation.PathType = PathBoxControl.PathBoxPathType.Folder;
			pathBoxSolutionLocation.Size = new Size(340, 20);
			((SuperTooltip)ToolTip).SetSuperTooltip((IComponent)pathBoxSolutionLocation, new SuperTooltipInfo("Replace the resource tag in text", "", "TT_NEWPROJECT_SOLUTIONLOCATION", (Image)null, (Image)null, (eTooltipColor)17));
			pathBoxSolutionLocation.TabIndex = 7;
			((SuperTooltip)ToolTip).set_DefaultTooltipSettings(new SuperTooltipInfo("Replace the resource tag in text", "", "TT_NO_TOOLTIP", (Image)null, (Image)null, (eTooltipColor)17));
			((SuperTooltip)ToolTip).set_LicenseKey("F962CEC7-CD8F-4911-A9E9-CAB39962FC1F");
			((Form)this).AcceptButton = buttonCreate;
			((Form)this).CancelButton = buttonCancel;
			((Form)this).ClientSize = new Size(941, 720);
			((Control)this).Controls.Add(labelSelection);
			((Control)this).Controls.Add(label7);
			((Control)this).Controls.Add((Control)(object)richTextBoxExSelection);
			((Control)this).Controls.Add(labelLayers);
			((Control)this).Controls.Add(label5);
			((Control)this).Controls.Add((Control)(object)listViewInfo);
			((Control)this).Controls.Add(NewSolutionPanel);
			((Control)this).Controls.Add(label2);
			((Control)this).Controls.Add(label1);
			((Control)this).Controls.Add(textBoxProjectName);
			((Control)this).Controls.Add(buttonCreate);
			((Control)this).Controls.Add(buttonCancel);
			((Control)this).Controls.Add(listView);
			((Control)(object)this).DoubleBuffered = true;
			((Form)this).FormBorderStyle = FormBorderStyle.FixedDialog;
			((Form)this).MaximizeBox = false;
			((Form)this).MinimizeBox = false;
			((Control)this).Name = "NewProjectForm";
			((Form)this).ShowInTaskbar = false;
			((Form)this).StartPosition = FormStartPosition.CenterParent;
			((Control)(object)this).Text = "This title is set at run-time";
			((Form)this).Load += NewProjectForm_Load;
			NewSolutionPanel.ResumeLayout(performLayout: false);
			NewSolutionPanel.PerformLayout();
			((Control)this).ResumeLayout(performLayout: false);
			((Control)this).PerformLayout();
		}
	}
	internal struct NodeContext
	{
		public InfoType type;

		public string path;

		public NodeContext(InfoType type, string path)
		{
			this.type = type;
			this.path = path;
		}
	}
	public enum ProductModeType
	{
		GraniteSDK,
		GraniteUnity
	}
	internal static class Program
	{
		public static CommandLineOptions options = new CommandLineOptions();

		public static ProductModeType ProductMode;

		public static byte[] CurrentProductModeTag = new byte[64]
		{
			236, 37, 109, 138, 187, 84, 251, 169, 47, 23,
			121, 94, 0, 61, 237, 29, 34, 54, 17, 107,
			229, 108, 40, 1, 250, 15, 78, 27, 167, 76,
			35, 216, 192, 240, 193, 62, 114, 254, 207, 162,
			103, 189, 91, 225, 85, 199, 81, 239, 68, 146,
			39, 203, 218, 69, 60, 205, 140, 44, 130, 173,
			183, 72, 230, 9
		};

		public static byte[] UnityProductModeTag = new byte[64]
		{
			236, 37, 109, 138, 187, 84, 251, 169, 47, 23,
			121, 94, 0, 61, 237, 29, 34, 54, 17, 107,
			229, 108, 40, 1, 250, 15, 78, 27, 167, 76,
			35, 216, 192, 240, 193, 62, 114, 254, 207, 162,
			103, 189, 91, 225, 85, 199, 81, 239, 68, 146,
			39, 203, 218, 69, 60, 205, 140, 44, 130, 173,
			183, 72, 230, 10
		};

		[STAThread]
		private static int Main(string[] args)
		{
			try
			{
				Application.ThreadException += Application_ThreadException;
				Application.SetUnhandledExceptionMode(UnhandledExceptionMode.ThrowException);
				AppDomain.CurrentDomain.UnhandledException += CurrentDomain_UnhandledException;
				if (!GrBuildLibInterface.IsInitialized)
				{
					GrBuildLibInterface.InitializeGrBuild();
				}
				if (CurrentProductModeTag.SequenceEqual(UnityProductModeTag))
				{
					ProductMode = ProductModeType.GraniteUnity;
				}
				else
				{
					ProductMode = ProductModeType.GraniteSDK;
				}
				string currentDirectory = Directory.GetCurrentDirectory();
				Application.EnableVisualStyles();
				Application.SetCompatibleTextRenderingDefault(defaultValue: false);
				if (!new CommandLineParser(options).ParseCommandLine(args))
				{
					((Logger)StudioLogger.Global).LogError("Invalid command line arguments");
					return 1;
				}
				if (ProductMode == ProductModeType.GraniteUnity && !options.hidden)
				{
					MessageBox.Show("This application is automatically launched through the Unity editor.", "Error", MessageBoxButtons.OK, MessageBoxIcon.Hand);
					((Logger)StudioLogger.Global).LogError("Only hidden mode is compatible with Unity.");
					return 1;
				}
				if (options.build && options.solutionPath == null && options.ImportSolutionFromXml == null)
				{
					((Logger)StudioLogger.Global).LogError("-b requires the -o or -i option to be present.");
					return 1;
				}
				if (options.quit && !options.build)
				{
					((Logger)StudioLogger.Global).LogError("-q requires the -b option to be present.");
					return 1;
				}
				MainForm.StartupContext startupContext = new MainForm.StartupContext();
				if (options.solutionPath != null)
				{
					startupContext.solutionToLoadPath = options.solutionPath;
				}
				else if (options.ImportSolutionFromXml != null)
				{
					string text = null;
					try
					{
						BuildLoggerReporter buildLoggerReporter = new BuildLoggerReporter(FormMode.Standalone);
						text = SolutionImporter.CreateSolutionFromXML((Logger)(object)StudioLogger.Global, options, buildLoggerReporter);
						if (buildLoggerReporter.HasSomethingToReport && (buildLoggerReporter.HasErrors || !options.IgnoreImportWarnings))
						{
							buildLoggerReporter.AddFinishedMessage();
							buildLoggerReporter.ShowDialog();
						}
					}
					catch (Exception ex)
					{
						string text2 = "Unable to create solution from import file '" + options.ImportSolutionFromXml + "'.";
						string text3 = "Error description: '" + ex.Message + "'";
						if (ex.InnerException != null && !string.IsNullOrEmpty(ex.InnerException.Message))
						{
							text3 = text3 + " (" + ex.InnerException.Message + ")";
						}
						text3 += ". If the problem persists, please contact Graphine.";
						((Logger)StudioLogger.Global).LogError(text2, text3);
						return 2;
					}
					if (text != null)
					{
						startupContext.solutionToLoadPath = text;
					}
				}
				startupContext.buildSolution = options.build;
				startupContext.rebuildSolution = options.rebuild;
				startupContext.optimizedBuild = options.optimized;
				startupContext.quitAfterSuccessBuild = options.quit;
				startupContext.hideMainWindow = options.hidden;
				startupContext.silentAtlasErrors = options.silentAtlasErrors;
				startupContext.buildForGtex = options.buildGTSforGTex;
				startupContext.allowForeignGtex = options.allowForeignGTex;
				startupContext.forceGtex = options.forceUseGTex;
				startupContext.buildnotileset = options.omitGTS;
				MainForm mainForm = new MainForm();
				mainForm.SetStartupContext(startupContext);
				SlowTaskMonitor.DefaultParent = (Form)(object)mainForm;
				ReturnCode result = ReturnCode.Success;
				if (options.hidden && options.build && options.quit)
				{
					mainForm.LoadAndBuild();
					if (mainForm.AutoBuildReport.AtlassingErrorsOccurred && startupContext.silentAtlasErrors)
					{
						result = ReturnCode.BuildErrorAtlassing;
					}
				}
				else
				{
					Application.Run((Form)(object)mainForm);
				}
				if (options.deamon)
				{
					string directoryName = Paths.GetDirectoryName(options.ImportSolutionFromXml);
					if (Directory.Exists(directoryName))
					{
						Directory.SetCurrentDirectory(currentDirectory);
						Directory.Delete(directoryName, recursive: true);
					}
				}
				return (int)result;
			}
			catch (Exception ex2)
			{
				CrashReportForm crashReportForm = new CrashReportForm();
				crashReportForm.Exception = ex2;
				crashReportForm.Message = ex2.Message;
				crashReportForm.Mode = CrashReportForm.DisplayMode.FatalError;
				crashReportForm.ShowDialog();
				return 3;
			}
			finally
			{
				GrBuildLibInterface.ReleaseGrBuild();
			}
		}

		private static void CurrentDomain_UnhandledException(object sender, UnhandledExceptionEventArgs e)
		{
			Exception ex = (Exception)e.ExceptionObject;
			CrashReportForm crashReportForm = new CrashReportForm();
			crashReportForm.Exception = ex;
			crashReportForm.Message = ex.Message;
			crashReportForm.Mode = ((!e.IsTerminating) ? CrashReportForm.DisplayMode.Error : CrashReportForm.DisplayMode.FatalError);
			crashReportForm.ShowDialog();
		}

		private static void Application_ThreadException(object sender, ThreadExceptionEventArgs e)
		{
			CrashReportForm crashReportForm = new CrashReportForm();
			crashReportForm.Exception = e.Exception;
			crashReportForm.Message = e.Exception.Message;
			crashReportForm.Mode = CrashReportForm.DisplayMode.Error;
			crashReportForm.ShowDialog();
		}
	}
	public class ProjectList : UserControl
	{
		public delegate void SelectionChangedEventHandler(object sender);

		private Solution solution;

		private IContainer components;

		private ListBoxAdv listBoxAdv1;

		private ListBoxItem listBoxItem1;

		public Solution Solution
		{
			get
			{
				return solution;
			}
			set
			{
				solution = value;
				PopulateList();
			}
		}

		public SolutionProjectDecriptor SelectedProject { get; private set; }

		public event SelectionChangedEventHandler SelectionChanged;

		public ProjectList()
		{
			InitializeComponent();
		}

		protected virtual void OnSelectionChanged()
		{
			this.SelectionChanged?.Invoke(this);
		}

		private void PopulateList()
		{
			//IL_0044: Unknown result type (might be due to invalid IL or missing references)
			//IL_004a: Expected O, but got Unknown
			listBoxAdv1.get_Items().Clear();
			if (solution == null)
			{
				return;
			}
			foreach (SolutionProjectDecriptor value in solution.get_Projects().Values)
			{
				ListBoxItem val = new ListBoxItem();
				((BaseItem)val).set_Text(value.get_Name());
				((BaseItem)val).set_Tag((object)value);
				listBoxAdv1.get_Items().Add((object)val);
			}
		}

		private void listBoxAdv1_SelectedIndexChanged(object sender, EventArgs e)
		{
			//IL_000c: Unknown result type (might be due to invalid IL or missing references)
			//IL_0012: Expected O, but got Unknown
			//IL_0019: Unknown result type (might be due to invalid IL or missing references)
			//IL_0023: Expected O, but got Unknown
			ListBoxItem val = (ListBoxItem)listBoxAdv1.get_SelectedItem();
			SelectedProject = (SolutionProjectDecriptor)((BaseItem)val).get_Tag();
			OnSelectionChanged();
		}

		protected override void Dispose(bool disposing)
		{
			if (disposing && components != null)
			{
				components.Dispose();
			}
			base.Dispose(disposing);
		}

		private void InitializeComponent()
		{
			//IL_0002: Unknown result type (might be due to invalid IL or missing references)
			//IL_000c: Expected O, but got Unknown
			//IL_000d: Unknown result type (might be due to invalid IL or missing references)
			//IL_0017: Expected O, but got Unknown
			this.listBoxAdv1 = new ListBoxAdv();
			this.listBoxItem1 = new ListBoxItem();
			base.SuspendLayout();
			((ItemPanelBase)this.listBoxAdv1).set_AutoScroll(true);
			((ItemControl)this.listBoxAdv1).get_BackgroundStyle().set_Class("ListBoxAdv");
			((ItemControl)this.listBoxAdv1).get_BackgroundStyle().set_CornerType((eCornerType)1);
			((ItemControl)this.listBoxAdv1).set_ContainerControlProcessDialogKey(true);
			((System.Windows.Forms.Control)(object)this.listBoxAdv1).Dock = System.Windows.Forms.DockStyle.Fill;
			((ItemControl)this.listBoxAdv1).set_DragDropSupport(true);
			this.listBoxAdv1.get_Items().Add((object)this.listBoxItem1);
			((ItemPanelBase)this.listBoxAdv1).set_LicenseKey("F962CEC7-CD8F-4911-A9E9-CAB39962FC1F");
			((System.Windows.Forms.Control)(object)this.listBoxAdv1).Location = new System.Drawing.Point(0, 0);
			((System.Windows.Forms.Control)(object)this.listBoxAdv1).Name = "listBoxAdv1";
			((System.Windows.Forms.Control)(object)this.listBoxAdv1).Size = new System.Drawing.Size(219, 112);
			((System.Windows.Forms.Control)(object)this.listBoxAdv1).TabIndex = 1;
			((System.Windows.Forms.Control)(object)this.listBoxAdv1).Text = "listBoxAdv1";
			((ItemPanelBase)this.listBoxAdv1).add_SelectedIndexChanged(new System.EventHandler(listBoxAdv1_SelectedIndexChanged));
			((BaseItem)this.listBoxItem1).set_Name("listBoxItem1");
			((BaseItem)this.listBoxItem1).set_Text("Item 1");
			base.AutoScaleDimensions = new System.Drawing.SizeF(6f, 13f);
			base.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;
			base.Controls.Add((System.Windows.Forms.Control)(object)this.listBoxAdv1);
			base.Name = "ProjectList";
			base.Size = new System.Drawing.Size(219, 112);
			base.ResumeLayout(false);
		}
	}
	public class ProjectNodeModel
	{
		public delegate void ProjectNodeClickedEventHandler(object sender, Guid id);

		public delegate void ProjectNodeRightClickedEventHandler(object sender, Point location);

		private ProjectBuilder projectBuilder;

		public Node Node { get; set; }

		public ProjectTree Tree { get; private set; }

		public event ProjectNodeClickedEventHandler ProjectNodeClicked;

		public event ProjectNodeRightClickedEventHandler ProjectNodeRightClicked;

		protected virtual void OnProjectNodeClicked(Guid id)
		{
			this.ProjectNodeClicked?.Invoke(this, id);
		}

		protected virtual void OnProjectNodeRightClicked(Point location)
		{
			this.ProjectNodeRightClicked?.Invoke(this, location);
		}

		public ProjectNodeModel(ProjectBuilder builder)
		{
			//IL_0009: Unknown result type (might be due to invalid IL or missing references)
			//IL_0013: Expected O, but got Unknown
			Node = new Node();
			projectBuilder = builder;
			CreateNode();
		}

		private string ToStringArray<T>(List<T> a, string seperator)
		{
			StringBuilder stringBuilder = new StringBuilder();
			for (int i = 0; i < a.Count; i++)
			{
				stringBuilder.Append(a[i]);
				if (i != a.Count - 1)
				{
					stringBuilder.Append(seperator);
				}
			}
			return stringBuilder.ToString();
		}

		public void Delete()
		{
			Tree.DeleteTree();
			Tree.Dispose();
			Tree = null;
			projectBuilder = null;
		}

		private string CreateRootNodeText()
		{
			LayerConfig layerConfiguration = projectBuilder.get_ActiveProject().get_LayerConfiguration();
			if (layerConfiguration == null)
			{
				return "<b>Tile Set in invalid state.</b>";
			}
			int count = layerConfiguration.get_Layers().Count;
			IEnumerable<string> source = from x in layerConfiguration.get_Layers()
				select x.get_LayerName();
			string text = ToStringArray(source.ToList(), ", ");
			string text2 = ((count > 1) ? "layers" : "layer");
			string text3 = "No Items";
			if (projectBuilder.get_ActiveProject().get_Assets().Count > 0)
			{
				text3 = projectBuilder.get_ActiveProject().get_Assets().Count + " Item";
				if (projectBuilder.get_ActiveProject().get_Assets().Count > 1)
				{
					text3 += "s";
				}
			}
			return $"<b>Tile Set '{projectBuilder.get_ActiveProject().get_Name()}'</b> - {count} {text2} ({text}) - {text3}";
		}

		private ProjectTree CreateSubTree()
		{
			ProjectTree projectTree = new ProjectTree();
			projectTree.TreeSelected += tree_TreeSelected;
			projectTree.ProjectBuilder = projectBuilder;
			return projectTree;
		}

		private void tree_TreeSelected(object sender)
		{
			OnProjectNodeClicked(projectBuilder.get_ActiveProject().get_Id());
		}

		private ElementStyle GetRootNodeStyle()
		{
			//IL_0001: Unknown result type (might be due to invalid IL or missing references)
			//IL_0006: Unknown result type (might be due to invalid IL or missing references)
			//IL_000e: Unknown result type (might be due to invalid IL or missing references)
			//IL_0027: Unknown result type (might be due to invalid IL or missing references)
			//IL_002f: Unknown result type (might be due to invalid IL or missing references)
			//IL_0037: Unknown result type (might be due to invalid IL or missing references)
			//IL_0044: Expected O, but got Unknown
			ElementStyle val = new ElementStyle();
			val.set_CornerType((eCornerType)1);
			val.set_Font(new Font("Microsoft Sans Serif", 9.75f, FontStyle.Regular, GraphicsUnit.Point, 0));
			val.set_MarginBottom(6);
			val.set_MarginTop(6);
			val.set_Name("rootNodeStyle");
			return val;
		}

		private void CreateNode()
		{
			//IL_0089: Unknown result type (might be due to invalid IL or missing references)
			//IL_008f: Expected O, but got Unknown
			Node.set_Tag((object)this);
			Node.set_Text(CreateRootNodeText());
			Node.set_Expanded(true);
			Node.set_Name("node");
			Node.set_Style(GetRootNodeStyle());
			Node.add_NodeMouseUp((MouseEventHandler)Node_NodeClick);
			Node.set_Image((Image)(projectBuilder.get_ReadOnly() ? Resources.icon_readonly : null));
			Node val = new Node();
			val.set_Expanded(true);
			Tree = CreateSubTree();
			val.set_HostedControl((Control)Tree);
			val.set_Name("treeNode");
			Node.get_Nodes().AddRange((Node[])(object)new Node[1] { val });
		}

		public void UpdateNode()
		{
			Node.set_Text(CreateRootNodeText());
		}

		private void Node_NodeClick(object sender, MouseEventArgs e)
		{
			OnProjectNodeClicked(projectBuilder.get_ActiveProject().get_Id());
			if (e.Button == MouseButtons.Right)
			{
				OnProjectNodeRightClicked(e.Location);
			}
		}

		public void Refresh()
		{
			if (Tree.InvokeRequired)
			{
				Tree.Invoke((Action)delegate
				{
					Tree.PopulateTree();
				});
			}
			else
			{
				Tree.PopulateTree();
			}
		}

		public void UpdateAllAssets()
		{
			Tree.UpdateAllAssets();
		}

		public void RefreshAsset(Asset asset)
		{
			Tree.UpdateAssetInTree(asset);
		}

		public void StartRename()
		{
			Tree.StartRename();
		}

		public void Filter(string searchString)
		{
			Tree.Filter(searchString);
		}

		public void ClearFilter()
		{
			Tree.ClearFilter();
		}
	}
	public class ProjectProperties
	{
		public string ProjectName { get; set; }

		public string BuildProfile { get; set; }

		public string OutputFilename { get; set; }

		public string SoupOutputFolder { get; set; }

		public string PagesFolder { get; set; }

		public uint MaxAnisotropy { get; set; }

		public uint TileHeight { get; set; }

		public uint TileWidth { get; set; }

		public uint PageSize { get; set; }

		public bool NoUniformCoding { get; set; }

		public bool Patching { get; set; }

		public bool HighQualityCoding { get; set; }

		public bool NoRedirection { get; set; }

		public bool NoSharedMipGeneration { get; set; }

		public bool MipStripping { get; set; }

		public bool CodingProfileChanged { get; set; }

		public bool[] CodingProfileLayerChanged { get; set; }

		public TilingMode TilingMode { get; set; }

		public TargetDisk TargetDisk { get; set; }

		public PagingStrategy PagingStrategy { get; set; }

		public LayerConfig LayerConfiguration { get; set; }

		public bool DataTypesChanged { get; set; }

		public bool[] DataTypeLayerChanged { get; set; }

		public ProjectProperties()
		{
			ProjectName = string.Empty;
			BuildProfile = string.Empty;
			OutputFilename = string.Empty;
			SoupOutputFolder = string.Empty;
			PagesFolder = string.Empty;
			LayerConfiguration = null;
		}
	}
	public class ProjectPropertiesForm : OfficeForm
	{
		private class ComboBoxItem
		{
			public string Text { get; set; }

			public object Tag { get; set; }

			public ComboBoxItem()
			{
				Text = string.Empty;
				Tag = null;
			}

			public ComboBoxItem(string text)
			{
				Text = text;
				Tag = null;
			}

			public ComboBoxItem(string text, object tag)
			{
				Text = text;
				Tag = tag;
			}

			public override string ToString()
			{
				return Text;
			}
		}

		private string const_fromBuildSuffix = " (Auto set to '{0}' from profile)";

		private string const_fromBuildSuffixBehindScenes = " (Auto set from profile)";

		private uint[] DefaultMaxAnisoValues = new uint[5] { 0u, 2u, 4u, 8u, 16u };

		private uint DefaultMaxAnisoAutoValue = 8u;

		private uint[] DefaultTileSizes = new uint[5] { 0u, 64u, 128u, 256u, 512u };

		private uint DefaultTileSizesAutoValue;

		private uint[] DefaultPageSizes = new uint[1];

		private uint DefaultPageSizeValue;

		private BuildProfile activeBuildProfile;

		private bool readOnly;

		private IContainer components;

		private Button buttonAccept;

		private Button buttonCancel;

		private SuperTabControl superTabControl1;

		private SuperTabControlPanel superTabControlPanel1;

		private SuperTabItem superTabItem1;

		private Label label4;

		private ComboBox comboBoxProfiles;

		private Label label7;

		private TextBox textBoxProjectName;

		private SuperTabControlPanel superTabControlPanel2;

		private Label label1;

		private SuperTabItem superTabItem2;

		private SuperTabControlPanel superTabControlPanel3;

		private LabelX labelX1;

		private Label label14;

		private ComboBox comboBoxBlockSize;

		private Label label13;

		private ComboBox comboBoxTileHeight;

		private ComboBox comboBoxTileWidth;

		private Label label12;

		private Label label11;

		private ComboBox comboBoxPageSize;

		private Label label10;

		private ComboBox comboBoxMaxAniso;

		private SuperTabItem superTabItem3;

		private PathBoxControl pathBoxControlOutput;

		private ToolTip ToolTip;

		private SuperTabControlPanel superTabControlPanel4;

		private SuperTabItem superTabItem4;

		private CustomLayerLayoutControl customLayerLayoutControl1;

		private TextBox textBoxFixedTileWidth;

		private TextBox textBoxFixedTileHeight;

		private Label label5;

		private Label label9;

		private ComboBox comboBoxTargetDisk;

		private LabelX labelBuildProfileDescription;

		private Label label3;

		private PathBoxControl pathBoxControlSoupOutput;

		private CheckBox checkBoxNoRedirection;

		private Label label16;

		private CheckBox checkBoxHighQualityCoding;

		private Label label15;

		private CheckBox checkBoxNoUniformCoding;

		private CheckBox checkBoxPatching;

		private Label label8;

		private Label label6;

		private CheckBox checkBoxNoSharedMips;

		private Label label17;

		private ComboBox comboBoxPagingStrategy;

		private Label label18;

		private CheckBox checkBoxMipStripping;

		private Label label19;

		private Label label2;

		private Label label20;

		private TextBoxX textBoxPagesFolder;

		public ProjectProperties Properties { get; set; }

		public string ProjectPath { get; set; }

		public ProjectBuilder ProjectBuilder { get; set; }

		private ProjectPropertiesForm()
		{
			InitializeComponent();
		}

		public ProjectPropertiesForm(bool readOnly)
		{
			InitializeComponent();
			Properties = new ProjectProperties();
			superTabControl1.set_SelectedTabIndex(0);
			this.readOnly = readOnly;
			EnableControls(readOnly);
		}

		private void EnableControls(bool readOnly)
		{
			Control[] array = new Control[13]
			{
				textBoxProjectName,
				comboBoxProfiles,
				pathBoxControlOutput,
				pathBoxControlSoupOutput,
				(Control)(object)textBoxPagesFolder,
				comboBoxMaxAniso,
				comboBoxTargetDisk,
				comboBoxPageSize,
				comboBoxTileWidth,
				comboBoxTileHeight,
				comboBoxBlockSize,
				comboBoxPagingStrategy,
				customLayerLayoutControl1
			};
			for (int i = 0; i < array.Length; i++)
			{
				array[i].Enabled = !readOnly;
			}
		}

		private void LoadBuildProfiles()
		{
			//IL_00a0: Unknown result type (might be due to invalid IL or missing references)
			//IL_00ac: Unknown result type (might be due to invalid IL or missing references)
			List<BuildProfile> availableBuildProfiles = ProfileLoader.GetAvailableBuildProfiles();
			ComboBoxHelper.FillComboboxValues(comboBoxProfiles, availableBuildProfiles, (BuildProfile bp) => string.IsNullOrEmpty(bp.get_DisplayName()) ? "unnamed" : bp.get_DisplayName());
			string selected = ((Properties.BuildProfile.Length > 0) ? Properties.BuildProfile : "default");
			ComboBoxHelper.SelectComboBoxItem(comboBoxProfiles, (BuildProfile bp) => bp.get_Name().ToLowerInvariant().Equals(selected.ToLowerInvariant()));
			comboBoxProfiles.SelectedIndexChanged += comboBoxProfiles_SelectedIndexChanged;
			ProfileLoader.LoadBuildProfile(selected, ref activeBuildProfile);
			ProfileLoader.ActivateBuildProfile(activeBuildProfile);
			((Control)(object)labelBuildProfileDescription).Text = activeBuildProfile.get_Description();
		}

		private void LoadAdvancedCombos()
		{
			//IL_0081: Unknown result type (might be due to invalid IL or missing references)
			//IL_00a5: Unknown result type (might be due to invalid IL or missing references)
			//IL_0184: Unknown result type (might be due to invalid IL or missing references)
			//IL_018e: Expected O, but got Unknown
			//IL_01ae: Unknown result type (might be due to invalid IL or missing references)
			//IL_01b8: Expected O, but got Unknown
			//IL_01d8: Unknown result type (might be due to invalid IL or missing references)
			//IL_01e2: Expected O, but got Unknown
			//IL_0202: Unknown result type (might be due to invalid IL or missing references)
			//IL_020c: Expected O, but got Unknown
			LoadComboboxValues(comboBoxPageSize, DefaultPageSizes, DefaultPageSizeValue, Defaults.get_PageSize());
			LoadComboboxValues(comboBoxMaxAniso, DefaultMaxAnisoValues, DefaultMaxAnisoAutoValue, Defaults.get_Aniso());
			LoadComboboxValues(comboBoxTileWidth, DefaultTileSizes, DefaultTileSizesAutoValue, Defaults.get_TileWidth());
			LoadComboboxValues(comboBoxTileHeight, DefaultTileSizes, DefaultTileSizesAutoValue, Defaults.get_TileHeight());
			LoadComboboxEnumValues<TargetDisk>(comboBoxTargetDisk, (TargetDisk)0, Defaults.get_TargetDisk());
			LoadComboboxEnumValues(comboBoxPagingStrategy, activeBuildProfile.get_AvailablePagingStrategies(), (PagingStrategy)0, activeBuildProfile.get_DefaultPagingStrategyMapsTo());
			if (Constants.get_FixedTileSize().get_X() > 0 || Constants.get_FixedTileSize().get_Y() > 0)
			{
				comboBoxTileWidth.Visible = false;
				comboBoxTileHeight.Visible = false;
				textBoxFixedTileWidth.Text = Constants.get_FixedTileSize().get_X() + " (Determined by License)";
				textBoxFixedTileHeight.Text = Constants.get_FixedTileSize().get_Y() + " (Determined by License)";
				ReplaceControl(comboBoxTileWidth, textBoxFixedTileWidth);
				ReplaceControl(comboBoxTileHeight, textBoxFixedTileHeight);
				((SuperTooltip)ToolTip).SetSuperTooltip((IComponent)textBoxFixedTileWidth, new SuperTooltipInfo("", "", "TT_PROPERTIES_INDIE_TILEWIDTH", (Image)null, (Image)null, (eTooltipColor)17));
				((SuperTooltip)ToolTip).SetSuperTooltip((IComponent)textBoxFixedTileHeight, new SuperTooltipInfo("", "", "TT_PROPERTIES_INDIE_TILEHEIGHT", (Image)null, (Image)null, (eTooltipColor)17));
				((SuperTooltip)ToolTip).SetSuperTooltip((IComponent)comboBoxTileWidth, new SuperTooltipInfo("Test", "", "TT_PROPERTIES_INDIE_TILEWIDTH", (Image)null, (Image)null, (eTooltipColor)17));
				((SuperTooltip)ToolTip).SetSuperTooltip((IComponent)comboBoxTileHeight, new SuperTooltipInfo("Test", "", "TT_PROPERTIES_INDIE_TILEHEIGHT", (Image)null, (Image)null, (eTooltipColor)17));
			}
		}

		private bool IsCodingProfileChanged(LayerConfig config1, LayerConfig config2, out bool[] changes)
		{
			int num = Math.Min(config1.get_Layers().Count, config2.get_Layers().Count);
			changes = new bool[num];
			bool result = false;
			for (int i = 0; i < num; i++)
			{
				if (!config1.get_Layers()[i].get_CodingProfile().Equals(config2.get_Layers()[i].get_CodingProfile(), StringComparison.OrdinalIgnoreCase))
				{
					changes[i] = true;
					result = true;
				}
			}
			return result;
		}

		private bool IsDataTypeChanged(LayerConfig config1, LayerConfig config2, out bool[] changes)
		{
			int num = Math.Min(config1.get_Layers().Count, config2.get_Layers().Count);
			changes = new bool[num];
			bool result = false;
			for (int i = 0; i < num; i++)
			{
				if (config1.get_Layers()[i].get_DataType() != config2.get_Layers()[i].get_DataType())
				{
					changes[i] = true;
					result = true;
				}
			}
			return result;
		}

		private void LoadForm()
		{
			//IL_018c: Unknown result type (might be due to invalid IL or missing references)
			//IL_01a9: Unknown result type (might be due to invalid IL or missing references)
			Directory.SetCurrentDirectory(ProjectPath);
			LoadBuildProfiles();
			LoadAdvancedCombos();
			textBoxProjectName.Text = Properties.ProjectName;
			checkBoxNoUniformCoding.Checked = Properties.NoUniformCoding;
			checkBoxPatching.Checked = Properties.Patching;
			checkBoxHighQualityCoding.Checked = Properties.HighQualityCoding;
			checkBoxNoRedirection.Checked = Properties.NoRedirection;
			checkBoxNoSharedMips.Checked = Properties.NoSharedMipGeneration;
			checkBoxMipStripping.Checked = Properties.MipStripping;
			pathBoxControlOutput.Path = Path.GetFullPath(Properties.OutputFilename);
			pathBoxControlSoupOutput.Path = Path.GetFullPath(Properties.SoupOutputFolder);
			((Control)(object)textBoxPagesFolder).Text = Properties.PagesFolder;
			SelectComboboxValue(comboBoxPageSize, Properties.PageSize);
			SelectComboboxValue(comboBoxTileHeight, Properties.TileHeight);
			SelectComboboxValue(comboBoxTileWidth, Properties.TileWidth);
			SelectComboboxValue(comboBoxMaxAniso, Properties.MaxAnisotropy);
			SelectComboboxValue(comboBoxTargetDisk, Properties.TargetDisk);
			SelectComboboxValue(comboBoxPagingStrategy, Properties.PagingStrategy);
			customLayerLayoutControl1.InitializeForLayerConfig(Properties.LayerConfiguration, activeBuildProfile);
		}

		private void SaveForm()
		{
			//IL_018a: Unknown result type (might be due to invalid IL or missing references)
			//IL_0199: Unknown result type (might be due to invalid IL or missing references)
			//IL_01d9: Unknown result type (might be due to invalid IL or missing references)
			Properties.BuildProfile = ComboBoxHelper.GetSelectedValue<BuildProfile>(comboBoxProfiles).get_Name();
			Properties.NoUniformCoding = checkBoxNoUniformCoding.Checked;
			Properties.Patching = checkBoxPatching.Checked;
			Properties.NoRedirection = checkBoxNoRedirection.Checked;
			Properties.NoSharedMipGeneration = checkBoxNoSharedMips.Checked;
			Properties.MipStripping = checkBoxMipStripping.Checked;
			Properties.HighQualityCoding = checkBoxHighQualityCoding.Checked;
			Properties.OutputFilename = Paths.GetRelativePathForFile(ProjectPath, pathBoxControlOutput.Path);
			Properties.PagesFolder = CleanRelativePath(((Control)(object)textBoxPagesFolder).Text);
			Properties.SoupOutputFolder = Paths.GetRelativePathForDirectory(ProjectPath, pathBoxControlSoupOutput.Path);
			Properties.TileWidth = (uint)GetComboboxValue(comboBoxTileWidth, Defaults.get_TileWidth());
			Properties.TileHeight = (uint)GetComboboxValue(comboBoxTileHeight, Defaults.get_TileHeight());
			Properties.MaxAnisotropy = (uint)GetComboboxValue(comboBoxMaxAniso, Defaults.get_Aniso());
			Properties.TargetDisk = (TargetDisk)GetComboboxValue(comboBoxTargetDisk, Defaults.get_TargetDisk());
			Properties.PageSize = GetComboboxCustomValueUint(comboBoxPageSize, Defaults.get_PageSize());
			Properties.PagingStrategy = (PagingStrategy)GetComboboxValue(comboBoxPagingStrategy, (object)(PagingStrategy)0);
			customLayerLayoutControl1.ApplyLayerConfiguration();
			bool flag = false;
			if (IsCodingProfileChanged(Properties.LayerConfiguration, customLayerLayoutControl1.ProjectTemplate.get_LayerConfig(), out var changes))
			{
				for (int i = 0; i < changes.Length; i++)
				{
					if (changes[i] && ProjectBuilder.HasCustomQualityProfilesSet(i))
					{
						string text = "You have custom-set quality profiles for Stacked Textures and have changed the compression format. All quality profiles will be reverted for the layer to their defaults. Continue?";
						flag = MessageBox.Show((IWin32Window)this, text, "Compression Format changed", MessageBoxButtons.YesNo, MessageBoxIcon.Question) == DialogResult.No;
						break;
					}
				}
			}
			Properties.DataTypesChanged = IsDataTypeChanged(Properties.LayerConfiguration, customLayerLayoutControl1.ProjectTemplate.get_LayerConfig(), out var changes2);
			Properties.DataTypeLayerChanged = changes2;
			if (!flag)
			{
				Properties.LayerConfiguration = customLayerLayoutControl1.ProjectTemplate.get_LayerConfig();
			}
			Properties.CodingProfileChanged = !flag;
			Properties.CodingProfileLayerChanged = changes;
		}

		private void ProjectPropertiesForm_Load(object sender, EventArgs e)
		{
			LoadForm();
		}

		private void buttonAccept_Click(object sender, EventArgs e)
		{
			if (!readOnly)
			{
				SaveForm();
			}
		}

		private void comboBoxProfiles_SelectedIndexChanged(object sender, EventArgs e)
		{
			//IL_0036: Unknown result type (might be due to invalid IL or missing references)
			//IL_00da: Unknown result type (might be due to invalid IL or missing references)
			if (MessageBox.Show((IWin32Window)this, "Loading a Build Profile will result in custom set properties in the advanced tab being reset. Do you want to continue?", "", MessageBoxButtons.YesNo, MessageBoxIcon.Question) == DialogResult.Yes)
			{
				activeBuildProfile = ComboBoxHelper.GetSelectedValue<BuildProfile>(comboBoxProfiles);
				ProfileLoader.ActivateBuildProfile(activeBuildProfile);
				((Control)(object)labelBuildProfileDescription).Text = activeBuildProfile.get_Description();
				customLayerLayoutControl1.InitializeForLayerConfig(Properties.LayerConfiguration, activeBuildProfile);
				LoadAdvancedCombos();
				SelectComboboxValue(comboBoxPageSize, Defaults.get_PageSize());
				SelectComboboxValue(comboBoxMaxAniso, Defaults.get_Aniso());
				SelectComboboxValue(comboBoxTileHeight, Defaults.get_TileWidth());
				SelectComboboxValue(comboBoxTileWidth, Defaults.get_TileHeight());
				SelectComboboxValue(comboBoxTargetDisk, Defaults.get_TargetDisk());
				SelectComboboxValue(comboBoxPagingStrategy, (object)(PagingStrategy)0);
			}
		}

		private object GetComboboxValue(ComboBox box, object defaultValue)
		{
			if (box.SelectedItem != null)
			{
				return ((ComboBoxItem)box.SelectedItem).Tag;
			}
			return defaultValue;
		}

		private uint GetComboboxCustomValueUint(ComboBox box, uint defaultValue)
		{
			_ = box.DropDownStyle;
			try
			{
				return uint.Parse(box.Text);
			}
			catch
			{
				return defaultValue;
			}
		}

		private void SelectComboboxValue(ComboBox box, object value)
		{
			object obj = null;
			foreach (ComboBoxItem item in box.Items)
			{
				if (ObjEquals(item.Tag, value))
				{
					obj = item;
					break;
				}
			}
			if (obj != null)
			{
				box.SelectedItem = obj;
			}
			else if (box.DropDownStyle == ComboBoxStyle.DropDown)
			{
				ComboBoxItem comboBoxItem2 = new ComboBoxItem();
				comboBoxItem2.Tag = value;
				comboBoxItem2.Text = value.ToString();
				box.Items.Add(comboBoxItem2);
				box.SelectedItem = comboBoxItem2;
			}
		}

		private void LoadComboboxValues<T>(ComboBox combo, T[] values, T autoValue, T profileValue)
		{
			combo.Items.Clear();
			int num = -1;
			for (int i = 0; i < values.Length; i++)
			{
				ComboBoxItem comboBoxItem = new ComboBoxItem();
				comboBoxItem.Tag = values[i];
				comboBoxItem.Text = values[i].ToString();
				if (ObjEquals(values[i], autoValue))
				{
					if (ObjEquals(autoValue, profileValue))
					{
						comboBoxItem.Text += const_fromBuildSuffixBehindScenes;
					}
					else
					{
						comboBoxItem.Text += string.Format(const_fromBuildSuffix, profileValue.ToString());
					}
					num = i;
				}
				combo.Items.Add(comboBoxItem);
			}
			if (num != -1)
			{
				combo.SelectedIndex = num;
			}
		}

		private void LoadComboboxValues<T>(ComboBox combo, T[] values, T profileValue)
		{
			combo.Items.Clear();
			int num = -1;
			for (int i = 0; i < values.Length; i++)
			{
				ComboBoxItem comboBoxItem = new ComboBoxItem();
				comboBoxItem.Tag = values[i];
				comboBoxItem.Text = values[i].ToString();
				if (ObjEquals(values[i], profileValue))
				{
					comboBoxItem.Text += const_fromBuildSuffixBehindScenes;
					num = i;
				}
				combo.Items.Add(comboBoxItem);
			}
			if (num != -1)
			{
				combo.SelectedIndex = num;
			}
		}

		private void LoadComboboxEnumValues<T>(ComboBox combo, T autoValue, T profileValue)
		{
			LoadComboboxEnumValues(combo, null, autoValue, profileValue);
		}

		private void LoadComboboxEnumValues<T>(ComboBox combo, List<T> filter, T autoValue, T profileValue)
		{
			combo.Items.Clear();
			int num = -1;
			List<T> list = EnumToList<T>();
			for (int i = 0; i < list.Count; i++)
			{
				if (filter != null && !filter.Contains(list[i]))
				{
					continue;
				}
				ComboBoxItem comboBoxItem = new ComboBoxItem();
				comboBoxItem.Tag = list[i];
				comboBoxItem.Text = list[i].ToString();
				if (ObjEquals(list[i], autoValue))
				{
					if (ObjEquals(autoValue, profileValue))
					{
						comboBoxItem.Text += const_fromBuildSuffixBehindScenes;
					}
					else
					{
						comboBoxItem.Text += string.Format(const_fromBuildSuffix, profileValue.ToString());
					}
					num = i;
				}
				combo.Items.Add(comboBoxItem);
			}
			if (num != -1)
			{
				combo.SelectedIndex = num;
			}
		}

		private void ReplaceControl(Control replacee, Control replacer)
		{
			replacer.Location = replacee.Location;
			replacer.Size = replacee.Size;
			replacer.Visible = true;
			replacee.Visible = false;
		}

		private List<T> EnumToList<T>()
		{
			List<T> list = new List<T>();
			Array values = System.Enum.GetValues(typeof(T));
			for (int i = 0; i < values.Length; i++)
			{
				list.Add((T)values.GetValue(i));
			}
			return list;
		}

		private bool ObjEquals(object a, object b)
		{
			if (a is string && b is string)
			{
				return ((string)a).ToLower().Equals(((string)b).ToLower());
			}
			return a.Equals(b);
		}

		private bool CheckPagesFolder()
		{
			string text = ((Control)(object)textBoxPagesFolder).Text;
			if (string.IsNullOrEmpty(text))
			{
				return true;
			}
			if (!Paths.IsValidDirectory(text))
			{
				MessageBox.Show((IWin32Window)this, "The pages output path is not a valid path. Please make sure you select a path residing in the output folder of the output file.", "Error with Page Output Folder");
				return false;
			}
			if (Paths.IsAbsolutePath(text))
			{
				MessageBox.Show((IWin32Window)this, "The pages output path is not related to the output file path. Please make sure you select a path on the same drive as the output file path or enter a manually enter a relative path.", "Error with Page Output Folder");
				return false;
			}
			if (text.Contains(".."))
			{
				MessageBox.Show((IWin32Window)this, "The pages output lies outside the output file path. Please make sure you select a path residing in the output folder of the output file.", "Error with Page Output Folder");
				return false;
			}
			if (text.StartsWith(".\\") || text.StartsWith("./"))
			{
				MessageBox.Show((IWin32Window)this, "The pages output cannot start with a '.' or '..'. Please start the path with a directory name, e.g., 'subfolder\\gtp'.", "Error with Page Output Folder");
				return false;
			}
			return true;
		}

		private string CleanRelativePath(string relativePath)
		{
			if (relativePath.StartsWith(".\\") || relativePath.StartsWith("./"))
			{
				return relativePath.Substring(2);
			}
			return relativePath;
		}

		private void textBoxPagesFolder_Leave(object sender, EventArgs e)
		{
			CheckPagesFolder();
		}

		protected override void Dispose(bool disposing)
		{
			if (disposing && components != null)
			{
				components.Dispose();
			}
			((OfficeForm)this).Dispose(disposing);
		}

		private void InitializeComponent()
		{
			//IL_0023: Unknown result type (might be due to invalid IL or missing references)
			//IL_002d: Expected O, but got Unknown
			//IL_002e: Unknown result type (might be due to invalid IL or missing references)
			//IL_0038: Expected O, but got Unknown
			//IL_0039: Unknown result type (might be due to invalid IL or missing references)
			//IL_0043: Expected O, but got Unknown
			//IL_0070: Unknown result type (might be due to invalid IL or missing references)
			//IL_007a: Expected O, but got Unknown
			//IL_007b: Unknown result type (might be due to invalid IL or missing references)
			//IL_0085: Expected O, but got Unknown
			//IL_0162: Unknown result type (might be due to invalid IL or missing references)
			//IL_016c: Expected O, but got Unknown
			//IL_01d0: Unknown result type (might be due to invalid IL or missing references)
			//IL_01da: Expected O, but got Unknown
			//IL_01db: Unknown result type (might be due to invalid IL or missing references)
			//IL_01e5: Expected O, but got Unknown
			//IL_01e6: Unknown result type (might be due to invalid IL or missing references)
			//IL_01f0: Expected O, but got Unknown
			//IL_01f1: Unknown result type (might be due to invalid IL or missing references)
			//IL_01fb: Expected O, but got Unknown
			//IL_01fc: Unknown result type (might be due to invalid IL or missing references)
			//IL_0206: Expected O, but got Unknown
			//IL_0228: Unknown result type (might be due to invalid IL or missing references)
			//IL_0232: Expected O, but got Unknown
			//IL_044f: Unknown result type (might be due to invalid IL or missing references)
			//IL_0459: Expected O, but got Unknown
			//IL_08a0: Unknown result type (might be due to invalid IL or missing references)
			//IL_08aa: Expected O, but got Unknown
			//IL_09b3: Unknown result type (might be due to invalid IL or missing references)
			//IL_09bd: Expected O, but got Unknown
			//IL_0a55: Unknown result type (might be due to invalid IL or missing references)
			//IL_0a5f: Expected O, but got Unknown
			//IL_0e4b: Unknown result type (might be due to invalid IL or missing references)
			//IL_0e55: Expected O, but got Unknown
			//IL_1043: Unknown result type (might be due to invalid IL or missing references)
			//IL_104d: Expected O, but got Unknown
			//IL_1154: Unknown result type (might be due to invalid IL or missing references)
			//IL_115e: Expected O, but got Unknown
			//IL_1262: Unknown result type (might be due to invalid IL or missing references)
			//IL_126c: Expected O, but got Unknown
			//IL_136d: Unknown result type (might be due to invalid IL or missing references)
			//IL_1377: Expected O, but got Unknown
			//IL_13fd: Unknown result type (might be due to invalid IL or missing references)
			//IL_1407: Expected O, but got Unknown
			//IL_2219: Unknown result type (might be due to invalid IL or missing references)
			//IL_2223: Expected O, but got Unknown
			buttonAccept = new Button();
			buttonCancel = new Button();
			comboBoxProfiles = new ComboBox();
			superTabControl1 = new SuperTabControl();
			superTabControlPanel2 = new SuperTabControlPanel();
			textBoxPagesFolder = new TextBoxX();
			label3 = new Label();
			label20 = new Label();
			label2 = new Label();
			label1 = new Label();
			superTabItem2 = new SuperTabItem();
			superTabControlPanel3 = new SuperTabControlPanel();
			checkBoxMipStripping = new CheckBox();
			label19 = new Label();
			comboBoxPagingStrategy = new ComboBox();
			label18 = new Label();
			checkBoxNoSharedMips = new CheckBox();
			label17 = new Label();
			checkBoxNoRedirection = new CheckBox();
			label16 = new Label();
			checkBoxHighQualityCoding = new CheckBox();
			label15 = new Label();
			checkBoxNoUniformCoding = new CheckBox();
			checkBoxPatching = new CheckBox();
			label8 = new Label();
			label6 = new Label();
			comboBoxBlockSize = new ComboBox();
			label9 = new Label();
			comboBoxTargetDisk = new ComboBox();
			label5 = new Label();
			textBoxFixedTileHeight = new TextBox();
			textBoxFixedTileWidth = new TextBox();
			labelX1 = new LabelX();
			label14 = new Label();
			label13 = new Label();
			comboBoxTileHeight = new ComboBox();
			label12 = new Label();
			comboBoxTileWidth = new ComboBox();
			label11 = new Label();
			comboBoxPageSize = new ComboBox();
			label10 = new Label();
			comboBoxMaxAniso = new ComboBox();
			superTabItem3 = new SuperTabItem();
			superTabControlPanel4 = new SuperTabControlPanel();
			superTabItem4 = new SuperTabItem();
			superTabControlPanel1 = new SuperTabControlPanel();
			labelBuildProfileDescription = new LabelX();
			label4 = new Label();
			label7 = new Label();
			textBoxProjectName = new TextBox();
			superTabItem1 = new SuperTabItem();
			pathBoxControlSoupOutput = new PathBoxControl();
			pathBoxControlOutput = new PathBoxControl();
			customLayerLayoutControl1 = new CustomLayerLayoutControl();
			ToolTip = new ToolTip();
			((ISupportInitialize)superTabControl1).BeginInit();
			((Control)(object)superTabControl1).SuspendLayout();
			((Control)(object)superTabControlPanel2).SuspendLayout();
			((Control)(object)superTabControlPanel3).SuspendLayout();
			((Control)(object)superTabControlPanel4).SuspendLayout();
			((Control)(object)superTabControlPanel1).SuspendLayout();
			((Control)this).SuspendLayout();
			buttonAccept.Anchor = AnchorStyles.Bottom | AnchorStyles.Right;
			buttonAccept.DialogResult = DialogResult.OK;
			buttonAccept.Location = new Point(592, 308);
			buttonAccept.Name = "buttonAccept";
			buttonAccept.Size = new Size(75, 23);
			buttonAccept.TabIndex = 100;
			buttonAccept.Text = "Accept";
			buttonAccept.UseVisualStyleBackColor = true;
			buttonAccept.Click += buttonAccept_Click;
			buttonCancel.Anchor = AnchorStyles.Bottom | AnchorStyles.Right;
			buttonCancel.DialogResult = DialogResult.Cancel;
			buttonCancel.Location = new Point(673, 308);
			buttonCancel.Name = "buttonCancel";
			buttonCancel.Size = new Size(75, 23);
			buttonCancel.TabIndex = 110;
			buttonCancel.Text = "Cancel";
			buttonCancel.UseVisualStyleBackColor = true;
			comboBoxProfiles.DropDownStyle = ComboBoxStyle.DropDownList;
			comboBoxProfiles.FormattingEnabled = true;
			comboBoxProfiles.Location = new Point(148, 58);
			comboBoxProfiles.Name = "comboBoxProfiles";
			comboBoxProfiles.Size = new Size(268, 21);
			((SuperTooltip)ToolTip).SetSuperTooltip((IComponent)comboBoxProfiles, new SuperTooltipInfo("", "", "TT_BUILDPROFILE_COMBOBOX", (Image)null, (Image)null, (eTooltipColor)17));
			comboBoxProfiles.TabIndex = 42;
			((Control)(object)superTabControl1).Anchor = AnchorStyles.Top | AnchorStyles.Bottom | AnchorStyles.Left | AnchorStyles.Right;
			((Control)(object)superTabControl1).BackColor = System.Drawing.Color.FromArgb(239, 239, 242);
			((BaseItem)superTabControl1.get_ControlBox().get_CloseBox()).set_Name("");
			((BaseItem)superTabControl1.get_ControlBox().get_MenuBox()).set_Name("");
			((BaseItem)superTabControl1.get_ControlBox()).set_Name("");
			((BaseItem)superTabControl1.get_ControlBox()).get_SubItems().AddRange((BaseItem[])(object)new BaseItem[2]
			{
				(BaseItem)superTabControl1.get_ControlBox().get_MenuBox(),
				(BaseItem)superTabControl1.get_ControlBox().get_CloseBox()
			});
			((Control)(object)superTabControl1).Controls.Add((Control)(object)superTabControlPanel2);
			((Control)(object)superTabControl1).Controls.Add((Control)(object)superTabControlPanel1);
			((Control)(object)superTabControl1).Controls.Add((Control)(object)superTabControlPanel3);
			((Control)(object)superTabControl1).Controls.Add((Control)(object)superTabControlPanel4);
			((Control)(object)superTabControl1).ForeColor = System.Drawing.Color.Black;
			((Control)(object)superTabControl1).Location = new Point(12, 12);
			((Control)(object)superTabControl1).Name = "superTabControl1";
			superTabControl1.set_ReorderTabsEnabled(false);
			superTabControl1.set_SelectedTabFont(new Font("Microsoft Sans Serif", 8.25f));
			superTabControl1.set_SelectedTabIndex(0);
			((Control)(object)superTabControl1).Size = new Size(736, 279);
			superTabControl1.set_TabFont(new Font("Microsoft Sans Serif", 8.25f, FontStyle.Regular, GraphicsUnit.Point, 0));
			((Control)(object)superTabControl1).TabIndex = 45;
			superTabControl1.get_Tabs().AddRange((BaseItem[])(object)new BaseItem[4]
			{
				(BaseItem)superTabItem1,
				(BaseItem)superTabItem4,
				(BaseItem)superTabItem2,
				(BaseItem)superTabItem3
			});
			((Control)(object)superTabControl1).Text = "superTabControl1";
			((Control)(object)superTabControlPanel2).Controls.Add((Control)(object)textBoxPagesFolder);
			((Control)(object)superTabControlPanel2).Controls.Add(label3);
			((Control)(object)superTabControlPanel2).Controls.Add(label20);
			((Control)(object)superTabControlPanel2).Controls.Add(label2);
			((Control)(object)superTabControlPanel2).Controls.Add(label1);
			((Control)(object)superTabControlPanel2).Controls.Add(pathBoxControlSoupOutput);
			((Control)(object)superTabControlPanel2).Controls.Add(pathBoxControlOutput);
			((Control)(object)superTabControlPanel2).Dock = DockStyle.Fill;
			((Control)(object)superTabControlPanel2).Location = new Point(0, 25);
			((Control)(object)superTabControlPanel2).Name = "superTabControlPanel2";
			((Control)(object)superTabControlPanel2).Size = new Size(736, 254);
			((Control)(object)superTabControlPanel2).TabIndex = 2;
			superTabControlPanel2.set_TabItem(superTabItem2);
			textBoxPagesFolder.get_Border().set_Class("TextBoxBorder");
			textBoxPagesFolder.get_Border().set_CornerType((eCornerType)1);
			((Control)(object)textBoxPagesFolder).Location = new Point(148, 88);
			((Control)(object)textBoxPagesFolder).Name = "textBoxPagesFolder";
			textBoxPagesFolder.set_PreventEnterBeep(true);
			((Control)(object)textBoxPagesFolder).Size = new Size(273, 20);
			((Control)(object)textBoxPagesFolder).TabIndex = 53;
			((Control)(object)textBoxPagesFolder).Leave += textBoxPagesFolder_Leave;
			label3.AutoSize = true;
			label3.BackColor = System.Drawing.Color.Transparent;
			label3.Location = new Point(32, 62);
			label3.Name = "label3";
			label3.Size = new Size(101, 13);
			((SuperTooltip)ToolTip).SetSuperTooltip((IComponent)label3, new SuperTooltipInfo("", "", "TT_GTEXOUTPUTFOLDER_LABEL", (Image)null, (Image)null, (eTooltipColor)17));
			label3.TabIndex = 51;
			label3.Text = "GTEX output folder:";
			label20.BackColor = System.Drawing.Color.Transparent;
			label20.Location = new Point(433, 91);
			label20.Name = "label20";
			label20.Size = new Size(283, 76);
			label20.TabIndex = 41;
			label20.Text = "A relative path within the output file folder (default is empty), e.g., 'pagesfolder\\out\\'";
			label2.AutoSize = true;
			label2.BackColor = System.Drawing.Color.Transparent;
			label2.Location = new Point(32, 91);
			label2.Name = "label2";
			label2.Size = new Size(110, 13);
			((SuperTooltip)ToolTip).SetSuperTooltip((IComponent)label2, new SuperTooltipInfo("", "", "TT_PAGEFOLDER_LABEL", (Image)null, (Image)null, (eTooltipColor)17));
			label2.TabIndex = 41;
			label2.Text = "GTP pages subfolder:";
			label1.AutoSize = true;
			label1.BackColor = System.Drawing.Color.Transparent;
			label1.Location = new Point(32, 35);
			label1.Name = "label1";
			label1.Size = new Size(81, 13);
			((SuperTooltip)ToolTip).SetSuperTooltip((IComponent)label1, new SuperTooltipInfo("", "", "TT_OUTPUTFILE_LABEL", (Image)null, (Image)null, (eTooltipColor)17));
			label1.TabIndex = 38;
			label1.Text = "Output filename";
			superTabItem2.set_AttachedControl((Control)(object)superTabControlPanel2);
			((BaseItem)superTabItem2).set_GlobalItem(false);
			((BaseItem)superTabItem2).set_Name("superTabItem2");
			((BaseItem)superTabItem2).set_Text("Output");
			((Control)(object)superTabControlPanel3).Controls.Add(checkBoxMipStripping);
			((Control)(object)superTabControlPanel3).Controls.Add(label19);
			((Control)(object)superTabControlPanel3).Controls.Add(comboBoxPagingStrategy);
			((Control)(object)superTabControlPanel3).Controls.Add(label18);
			((Control)(object)superTabControlPanel3).Controls.Add(checkBoxNoSharedMips);
			((Control)(object)superTabControlPanel3).Controls.Add(label17);
			((Control)(object)superTabControlPanel3).Controls.Add(checkBoxNoRedirection);
			((Control)(object)superTabControlPanel3).Controls.Add(label16);
			((Control)(object)superTabControlPanel3).Controls.Add(checkBoxHighQualityCoding);
			((Control)(object)superTabControlPanel3).Controls.Add(label15);
			((Control)(object)superTabControlPanel3).Controls.Add(checkBoxNoUniformCoding);
			((Control)(object)superTabControlPanel3).Controls.Add(checkBoxPatching);
			((Control)(object)superTabControlPanel3).Controls.Add(label8);
			((Control)(object)superTabControlPanel3).Controls.Add(label6);
			((Control)(object)superTabControlPanel3).Controls.Add(comboBoxBlockSize);
			((Control)(object)superTabControlPanel3).Controls.Add(label9);
			((Control)(object)superTabControlPanel3).Controls.Add(comboBoxTargetDisk);
			((Control)(object)superTabControlPanel3).Controls.Add(label5);
			((Control)(object)superTabControlPanel3).Controls.Add(textBoxFixedTileHeight);
			((Control)(object)superTabControlPanel3).Controls.Add(textBoxFixedTileWidth);
			((Control)(object)superTabControlPanel3).Controls.Add((Control)(object)labelX1);
			((Control)(object)superTabControlPanel3).Controls.Add(label14);
			((Control)(object)superTabControlPanel3).Controls.Add(label13);
			((Control)(object)superTabControlPanel3).Controls.Add(comboBoxTileHeight);
			((Control)(object)superTabControlPanel3).Controls.Add(label12);
			((Control)(object)superTabControlPanel3).Controls.Add(comboBoxTileWidth);
			((Control)(object)superTabControlPanel3).Controls.Add(label11);
			((Control)(object)superTabControlPanel3).Controls.Add(comboBoxPageSize);
			((Control)(object)superTabControlPanel3).Controls.Add(label10);
			((Control)(object)superTabControlPanel3).Controls.Add(comboBoxMaxAniso);
			((Control)(object)superTabControlPanel3).Dock = DockStyle.Fill;
			((Control)(object)superTabControlPanel3).Location = new Point(0, 25);
			((Control)(object)superTabControlPanel3).Name = "superTabControlPanel3";
			((Control)(object)superTabControlPanel3).Size = new Size(736, 254);
			((Control)(object)superTabControlPanel3).TabIndex = 0;
			superTabControlPanel3.set_TabItem(superTabItem3);
			checkBoxMipStripping.AutoSize = true;
			checkBoxMipStripping.Location = new Point(609, 185);
			checkBoxMipStripping.Name = "checkBoxMipStripping";
			checkBoxMipStripping.Size = new Size(15, 14);
			((SuperTooltip)ToolTip).SetSuperTooltip((IComponent)checkBoxMipStripping, new SuperTooltipInfo("", "", "TT_PROPERTIES_MIPSTRIPPING", (Image)null, (Image)null, (eTooltipColor)17));
			checkBoxMipStripping.TabIndex = 89;
			checkBoxMipStripping.UseVisualStyleBackColor = true;
			label19.AutoSize = true;
			label19.BackColor = System.Drawing.Color.Transparent;
			label19.Location = new Point(474, 186);
			label19.Name = "label19";
			label19.Size = new Size(101, 13);
			label19.TabIndex = 88;
			label19.Text = "Enable mip stripping";
			comboBoxPagingStrategy.DropDownStyle = ComboBoxStyle.DropDownList;
			comboBoxPagingStrategy.FormattingEnabled = true;
			comboBoxPagingStrategy.Location = new Point(158, 189);
			comboBoxPagingStrategy.Name = "comboBoxPagingStrategy";
			comboBoxPagingStrategy.Size = new Size(255, 21);
			comboBoxPagingStrategy.TabIndex = 87;
			label18.AutoSize = true;
			label18.BackColor = System.Drawing.Color.Transparent;
			label18.Location = new Point(49, 192);
			label18.Name = "label18";
			label18.Size = new Size(83, 13);
			label18.TabIndex = 86;
			label18.Text = "Paging strategy:";
			checkBoxNoSharedMips.AutoSize = true;
			checkBoxNoSharedMips.Location = new Point(609, 160);
			checkBoxNoSharedMips.Name = "checkBoxNoSharedMips";
			checkBoxNoSharedMips.Size = new Size(15, 14);
			((SuperTooltip)ToolTip).SetSuperTooltip((IComponent)checkBoxNoSharedMips, new SuperTooltipInfo("", "", "TT_PROPERTIES_NOSHAREDMIPS", (Image)null, (Image)null, (eTooltipColor)17));
			checkBoxNoSharedMips.TabIndex = 85;
			checkBoxNoSharedMips.UseVisualStyleBackColor = true;
			label17.AutoSize = true;
			label17.BackColor = System.Drawing.Color.Transparent;
			label17.Location = new Point(474, 161);
			label17.Name = "label17";
			label17.Size = new Size(120, 13);
			label17.TabIndex = 84;
			label17.Text = "Disable shared mip gen.";
			checkBoxNoRedirection.AutoSize = true;
			checkBoxNoRedirection.Location = new Point(609, 134);
			checkBoxNoRedirection.Name = "checkBoxNoRedirection";
			checkBoxNoRedirection.Size = new Size(15, 14);
			((SuperTooltip)ToolTip).SetSuperTooltip((IComponent)checkBoxNoRedirection, new SuperTooltipInfo("", "", "TT_PROPERTIES_NOREDIRECTION", (Image)null, (Image)null, (eTooltipColor)17));
			checkBoxNoRedirection.TabIndex = 83;
			checkBoxNoRedirection.UseVisualStyleBackColor = true;
			label16.AutoSize = true;
			label16.BackColor = System.Drawing.Color.Transparent;
			label16.Location = new Point(474, 135);
			label16.Name = "label16";
			label16.Size = new Size(110, 13);
			label16.TabIndex = 82;
			label16.Text = "Disable tile redirection";
			checkBoxHighQualityCoding.AutoSize = true;
			checkBoxHighQualityCoding.Location = new Point(609, 82);
			checkBoxHighQualityCoding.Name = "checkBoxHighQualityCoding";
			checkBoxHighQualityCoding.Size = new Size(15, 14);
			((SuperTooltip)ToolTip).SetSuperTooltip((IComponent)checkBoxHighQualityCoding, new SuperTooltipInfo("", "", "TT_PROPERTIES_HIGHQUALCODING", (Image)null, (Image)null, (eTooltipColor)17));
			checkBoxHighQualityCoding.TabIndex = 81;
			checkBoxHighQualityCoding.UseVisualStyleBackColor = true;
			label15.AutoSize = true;
			label15.BackColor = System.Drawing.Color.Transparent;
			label15.Location = new Point(474, 83);
			label15.Name = "label15";
			label15.Size = new Size(97, 13);
			label15.TabIndex = 80;
			label15.Text = "High quality coding";
			checkBoxNoUniformCoding.AutoSize = true;
			checkBoxNoUniformCoding.Location = new Point(609, 108);
			checkBoxNoUniformCoding.Name = "checkBoxNoUniformCoding";
			checkBoxNoUniformCoding.Size = new Size(15, 14);
			((SuperTooltip)ToolTip).SetSuperTooltip((IComponent)checkBoxNoUniformCoding, new SuperTooltipInfo("", "", "TT_UNIFORMCODING_CHECKBOX", (Image)null, (Image)null, (eTooltipColor)17));
			checkBoxNoUniformCoding.TabIndex = 79;
			checkBoxNoUniformCoding.UseVisualStyleBackColor = true;
			checkBoxPatching.AutoSize = true;
			checkBoxPatching.Location = new Point(609, 56);
			checkBoxPatching.Name = "checkBoxPatching";
			checkBoxPatching.Size = new Size(15, 14);
			((SuperTooltip)ToolTip).SetSuperTooltip((IComponent)checkBoxPatching, new SuperTooltipInfo("", "", "TT_PROPERTIES_PATCHING", (Image)null, (Image)null, (eTooltipColor)17));
			checkBoxPatching.TabIndex = 78;
			checkBoxPatching.UseVisualStyleBackColor = true;
			label8.AutoSize = true;
			label8.BackColor = System.Drawing.Color.Transparent;
			label8.Location = new Point(474, 109);
			label8.Name = "label8";
			label8.Size = new Size(114, 13);
			label8.TabIndex = 77;
			label8.Text = "Disable uniform coding";
			label6.AutoSize = true;
			label6.BackColor = System.Drawing.Color.Transparent;
			label6.Location = new Point(474, 57);
			label6.Name = "label6";
			label6.Size = new Size(109, 13);
			label6.TabIndex = 76;
			label6.Text = "Fast incremental build";
			comboBoxBlockSize.FormattingEnabled = true;
			comboBoxBlockSize.Location = new Point(158, 217);
			comboBoxBlockSize.Name = "comboBoxBlockSize";
			comboBoxBlockSize.Size = new Size(255, 21);
			comboBoxBlockSize.TabIndex = 67;
			comboBoxBlockSize.Visible = false;
			label9.AutoSize = true;
			label9.BackColor = System.Drawing.Color.Transparent;
			label9.Location = new Point(49, 83);
			label9.Name = "label9";
			label9.Size = new Size(65, 13);
			label9.TabIndex = 75;
			label9.Text = "Target Disk:";
			comboBoxTargetDisk.DropDownStyle = ComboBoxStyle.DropDownList;
			comboBoxTargetDisk.FormattingEnabled = true;
			comboBoxTargetDisk.Location = new Point(158, 80);
			comboBoxTargetDisk.Name = "comboBoxTargetDisk";
			comboBoxTargetDisk.Size = new Size(255, 21);
			comboBoxTargetDisk.TabIndex = 74;
			label5.AutoSize = true;
			label5.Location = new Point(440, 199);
			label5.Name = "label5";
			label5.Size = new Size(213, 13);
			label5.TabIndex = 73;
			label5.Text = "The controls below are organized at runtime";
			label5.Visible = false;
			textBoxFixedTileHeight.Location = new Point(459, 240);
			textBoxFixedTileHeight.Name = "textBoxFixedTileHeight";
			textBoxFixedTileHeight.ReadOnly = true;
			textBoxFixedTileHeight.Size = new Size(145, 20);
			textBoxFixedTileHeight.TabIndex = 72;
			textBoxFixedTileHeight.Visible = false;
			textBoxFixedTileWidth.Location = new Point(459, 219);
			textBoxFixedTileWidth.Name = "textBoxFixedTileWidth";
			textBoxFixedTileWidth.ReadOnly = true;
			textBoxFixedTileWidth.Size = new Size(145, 20);
			textBoxFixedTileWidth.TabIndex = 71;
			textBoxFixedTileWidth.Visible = false;
			((Control)(object)labelX1).BackColor = System.Drawing.Color.Transparent;
			((BaseItemControl)labelX1).get_BackgroundStyle().set_CornerType((eCornerType)1);
			labelX1.set_Image((Image)Resources.warning);
			((Control)(object)labelX1).Location = new Point(41, 12);
			((Control)(object)labelX1).Name = "labelX1";
			((Control)(object)labelX1).Size = new Size(497, 23);
			((Control)(object)labelX1).TabIndex = 69;
			((Control)(object)labelX1).Text = "Warning: Advanced properties, please read the documentation before making any changes here.";
			label14.AutoSize = true;
			label14.BackColor = System.Drawing.Color.Transparent;
			label14.Location = new Point(49, 220);
			label14.Name = "label14";
			label14.Size = new Size(57, 13);
			label14.TabIndex = 68;
			label14.Text = "Block Size";
			label14.Visible = false;
			label13.AutoSize = true;
			label13.BackColor = System.Drawing.Color.Transparent;
			label13.Location = new Point(49, 164);
			label13.Name = "label13";
			label13.Size = new Size(58, 13);
			label13.TabIndex = 66;
			label13.Text = "Tile Height";
			comboBoxTileHeight.DropDownStyle = ComboBoxStyle.DropDownList;
			comboBoxTileHeight.FormattingEnabled = true;
			comboBoxTileHeight.Location = new Point(158, 161);
			comboBoxTileHeight.Name = "comboBoxTileHeight";
			comboBoxTileHeight.Size = new Size(255, 21);
			comboBoxTileHeight.TabIndex = 65;
			label12.AutoSize = true;
			label12.BackColor = System.Drawing.Color.Transparent;
			label12.Location = new Point(49, 137);
			label12.Name = "label12";
			label12.Size = new Size(55, 13);
			label12.TabIndex = 64;
			label12.Text = "Tile Width";
			comboBoxTileWidth.DropDownStyle = ComboBoxStyle.DropDownList;
			comboBoxTileWidth.FormattingEnabled = true;
			comboBoxTileWidth.Location = new Point(158, 134);
			comboBoxTileWidth.Name = "comboBoxTileWidth";
			comboBoxTileWidth.Size = new Size(255, 21);
			comboBoxTileWidth.TabIndex = 63;
			label11.AutoSize = true;
			label11.BackColor = System.Drawing.Color.Transparent;
			label11.Location = new Point(49, 110);
			label11.Name = "label11";
			label11.Size = new Size(55, 13);
			label11.TabIndex = 62;
			label11.Text = "Page Size";
			comboBoxPageSize.FormattingEnabled = true;
			comboBoxPageSize.Location = new Point(158, 107);
			comboBoxPageSize.Name = "comboBoxPageSize";
			comboBoxPageSize.Size = new Size(255, 21);
			comboBoxPageSize.TabIndex = 61;
			label10.AutoSize = true;
			label10.BackColor = System.Drawing.Color.Transparent;
			label10.Location = new Point(49, 56);
			label10.Name = "label10";
			label10.Size = new Size(106, 13);
			label10.TabIndex = 60;
			label10.Text = "Maximum Anisotropy:";
			comboBoxMaxAniso.DropDownStyle = ComboBoxStyle.DropDownList;
			comboBoxMaxAniso.Location = new Point(158, 53);
			comboBoxMaxAniso.Name = "comboBoxMaxAniso";
			comboBoxMaxAniso.Size = new Size(255, 21);
			comboBoxMaxAniso.TabIndex = 59;
			superTabItem3.set_AttachedControl((Control)(object)superTabControlPanel3);
			((BaseItem)superTabItem3).set_GlobalItem(false);
			((BaseItem)superTabItem3).set_Name("superTabItem3");
			((BaseItem)superTabItem3).set_Text("Advanced");
			((Control)(object)superTabControlPanel4).Controls.Add(customLayerLayoutControl1);
			((Control)(object)superTabControlPanel4).Dock = DockStyle.Fill;
			((Control)(object)superTabControlPanel4).Location = new Point(0, 25);
			((Control)(object)superTabControlPanel4).Name = "superTabControlPanel4";
			((Control)(object)superTabControlPanel4).Size = new Size(736, 254);
			((Control)(object)superTabControlPanel4).TabIndex = 0;
			superTabControlPanel4.set_TabItem(superTabItem4);
			superTabItem4.set_AttachedControl((Control)(object)superTabControlPanel4);
			((BaseItem)superTabItem4).set_GlobalItem(false);
			((BaseItem)superTabItem4).set_Name("superTabItem4");
			((BaseItem)superTabItem4).set_Text("Layer Configuration");
			((Control)(object)superTabControlPanel1).Controls.Add((Control)(object)labelBuildProfileDescription);
			((Control)(object)superTabControlPanel1).Controls.Add(label4);
			((Control)(object)superTabControlPanel1).Controls.Add(comboBoxProfiles);
			((Control)(object)superTabControlPanel1).Controls.Add(label7);
			((Control)(object)superTabControlPanel1).Controls.Add(textBoxProjectName);
			((Control)(object)superTabControlPanel1).Dock = DockStyle.Fill;
			((Control)(object)superTabControlPanel1).Location = new Point(0, 25);
			((Control)(object)superTabControlPanel1).Name = "superTabControlPanel1";
			((Control)(object)superTabControlPanel1).Size = new Size(736, 254);
			((Control)(object)superTabControlPanel1).TabIndex = 1;
			superTabControlPanel1.set_TabItem(superTabItem1);
			((Control)(object)labelBuildProfileDescription).BackColor = System.Drawing.Color.Transparent;
			((BaseItemControl)labelBuildProfileDescription).get_BackgroundStyle().set_CornerType((eCornerType)1);
			((Control)(object)labelBuildProfileDescription).Location = new Point(148, 94);
			((Control)(object)labelBuildProfileDescription).Name = "labelBuildProfileDescription";
			((Control)(object)labelBuildProfileDescription).Size = new Size(268, 124);
			((BaseItemControl)labelBuildProfileDescription).set_Style((eDotNetBarStyle)9);
			((Control)(object)labelBuildProfileDescription).TabIndex = 44;
			((Control)(object)labelBuildProfileDescription).Text = "DirectX 9 Build Profile is Active\r\n\r\nProfile allows the use of \r\n- BC1\r\n- BC3\r\n- Quarz";
			labelBuildProfileDescription.set_TextLineAlignment(StringAlignment.Near);
			labelBuildProfileDescription.set_WordWrap(true);
			label4.AutoSize = true;
			label4.BackColor = System.Drawing.Color.Transparent;
			label4.Location = new Point(34, 63);
			label4.Name = "label4";
			label4.Size = new Size(62, 13);
			label4.TabIndex = 43;
			label4.Text = "Build Profile";
			label7.AutoSize = true;
			label7.BackColor = System.Drawing.Color.Transparent;
			label7.Location = new Point(34, 35);
			label7.Name = "label7";
			label7.Size = new Size(71, 13);
			label7.TabIndex = 39;
			label7.Text = "Project Name";
			textBoxProjectName.Location = new Point(148, 32);
			textBoxProjectName.Name = "textBoxProjectName";
			textBoxProjectName.ReadOnly = true;
			textBoxProjectName.Size = new Size(268, 20);
			textBoxProjectName.TabIndex = 38;
			superTabItem1.set_AttachedControl((Control)(object)superTabControlPanel1);
			((BaseItem)superTabItem1).set_GlobalItem(false);
			((BaseItem)superTabItem1).set_Name("superTabItem1");
			((BaseItem)superTabItem1).set_Text("Project");
			pathBoxControlSoupOutput.LoadSave = PathBoxControl.PathBoxLoadSave.Save;
			pathBoxControlSoupOutput.Location = new Point(148, 59);
			pathBoxControlSoupOutput.Margin = new Padding(0);
			pathBoxControlSoupOutput.Name = "pathBoxControlSoupOutput";
			pathBoxControlSoupOutput.Path = null;
			pathBoxControlSoupOutput.PathType = PathBoxControl.PathBoxPathType.Folder;
			pathBoxControlSoupOutput.Size = new Size(273, 20);
			pathBoxControlSoupOutput.TabIndex = 52;
			pathBoxControlOutput.LoadSave = PathBoxControl.PathBoxLoadSave.Save;
			pathBoxControlOutput.Location = new Point(148, 32);
			pathBoxControlOutput.Margin = new Padding(0);
			pathBoxControlOutput.Name = "pathBoxControlOutput";
			pathBoxControlOutput.Path = null;
			pathBoxControlOutput.PathType = PathBoxControl.PathBoxPathType.File;
			pathBoxControlOutput.Size = new Size(273, 20);
			pathBoxControlOutput.TabIndex = 47;
			customLayerLayoutControl1.ActiveBuildProfile = null;
			customLayerLayoutControl1.BackColor = System.Drawing.Color.Transparent;
			customLayerLayoutControl1.Dock = DockStyle.Fill;
			customLayerLayoutControl1.Location = new Point(0, 0);
			customLayerLayoutControl1.Name = "customLayerLayoutControl1";
			customLayerLayoutControl1.Padding = new Padding(10);
			customLayerLayoutControl1.Size = new Size(736, 254);
			customLayerLayoutControl1.TabIndex = 0;
			((SuperTooltip)ToolTip).set_DefaultTooltipSettings(new SuperTooltipInfo("", "", "Enter your resource Tag here", (Image)null, (Image)null, (eTooltipColor)17));
			((SuperTooltip)ToolTip).set_LicenseKey("F962CEC7-CD8F-4911-A9E9-CAB39962FC1F");
			((Form)this).AcceptButton = buttonAccept;
			((Form)this).CancelButton = buttonCancel;
			((Form)this).ClientSize = new Size(760, 343);
			((Control)this).Controls.Add((Control)(object)superTabControl1);
			((Control)this).Controls.Add(buttonCancel);
			((Control)this).Controls.Add(buttonAccept);
			((Control)(object)this).DoubleBuffered = true;
			((Form)this).FormBorderStyle = FormBorderStyle.FixedDialog;
			((Form)this).MaximizeBox = false;
			((Form)this).MinimizeBox = false;
			((Control)this).Name = "ProjectPropertiesForm";
			((Form)this).ShowInTaskbar = false;
			((Form)this).StartPosition = FormStartPosition.CenterParent;
			((Control)(object)this).Text = "ProjectProperties";
			((Form)this).Load += ProjectPropertiesForm_Load;
			((ISupportInitialize)superTabControl1).EndInit();
			((Control)(object)superTabControl1).ResumeLayout(performLayout: false);
			((Control)(object)superTabControlPanel2).ResumeLayout(performLayout: false);
			((Control)(object)superTabControlPanel2).PerformLayout();
			((Control)(object)superTabControlPanel3).ResumeLayout(performLayout: false);
			((Control)(object)superTabControlPanel3).PerformLayout();
			((Control)(object)superTabControlPanel4).ResumeLayout(performLayout: false);
			((Control)(object)superTabControlPanel1).ResumeLayout(performLayout: false);
			((Control)(object)superTabControlPanel1).PerformLayout();
			((Control)this).ResumeLayout(performLayout: false);
		}
	}
	public class ProjectSettings
	{
		private static int versionNumber = 2;

		private ProjectBuilder builder;

		private string lastSingleAssetImportLocation;

		private string lastScriptImportLocation;

		private string lastScriptExportLocation;

		private BatchInfo[] batchImportInfo;

		public string SingleAssetImportLocation
		{
			get
			{
				if (lastSingleAssetImportLocation == null || !Directory.Exists(lastSingleAssetImportLocation))
				{
					lastSingleAssetImportLocation = Environment.GetFolderPath(Environment.SpecialFolder.Personal);
				}
				return lastSingleAssetImportLocation;
			}
			set
			{
				if (value != null && Directory.Exists(value))
				{
					lastSingleAssetImportLocation = Path.GetFullPath(value);
				}
			}
		}

		public string ImportScriptLocation
		{
			get
			{
				if (lastScriptImportLocation == null || !Directory.Exists(lastScriptImportLocation))
				{
					lastScriptImportLocation = Environment.GetFolderPath(Environment.SpecialFolder.Personal);
				}
				return lastScriptImportLocation;
			}
			set
			{
				if (value != null && Directory.Exists(value))
				{
					lastScriptImportLocation = Path.GetFullPath(value);
				}
			}
		}

		public string ExportScriptLocation
		{
			get
			{
				if (lastScriptExportLocation == null || !Directory.Exists(lastScriptExportLocation))
				{
					lastScriptExportLocation = Environment.GetFolderPath(Environment.SpecialFolder.Personal);
				}
				return lastScriptExportLocation;
			}
			set
			{
				if (value != null && Directory.Exists(value))
				{
					lastScriptExportLocation = Path.GetFullPath(value);
				}
			}
		}

		public BatchInfo GetBatchInfo(int layerIdx)
		{
			if (layerIdx >= 0 && layerIdx < Constants.get_MaxLayers())
			{
				BatchInfo batchInfo = batchImportInfo[layerIdx];
				if (batchInfo != null)
				{
					return batchInfo;
				}
			}
			return new BatchInfo();
		}

		public void SetBatchInfo(int layerIdx, BatchInfo value)
		{
			if (layerIdx >= 0 && layerIdx < Constants.get_MaxLayers() && value != null)
			{
				batchImportInfo[layerIdx] = value;
			}
		}

		private void Reset()
		{
			lastSingleAssetImportLocation = null;
			lastScriptImportLocation = null;
			lastScriptExportLocation = null;
			if (batchImportInfo != null)
			{
				for (int i = 0; i < Constants.get_MaxLayers(); i++)
				{
					batchImportInfo[i] = null;
				}
			}
		}

		public ProjectSettings(ProjectBuilder projectBuilder)
		{
			builder = projectBuilder;
			batchImportInfo = new BatchInfo[Constants.get_MaxLayers()];
			Reset();
		}

		public void Save()
		{
			try
			{
				string fullPath = Path.GetFullPath(Path.Combine(builder.GetProjectPath(), Constants.get_StateDirName()));
				if (!Directory.Exists(fullPath))
				{
					Directory.CreateDirectory(fullPath);
				}
				string filename = Path.Combine(fullPath, Constants.ProjectSettingFile);
				XmlDocument xmlDocument = new XmlDocument();
				xmlDocument.AppendChild(xmlDocument.CreateXmlDeclaration("1.0", "UTF-8", null));
				XmlElement xmlElement = xmlDocument.CreateElement("Project");
				xmlElement.SetAttribute("Guid", builder.get_ActiveProject().get_Id().ToString());
				xmlElement.SetAttribute("SettingsVersion", versionNumber.ToString());
				XmlNode xmlNode = xmlDocument.CreateElement("SingleImportAsset");
				xmlNode.InnerText = SingleAssetImportLocation;
				xmlElement.AppendChild(xmlNode);
				XmlNode xmlNode2 = xmlDocument.CreateElement("ImportDialog");
				xmlNode2.InnerText = ImportScriptLocation;
				xmlElement.AppendChild(xmlNode2);
				XmlNode xmlNode3 = xmlDocument.CreateElement("ExportDialog");
				xmlNode3.InnerText = ExportScriptLocation;
				xmlElement.AppendChild(xmlNode3);
				BatchInfo[] array = batchImportInfo;
				for (int i = 0; i < array.Length; i++)
				{
					array[i]?.Save(xmlDocument, xmlElement);
				}
				xmlDocument.AppendChild(xmlElement);
				xmlDocument.Save(filename);
			}
			catch
			{
			}
		}

		public void Load()
		{
			if (builder == null)
			{
				return;
			}
			string fullPath = Path.GetFullPath(Path.Combine(builder.GetProjectPath(), Constants.get_StateDirName()));
			if (!Directory.Exists(fullPath))
			{
				return;
			}
			string text = Path.Combine(fullPath, Constants.ProjectSettingFile);
			if (!File.Exists(text))
			{
				return;
			}
			try
			{
				ConfigXmlDocument configXmlDocument = new ConfigXmlDocument();
				configXmlDocument.Load(text);
				int num = -1;
				Guid guid = Guid.Empty;
				XmlNode xmlNode = configXmlDocument.SelectSingleNode("/Project");
				if (xmlNode != null && xmlNode.Attributes["Guid"] != null)
				{
					guid = XMLParsingTools.ParseGuidAttribute("Guid", xmlNode);
				}
				if (xmlNode != null && xmlNode.Attributes["SettingsVersion"] != null)
				{
					num = Convert.ToInt32(xmlNode.Attributes["SettingsVersion"].Value);
				}
				if (guid == Guid.Empty || builder.get_ActiveProject().get_Id() != guid)
				{
					throw new Exception();
				}
				if (num < 0)
				{
					throw new Exception();
				}
				if (num < 2)
				{
					XmlNodeList xmlNodeList = xmlNode.SelectNodes("LayerDialogLocation");
					if (xmlNodeList.Count < 1)
					{
						throw new Exception();
					}
					SingleAssetImportLocation = xmlNodeList[0].InnerText;
				}
				else
				{
					XmlNode xmlNode2 = xmlNode.SelectSingleNode("SingleImportAsset");
					if (xmlNode2 != null)
					{
						SingleAssetImportLocation = xmlNode2.InnerText;
					}
				}
				XmlNode xmlNode3 = xmlNode.SelectSingleNode("ImportDialog");
				if (xmlNode3 != null)
				{
					ImportScriptLocation = xmlNode3.InnerText;
				}
				XmlNode xmlNode4 = xmlNode.SelectSingleNode("ExportDialog");
				if (xmlNode4 != null)
				{
					ExportScriptLocation = xmlNode4.InnerText;
				}
				XmlNodeList xmlNodeList2 = xmlNode.SelectNodes(BatchInfo.NodeName);
				if (xmlNodeList2.Count != builder.get_ActiveProject().get_LayerConfiguration().get_Layers()
					.Count)
				{
					throw new Exception();
				}
				for (int i = 0; i < Math.Min(Constants.get_MaxLayers(), xmlNodeList2.Count); i++)
				{
					batchImportInfo[i] = BatchInfo.Load(xmlNodeList2[i]);
				}
			}
			catch
			{
				Reset();
			}
		}
	}
	public class ProjectTree : UserControl
	{
		public enum AssetNodeType
		{
			AssetGroup,
			Asset,
			Layer,
			Texture
		}

		public class NodeContext
		{
			public AssetNodeType Type { get; set; }

			public Asset Asset { get; set; }

			public int Layer { get; set; }

			public Texture Texture { get; set; }

			public NodeContext(AssetNodeType type, Asset asset, int layer, Texture texture)
			{
				Type = type;
				Asset = asset;
				Layer = layer;
				Texture = texture;
			}
		}

		public delegate void TreeSelectedEventHandler(object sender);

		public delegate void AssetNodeDoubleClickedEventHandler(object sender, NodeContext context);

		public delegate void AssetNodeClickedEventHandler(object sender, NodeContext context);

		public delegate void AssetNodeRightClickedEventHandler(object sender, List<NodeContext> contexts, Point location);

		public delegate void AssetNodeDeletePressed(object sender, List<NodeContext> contexts);

		public class RenameAsset
		{
			public Guid assetId = Guid.Empty;

			public string newName;
		}

		public delegate bool AssetNodeRenamePressed(object sender, RenameAsset renameAsset);

		public delegate void AssetMoveRequestHandler(object sender, Guid srcProjectId, List<Asset> assets, Guid destProjectId, bool keepCopy);

		public delegate void SelectionChangedHandler(object sender);

		private bool allowDragDrop;

		private bool isDeleting;

		private IContainer components;

		private AdvTree advTree1;

		private ColumnHeader columnHeader3;

		private ColumnHeader columnHeader4;

		private Node node1;

		private Node node2;

		private Node node5;

		private Node node6;

		private Node node9;

		private Node node10;

		private Node node35;

		private Cell cell4;

		private Node node36;

		private Node node37;

		private Node node38;

		private Node node39;

		private Node node41;

		private Node node42;

		private NodeConnector nodeConnector4;

		private ElementStyle elementStyle2;

		private ImageList imageList1;

		private ToolTip ToolTip;

		private Node node3;

		private Node node4;

		public ProjectBuilder ProjectBuilder { get; set; }

		public List<NodeContext> SelectedAssets
		{
			get
			{
				//IL_0021: Unknown result type (might be due to invalid IL or missing references)
				//IL_0027: Expected O, but got Unknown
				List<NodeContext> list = new List<NodeContext>();
				foreach (Node item2 in (CollectionBase)(object)advTree1.get_SelectedNodes())
				{
					Node val = item2;
					NodeContext item = (NodeContext)val.get_Tag();
					list.Add(item);
				}
				return list;
			}
		}

		public bool HasSelectedAssets => ((CollectionBase)(object)advTree1.get_SelectedNodes()).Count > 0;

		public NodeContext SelectedAsset { get; private set; }

		public bool AllowDragDrop
		{
			get
			{
				return allowDragDrop;
			}
			set
			{
				allowDragDrop = value;
				advTree1.set_AllowExternalDrop(true);
				((Control)(object)advTree1).AllowDrop = true;
				advTree1.set_DragDropEnabled(true);
				advTree1.set_DragDropNodeCopyEnabled(true);
			}
		}

		private Project Project { get; set; }

		public event TreeSelectedEventHandler TreeSelected;

		public event AssetNodeDoubleClickedEventHandler AssetNodeDoubleClicked;

		public event AssetNodeClickedEventHandler AssetNodeClicked;

		public event AssetNodeRightClickedEventHandler AssetNodeRightClicked;

		public event AssetNodeDeletePressed AssetNodeDelete;

		public event AssetNodeRenamePressed AssetNodeRenamed;

		public event AssetMoveRequestHandler AssetMoveRequest;

		public event SelectionChangedHandler SelectionChanged;

		protected virtual void OnTreeSelected()
		{
			this.TreeSelected?.Invoke(this);
		}

		protected virtual void OnAssetNodeDoubleClicked(NodeContext context)
		{
			this.AssetNodeDoubleClicked?.Invoke(this, context);
		}

		protected virtual void OnAssetNodeClicked(NodeContext context)
		{
			this.AssetNodeClicked?.Invoke(this, context);
		}

		protected virtual void OnAssetNodeRightClicked(List<NodeContext> contexts, Point location)
		{
			AssetNodeRightClickedEventHandler assetNodeRightClicked = this.AssetNodeRightClicked;
			if (assetNodeRightClicked != null && contexts.Count > 0 && (contexts[0].Type == AssetNodeType.Asset || contexts[0].Type == AssetNodeType.AssetGroup))
			{
				assetNodeRightClicked(this, contexts, location);
			}
		}

		protected virtual void OnAssetDelete(List<NodeContext> contexts)
		{
			AssetNodeDeletePressed assetNodeDelete = this.AssetNodeDelete;
			if (assetNodeDelete != null && contexts.Count > 0 && (contexts[0].Type == AssetNodeType.Asset || contexts[0].Type == AssetNodeType.AssetGroup))
			{
				assetNodeDelete(this, contexts);
			}
		}

		protected virtual bool OnAssetRenamed(RenameAsset renameAsset)
		{
			return this.AssetNodeRenamed?.Invoke(this, renameAsset) ?? false;
		}

		private void OnAssetMoveRequest(object sender, Guid srcProjectId, List<Asset> assets, Guid destProjectId, bool keepCopy)
		{
			if (this.AssetMoveRequest != null)
			{
				this.AssetMoveRequest(this, srcProjectId, assets, destProjectId, keepCopy);
			}
		}

		private void OnSelectionChanged(object sender)
		{
			if (this.SelectionChanged != null)
			{
				this.SelectionChanged(this);
			}
		}

		public ProjectTree()
		{
			//IL_001c: Unknown result type (might be due to invalid IL or missing references)
			//IL_0026: Expected O, but got Unknown
			//IL_004c: Unknown result type (might be due to invalid IL or missing references)
			//IL_0056: Expected O, but got Unknown
			//IL_007c: Unknown result type (might be due to invalid IL or missing references)
			//IL_0086: Expected O, but got Unknown
			//IL_0094: Unknown result type (might be due to invalid IL or missing references)
			//IL_009e: Expected O, but got Unknown
			InitializeComponent();
			advTree1.add_NodeClick(new TreeNodeMouseEventHandler(advTree1_MouseClick));
			advTree1.add_SelectionChanged((EventHandler)advTree1_SelectionChanged);
			advTree1.add_AfterCellEditComplete(new CellEditEventHandler(AdvTree1_AfterCellEdit));
			((Control)(object)advTree1).MouseWheel += advTree1_MouseWheel;
			advTree1.add_NodeDragFeedback(new TreeDragFeedbackEventHander(advTree1_NodeDragFeedback));
			advTree1.add_BeforeNodeDrop(new TreeDragDropEventHandler(advTree1_BeforeNodeDrop));
		}

		private void advTree1_MouseWheel(object sender, MouseEventArgs e)
		{
			if (e is HandledMouseEventArgs handledMouseEventArgs)
			{
				bool flag2 = (handledMouseEventArgs.Handled = advTree1.get_VScrollBar() != null);
				bool flag3 = flag2;
			}
		}

		private void advTree1_MouseClick(object sender, TreeNodeMouseEventArgs e)
		{
			if (advTree1.get_SelectedNode() == null)
			{
				SelectedAsset = null;
				return;
			}
			NodeContext nodeContext2 = (SelectedAsset = (NodeContext)advTree1.get_SelectedNode().get_Tag());
			NodeContext nodeContext3 = nodeContext2;
			if (e.Button == MouseButtons.Right)
			{
				OnAssetNodeRightClicked(SelectedAssets, PointToScreen(new Point(e.X, e.Y)));
			}
		}

		private void AdvTree1_AfterCellEdit(object sender, CellEditEventArgs e)
		{
			if (advTree1.get_SelectedNode() == null)
			{
				SelectedAsset = null;
				return;
			}
			Node selectedNode = advTree1.get_SelectedNode();
			NodeContext nodeContext = (NodeContext)selectedNode.get_Tag();
			bool flag = false;
			bool num;
			if (nodeContext.Asset.get_AssetGroupId() != null)
			{
				if (Various.NameEquals(nodeContext.Asset.get_AssetGroupId(), selectedNode.get_Text()))
				{
					return;
				}
				num = !Various.NameEquals(nodeContext.Asset.get_Name(), selectedNode.get_Text());
			}
			else
			{
				num = !Various.NameEquals(selectedNode.get_Text(), nodeContext.Asset.get_Name());
			}
			if (num)
			{
				string name = nodeContext.Asset.get_Name();
				RenameAsset renameAsset = new RenameAsset();
				renameAsset.assetId = nodeContext.Asset.get_Id();
				renameAsset.newName = selectedNode.get_Text();
				if (!OnAssetRenamed(renameAsset))
				{
					selectedNode.set_Text(name);
				}
			}
		}

		private void advTree1_SelectionChanged(object sender, EventArgs e)
		{
			if (advTree1.get_SelectedNode() == null || ((CollectionBase)(object)advTree1.get_SelectedNodes()).Count != 1)
			{
				SelectedAsset = null;
				OnAssetNodeClicked(null);
				OnSelectionChanged(this);
			}
			else
			{
				NodeContext nodeContext2 = (SelectedAsset = (NodeContext)advTree1.get_SelectedNode().get_Tag());
				NodeContext context = nodeContext2;
				OnAssetNodeClicked(context);
				OnSelectionChanged(this);
			}
		}

		private void advTree1_Click(object sender, EventArgs e)
		{
			OnTreeSelected();
		}

		private string GetAssetStateInfo(Asset asset)
		{
			return State.GetAssetStateInfo(ProjectBuilder.get_BuildStateSummary().get_AssetStates()[asset.get_Id()]);
		}

		public void DeleteTree()
		{
			SelectedAsset = null;
			advTree1.ClearAndDisposeAllNodes();
			((Component)(object)advTree1).Dispose();
			ProjectBuilder = null;
		}

		private Node CreateAssetNode(Asset asset)
		{
			//IL_0032: Unknown result type (might be due to invalid IL or missing references)
			//IL_0039: Expected O, but got Unknown
			//IL_004f: Unknown result type (might be due to invalid IL or missing references)
			//IL_0059: Expected O, but got Unknown
			//IL_00b6: Unknown result type (might be due to invalid IL or missing references)
			//IL_00bb: Unknown result type (might be due to invalid IL or missing references)
			//IL_00c5: Expected O, but got Unknown
			//IL_00f2: Unknown result type (might be due to invalid IL or missing references)
			//IL_00f9: Expected O, but got Unknown
			//IL_014a: Unknown result type (might be due to invalid IL or missing references)
			//IL_0154: Expected O, but got Unknown
			Project activeProject = ProjectBuilder.get_ActiveProject();
			AssetState val = ProjectBuilder.get_BuildStateSummary().get_AssetStates()[asset.get_Id()];
			string assetState = State.GetAssetState(val, out var icon);
			Node val2 = new Node();
			val2.set_Text(asset.get_Name());
			val2.get_Cells().Add(new Cell(assetState));
			val2.set_Editable(true);
			val2.set_Tag((object)new NodeContext(AssetNodeType.Asset, asset, 0, null));
			val2.set_DataKey((object)asset.get_Id());
			val2.set_Image((Image)icon);
			((SuperTooltip)ToolTip).SetSuperTooltip((IComponent)val2, new SuperTooltipInfo("", "", GetAssetStateInfo(asset), (Image)null, (Image)null, ((SuperTooltip)ToolTip).get_DefaultTooltipSettings().get_Color()));
			for (int i = 0; i < asset.get_AssetLayers().Count; i++)
			{
				_ = asset.get_AssetLayers()[i];
				LayerAssetState layerState = ((val != null) ? val.get_LayerStates()[i] : null);
				Node val3 = new Node();
				string layerName;
				val3.set_Text(layerName = activeProject.get_LayerConfiguration().get_Layers()[i].get_LayerName());
				string text = layerName;
				activeProject.get_LayerConfiguration().get_Layers()[i].get_DataType();
				assetState = State.GetLayerState(val, layerState, out icon);
				val3.get_Cells().Add(new Cell(assetState));
				val3.set_Image((Image)icon);
				val3.set_Editable(false);
				val3.set_Tag((object)new NodeContext(AssetNodeType.Layer, asset, i, null));
				val3.add_NodeDoubleClick((EventHandler)layerNode_NodeDoubleClick);
				val3.add_NodeClick((EventHandler)layerNode_NodeClick);
				val2.get_Nodes().Add(val3);
				UpdateTextures(asset, i, val3, icon, val);
			}
			val2.add_NodeDoubleClick((EventHandler)assetnode_NodeDoubleClick);
			val2.add_NodeClick((EventHandler)assetnode_NodeClick);
			return val2;
		}

		private Node CreateAssetGroupNode(Asset childAsset)
		{
			//IL_0030: Unknown result type (might be due to invalid IL or missing references)
			//IL_0036: Expected O, but got Unknown
			//IL_004a: Unknown result type (might be due to invalid IL or missing references)
			//IL_0054: Expected O, but got Unknown
			//IL_0092: Unknown result type (might be due to invalid IL or missing references)
			//IL_0097: Unknown result type (might be due to invalid IL or missing references)
			//IL_00a1: Expected O, but got Unknown
			ProjectBuilder.get_ActiveProject();
			Bitmap icon;
			string assetState = State.GetAssetState(ProjectBuilder.get_BuildStateSummary().get_AssetStates()[childAsset.get_Id()], out icon);
			Node val = new Node();
			val.set_Text(childAsset.get_AssetGroupId());
			val.get_Cells().Add(new Cell(assetState));
			val.set_Tag((object)new NodeContext(AssetNodeType.AssetGroup, childAsset, 0, null));
			val.set_Image((Image)icon);
			((SuperTooltip)ToolTip).SetSuperTooltip((IComponent)val, new SuperTooltipInfo("", "", GetAssetStateInfo(childAsset), (Image)null, (Image)null, ((SuperTooltip)ToolTip).get_DefaultTooltipSettings().get_Color()));
			val.set_Style(elementStyle2);
			val.add_NodeDoubleClick((EventHandler)assetgroupnode_NodeDoubleClick);
			val.add_NodeClick((EventHandler)assetgroupnode_NodeClick);
			return val;
		}

		private Node FindAssetGroupNode(string assetGroupId)
		{
			//IL_001b: Unknown result type (might be due to invalid IL or missing references)
			//IL_0021: Expected O, but got Unknown
			foreach (Node item in (CollectionBase)(object)advTree1.get_Nodes())
			{
				Node val = item;
				if (val.get_Tag() != null)
				{
					NodeContext nodeContext = (NodeContext)val.get_Tag();
					if (nodeContext.Type == AssetNodeType.AssetGroup && nodeContext.Asset.get_AssetGroupId().Equals(assetGroupId))
					{
						return val;
					}
				}
			}
			return null;
		}

		private Node AddAssetNode(Asset asset)
		{
			Node val = CreateAssetNode(asset);
			if (asset.get_AssetGroupId() != null && asset.get_AssetGroupId().Length != 0)
			{
				Node val2 = FindAssetGroupNode(asset.get_AssetGroupId());
				if (val2 == null)
				{
					val2 = CreateAssetGroupNode(asset);
					advTree1.get_Nodes().Add(val2);
				}
				val2.get_Nodes().Add(val);
				val2.get_Nodes().Sort();
			}
			else
			{
				advTree1.get_Nodes().Add(val);
			}
			return val;
		}

		public void PopulateTree()
		{
			SlowTaskMonitor slowTaskMonitor = new SlowTaskMonitor("Scanning for changes...");
			slowTaskMonitor.Start();
			slowTaskMonitor.UpdateText("Scanning Stacked Textures...");
			((CollectionBase)(object)advTree1.get_Nodes()).Clear();
			Project val = (Project = ProjectBuilder.get_ActiveProject());
			Project val2 = val;
			ProjectBuilder.get_BuildStateSummary();
			int count = val2.get_Assets().Values.Count;
			int num = 0;
			foreach (Asset value in val2.get_Assets().Values)
			{
				AddAssetNode(value);
				num++;
				slowTaskMonitor.UpdateProgress(0L, count, num);
			}
			advTree1.get_Columns().get_Item(0).Sort(false);
			slowTaskMonitor.End();
		}

		public void UpdateAssetInTree(Asset asset)
		{
			//IL_0159: Unknown result type (might be due to invalid IL or missing references)
			//IL_0160: Expected O, but got Unknown
			//IL_026d: Unknown result type (might be due to invalid IL or missing references)
			//IL_0274: Expected O, but got Unknown
			if (asset == null)
			{
				PopulateTree();
				return;
			}
			Project activeProject = ProjectBuilder.get_ActiveProject();
			int count = ProjectBuilder.get_ActiveProject().get_Assets().Count;
			Node val = advTree1.FindNodeByDataKey((object)asset.get_Id());
			if (val == null)
			{
				val = AddAssetNode(asset);
				if (((CollectionBase)(object)advTree1.get_SelectedNodes()).Count > 1)
				{
					((CollectionBase)(object)advTree1.get_SelectedNodes()).Clear();
				}
				advTree1.set_SelectedNode(val);
				advTree1.get_Columns().get_Item(0).Sort(false);
				return;
			}
			val.set_Text(asset.get_Name());
			Bitmap icon = null;
			AssetState val2 = ProjectBuilder.get_BuildStateSummary().get_AssetStates()[asset.get_Id()];
			string assetState = State.GetAssetState(val2, out icon);
			val.set_Image((Image)icon);
			((SuperTooltip)ToolTip).GetSuperTooltip((IComponent)val).set_BodyText(GetAssetStateInfo(asset));
			if (((CollectionBase)(object)val.get_Cells()).Count > 1)
			{
				val.get_Cells().get_Item(1).set_Text(assetState);
			}
			int num = 0;
			foreach (Node item in (CollectionBase)(object)val.get_Nodes())
			{
				Node val3 = item;
				if (num >= asset.get_AssetLayers().Count)
				{
					if (((CollectionBase)(object)val3.get_Cells()).Count > 1)
					{
						val3.get_Cells().get_Item(1).set_Text("Deleted");
					}
					val3.set_Image((Image)null);
					break;
				}
				AssetLayer val4 = asset.get_AssetLayers()[num];
				LayerAssetState val5 = ((val2 != null) ? val2.get_LayerStates()[num] : null);
				activeProject.get_LayerConfiguration().get_Layers()[num].get_LayerName();
				activeProject.get_LayerConfiguration().get_Layers()[num].get_DataType();
				assetState = State.GetLayerState(val2, val5, out icon);
				if (((CollectionBase)(object)val3.get_Cells()).Count > 1)
				{
					val3.get_Cells().get_Item(1).set_Text(assetState);
				}
				val3.set_Image((Image)icon);
				int num2 = 0;
				foreach (Node item2 in (CollectionBase)(object)val3.get_Nodes())
				{
					Node val6 = item2;
					if (num2 >= val4.get_Textures().Count)
					{
						int num3 = num2;
						while (num3 < ((CollectionBase)(object)val3.get_Nodes()).Count)
						{
							((CollectionBase)(object)val3.get_Nodes()).RemoveAt(num3);
						}
						break;
					}
					if (val4.get_Textures()[num2].get_Source() != val6.get_Text())
					{
						int num4 = num2;
						while (num4 < ((CollectionBase)(object)val3.get_Nodes()).Count)
						{
							((CollectionBase)(object)val3.get_Nodes()).RemoveAt(num4);
						}
						break;
					}
					TextureAssetState textureState = ((val5 != null) ? val5.get_TextureStates()[num2] : null);
					assetState = State.GetTextureState(val2, textureState, out icon);
					if (((CollectionBase)(object)val6.get_Cells()).Count > 1)
					{
						val6.get_Cells().get_Item(1).set_Text(assetState);
					}
					val6.set_Image((Image)icon);
					num2++;
				}
				UpdateTextures(asset, num, val3, icon, val2);
				num++;
			}
			if (((CollectionBase)(object)advTree1.get_Nodes()).Count <= count)
			{
				return;
			}
			for (int i = 0; i < ((CollectionBase)(object)advTree1.get_Nodes()).Count; i++)
			{
				bool flag = false;
				foreach (Asset value in activeProject.get_Assets().Values)
				{
					if (advTree1.get_Nodes().get_Item(i).get_Text() == value.get_Name())
					{
						flag = true;
					}
				}
				if (!flag)
				{
					((CollectionBase)(object)advTree1.get_Nodes()).RemoveAt(i);
					i--;
				}
			}
		}

		public void UpdateAllAssets()
		{
			Project activeProject = ProjectBuilder.get_ActiveProject();
			ProjectBuilder.get_BuildStateSummary();
			foreach (Asset value in activeProject.get_Assets().Values)
			{
				UpdateAssetInTree(value);
			}
		}

		private void layerTextureNode_NodeClick(object sender, EventArgs e)
		{
			//IL_0002: Unknown result type (might be due to invalid IL or missing references)
			NodeContext context = (NodeContext)((Node)sender).get_Tag();
			OnAssetNodeClicked(context);
		}

		private void layerTextureNode_NodeDoubleClick(object sender, EventArgs e)
		{
			//IL_0002: Unknown result type (might be due to invalid IL or missing references)
			NodeContext context = (NodeContext)((Node)sender).get_Tag();
			OnAssetNodeDoubleClicked(context);
		}

		private void layerNode_NodeClick(object sender, EventArgs e)
		{
			//IL_0002: Unknown result type (might be due to invalid IL or missing references)
			NodeContext context = (NodeContext)((Node)sender).get_Tag();
			OnAssetNodeDoubleClicked(context);
		}

		private void layerNode_NodeDoubleClick(object sender, EventArgs e)
		{
			//IL_0002: Unknown result type (might be due to invalid IL or missing references)
			NodeContext context = (NodeContext)((Node)sender).get_Tag();
			OnAssetNodeDoubleClicked(context);
		}

		private void assetnode_NodeDoubleClick(object sender, EventArgs e)
		{
			//IL_0002: Unknown result type (might be due to invalid IL or missing references)
			NodeContext context = (NodeContext)((Node)sender).get_Tag();
			OnAssetNodeDoubleClicked(context);
		}

		private void assetnode_NodeClick(object sender, EventArgs e)
		{
			//IL_0002: Unknown result type (might be due to invalid IL or missing references)
			NodeContext context = (NodeContext)((Node)sender).get_Tag();
			OnAssetNodeClicked(context);
		}

		private void assetgroupnode_NodeDoubleClick(object sender, EventArgs e)
		{
			//IL_0002: Unknown result type (might be due to invalid IL or missing references)
			NodeContext context = (NodeContext)((Node)sender).get_Tag();
			OnAssetNodeDoubleClicked(context);
		}

		private void assetgroupnode_NodeClick(object sender, EventArgs e)
		{
			//IL_0002: Unknown result type (might be due to invalid IL or missing references)
			NodeContext context = (NodeContext)((Node)sender).get_Tag();
			OnAssetNodeClicked(context);
		}

		private void advTree1_KeyUp(object sender, KeyEventArgs e)
		{
			if (e.KeyData == Keys.Delete)
			{
				isDeleting = false;
			}
		}

		private void advTree1_KeyDown(object sender, KeyEventArgs e)
		{
			if (e.KeyData == Keys.Delete && !isDeleting)
			{
				OnAssetDelete(SelectedAssets);
			}
			if (e.KeyData == Keys.F2)
			{
				StartRename();
			}
		}

		private void UpdateTextures(Asset asset, int layerIdx, Node layerNode, Bitmap icon, AssetState assetState)
		{
			//IL_0050: Unknown result type (might be due to invalid IL or missing references)
			//IL_006b: Unknown result type (might be due to invalid IL or missing references)
			//IL_00e6: Unknown result type (might be due to invalid IL or missing references)
			//IL_019c: Unknown result type (might be due to invalid IL or missing references)
			LayerAssetState val = assetState.get_LayerStates()[layerIdx];
			DataType dataType = ProjectBuilder.get_ActiveProject().get_LayerConfiguration().get_Layers()[layerIdx].get_DataType();
			int numChannels = DataTypeInfo.GetNumChannels(dataType);
			int num = 0;
			AssetLayer val2 = asset.get_AssetLayers()[layerIdx];
			bool flag = ChannelMerging.IsCombinedMode(val2.get_PackingMode());
			int subIdx;
			for (subIdx = 0; subIdx < 4; subIdx++)
			{
				int channelCount = ChannelMerging.GetChannelCount(val2.get_PackingMode(), dataType, layerIdx, subIdx);
				List<Texture> list = (from _tex in val2.get_Textures()
					where _tex.get_SubIndex() == subIdx
					select _tex).ToList();
				if (list.Count == 0)
				{
					if (flag && num < numChannels)
					{
						string text = "(";
						text += ChannelMerging.GetChannelMaskHumanReadable(dataType, val2.get_PackingMode(), subIdx);
						text += ")";
						NodeContext nodeContext = new NodeContext(AssetNodeType.Texture, asset, layerIdx, null);
						string text2 = "Default layer color " + text;
						string stateString = "Ok";
						CreateOrUpdateTextureNode(layerNode, new string[1] { text2 }, text2, stateString, icon, nodeContext, text);
					}
				}
				else
				{
					for (int i = 0; i < list.Count; i++)
					{
						Texture val3 = list[i];
						TextureAssetState textureState = ((val != null) ? val.get_TextureStates()[i] : null);
						string text3 = "";
						if (flag)
						{
							text3 += " (";
							text3 += ChannelMerging.GetChannelMaskHumanReadable(dataType, val2.get_PackingMode(), val3.get_SubIndex());
							text3 += ")";
						}
						string textureState2 = State.GetTextureState(assetState, textureState, out icon);
						NodeContext nodeContext2 = new NodeContext(AssetNodeType.Texture, asset, layerIdx, val3);
						string text4 = val3.get_Source() + text3;
						CreateOrUpdateTextureNode(layerNode, new string[1] { text4 }, text4, textureState2, icon, nodeContext2, text3);
					}
				}
				num += channelCount;
			}
		}

		private Node FindChildNode(Node parentNode, string text, string mask)
		{
			//IL_0029: Unknown result type (might be due to invalid IL or missing references)
			//IL_002f: Expected O, but got Unknown
			if (parentNode == null)
			{
				return null;
			}
			foreach (Node item in (CollectionBase)(object)parentNode.get_Nodes())
			{
				Node val = item;
				if (val.get_Text().Equals(text))
				{
					return val;
				}
				if (!string.IsNullOrEmpty(mask))
				{
					if (val.get_Text() + mask == text)
					{
						return val;
					}
					int num = val.get_Text().LastIndexOf(mask);
					if (num != -1 && val.get_Text().Substring(0, num) == text)
					{
						return val;
					}
				}
			}
			return null;
		}

		private void CreateOrUpdateTextureNode(Node layerNode, string[] oldPossibleNames, string name, string stateString, Image icon, NodeContext nodeContext, string mask)
		{
			//IL_003d: Unknown result type (might be due to invalid IL or missing references)
			//IL_0044: Expected O, but got Unknown
			//IL_0056: Unknown result type (might be due to invalid IL or missing references)
			//IL_0060: Expected O, but got Unknown
			Node val = null;
			foreach (string text in oldPossibleNames)
			{
				val = FindChildNode(layerNode, text, mask);
				if (val != null)
				{
					break;
				}
			}
			if (val == null)
			{
				Node val2 = new Node();
				val2.set_Text(name);
				val2.get_Cells().Add(new Cell(stateString));
				val2.set_Image(icon);
				val2.add_NodeDoubleClick((EventHandler)layerTextureNode_NodeDoubleClick);
				val2.add_NodeClick((EventHandler)layerTextureNode_NodeClick);
				val2.set_Tag((object)nodeContext);
				val2.set_Editable(false);
				layerNode.get_Nodes().Add(val2);
			}
			else
			{
				val.set_Text(name);
				val.get_Cells().get_Item(1).set_Text(stateString);
				val.set_Image(icon);
				val.set_Tag((object)nodeContext);
				val.set_Editable(false);
			}
		}

		public void StartRename()
		{
			if (advTree1.get_SelectedNode() != null && advTree1.get_SelectedNode().get_Editable())
			{
				advTree1.get_SelectedNode().BeginEdit();
			}
		}

		private bool MatchFilter(string text, string filter)
		{
			return text.IndexOf(filter, StringComparison.CurrentCultureIgnoreCase) != -1;
		}

		public bool Filter(NodeCollection nodes, string searchString)
		{
			//IL_0016: Unknown result type (might be due to invalid IL or missing references)
			//IL_001c: Expected O, but got Unknown
			bool flag = false;
			foreach (Node item in (CollectionBase)(object)nodes)
			{
				Node val = item;
				if (val.get_Tag() != null)
				{
					NodeContext nodeContext = (NodeContext)val.get_Tag();
					if (nodeContext.Type == AssetNodeType.Asset)
					{
						bool flag2;
						val.set_Visible(flag2 = MatchFilter(val.get_Text(), searchString));
						bool flag3 = flag2;
						flag = flag || flag3;
					}
					if (nodeContext.Type == AssetNodeType.AssetGroup)
					{
						bool flag2;
						val.set_Visible(flag2 = Filter(val.get_Nodes(), searchString));
						bool flag4 = flag2;
						flag = flag || flag4;
					}
				}
			}
			return flag;
		}

		public void Filter(string searchString)
		{
			Filter(advTree1.get_Nodes(), searchString);
		}

		public void ClearFilter(NodeCollection nodes)
		{
			//IL_0011: Unknown result type (might be due to invalid IL or missing references)
			//IL_0017: Expected O, but got Unknown
			foreach (Node item in (CollectionBase)(object)nodes)
			{
				Node val = item;
				val.set_Visible(true);
				ClearFilter(val.get_Nodes());
			}
		}

		public void ClearFilter()
		{
			ClearFilter(advTree1.get_Nodes());
		}

		private void advTree1_BeforeNodeDrop(object sender, TreeDragDropEventArgs e)
		{
			ProjectTree projectTree = (ProjectTree)((Control)(object)((AdvTreeNodeEventArgs)e).Node.get_TreeControl()).Parent;
			List<Asset> list = new List<Asset>();
			Node[] nodes = ((AdvTreeMultiNodeCancelEventArgs)e).Nodes;
			for (int i = 0; i < nodes.Length; i++)
			{
				NodeContext nodeContext = (NodeContext)nodes[i].get_Tag();
				list.Add(nodeContext.Asset);
			}
			OnAssetMoveRequest(this, projectTree.Project.get_Id(), list, Project.get_Id(), e.IsCopy);
			((AdvTreeNodeCancelEventArgs)e).Cancel = true;
		}

		private void advTree1_NodeDragFeedback(object sender, TreeDragFeedbackEventArgs e)
		{
			e.AllowDrop = false;
			if (e.get_DragNode().get_TreeControl() != advTree1)
			{
				NodeContext nodeContext = (NodeContext)e.get_DragNode().get_Tag();
				if (nodeContext.Type == AssetNodeType.Asset || nodeContext.Type == AssetNodeType.AssetGroup)
				{
					e.AllowDrop = true;
				}
			}
		}

		protected override void Dispose(bool disposing)
		{
			if (disposing && components != null)
			{
				components.Dispose();
			}
			base.Dispose(disposing);
		}

		private void InitializeComponent()
		{
			//IL_000d: Unknown result type (might be due to invalid IL or missing references)
			//IL_0017: Expected O, but got Unknown
			//IL_0018: Unknown result type (might be due to invalid IL or missing references)
			//IL_0022: Expected O, but got Unknown
			//IL_0023: Unknown result type (might be due to invalid IL or missing references)
			//IL_002d: Expected O, but got Unknown
			//IL_002e: Unknown result type (might be due to invalid IL or missing references)
			//IL_0038: Expected O, but got Unknown
			//IL_0039: Unknown result type (might be due to invalid IL or missing references)
			//IL_0043: Expected O, but got Unknown
			//IL_0044: Unknown result type (might be due to invalid IL or missing references)
			//IL_004e: Expected O, but got Unknown
			//IL_004f: Unknown result type (might be due to invalid IL or missing references)
			//IL_0059: Expected O, but got Unknown
			//IL_005a: Unknown result type (might be due to invalid IL or missing references)
			//IL_0064: Expected O, but got Unknown
			//IL_0065: Unknown result type (might be due to invalid IL or missing references)
			//IL_006f: Expected O, but got Unknown
			//IL_0070: Unknown result type (might be due to invalid IL or missing references)
			//IL_007a: Expected O, but got Unknown
			//IL_007b: Unknown result type (might be due to invalid IL or missing references)
			//IL_0085: Expected O, but got Unknown
			//IL_0086: Unknown result type (might be due to invalid IL or missing references)
			//IL_0090: Expected O, but got Unknown
			//IL_0091: Unknown result type (might be due to invalid IL or missing references)
			//IL_009b: Expected O, but got Unknown
			//IL_009c: Unknown result type (might be due to invalid IL or missing references)
			//IL_00a6: Expected O, but got Unknown
			//IL_00a7: Unknown result type (might be due to invalid IL or missing references)
			//IL_00b1: Expected O, but got Unknown
			//IL_00b2: Unknown result type (might be due to invalid IL or missing references)
			//IL_00bc: Expected O, but got Unknown
			//IL_00bd: Unknown result type (might be due to invalid IL or missing references)
			//IL_00c7: Expected O, but got Unknown
			//IL_00c8: Unknown result type (might be due to invalid IL or missing references)
			//IL_00d2: Expected O, but got Unknown
			//IL_00d3: Unknown result type (might be due to invalid IL or missing references)
			//IL_00dd: Expected O, but got Unknown
			//IL_00de: Unknown result type (might be due to invalid IL or missing references)
			//IL_00e8: Expected O, but got Unknown
			//IL_00e9: Unknown result type (might be due to invalid IL or missing references)
			//IL_00f3: Expected O, but got Unknown
			//IL_0852: Unknown result type (might be due to invalid IL or missing references)
			//IL_085c: Expected O, but got Unknown
			this.components = new System.ComponentModel.Container();
			this.advTree1 = new AdvTree();
			this.columnHeader3 = new ColumnHeader();
			this.columnHeader4 = new ColumnHeader();
			this.node1 = new Node();
			this.node2 = new Node();
			this.node5 = new Node();
			this.node6 = new Node();
			this.node9 = new Node();
			this.node10 = new Node();
			this.node35 = new Node();
			this.cell4 = new Cell();
			this.node36 = new Node();
			this.node37 = new Node();
			this.node38 = new Node();
			this.node39 = new Node();
			this.node41 = new Node();
			this.node3 = new Node();
			this.node4 = new Node();
			this.node42 = new Node();
			this.nodeConnector4 = new NodeConnector();
			this.elementStyle2 = new ElementStyle();
			this.imageList1 = new System.Windows.Forms.ImageList(this.components);
			this.ToolTip = new GrBuildStudio.ToolTip();
			((System.ComponentModel.ISupportInitialize)this.advTree1).BeginInit();
			base.SuspendLayout();
			((System.Windows.Forms.Control)(object)this.advTree1).AccessibleRole = System.Windows.Forms.AccessibleRole.Outline;
			((System.Windows.Forms.Control)(object)this.advTree1).AllowDrop = true;
			this.advTree1.set_AllowExternalDrop(false);
			((System.Windows.Forms.Control)(object)this.advTree1).BackColor = System.Drawing.SystemColors.Window;
			this.advTree1.get_BackgroundStyle().set_Class("TreeBorderKey");
			this.advTree1.get_BackgroundStyle().set_CornerType((eCornerType)1);
			this.advTree1.get_Columns().Add(this.columnHeader3);
			this.advTree1.get_Columns().Add(this.columnHeader4);
			((System.Windows.Forms.Control)(object)this.advTree1).Dock = System.Windows.Forms.DockStyle.Fill;
			this.advTree1.set_DragDropEnabled(false);
			this.advTree1.set_DragDropNodeCopyEnabled(false);
			this.advTree1.set_LicenseKey("F962CEC7-CD8F-4911-A9E9-CAB39962FC1F");
			((System.Windows.Forms.Control)(object)this.advTree1).Location = new System.Drawing.Point(0, 0);
			this.advTree1.set_MultiSelect(true);
			((System.Windows.Forms.Control)(object)this.advTree1).Name = "advTree1";
			this.advTree1.get_Nodes().AddRange((Node[])(object)new Node[4] { this.node1, this.node6, this.node37, this.node39 });
			this.advTree1.set_NodesConnector(this.nodeConnector4);
			this.advTree1.set_NodeStyle(this.elementStyle2);
			this.advTree1.set_PathSeparator(";");
			((System.Windows.Forms.Control)(object)this.advTree1).Size = new System.Drawing.Size(546, 194);
			this.advTree1.get_Styles().Add(this.elementStyle2);
			((System.Windows.Forms.Control)(object)this.advTree1).TabIndex = 11;
			((System.Windows.Forms.Control)(object)this.advTree1).Text = "advTree1";
			((System.Windows.Forms.Control)(object)this.advTree1).Click += new System.EventHandler(advTree1_Click);
			((System.Windows.Forms.Control)(object)this.advTree1).KeyDown += new System.Windows.Forms.KeyEventHandler(advTree1_KeyDown);
			((System.Windows.Forms.Control)(object)this.advTree1).KeyUp += new System.Windows.Forms.KeyEventHandler(advTree1_KeyUp);
			this.columnHeader3.set_Name("columnHeader3");
			this.columnHeader3.set_StretchToFill(true);
			this.columnHeader3.set_Text("Stacked Texture");
			this.columnHeader3.get_Width().set_Absolute(150);
			this.columnHeader4.set_Name("columnHeader4");
			this.columnHeader4.set_Text("State");
			this.columnHeader4.get_Width().set_Absolute(150);
			this.node1.set_Image((System.Drawing.Image)GrBuildStudio.Properties.Resources.exclamation);
			this.node1.set_Name("node1");
			this.node1.get_Nodes().AddRange((Node[])(object)new Node[2] { this.node2, this.node5 });
			this.node1.set_Text("BlueMarble");
			this.node2.set_Expanded(true);
			this.node2.set_Name("node2");
			this.node2.set_Text("Diffuse: bluemarble_d.png");
			this.node5.set_Expanded(true);
			this.node5.set_Name("node5");
			this.node5.set_Text("Normals: bluemarble_n.png");
			this.node6.set_Image((System.Drawing.Image)GrBuildStudio.Properties.Resources.bullet_green);
			this.node6.set_Name("node6");
			this.node6.get_Nodes().AddRange((Node[])(object)new Node[2] { this.node9, this.node36 });
			this.node6.set_Text("Glider");
			this.node9.set_Name("node9");
			this.node9.get_Nodes().AddRange((Node[])(object)new Node[1] { this.node10 });
			this.node9.set_Text("Diffuse: UDIM");
			this.node10.set_Name("node10");
			this.node10.get_Nodes().AddRange((Node[])(object)new Node[1] { this.node35 });
			this.node10.set_Text("102 items found... expand to view");
			this.node35.get_Cells().Add(this.cell4);
			this.node35.set_Expanded(true);
			this.node35.set_Name("node35");
			this.node35.set_Text("world.topo.bathy.200412.3x21600x21600.A0_n.png");
			this.cell4.set_Name("cell4");
			this.cell4.set_StyleMouseOver((ElementStyle)null);
			this.cell4.set_Text("Built");
			this.node36.set_Expanded(true);
			this.node36.set_Name("node36");
			this.node36.set_Text("Normals: UDIM");
			this.node37.set_Image((System.Drawing.Image)GrBuildStudio.Properties.Resources.bullet_green);
			this.node37.set_Name("node37");
			this.node37.get_Nodes().AddRange((Node[])(object)new Node[1] { this.node38 });
			this.node37.set_Text("Loft");
			this.node38.set_Expanded(true);
			this.node38.set_Name("node38");
			this.node38.set_Text("node16");
			this.node39.set_Expanded(true);
			this.node39.set_Image((System.Drawing.Image)GrBuildStudio.Properties.Resources.asset_imported);
			this.node39.set_Name("node39");
			this.node39.get_Nodes().AddRange((Node[])(object)new Node[2] { this.node41, this.node42 });
			this.node39.set_Text("Asset 3");
			this.node41.set_Expanded(true);
			this.node41.set_Name("node41");
			this.node41.get_Nodes().AddRange((Node[])(object)new Node[1] { this.node3 });
			this.node41.set_Text("node10");
			this.node3.set_Expanded(true);
			this.node3.set_Name("node3");
			this.node3.get_Nodes().AddRange((Node[])(object)new Node[1] { this.node4 });
			this.node3.set_Text("node3");
			this.node4.set_Expanded(true);
			this.node4.set_Name("node4");
			this.node4.set_Text("node4");
			this.node42.set_Expanded(true);
			this.node42.set_Name("node42");
			this.node42.set_Text("node11");
			this.nodeConnector4.set_LineColor(System.Drawing.SystemColors.ControlText);
			this.elementStyle2.set_CornerType((eCornerType)1);
			this.elementStyle2.set_Name("elementStyle2");
			this.elementStyle2.set_TextColor(System.Drawing.SystemColors.ControlText);
			this.imageList1.ColorDepth = System.Windows.Forms.ColorDepth.Depth32Bit;
			this.imageList1.ImageSize = new System.Drawing.Size(16, 16);
			this.imageList1.TransparentColor = System.Drawing.Color.Transparent;
			((SuperTooltip)this.ToolTip).set_DefaultTooltipSettings(new SuperTooltipInfo("Enter your resource Tag here In text", "", "TT_NO_TOOLTIP", (System.Drawing.Image)null, (System.Drawing.Image)null, (eTooltipColor)17));
			((SuperTooltip)this.ToolTip).set_LicenseKey("F962CEC7-CD8F-4911-A9E9-CAB39962FC1F");
			((SuperTooltip)this.ToolTip).set_PositionBelowControl(false);
			base.AutoScaleDimensions = new System.Drawing.SizeF(6f, 13f);
			base.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;
			base.Controls.Add((System.Windows.Forms.Control)(object)this.advTree1);
			base.Name = "ProjectTree";
			base.Size = new System.Drawing.Size(546, 194);
			((System.ComponentModel.ISupportInitialize)this.advTree1).EndInit();
			base.ResumeLayout(false);
		}
	}
	public enum QualityLevel
	{
		Default,
		Low,
		Medium,
		High,
		Uncompressed,
		Lossless
	}
	internal enum ReturnCode
	{
		Success = 0,
		InvalidCommandLine = 1,
		FailedImportingSolution = 2,
		FailedUnknown = 3,
		BuildErrorAtlassing = 110,
		MissingDlls = 200
	}
	internal enum SetTabPropertiesOption
	{
		None = 0,
		UseAppThumbnailAlways = 1,
		UseAppThumbnailWhenActive = 2,
		UseAppPeekAlways = 4,
		UseAppPeekWhenActive = 8
	}
	public class SlowTaskMonitor
	{
		public enum ProgressBarType
		{
			ProgressBar,
			Marquee
		}

		private static int defaultDelay = 1000;

		private static Form defaultParent = null;

		private SlowTaskProgressForm form;

		private BackgroundWorker monitor;

		private int delay;

		private ManualResetEvent finishedWorking;

		private ManualResetEvent dialogCreated;

		private Form parent;

		private string title;

		private long lastmin;

		private long lastmax;

		private long lastvalue;

		private string lasttext;

		public static int DefaultDelay
		{
			get
			{
				return defaultDelay;
			}
			set
			{
				defaultDelay = value;
			}
		}

		public static Form DefaultParent
		{
			get
			{
				return defaultParent;
			}
			set
			{
				defaultParent = value;
			}
		}

		public ProgressBarType Type { get; set; }

		public SlowTaskMonitor(string title)
			: this(title, defaultDelay, defaultParent)
		{
		}

		public SlowTaskMonitor(string title, Form parentForm)
			: this(title, defaultDelay, parentForm)
		{
		}

		public SlowTaskMonitor(string title, int delay)
			: this(title, defaultDelay, defaultParent)
		{
		}

		public SlowTaskMonitor(string title, int delay, Form parentForm)
		{
			finishedWorking = new ManualResetEvent(initialState: false);
			dialogCreated = new ManualResetEvent(initialState: false);
			this.delay = delay;
			parent = parentForm;
			this.title = title;
			lastmax = 100L;
			lastmin = 0L;
			lastvalue = 0L;
			lasttext = "";
			monitor = new BackgroundWorker();
			monitor.DoWork += monitor_DoWork;
			Type = ProgressBarType.ProgressBar;
		}

		public void Start()
		{
			monitor.RunWorkerAsync();
		}

		private void monitor_DoWork(object sender, DoWorkEventArgs e)
		{
			if (WaitHandle.WaitAny(new WaitHandle[1] { finishedWorking }, delay) == 258)
			{
				form = new SlowTaskProgressForm(Type);
				((Control)(object)form).Text = title;
				((Form)(object)form).Load += form_Load;
				if (parent != null)
				{
					((Form)(object)form).StartPosition = FormStartPosition.Manual;
					((Form)(object)form).Location = new Point(Math.Max(0, parent.Left + parent.Width / 2 - ((Control)(object)form).Width / 2), Math.Max(0, parent.Top + parent.Height / 2 - ((Control)(object)form).Height / 2));
				}
				((Form)(object)form).ShowDialog();
			}
			dialogCreated.Set();
		}

		private void form_Load(object sender, EventArgs e)
		{
			UpdateProgress(lastmin, lastmax, lastvalue);
			UpdateText(lasttext);
			dialogCreated.Set();
		}

		public void UpdateProgress(long min, long max, long value)
		{
			lastmin = min;
			lastmax = max;
			lastvalue = value;
			if (form != null)
			{
				form.UpdateProgress(min, max, value);
			}
		}

		public void UpdateText(string text)
		{
			lasttext = text;
			if (form != null)
			{
				form.UpdateText(text);
			}
		}

		public void End()
		{
			finishedWorking.Set();
			WaitHandle.WaitAny(new WaitHandle[1] { dialogCreated });
			try
			{
				if (form != null)
				{
					((Control)(object)form).Invoke((Delegate)(Action)delegate
					{
						((Form)(object)form).Close();
					});
				}
			}
			catch
			{
			}
		}
	}
	public class SlowTaskProgressForm : OfficeForm
	{
		private IContainer components;

		private Label label1;

		private ProgressBar progressBar1;

		private System.Windows.Forms.Timer timer1;

		private SlowTaskProgressForm()
		{
			InitializeComponent();
		}

		public SlowTaskProgressForm(SlowTaskMonitor.ProgressBarType type)
		{
			InitializeComponent();
			if (type == SlowTaskMonitor.ProgressBarType.Marquee)
			{
				progressBar1.Style = ProgressBarStyle.Marquee;
			}
			else
			{
				progressBar1.Style = ProgressBarStyle.Blocks;
			}
		}

		public void UpdateText(string text)
		{
			if (label1.InvokeRequired)
			{
				label1.Invoke((Action)delegate
				{
					UpdateText(text);
				});
			}
			else
			{
				label1.Text = text;
			}
		}

		public void UpdateProgress(long min, long max, long value)
		{
			if (progressBar1.InvokeRequired)
			{
				progressBar1.Invoke((Action)delegate
				{
					UpdateProgress(min, max, value);
				});
			}
			else
			{
				progressBar1.Minimum = (int)min;
				progressBar1.Maximum = (int)max;
				progressBar1.Value = (int)value;
			}
		}

		protected override void Dispose(bool disposing)
		{
			if (disposing && components != null)
			{
				components.Dispose();
			}
			((OfficeForm)this).Dispose(disposing);
		}

		private void InitializeComponent()
		{
			components = new Container();
			label1 = new Label();
			progressBar1 = new ProgressBar();
			timer1 = new System.Windows.Forms.Timer(components);
			((Control)this).SuspendLayout();
			label1.Location = new Point(68, 29);
			label1.Name = "label1";
			label1.Size = new Size(341, 45);
			label1.TabIndex = 0;
			label1.Text = "label1";
			label1.TextAlign = ContentAlignment.MiddleCenter;
			progressBar1.Location = new Point(68, 116);
			progressBar1.Name = "progressBar1";
			progressBar1.Size = new Size(341, 36);
			progressBar1.TabIndex = 2;
			((ContainerControl)this).AutoScaleDimensions = new SizeF(12f, 25f);
			((ContainerControl)this).AutoScaleMode = AutoScaleMode.Font;
			((Form)this).ClientSize = new Size(488, 210);
			((Form)this).ControlBox = false;
			((Control)this).Controls.Add(progressBar1);
			((Control)this).Controls.Add(label1);
			((Form)this).FormBorderStyle = FormBorderStyle.FixedDialog;
			((Form)this).MaximizeBox = false;
			((Form)this).MinimizeBox = false;
			((Control)this).Name = "ProgressForm";
			((Form)this).ShowIcon = false;
			((Form)this).ShowInTaskbar = false;
			((Form)this).SizeGripStyle = SizeGripStyle.Hide;
			((Form)this).StartPosition = FormStartPosition.CenterParent;
			((Control)(object)this).Text = "SlowTaskForm";
			((Control)this).ResumeLayout(performLayout: false);
		}
	}
	public class SlowTaskWorker
	{
		public delegate void DoWorkEventHandler(object sender, SlowTaskMonitor monitor, object argument);

		private BackgroundWorker worker;

		private SlowTaskMonitor monitor;

		private string title;

		public event DoWorkEventHandler DoWork;

		protected virtual void OnDoWork(SlowTaskMonitor monitor, object argument)
		{
			this.DoWork?.Invoke(this, monitor, argument);
		}

		public SlowTaskWorker(string title)
		{
			this.title = title;
			monitor = new SlowTaskMonitor(title);
			worker = new BackgroundWorker();
			worker.DoWork += worker_DoWork;
		}

		private void worker_DoWork(object sender, DoWorkEventArgs e)
		{
			monitor.Start();
			OnDoWork(monitor, e.Argument);
			monitor.End();
		}

		public void RunAsync()
		{
			worker.RunWorkerAsync();
		}

		public void RunAsync(object argument)
		{
			worker.RunWorkerAsync(argument);
		}
	}
	internal class SolutionImporter
	{
		public class ImportException : Exception
		{
			public ImportException(string message)
				: base(message)
			{
			}
		}

		public class ImportData
		{
			internal class ProjectData
			{
				public string xmlImportPath;

				public string name;

				public uint pageSize;

				public PagingStrategy pagingStrategy;
			}

			public string outputPath;

			public string buildProfile;

			public string solutionName;

			public string solutionPath;

			public string gtexPath;

			public List<ProjectData> projects = new List<ProjectData>();

			public string SolutionFile => Path.Combine(solutionPath, solutionName + "." + Constants.SolutionExtension);
		}

		public static string CreateSolutionFromXML(Logger logger, CommandLineOptions options, BuildLoggerReporter buildLoggerReporter)
		{
			//IL_0080: Unknown result type (might be due to invalid IL or missing references)
			//IL_008e: Expected O, but got Unknown
			//IL_0091: Unknown result type (might be due to invalid IL or missing references)
			//IL_0096: Unknown result type (might be due to invalid IL or missing references)
			//IL_0098: Unknown result type (might be due to invalid IL or missing references)
			//IL_009a: Unknown result type (might be due to invalid IL or missing references)
			//IL_009c: Unknown result type (might be due to invalid IL or missing references)
			//IL_009e: Unknown result type (might be due to invalid IL or missing references)
			//IL_00a0: Unknown result type (might be due to invalid IL or missing references)
			//IL_00a9: Unknown result type (might be due to invalid IL or missing references)
			//IL_00ac: Invalid comparison between Unknown and I4
			//IL_00c4: Unknown result type (might be due to invalid IL or missing references)
			//IL_00c9: Unknown result type (might be due to invalid IL or missing references)
			//IL_00d0: Expected O, but got Unknown
			//IL_0102: Unknown result type (might be due to invalid IL or missing references)
			//IL_0105: Invalid comparison between Unknown and I4
			//IL_0186: Unknown result type (might be due to invalid IL or missing references)
			//IL_0191: Expected O, but got Unknown
			//IL_018c: Unknown result type (might be due to invalid IL or missing references)
			//IL_0191: Unknown result type (might be due to invalid IL or missing references)
			//IL_0193: Unknown result type (might be due to invalid IL or missing references)
			//IL_0196: Invalid comparison between Unknown and I4
			//IL_01ee: Unknown result type (might be due to invalid IL or missing references)
			//IL_0299: Unknown result type (might be due to invalid IL or missing references)
			//IL_02c2: Unknown result type (might be due to invalid IL or missing references)
			//IL_02d8: Expected O, but got Unknown
			//IL_02fe: Expected O, but got Unknown
			//IL_0323: Expected O, but got Unknown
			//IL_037e: Unknown result type (might be due to invalid IL or missing references)
			//IL_0381: Invalid comparison between Unknown and I4
			//IL_042b: Unknown result type (might be due to invalid IL or missing references)
			string importSolutionFromXml = options.ImportSolutionFromXml;
			if (importSolutionFromXml == null)
			{
				return null;
			}
			if (!File.Exists(importSolutionFromXml))
			{
				throw new FileNotFoundException("The XML file could not be found.");
			}
			ImportData data = new ImportData();
			if (!Import(importSolutionFromXml, ref data))
			{
				throw new ImportException("failed to read import xml");
			}
			SolutionModel solutionModel = new SolutionModel();
			try
			{
				solutionModel.SolutionBuilder.NewSolution(data.SolutionFile);
			}
			catch (UnspecifiedException val)
			{
				UnspecifiedException val2 = val;
				Error val3 = val2.get_ErrorCode();
				Error val4 = val3;
				Error val5 = val4;
				if ((int)val5 == 0)
				{
					throw;
				}
				if ((int)val5 != 1)
				{
					throw new ImportException("Failed to create new solution " + ((object)(Error)(ref val3)).ToString());
				}
				try
				{
					val3 = solutionModel.SolutionBuilder.LoadSolution(data.SolutionFile, false);
				}
				catch (UnspecifiedException val6)
				{
					UnspecifiedException val7 = val6;
					throw new ImportException("Failed to create new solution. Detailed error: " + ((Exception)(object)val7).Message);
				}
				catch (Exception ex)
				{
					throw new ImportException("Failed to create new solution: Unspecified error: " + ex.Message);
				}
				if ((int)val3 > 0)
				{
					throw new ImportException("Failed to create new solution");
				}
			}
			foreach (ImportData.ProjectData project in data.projects)
			{
				if (!solutionModel.HasProject(project.name))
				{
					Error val8 = solutionModel.CreateProjectFromXML(project.name, null, new OnSetBuildErrorHandles(OnProjectCreateErrorHandles), overwrite: true);
					if ((int)val8 > 0)
					{
						throw new ImportException("Error creating project from xml script: " + ((object)(Error)(ref val8)).ToString());
					}
				}
				solutionModel.SetActiveProject(project.name);
				solutionModel.UpdateProfiles(data.buildProfile);
				solutionModel.UpdatePageSize(project.pageSize);
				solutionModel.UpdatePagingStrategy(project.pagingStrategy);
				solutionModel.ActiveProjectBuilder.SetOutputDirectory(data.outputPath, true);
				solutionModel.ActiveProjectBuilder.SetExclusiveImport(options.ImportExclusive);
				if (data.gtexPath.Length > 0)
				{
					solutionModel.ActiveProjectBuilder.SetSoupOutputDirectory(data.gtexPath, true);
				}
				solutionModel.ActiveProjectBuilder.set_AllowForeignGTex(options.allowForeignGTex);
				solutionModel.ActiveProjectBuilder.set_ForceUseGTex(options.forceUseGTex);
				solutionModel.ActiveProjectBuilder.set_NoGTSBuilding(options.omitGTS);
				solutionModel.ActiveProjectBuilder.SaveProject();
				Error val9 = (Error)0;
				try
				{
					buildLoggerReporter?.StartListening(solutionModel.ActiveProjectBuilder);
					val9 = (Error)((!solutionModel.ImportFromScript(project.xmlImportPath)) ? 14 : 0);
					buildLoggerReporter?.StopListening();
				}
				catch (GrXmlException val10)
				{
					GrXmlException val11 = val10;
					throw new XmlException("Failed importing project from XML script: " + ((ConfigurationException)(object)val11).Filename, (Exception)(object)val11);
				}
				catch (InvalidLayerConfigurationException val12)
				{
					InvalidLayerConfigurationException val13 = val12;
					throw new Exception("Invalid layer configuration at layer index: " + ((GrBuildException)val13).get_LayerIndex(), (Exception)(object)val13);
				}
				catch (MissingLayerConfigurationException val14)
				{
					MissingLayerConfigurationException val15 = val14;
					throw new Exception("Missing layer configuration at layer index: " + ((GrBuildException)val15).get_LayerIndex(), (Exception)(object)val15);
				}
				catch (FileNotFoundException ex2)
				{
					throw new FileNotFoundException("File not found: " + ex2.FileName, ex2);
				}
				catch (Exception ex3)
				{
					throw new Exception("Failed to update project: " + ex3.Message, ex3);
				}
				if ((int)val9 > 0)
				{
					throw new Exception("GrBuild Error: " + ((object)(Error)(ref val9)).ToString());
				}
			}
			string activeSolutionFullPath = solutionModel.SolutionBuilder.get_ActiveSolutionFullPath();
			foreach (KeyValuePair<Guid, SolutionProjectDecriptor> item in (from _project in solutionModel.SolutionBuilder.get_ActiveSolution().get_Projects()
				where data.projects.Find((ImportData.ProjectData _proj) => _proj.name == _project.Value.get_Name()) == null
				select _project).ToList())
			{
				solutionModel.RemoveProject(item.Key, clean: true, removeOutputFromDisk: true, removeAllProjectFilesFromDisk: true);
			}
			solutionModel.SolutionBuilder.SaveSolution();
			solutionModel.SolutionBuilder.CloseSolution();
			return activeSolutionFullPath;
		}

		private static void OnProjectCreateErrorHandles(ProjectBuilder builder)
		{
			//IL_000e: Unknown result type (might be due to invalid IL or missing references)
			//IL_0018: Expected O, but got Unknown
			builder.get_BuildReportingHandler().add_OnErrorHandler(new OnBuildError(BuildReportingHandler_OnErrorHandler));
		}

		private static ErrorAction BuildReportingHandler_OnErrorHandler(ProjectBuilder source, BuildProcess processId, BuildIssue buildIssue)
		{
			throw new ImportException(buildIssue.get_InnerMessage());
		}

		private static bool Import(string filename, ref ImportData data)
		{
			//IL_00c3: Unknown result type (might be due to invalid IL or missing references)
			//IL_00ea: Unknown result type (might be due to invalid IL or missing references)
			//IL_0123: Unknown result type (might be due to invalid IL or missing references)
			//IL_01e1: Unknown result type (might be due to invalid IL or missing references)
			//IL_01e3: Unknown result type (might be due to invalid IL or missing references)
			try
			{
				ConfigXmlDocument configXmlDocument = new ConfigXmlDocument();
				configXmlDocument.Load(filename);
				XmlNode documentElement = configXmlDocument.DocumentElement;
				data.solutionName = GetNode(documentElement, "name").InnerText;
				data.solutionPath = GetNode(documentElement, "path").InnerText;
				data.outputPath = GetNode(documentElement, "output").InnerText;
				XmlNode xmlNode = TryGetNode(documentElement, "buildProfile");
				data.buildProfile = ((xmlNode != null) ? xmlNode.InnerText : "default");
				data.buildProfile = data.buildProfile.ToLower();
				XmlNode xmlNode2 = TryGetNode(documentElement, "gtexPath");
				data.gtexPath = ((xmlNode2 != null) ? xmlNode2.InnerText : "");
				XmlNode xmlNode3 = TryGetNode(documentElement, "pagingStrategy");
				PagingStrategy pagingStrategy = (PagingStrategy)0;
				if (xmlNode3 != null)
				{
					if (xmlNode3.InnerText == "GTPPerLevel")
					{
						pagingStrategy = (PagingStrategy)1;
					}
					else
					{
						if (!(xmlNode3.InnerText == "GTPPerGTex"))
						{
							throw new ImportException("Paging Strategy not valid: " + xmlNode3.InnerText);
						}
						pagingStrategy = (PagingStrategy)2;
					}
				}
				XmlNodeList xmlNodeList = documentElement.SelectNodes("project");
				if (xmlNodeList.Count == 0)
				{
					throw new ImportException("No Projects found in import script");
				}
				foreach (XmlNode item in xmlNodeList)
				{
					ImportData.ProjectData projectData = new ImportData.ProjectData();
					projectData.name = GetNode(item, "name").InnerText;
					projectData.xmlImportPath = GetNode(item, "import").InnerText;
					XmlNode xmlNode4 = null;
					try
					{
						xmlNode4 = GetNode(item, "pageSize");
					}
					catch (GrMissingNodeException)
					{
					}
					if (xmlNode4 != null)
					{
						projectData.pageSize = Convert.ToUInt32(xmlNode4.InnerText);
					}
					projectData.pagingStrategy = pagingStrategy;
					data.projects.Add(projectData);
				}
				return true;
			}
			catch
			{
				return false;
			}
		}

		private static XmlNode GetNode(XmlNode parent, string name)
		{
			//IL_0018: Unknown result type (might be due to invalid IL or missing references)
			XmlNode xmlNode = parent.SelectSingleNode(name);
			if (xmlNode != null)
			{
				return xmlNode;
			}
			throw new GrMissingNodeException(name, parent);
		}

		private static XmlNode TryGetNode(XmlNode parent, string name)
		{
			try
			{
				return GetNode(parent, name);
			}
			catch
			{
				return null;
			}
		}
	}
	public class SolutionModel
	{
		public delegate void AssetImportStartedEventHandler(object sender, ProjectBuilder builder);

		public delegate void AssetImportFinishedEventHandler(object sender, ProjectBuilder builder);

		public delegate void ActiveProjectChangedEventHandler(object sender);

		public delegate void AssetAddedEventHandler(object sender, string assetName, Guid projectId);

		public delegate void AssetRemovedEventHandler(object sender, string assetName, Guid projectId);

		public delegate void AssetRemovingEventHandler(object sender, Guid assetId, Guid projectId);

		public delegate void AssetsRemovingEventHandler(object sender, Guid projectId, List<Guid> assets);

		public delegate void AssetsRemovedEventHandler(object sender, Guid projectId);

		public delegate void AssetsAddedEventHandler(object sender, Guid projectId);

		public delegate void ProjectStateChangedEventHandler(object sender, Guid projectId);

		public delegate void ProjectAssetChangedEventHandler(object sender, Guid projectId, Asset asset);

		public delegate void ProjectOutputChangedEventHandler(object sender, Guid projectId);

		public delegate void TargetConfigurationChangedEventHandler(object sender, TargetConfiguration newConfig);

		public class MoveAssetReport
		{
			public int TotalAssetCount { get; set; }

			public bool HasErrors { get; set; }

			public bool HasImportErrors { get; set; }

			public bool HasDeletionErrors { get; set; }

			public bool Canceled { get; set; }

			public BuildLoggerReporter BuildLoggerReporterImport { get; set; }

			public List<BuildLoggerReporter> BuildLoggerReporterDeletion { get; set; }

			public MoveAssetReport()
			{
				BuildLoggerReporterImport = new BuildLoggerReporter();
				BuildLoggerReporterDeletion = new List<BuildLoggerReporter>();
			}
		}

		public class MoveAssetConvProblemsArgs
		{
			public AssetToImportAssetConversionOptions Options { get; set; }

			public bool Continue { get; set; }

			public MoveAssetConvProblemsArgs()
			{
				Continue = true;
				Options = (AssetToImportAssetConversionOptions)0;
			}
		}

		public delegate void ConversionProblemsCallback(object sender, MoveAssetConvProblemsArgs e);

		public SolutionBuilder SolutionBuilder { get; private set; }

		public ProjectBuilder ActiveProjectBuilder
		{
			get
			{
				if (ActiveSolutionProject == null)
				{
					return null;
				}
				return GetProjectBuilder(ActiveSolutionProject.get_Id());
			}
		}

		public SolutionProjectDecriptor ActiveSolutionProject { get; private set; }

		public TargetConfiguration TargetConfiguration { get; private set; }

		public bool ReadOnlyMode
		{
			get
			{
				if (SolutionBuilder == null)
				{
					return false;
				}
				if (!SolutionBuilder.get_ReadOnly())
				{
					return SolutionBuilder.get_ProjectsReadOnly();
				}
				return true;
			}
		}

		public Solution ActiveSolution => SolutionBuilder.get_ActiveSolution();

		public event AssetImportStartedEventHandler AssetImportStarted;

		public event AssetImportFinishedEventHandler AssetImportFinished;

		public event ActiveProjectChangedEventHandler ActiveProjectChanged;

		public event AssetAddedEventHandler AssetAdded;

		public event AssetRemovedEventHandler AssetRemoved;

		public event AssetRemovingEventHandler AssetRemoving;

		public event AssetsRemovingEventHandler AssetsRemoving;

		public event AssetsRemovedEventHandler AssetsRemoved;

		public event AssetsAddedEventHandler AssetsAdded;

		public event ProjectStateChangedEventHandler ProjectStateChanged;

		public event ProjectAssetChangedEventHandler ProjectAssetChanged;

		public event ProjectOutputChangedEventHandler ProjectOutputChanged;

		public event TargetConfigurationChangedEventHandler TargetConfigurationChanged;

		protected virtual void OnAssetImportStarted(ProjectBuilder builder)
		{
			this.AssetImportStarted?.Invoke(this, builder);
		}

		protected virtual void OnAssetImportFinished(ProjectBuilder builder)
		{
			this.AssetImportFinished?.Invoke(this, builder);
		}

		protected virtual void OnActiveProjectChanged()
		{
			this.ActiveProjectChanged?.Invoke(this);
		}

		protected virtual void OnAssetAdded(string assetName, Guid projectId)
		{
			this.AssetAdded?.Invoke(this, assetName, projectId);
		}

		protected virtual void OnAssetRemoved(string assetName, Guid projectId)
		{
			this.AssetRemoved?.Invoke(this, assetName, projectId);
		}

		protected virtual void OnAssetRemoving(Guid assetId, Guid projectId)
		{
			this.AssetRemoving?.Invoke(this, assetId, projectId);
		}

		protected virtual void OnAssetsRemoving(Guid projectId, List<Guid> assets)
		{
			this.AssetsRemoving?.Invoke(this, projectId, assets);
		}

		protected virtual void OnAssetsRemoved(Guid projectId)
		{
			this.AssetsRemoved?.Invoke(this, projectId);
		}

		protected virtual void OnAssetsAdded(Guid projectId)
		{
			this.AssetsAdded?.Invoke(this, projectId);
		}

		protected virtual void OnProjectStateChanged(Guid projectId)
		{
			this.ProjectStateChanged?.Invoke(this, projectId);
		}

		protected virtual void OnProjectAssetChanged(Guid projectId, Asset asset)
		{
			this.ProjectAssetChanged?.Invoke(this, projectId, asset);
		}

		protected virtual void OnProjectOutputChanged(Guid projectId)
		{
			this.ProjectOutputChanged?.Invoke(this, projectId);
		}

		protected virtual void OnTargetConfigurationChanged(TargetConfiguration newConfig)
		{
			//IL_000e: Unknown result type (might be due to invalid IL or missing references)
			this.TargetConfigurationChanged?.Invoke(this, newConfig);
		}

		public SolutionModel()
		{
			//IL_0009: Unknown result type (might be due to invalid IL or missing references)
			//IL_0013: Expected O, but got Unknown
			//IL_0036: Unknown result type (might be due to invalid IL or missing references)
			//IL_0040: Expected O, but got Unknown
			//IL_004e: Unknown result type (might be due to invalid IL or missing references)
			//IL_0058: Expected O, but got Unknown
			//IL_0066: Unknown result type (might be due to invalid IL or missing references)
			//IL_0070: Expected O, but got Unknown
			SolutionBuilder = new SolutionBuilder();
			SolutionBuilder.set_ExportImportScriptOnSave(true);
			TargetConfiguration = (TargetConfiguration)2;
			SolutionBuilder.add_ProjectBuildFinished(new ProjectBuildEventHandler(SolutionBuilder_ProjectBuildFinished));
			SolutionBuilder.add_ProjectCleanFinished(new ProjectCleanFinishedEventHandler(SolutionBuilder_ProjectCleanFinished));
			SolutionBuilder.add_ProjectRepageFinished(new ProjectRepageFinishedEventHandler(SolutionBuilder_ProjectRepageFinished));
		}

		public void Close()
		{
			SetActiveProject(Guid.Empty);
			SolutionBuilder.CloseSolution();
		}

		private void SolutionBuilder_ProjectCleanFinished(object sender, ProjectBuilder builder)
		{
			UpdateProjectState(builder);
			OnProjectOutputChanged(builder.get_ActiveProject().get_Id());
		}

		private void SolutionBuilder_ProjectRepageFinished(object sender, ProjectBuilder builder)
		{
			UpdateProjectState(builder);
			OnProjectOutputChanged(builder.get_ActiveProject().get_Id());
		}

		private void UpdateProjectState(ProjectBuilder builder)
		{
			builder.QueryAssetBuildStates();
			OnProjectStateChanged(builder.get_ActiveProject().get_Id());
		}

		private void SolutionBuilder_ProjectBuildFinished(object sender, ProjectBuilder builder)
		{
			UpdateProjectState(builder);
			OnProjectOutputChanged(builder.get_ActiveProject().get_Id());
		}

		internal bool IsAssetNameAvailable(Guid projectId, string value)
		{
			ProjectBuilder projectBuilder = GetProjectBuilder(projectId);
			if (projectBuilder != null)
			{
				Asset val = null;
				return projectBuilder.IsAssetNameAvavailable(value, ref val);
			}
			return false;
		}

		public ProjectBuilder GetProjectBuilder(Guid projectId)
		{
			if (!SolutionBuilder.get_ProjectBuilders().ContainsKey(projectId))
			{
				return null;
			}
			return SolutionBuilder.get_ProjectBuilders()[projectId];
		}

		public ProjectBuilder GetProjectBuilder(string name)
		{
			return SolutionBuilder.GetProjectBuilder(name);
		}

		public bool SetActiveProject(Guid projectId)
		{
			if (projectId == Guid.Empty)
			{
				ActiveSolutionProject = null;
				OnActiveProjectChanged();
				return true;
			}
			if (ActiveSolutionProject != null && ActiveSolutionProject.get_Id().Equals(projectId))
			{
				return true;
			}
			if (!ActiveSolution.get_Projects().ContainsKey(projectId))
			{
				return false;
			}
			ActiveSolutionProject = ActiveSolution.get_Projects()[projectId];
			OnActiveProjectChanged();
			return true;
		}

		public bool SetActiveProject(string name)
		{
			Guid key = (from _p in ActiveSolution.get_Projects()
				where _p.Value.get_Name() == name
				select _p).FirstOrDefault().Key;
			OnActiveProjectChanged();
			return SetActiveProject(key);
		}

		public void SetTargetConfiguration(TargetConfiguration configuration)
		{
			//IL_0002: Unknown result type (might be due to invalid IL or missing references)
			//IL_0004: Unknown result type (might be due to invalid IL or missing references)
			//IL_0006: Unknown result type (might be due to invalid IL or missing references)
			//IL_0016: Unknown result type (might be due to invalid IL or missing references)
			//IL_0023: Unknown result type (might be due to invalid IL or missing references)
			configuration = (TargetConfiguration)1;
			if (configuration != TargetConfiguration)
			{
				TargetConfiguration = configuration;
				SolutionBuilder.LoadConfiguration(configuration);
				ScanAssets();
			}
		}

		public Error CreateProject(string name, ProjectTemplate template)
		{
			//IL_0028: Unknown result type (might be due to invalid IL or missing references)
			//IL_002d: Unknown result type (might be due to invalid IL or missing references)
			//IL_002e: Unknown result type (might be due to invalid IL or missing references)
			//IL_0030: Invalid comparison between Unknown and I4
			//IL_0037: Unknown result type (might be due to invalid IL or missing references)
			//IL_0038: Unknown result type (might be due to invalid IL or missing references)
			//IL_0045: Unknown result type (might be due to invalid IL or missing references)
			//IL_0049: Unknown result type (might be due to invalid IL or missing references)
			string text = Path.Combine(Paths.GetDirectoryName(SolutionBuilder.get_ActiveSolutionFullPath()), name);
			Guid activeProject = default(Guid);
			Error val = SolutionBuilder.CreateNewProject(name, text, template.get_LayerConfig(), ref activeProject);
			if ((int)val > 0)
			{
				return val;
			}
			SetActiveProject(activeProject);
			return (Error)0;
		}

		public Error CreateProjectFromXML(string name, string xmlPath, OnSetBuildErrorHandles setBuildErrorHandles = null, bool overwrite = false)
		{
			//IL_0026: Unknown result type (might be due to invalid IL or missing references)
			//IL_002b: Unknown result type (might be due to invalid IL or missing references)
			//IL_002c: Unknown result type (might be due to invalid IL or missing references)
			//IL_002e: Invalid comparison between Unknown and I4
			//IL_0035: Unknown result type (might be due to invalid IL or missing references)
			//IL_0036: Unknown result type (might be due to invalid IL or missing references)
			//IL_0043: Unknown result type (might be due to invalid IL or missing references)
			//IL_0047: Unknown result type (might be due to invalid IL or missing references)
			string text = Path.Combine(Paths.GetDirectoryName(SolutionBuilder.get_ActiveSolutionFullPath()), name);
			Guid activeProject = default(Guid);
			Error val = SolutionBuilder.CreateNewProjectFromXML(name, text, xmlPath, ref activeProject, setBuildErrorHandles, overwrite);
			if ((int)val > 0)
			{
				return val;
			}
			SetActiveProject(activeProject);
			return (Error)0;
		}

		public Error RemoveProject(Guid projectGuid, bool clean, bool removeOutputFromDisk, bool removeAllProjectFilesFromDisk)
		{
			//IL_001d: Unknown result type (might be due to invalid IL or missing references)
			//IL_014b: Unknown result type (might be due to invalid IL or missing references)
			//IL_0150: Unknown result type (might be due to invalid IL or missing references)
			//IL_0151: Unknown result type (might be due to invalid IL or missing references)
			//IL_0153: Invalid comparison between Unknown and I4
			//IL_015c: Unknown result type (might be due to invalid IL or missing references)
			//IL_015d: Unknown result type (might be due to invalid IL or missing references)
			//IL_0241: Unknown result type (might be due to invalid IL or missing references)
			//IL_0247: Unknown result type (might be due to invalid IL or missing references)
			//IL_024b: Unknown result type (might be due to invalid IL or missing references)
			if (!ActiveSolution.get_Projects().ContainsKey(projectGuid))
			{
				return (Error)5;
			}
			SetActiveProject(Guid.Empty);
			SolutionProjectDecriptor val = ActiveSolution.get_Projects()[projectGuid];
			string text = null;
			ProjectBuilder projectBuilder = SolutionBuilder.GetProjectBuilder(val.get_Id());
			if (projectBuilder != null)
			{
				if (clean)
				{
					SolutionBuilder.CleanProject(projectGuid);
				}
				if (removeOutputFromDisk)
				{
					string fullPath = Path.GetFullPath(projectBuilder.get_ActiveProject().get_BuildConfiguration().get_OutputDirectory());
					string outputFilename = projectBuilder.get_ActiveProject().get_BuildConfiguration().get_OutputFilename();
					string text2 = Path.Combine(fullPath, outputFilename);
					GtsInfo gtsInfo = default(GtsInfo);
					List<string> list = default(List<string>);
					if (GTSBuilderTools.GetGtsInfo(text2, ref gtsInfo) == Error.Ok && GTSBuilderTools.GetGTPFiles(text2, ref list))
					{
						try
						{
							File.Delete(text2);
							foreach (string item in list)
							{
								File.Delete(Path.Combine(fullPath, item));
							}
						}
						catch
						{
						}
					}
				}
				if (removeAllProjectFilesFromDisk)
				{
					text = projectBuilder.GetProjectPath();
				}
			}
			Error val2 = SolutionBuilder.RemoveProject(projectGuid);
			if ((int)val2 > 0)
			{
				return val2;
			}
			if (text != null)
			{
				try
				{
					string[] array = new string[3]
					{
						Path.Combine(text, val.get_Name() + "." + Constants.ProjectExtension),
						Path.Combine(text, val.get_Name() + ".import.bak"),
						Path.Combine(text, val.get_Name() + ".log")
					};
					string[] array2 = array;
					foreach (string path in array2)
					{
						if (File.Exists(path))
						{
							File.Delete(path);
						}
					}
					Directory.Delete(Path.Combine(text, Constants.get_StateDirName()), recursive: true);
					try
					{
						if (!Directory.EnumerateFileSystemEntries(text).Any())
						{
							Directory.Delete(text);
						}
					}
					catch
					{
					}
				}
				catch
				{
					return (Error)4;
				}
			}
			return (Error)0;
		}

		private void ImportAssetInternal(AssetImportDescription importDescription)
		{
			//IL_0001: Unknown result type (might be due to invalid IL or missing references)
			//IL_0007: Expected O, but got Unknown
			//IL_0016: Unknown result type (might be due to invalid IL or missing references)
			//IL_0029: Unknown result type (might be due to invalid IL or missing references)
			//IL_002f: Expected O, but got Unknown
			//IL_00ad: Unknown result type (might be due to invalid IL or missing references)
			//IL_00c5: Unknown result type (might be due to invalid IL or missing references)
			//IL_00dd: Unknown result type (might be due to invalid IL or missing references)
			ImportAsset val = new ImportAsset();
			val.set_Name(importDescription.Name);
			val.set_Type(importDescription.Type);
			for (int i = 0; i < importDescription.LayerAssets.Count; i++)
			{
				ImportAssetLayer val2 = new ImportAssetLayer();
				val2.set_Source(importDescription.LayerAssets[i].FileSources);
				val2.set_QualityProfile(importDescription.LayerAssets[i].Quality.ToString());
				val2.set_Flip((Flip)importDescription.LayerAssets[i].Flip);
				val2.get_Swizzle()[0] = "";
				val2.get_InvertChannels()[0] = "";
				val2.set_MipSourceType(importDescription.LayerAssets[i].MipSourceType);
				val2.set_ColorSpace(importDescription.LayerAssets[i].ColorSpace);
				val2.set_PackingMode(importDescription.LayerAssets[i].PackingMode);
				val2.set_Swizzle(importDescription.LayerAssets[i].Swizzle);
				val.AddAssetLayer(val2);
			}
			ProjectBuilder activeProjectBuilder = ActiveProjectBuilder;
			OnAssetImportStarted(activeProjectBuilder);
			SolutionBuilder.get_BuildReportingHandler().set_DefaultErrorAction((ErrorAction)0);
			activeProjectBuilder.Import(val);
			SolutionBuilder.get_BuildReportingHandler().set_DefaultErrorAction((ErrorAction)1);
			OnAssetImportFinished(activeProjectBuilder);
		}

		public void ReImportAsset(AssetImportDescription importDescription)
		{
			ImportAssetInternal(importDescription);
			Asset asset = FindAssetByName(ActiveProjectBuilder.get_ActiveProject().get_Id(), importDescription.Name);
			OnProjectAssetChanged(ActiveProjectBuilder.get_ActiveProject().get_Id(), asset);
		}

		public void ImportAsset(AssetImportDescription importDescription)
		{
			ImportAssetInternal(importDescription);
			OnAssetAdded(importDescription.Name, ActiveSolutionProject.get_Id());
		}

		public void ImportAssetTemplate(LayerTemplateImportDescription templateDescription)
		{
			//IL_0001: Unknown result type (might be due to invalid IL or missing references)
			//IL_0007: Expected O, but got Unknown
			//IL_001c: Unknown result type (might be due to invalid IL or missing references)
			//IL_0022: Expected O, but got Unknown
			//IL_0086: Unknown result type (might be due to invalid IL or missing references)
			//IL_009e: Unknown result type (might be due to invalid IL or missing references)
			//IL_00b6: Unknown result type (might be due to invalid IL or missing references)
			//IL_00e6: Unknown result type (might be due to invalid IL or missing references)
			ImportAssetTemplate val = new ImportAssetTemplate();
			val.set_Name(templateDescription.Name);
			for (int i = 0; i < templateDescription.LayerTemplates.Count; i++)
			{
				ImportAssetLayerTemplate val2 = new ImportAssetLayerTemplate();
				val2.set_Source(templateDescription.LayerTemplates[i].FileSources);
				val2.set_QualityProfile(templateDescription.LayerTemplates[i].Quality.ToString());
				val2.set_Flip((Flip)templateDescription.LayerTemplates[i].Flip);
				val2.set_PackingMode(templateDescription.LayerTemplates[i].PackingMode);
				val2.set_MipSourceType(templateDescription.LayerTemplates[i].MipSourceType);
				val2.set_ColorSpace(templateDescription.LayerTemplates[i].ColorSpace);
				val2.set_Swizzle(templateDescription.LayerTemplates[i].Swizzle);
				val2.set_ColorSpace(templateDescription.LayerTemplates[i].ColorSpace);
				val.get_LayerTemplates().Add(val2);
			}
			ProjectBuilder activeProjectBuilder = ActiveProjectBuilder;
			OnAssetImportStarted(activeProjectBuilder);
			SolutionBuilder.get_BuildReportingHandler().set_DefaultErrorAction((ErrorAction)0);
			activeProjectBuilder.Import(val);
			SolutionBuilder.get_BuildReportingHandler().set_DefaultErrorAction((ErrorAction)1);
			OnAssetImportFinished(activeProjectBuilder);
			OnAssetsAdded(ActiveSolutionProject.get_Id());
		}

		public bool ImportFromScript(string filename)
		{
			//IL_0023: Unknown result type (might be due to invalid IL or missing references)
			//IL_0027: Unknown result type (might be due to invalid IL or missing references)
			//IL_002c: Unknown result type (might be due to invalid IL or missing references)
			//IL_004e: Unknown result type (might be due to invalid IL or missing references)
			//IL_0050: Invalid comparison between Unknown and I4
			ProjectBuilder activeProjectBuilder = ActiveProjectBuilder;
			OnAssetImportStarted(activeProjectBuilder);
			SolutionBuilder.get_BuildReportingHandler().set_DefaultErrorAction((ErrorAction)0);
			Error val = (Error)0;
			try
			{
				val = activeProjectBuilder.Import(filename);
			}
			catch (Exception ex)
			{
				throw ex;
			}
			SolutionBuilder.get_BuildReportingHandler().set_DefaultErrorAction((ErrorAction)1);
			OnAssetImportFinished(activeProjectBuilder);
			if ((int)val > 0)
			{
				return false;
			}
			OnAssetsAdded(ActiveSolutionProject.get_Id());
			return true;
		}

		public bool RemoveAsset(Guid assetId)
		{
			ProjectBuilder activeProjectBuilder = ActiveProjectBuilder;
			if (!activeProjectBuilder.get_ActiveProject().get_Assets().ContainsKey(assetId))
			{
				return false;
			}
			Asset val = activeProjectBuilder.get_ActiveProject().get_Assets()[assetId];
			OnAssetRemoving(val.get_Id(), ActiveSolutionProject.get_Id());
			if (!activeProjectBuilder.RemoveAsset(assetId))
			{
				return false;
			}
			OnAssetRemoved(val.get_Name(), ActiveSolutionProject.get_Id());
			OnProjectAssetChanged(ActiveProjectBuilder.get_ActiveProject().get_Id(), null);
			return true;
		}

		public bool RemoveAssets(List<Guid> assetIds, bool autoRemoveGroups)
		{
			ProjectBuilder activeProjectBuilder = ActiveProjectBuilder;
			OnAssetsRemoving(ActiveSolutionProject.get_Id(), assetIds);
			if (!activeProjectBuilder.RemoveAssets(assetIds, autoRemoveGroups))
			{
				return false;
			}
			OnAssetsRemoved(ActiveSolutionProject.get_Id());
			OnProjectAssetChanged(ActiveProjectBuilder.get_ActiveProject().get_Id(), null);
			return true;
		}

		public void UpdateAsset(Guid projectId, Asset asset)
		{
			OnProjectAssetChanged(projectId, asset);
		}

		public bool RenameAsset(Guid projectId, Guid assetId, string name)
		{
			ProjectBuilder projectBuilder = GetProjectBuilder(projectId);
			List<Asset> list = null;
			if (projectBuilder != null)
			{
				list = projectBuilder.RenameAsset(assetId, name);
			}
			if (list.Count > 1)
			{
				OnProjectAssetChanged(projectId, null);
			}
			else
			{
				OnProjectAssetChanged(projectId, list[0]);
			}
			return true;
		}

		public void ScanAssets()
		{
			foreach (ProjectBuilder value in SolutionBuilder.get_ProjectBuilders().Values)
			{
				value.QueryAssetBuildStates();
				OnProjectStateChanged(value.get_ActiveProject().get_Id());
			}
		}

		public Asset FindAsset(Guid projectId, Guid assetId)
		{
			ProjectBuilder projectBuilder = GetProjectBuilder(projectId);
			if (projectBuilder == null || projectBuilder.get_ActiveProject() == null)
			{
				return null;
			}
			if (!projectBuilder.get_ActiveProject().get_Assets().ContainsKey(assetId))
			{
				return null;
			}
			return projectBuilder.get_ActiveProject().get_Assets()[assetId];
		}

		public Asset FindAssetByName(Guid projectId, string name)
		{
			ProjectBuilder projectBuilder = GetProjectBuilder(projectId);
			if (projectBuilder == null || projectBuilder.get_ActiveProject() == null)
			{
				return null;
			}
			foreach (Asset value in projectBuilder.get_ActiveProject().get_Assets().Values)
			{
				if (value.get_Name() == name)
				{
					return value;
				}
			}
			return null;
		}

		public List<Asset> FindAssetGroupAsset(Guid projectId, string groupAssetId)
		{
			ProjectBuilder projectBuilder = GetProjectBuilder(projectId);
			if (projectBuilder == null || projectBuilder.get_ActiveProject() == null)
			{
				return new List<Asset>();
			}
			if (groupAssetId == null)
			{
				return new List<Asset>(projectBuilder.get_ActiveProject().get_Assets().Values.Where((Asset x) => groupAssetId == null));
			}
			return new List<Asset>(projectBuilder.get_ActiveProject().get_Assets().Values.Where((Asset x) => groupAssetId.Equals(x.get_AssetGroupId())));
		}

		public void UpdateProfiles(string buildProfile)
		{
			//IL_003e: Unknown result type (might be due to invalid IL or missing references)
			if (ActiveProjectBuilder != null)
			{
				if (!ActiveProjectBuilder.get_ActiveProject().get_BuildProfile().ToLower()
					.Equals(buildProfile.ToLower()))
				{
					ActiveProjectBuilder.SetBuildProfile(buildProfile);
				}
				OnProjectStateChanged(ActiveProjectBuilder.get_ActiveProject().get_Id());
			}
		}

		public void UpdateGTSOutputFilename(string filePath)
		{
			if (ActiveProjectBuilder != null)
			{
				ActiveProjectBuilder.SetOutputLocation(filePath);
				OnProjectOutputChanged(ActiveProjectBuilder.get_ActiveProject().get_Id());
			}
		}

		public void UpdateSoupOutputFilename(string folderPath)
		{
			if (ActiveProjectBuilder != null)
			{
				ActiveProjectBuilder.SetSoupOutputDirectory(folderPath, false);
				OnProjectOutputChanged(ActiveProjectBuilder.get_ActiveProject().get_Id());
			}
		}

		public void UpdatePageFiles(string folderPath)
		{
			if (ActiveProjectBuilder != null)
			{
				ActiveProjectBuilder.SetPagesDirectory(folderPath);
				OnProjectOutputChanged(ActiveProjectBuilder.get_ActiveProject().get_Id());
			}
		}

		public void UpdatePatching(bool enable)
		{
			if (ActiveProjectBuilder != null)
			{
				ActiveProjectBuilder.set_NoPatching(!enable);
				OnProjectStateChanged(ActiveProjectBuilder.get_ActiveProject().get_Id());
			}
		}

		public void UpdateNoRedirection(bool enable)
		{
			if (ActiveProjectBuilder != null)
			{
				ActiveProjectBuilder.set_EnableRedirection(!enable);
				OnProjectStateChanged(ActiveProjectBuilder.get_ActiveProject().get_Id());
			}
		}

		public void UpdateNoSharedMips(bool enable)
		{
			if (ActiveProjectBuilder != null)
			{
				ActiveProjectBuilder.set_EnableSharedMipGeneration(!enable);
				OnProjectStateChanged(ActiveProjectBuilder.get_ActiveProject().get_Id());
			}
		}

		public void UpdateMipStripping(bool enable)
		{
			if (ActiveProjectBuilder != null)
			{
				ActiveProjectBuilder.set_EnableMipStripping(enable);
				OnProjectStateChanged(ActiveProjectBuilder.get_ActiveProject().get_Id());
			}
		}

		public void UpdateHighQualityCoding(bool enable)
		{
			if (ActiveProjectBuilder != null)
			{
				ActiveProjectBuilder.set_EnableHighQualityCoding(enable);
				OnProjectStateChanged(ActiveProjectBuilder.get_ActiveProject().get_Id());
			}
		}

		public void UpdateNoUniform(bool enable)
		{
			if (ActiveProjectBuilder != null)
			{
				ActiveProjectBuilder.set_EnableUniformCoding(!enable);
				OnProjectStateChanged(ActiveProjectBuilder.get_ActiveProject().get_Id());
			}
		}

		public void UpdateMaxAnisotropy(uint maxAni)
		{
			if (ActiveProjectBuilder != null)
			{
				ActiveProjectBuilder.SetMaximumAnisotropy(maxAni);
				OnProjectStateChanged(ActiveProjectBuilder.get_ActiveProject().get_Id());
			}
		}

		public void UpdatePageSize(uint size)
		{
			if (ActiveProjectBuilder != null)
			{
				ActiveProjectBuilder.SetPageSize(size);
				OnProjectStateChanged(ActiveProjectBuilder.get_ActiveProject().get_Id());
			}
		}

		public void UpdatePagingStrategy(PagingStrategy strategy)
		{
			//IL_0015: Unknown result type (might be due to invalid IL or missing references)
			if (ActiveProjectBuilder != null)
			{
				ActiveProjectBuilder.SetPagingStrategy(strategy);
				OnProjectStateChanged(ActiveProjectBuilder.get_ActiveProject().get_Id());
			}
		}

		public void UpdateTargetDisk(TargetDisk targetDisk)
		{
			//IL_0015: Unknown result type (might be due to invalid IL or missing references)
			if (ActiveProjectBuilder != null)
			{
				ActiveProjectBuilder.SetTargetDisk(targetDisk);
				OnProjectStateChanged(ActiveProjectBuilder.get_ActiveProject().get_Id());
			}
		}

		public void UpdateTileSize(uint width, uint height)
		{
			if (ActiveProjectBuilder != null)
			{
				ActiveProjectBuilder.SetTileWidth(width);
				ActiveProjectBuilder.SetTileHeight(height);
				OnProjectStateChanged(ActiveProjectBuilder.get_ActiveProject().get_Id());
			}
		}

		public void UpdateTilingmode(TilingMode mode)
		{
			//IL_0015: Unknown result type (might be due to invalid IL or missing references)
			if (ActiveProjectBuilder != null)
			{
				ActiveProjectBuilder.SetTilingMode(mode);
				OnProjectStateChanged(ActiveProjectBuilder.get_ActiveProject().get_Id());
			}
		}

		public void UpdateLayerConfiguration(LayerConfig config)
		{
			//IL_0016: Unknown result type (might be due to invalid IL or missing references)
			if (ActiveProjectBuilder != null)
			{
				ActiveProjectBuilder.UpdateLayerConfig(config);
				OnProjectStateChanged(ActiveProjectBuilder.get_ActiveProject().get_Id());
			}
		}

		public bool HasProject(string name)
		{
			foreach (ProjectBuilder value in SolutionBuilder.get_ProjectBuilders().Values)
			{
				if (value.get_ActiveProject().get_Name().ToLower()
					.Equals(name.ToLower()))
				{
					return true;
				}
			}
			return false;
		}

		public void RenameProject(string name)
		{
			throw new NotImplementedException();
		}

		public bool ProjectExists(string name)
		{
			return File.Exists(Path.Combine(Path.Combine(Paths.GetDirectoryName(SolutionBuilder.get_ActiveSolutionFullPath()), name), name + "." + Constants.ProjectExtension));
		}

		public bool ExportToImportScript(string filename)
		{
			try
			{
				ActiveProjectBuilder.ExportToImportScript(filename);
			}
			catch
			{
				return false;
			}
			return true;
		}

		public Asset FindFirstAssetInGroup(Guid projectGuid, string assetGroupId)
		{
			if (string.IsNullOrEmpty(assetGroupId))
			{
				return null;
			}
			List<Asset> list = FindAssetGroupAsset(projectGuid, assetGroupId);
			if (list == null)
			{
				return null;
			}
			List<Asset> list2 = list.Where((Asset _asset) => _asset.get_Face() == 0).ToList();
			if (list2 == null || list2.Count < 1)
			{
				return null;
			}
			return list2.First();
		}

		public string GetProjectAbsolutePath(Guid projectGuid)
		{
			string directoryName = Paths.GetDirectoryName(SolutionBuilder.get_ActiveSolutionFullPath());
			string name = ActiveSolution.get_Projects()[projectGuid].get_Name();
			return Path.Combine(directoryName, name);
		}

		public void MoveAssets(Guid srcProjectId, List<Asset> assets, Guid destProjectId, bool keepCopy, ConversionProblemsCallback callback)
		{
			//IL_0047: Unknown result type (might be due to invalid IL or missing references)
			//IL_004d: Invalid comparison between Unknown and I4
			//IL_0092: Unknown result type (might be due to invalid IL or missing references)
			//IL_009c: Expected O, but got Unknown
			//IL_0097: Unknown result type (might be due to invalid IL or missing references)
			//IL_0128: Unknown result type (might be due to invalid IL or missing references)
			ProjectBuilder val = SolutionBuilder.get_ProjectBuilders()[srcProjectId];
			ProjectBuilder val2 = SolutionBuilder.get_ProjectBuilders()[destProjectId];
			MoveAssetConvProblemsArgs moveAssetConvProblemsArgs = null;
			foreach (Asset asset in assets)
			{
				Asset val3 = asset;
				ImportAsset val4 = null;
				if ((int)val3.get_Type() == 1)
				{
					val3 = val.GetCubeMapFace0(val3.get_AssetGroupId());
					if (val3 == null)
					{
						string text = "Could not import cube map '" + val3.get_AssetGroupId() + "', face 0 is not present. Please reimport the cube map to make sure face 0 is present.";
						val.get_BuildReportingHandler().OnError((BuildProcess)1, (BuildIssue)new ImportIssue(text));
						break;
					}
				}
				bool flag = AssetTools.ConvertAssetToImportAsset(val3, val.GetProjectPath(), val.get_ActiveProject().get_LayerConfiguration(), val2.get_ActiveProject().get_LayerConfiguration(), ref val4, (AssetToImportAssetConversionOptions)0);
				if (!flag && callback != null)
				{
					if (moveAssetConvProblemsArgs == null)
					{
						moveAssetConvProblemsArgs = new MoveAssetConvProblemsArgs();
						callback(this, moveAssetConvProblemsArgs);
					}
					if (moveAssetConvProblemsArgs.Continue)
					{
						flag = AssetTools.ConvertAssetToImportAsset(val3, val.GetProjectPath(), val.get_ActiveProject().get_LayerConfiguration(), val2.get_ActiveProject().get_LayerConfiguration(), ref val4, moveAssetConvProblemsArgs.Options);
					}
				}
				if (moveAssetConvProblemsArgs != null && !moveAssetConvProblemsArgs.Continue)
				{
					break;
				}
				if (flag)
				{
					OnAssetImportStarted(val2);
					BuildLoggerReporter buildLoggerReporter = new BuildLoggerReporter();
					buildLoggerReporter.StartListening(val2);
					val2.Import(val4);
					buildLoggerReporter.StopListening();
					if (!buildLoggerReporter.HasErrors && !keepCopy)
					{
						val.RemoveAsset(val3.get_Id());
					}
					val2.ClearImportAssets();
					OnAssetImportFinished(val2);
					OnAssetRemoved(val3.get_Name(), srcProjectId);
					OnAssetAdded(val3.get_Name(), destProjectId);
				}
			}
		}

		public void MoveAssets(Dictionary<Guid, List<Asset>> assets, SolutionBuilder targetSolution, Guid targetProjectId, bool keepCopy, out MoveAssetReport report, ConversionProblemsCallback callback)
		{
			//IL_0096: Unknown result type (might be due to invalid IL or missing references)
			//IL_009c: Invalid comparison between Unknown and I4
			//IL_0147: Unknown result type (might be due to invalid IL or missing references)
			//IL_01b2: Unknown result type (might be due to invalid IL or missing references)
			//IL_01bc: Expected O, but got Unknown
			//IL_01b7: Unknown result type (might be due to invalid IL or missing references)
			report = new MoveAssetReport();
			List<ImportAsset> list = new List<ImportAsset>();
			ProjectBuilder val = targetSolution.get_ProjectBuilders()[targetProjectId];
			report.TotalAssetCount = 0;
			foreach (Guid key in assets.Keys)
			{
				List<Asset> list2 = assets[key];
				report.TotalAssetCount += list2.Count;
				ProjectBuilder val2 = SolutionBuilder.get_ProjectBuilders()[key];
				MoveAssetConvProblemsArgs moveAssetConvProblemsArgs = null;
				foreach (Asset item2 in list2)
				{
					Asset val3 = item2;
					if ((int)val3.get_Type() == 1)
					{
						val3 = val2.GetCubeMapFace0(item2.get_AssetGroupId());
					}
					ImportAsset item = null;
					bool flag = AssetTools.ConvertAssetToImportAsset(val3, val2.GetProjectPath(), val2.get_ActiveProject().get_LayerConfiguration(), val.get_ActiveProject().get_LayerConfiguration(), ref item, (AssetToImportAssetConversionOptions)0);
					if (!flag && callback != null)
					{
						if (moveAssetConvProblemsArgs == null)
						{
							moveAssetConvProblemsArgs = new MoveAssetConvProblemsArgs();
							callback(this, moveAssetConvProblemsArgs);
						}
						if (moveAssetConvProblemsArgs.Continue)
						{
							flag = AssetTools.ConvertAssetToImportAsset(val3, val2.GetProjectPath(), val2.get_ActiveProject().get_LayerConfiguration(), val.get_ActiveProject().get_LayerConfiguration(), ref item, moveAssetConvProblemsArgs.Options);
						}
					}
					if (moveAssetConvProblemsArgs != null && !moveAssetConvProblemsArgs.Continue)
					{
						report.Canceled = true;
						return;
					}
					if (flag)
					{
						list.Add(item);
						continue;
					}
					string text = "Asset '" + item2.get_Name() + "' could not converted to the configuration of the target project.";
					val2.get_BuildReportingHandler().OnError((BuildProcess)1, (BuildIssue)new ImportIssue(text));
				}
			}
			foreach (ImportAsset item3 in list)
			{
				val.AddImportAsset(item3);
			}
			try
			{
				OnAssetImportStarted(val);
				report.BuildLoggerReporterImport.StartListening(val);
				val.Import();
				report.BuildLoggerReporterImport.StopListening();
				OnAssetImportFinished(val);
				report.HasImportErrors = report.BuildLoggerReporterImport.HasErrors;
				val.ClearImportAssets();
			}
			catch (Exception ex)
			{
				throw ex;
			}
			if (!report.HasErrors && !keepCopy)
			{
				foreach (Guid key2 in assets.Keys)
				{
					List<Asset> list3 = assets[key2];
					ProjectBuilder val4 = SolutionBuilder.get_ProjectBuilders()[key2];
					List<Guid> assets2 = new List<Guid>(list3.Select((Asset a) => a.get_Id()));
					val4.AddAssetsToRemove(list3);
					OnAssetsRemoving(key2, assets2);
					BuildLoggerReporter buildLoggerReporter = new BuildLoggerReporter();
					buildLoggerReporter.StartListening(val4);
					val4.Import();
					buildLoggerReporter.StopListening();
					report.HasErrors = report.HasErrors || buildLoggerReporter.HasErrors;
					report.BuildLoggerReporterDeletion.Add(buildLoggerReporter);
					OnAssetsRemoved(key2);
				}
			}
			report.HasErrors = report.HasImportErrors || report.HasDeletionErrors;
		}
	}
	public class SolutionSettings
	{
		private Dictionary<Guid, ProjectSettings> projects = new Dictionary<Guid, ProjectSettings>();

		public ProjectSettings this[Guid projectID]
		{
			get
			{
				if (projects.ContainsKey(projectID))
				{
					return projects[projectID];
				}
				return null;
			}
			set
			{
				projects[projectID] = value;
			}
		}

		public SolutionSettings()
		{
		}

		public SolutionSettings(SolutionModel model, Solution solution)
		{
			foreach (SolutionProjectDecriptor value2 in solution.get_Projects().Values)
			{
				ProjectSettings value = new ProjectSettings(model.SolutionBuilder.get_ProjectBuilders()[value2.get_Id()]);
				projects.Add(value2.get_Id(), value);
			}
		}

		public void Save()
		{
			foreach (ProjectSettings value in projects.Values)
			{
				value.Save();
			}
		}

		public void Load()
		{
			foreach (ProjectSettings value in projects.Values)
			{
				value.Load();
			}
		}

		public void Remove(Guid projectId)
		{
			if (projects.ContainsKey(projectId))
			{
				projects[projectId].Save();
				projects.Remove(projectId);
			}
		}
	}
	public class SolutionTree : UserControl
	{
		public class NodeContext
		{
			public Guid ProjectId { get; set; }

			public ProjectTree.AssetNodeType Type { get; set; }

			public Asset Asset { get; set; }

			public int Layer { get; set; }

			public Texture Texture { get; set; }

			public NodeContext(Guid projectId, ProjectTree.AssetNodeType type, Asset asset, int layer, Texture texture)
			{
				ProjectId = projectId;
				Type = type;
				Asset = asset;
				Layer = layer;
				Texture = texture;
			}
		}

		public delegate void ProjectSelectedEventHandler(object sender, Guid projectId);

		public delegate void AssetNodeDoubleClickedEventHandler(object sender, NodeContext context);

		public delegate void AssetNodeClickedEventHandler(object sender, NodeContext context);

		public delegate void AssetNodeRightClickedEventHandler(object sender, List<NodeContext> context, Point location);

		public delegate void RightClickedEventHandler(object sender, Point location);

		public delegate void DeleteEventHandler(List<NodeContext> contexts);

		public delegate bool RenameEventHandler(ProjectTree.RenameAsset renameAsset);

		public delegate void AssetMoveRequestHandler(object sender, Guid srcProjectId, List<Asset> assets, Guid destProjectId, bool keepCopy);

		public delegate void SelectionChangedHandler(object sender);

		public delegate void FilterBarClosedEventHandler(object sender);

		private Dictionary<Guid, ProjectNodeModel> projectNodes;

		private SolutionModel model;

		private IContainer components;

		private AdvTree tree;

		private AdvTree advTree1;

		private ColumnHeader columnHeader3;

		private ColumnHeader columnHeader4;

		private Node node1;

		private Node node2;

		private Node node5;

		private Node node6;

		private Node node9;

		private Node node10;

		private Node node35;

		private Cell cell4;

		private Node node36;

		private Node node37;

		private Node node38;

		private Node node39;

		private Node node41;

		private Node node42;

		private NodeConnector nodeConnector4;

		private ElementStyle elementStyle2;

		private AdvTree advTree2;

		private ColumnHeader columnHeader7;

		private ColumnHeader columnHeader8;

		private Node node11;

		private Node node17;

		private Node node19;

		private Node node12;

		private Node node13;

		private Node node14;

		private Node node15;

		private Cell cell6;

		private Node node16;

		private Node node21;

		private Node node22;

		private Node node40;

		private Node node43;

		private Node node44;

		private NodeConnector nodeConnector1;

		private ElementStyle elementStyle1;

		private Node node45;

		private Node node46;

		private ElementStyle elementStyle4;

		private Node node47;

		private Node node48;

		private NodeConnector nodeConnector2;

		private ElementStyle elementStyle8;

		private FilterBar filterBar;

		public Guid ActiveProject { get; set; }

		public NodeContext SelectedAsset { get; private set; }

		public Dictionary<Guid, List<Asset>> SelectedAssets => GetSelectedAssets();

		public bool HasSelectedAssets
		{
			get
			{
				foreach (Guid key in projectNodes.Keys)
				{
					if (projectNodes[key].Tree.HasSelectedAssets)
					{
						return true;
					}
				}
				return false;
			}
		}

		public event ProjectSelectedEventHandler ProjectSelected;

		public event AssetNodeDoubleClickedEventHandler AssetNodeDoubleClicked;

		public event AssetNodeClickedEventHandler AssetNodeClicked;

		public event AssetNodeRightClickedEventHandler AssetNodeRightClicked;

		public event RightClickedEventHandler RightClicked;

		public event DeleteEventHandler DeletePressed;

		public event RenameEventHandler AssetRenamed;

		public event AssetMoveRequestHandler AssetMoveRequest;

		public event SelectionChangedHandler SelectionChanged;

		public event FilterBarClosedEventHandler FilterBarClosed;

		public SolutionTree()
		{
			InitializeComponent();
			((CollectionBase)(object)tree.get_Nodes()).Clear();
			projectNodes = new Dictionary<Guid, ProjectNodeModel>();
			tree.set_TileSize(CalcProjectTreeSize());
			((Control)(object)tree).Resize += projectTree_Resize;
			OnResize(EventArgs.Empty);
		}

		private Size CalcProjectTreeSize()
		{
			return new Size(base.Size.Width - 50, base.Size.Height - 200);
		}

		public void Delete()
		{
			tree.ClearAndDisposeAllNodes();
			foreach (ProjectNodeModel value in projectNodes.Values)
			{
				value.Delete();
			}
			projectNodes = new Dictionary<Guid, ProjectNodeModel>();
		}

		private void projectTree_Resize(object sender, EventArgs e)
		{
			tree.set_TileSize(CalcProjectTreeSize());
		}

		public void Create(SolutionModel model)
		{
			//IL_0015: Unknown result type (might be due to invalid IL or missing references)
			//IL_001f: Expected O, but got Unknown
			//IL_002d: Unknown result type (might be due to invalid IL or missing references)
			//IL_0037: Expected O, but got Unknown
			//IL_0045: Unknown result type (might be due to invalid IL or missing references)
			//IL_004f: Expected O, but got Unknown
			this.model = model;
			model.SolutionBuilder.add_ProjectLoaded(new ProjectLoadedEventHandler(SolutionBuilder_ProjectLoaded));
			model.SolutionBuilder.add_ProjectUnloaded(new ProjectUnloadedEventHandler(SolutionBuilder_ProjectUnloaded));
			model.SolutionBuilder.add_SolutionLoading(new SolutionLoadingEventHandler(SolutionBuilder_SolutionLoading));
			model.AssetAdded += model_AssetAdded;
			model.AssetsAdded += model_AssetsAdded;
			model.AssetRemoved += model_AssetRemoved;
			model.ProjectStateChanged += model_ProjectStateChanged;
			model.ProjectAssetChanged += model_ProjectAssetChanged;
			ProjectSelected += SolutionTree_ProjectSelected;
		}

		private void model_ProjectAssetChanged(object sender, Guid projectId, Asset asset)
		{
			projectNodes[projectId].RefreshAsset(asset);
			projectNodes[projectId].UpdateNode();
		}

		private void model_ProjectStateChanged(object sender, Guid projectId)
		{
			projectNodes[projectId].Refresh();
			projectNodes[projectId].UpdateNode();
		}

		private void SolutionBuilder_SolutionLoading(object sender)
		{
			((CollectionBase)(object)tree.get_Nodes()).Clear();
		}

		private void SolutionTree_ProjectSelected(object sender, Guid projectId)
		{
			model.SetActiveProject(projectId);
		}

		private void model_AssetAdded(object sender, string assetName, Guid projectId)
		{
			GetProjectNode(projectId).UpdateAllAssets();
			projectNodes[projectId].UpdateNode();
		}

		private void model_AssetsAdded(object sender, Guid projectId)
		{
			GetProjectNode(projectId).Refresh();
			projectNodes[projectId].UpdateNode();
		}

		private void model_AssetRemoved(object sender, string assetName, Guid projectId)
		{
			GetProjectNode(projectId).Refresh();
			projectNodes[projectId].UpdateNode();
		}

		private void SolutionBuilder_ProjectLoaded(object sender, SolutionProjectDecriptor project)
		{
			ProjectBuilder val = model.SolutionBuilder.get_ProjectBuilders()[project.get_Id()];
			CreateProjectTreeNode(val);
			val.QueryAssetBuildStates();
			GetProjectNode(project.get_Id()).Refresh();
		}

		private void SolutionBuilder_ProjectUnloaded(object sender, SolutionProjectDecriptor project)
		{
			ProjectNodeModel projectNode = GetProjectNode(project.get_Id());
			tree.get_Nodes().Remove(projectNode.Node);
			projectNodes.Remove(project.get_Id());
			((Control)(object)tree).Update();
		}

		public void StartRename()
		{
			projectNodes[ActiveProject].StartRename();
		}

		protected virtual void OnProjectSelected(Guid projectId)
		{
			ActiveProject = projectId;
			this.ProjectSelected?.Invoke(this, projectId);
		}

		protected virtual void OnAssetNodeDoubleClicked(NodeContext context)
		{
			this.AssetNodeDoubleClicked?.Invoke(this, context);
		}

		protected virtual void OnAssetNodeClicked(NodeContext context)
		{
			this.AssetNodeClicked?.Invoke(this, context);
		}

		protected virtual void OnAssetNodeRightClicked(List<NodeContext> contexts, Point location)
		{
			this.AssetNodeRightClicked?.Invoke(this, contexts, location);
		}

		protected virtual void OnRightClicked(Point location)
		{
			this.RightClicked?.Invoke(this, location);
		}

		protected virtual void OnDeletePressed(List<NodeContext> contexts)
		{
			this.DeletePressed?.Invoke(contexts);
		}

		protected virtual bool OnRenamePressed(ProjectTree.RenameAsset renameAsset)
		{
			return this.AssetRenamed?.Invoke(renameAsset) ?? false;
		}

		private void OnAssetMoveRequest(object sender, Guid srcProjectId, List<Asset> assets, Guid destProjectId, bool keepCopy)
		{
			if (this.AssetMoveRequest != null)
			{
				this.AssetMoveRequest(this, srcProjectId, assets, destProjectId, keepCopy);
			}
		}

		private void OnSelectionChanged(object sender)
		{
			if (this.SelectionChanged != null)
			{
				this.SelectionChanged(this);
			}
		}

		public ProjectNodeModel GetProjectNode(Guid projectId)
		{
			return projectNodes[projectId];
		}

		private void CreateProjectTreeNode(ProjectBuilder projectBuilder)
		{
			ProjectNodeModel projectNodeModel = new ProjectNodeModel(projectBuilder);
			projectNodeModel.ProjectNodeClicked += model_ProjectNodeClicked;
			projectNodeModel.ProjectNodeRightClicked += model_ProjectNodeRightClicked;
			projectNodeModel.Tree.AssetNodeClicked += Tree_AssetNodeClicked;
			projectNodeModel.Tree.AssetNodeDoubleClicked += Tree_AssetNodeDoubleClicked;
			projectNodeModel.Tree.AssetNodeRightClicked += Tree_AssetNodeRightClicked;
			projectNodeModel.Tree.AssetNodeDelete += Tree_AssetNodeDelete;
			projectNodeModel.Tree.AssetNodeRenamed += Tree_AssetNodeRenamed;
			projectNodeModel.Tree.SelectionChanged += Tree_SelectionChanged;
			projectNodeModel.Tree.MinimumSize = CalcProjectTreeSize();
			ProjectTree projectTree = projectNodeModel.Tree;
			Size size = (projectNodeModel.Tree.Size = projectNodeModel.Tree.MinimumSize);
			Size size3 = (projectTree.MaximumSize = size);
			Size size4 = size3;
			projectNodeModel.Tree.Size = new Size(projectNodeModel.Tree.Size.Width - 50, base.Size.Height - 200);
			projectNodeModel.Tree.AllowDragDrop = true;
			projectNodeModel.Tree.AssetMoveRequest += Tree_AssetMoveRequest;
			tree.get_Nodes().Add(projectNodeModel.Node);
			projectNodes.Add(projectBuilder.get_ActiveProject().get_Id(), projectNodeModel);
		}

		private void Tree_SelectionChanged(object sender)
		{
			OnSelectionChanged(this);
		}

		private void Tree_AssetMoveRequest(object sender, Guid srcProjectId, List<Asset> assets, Guid destProjectId, bool keepCopy)
		{
			OnAssetMoveRequest(this, srcProjectId, assets, destProjectId, keepCopy);
		}

		private void Tree_AssetNodeDelete(object sender, List<ProjectTree.NodeContext> contexts)
		{
			Guid id = ((ProjectTree)sender).ProjectBuilder.get_ActiveProject().get_Id();
			List<NodeContext> list = new List<NodeContext>();
			foreach (ProjectTree.NodeContext context in contexts)
			{
				list.Add(new NodeContext(id, context.Type, context.Asset, context.Layer, context.Texture));
			}
			OnDeletePressed(list);
		}

		private bool Tree_AssetNodeRenamed(object sender, ProjectTree.RenameAsset renameAsset)
		{
			return OnRenamePressed(renameAsset);
		}

		private void model_ProjectNodeRightClicked(object sender, Point location)
		{
			OnRightClicked(PointToScreen(location));
		}

		private void Tree_AssetNodeRightClicked(object sender, List<ProjectTree.NodeContext> contexts, Point location)
		{
			Guid id = ((ProjectTree)sender).ProjectBuilder.get_ActiveProject().get_Id();
			List<NodeContext> list = new List<NodeContext>();
			foreach (ProjectTree.NodeContext context in contexts)
			{
				list.Add(new NodeContext(id, context.Type, context.Asset, context.Layer, context.Texture));
			}
			OnAssetNodeRightClicked(list, location);
		}

		private void Tree_AssetNodeDoubleClicked(object sender, ProjectTree.NodeContext context)
		{
			NodeContext context2 = new NodeContext(((ProjectTree)sender).ProjectBuilder.get_ActiveProject().get_Id(), context.Type, context.Asset, context.Layer, context.Texture);
			OnAssetNodeDoubleClicked(context2);
		}

		private void Tree_AssetNodeClicked(object sender, ProjectTree.NodeContext context)
		{
			ProjectTree projectTree = (ProjectTree)sender;
			if (context == null)
			{
				OnAssetNodeClicked(null);
				return;
			}
			NodeContext nodeContext2 = (SelectedAsset = new NodeContext(projectTree.ProjectBuilder.get_ActiveProject().get_Id(), context.Type, context.Asset, context.Layer, context.Texture));
			NodeContext context2 = nodeContext2;
			OnAssetNodeClicked(context2);
		}

		private void model_ProjectNodeClicked(object sender, Guid id)
		{
			if (id != Guid.Empty)
			{
				OnProjectSelected(id);
			}
		}

		public void SelectFirstProject()
		{
			if (((CollectionBase)(object)tree.get_Nodes()).Count > 0)
			{
				tree.set_SelectedIndex(0);
				tree.get_SelectedNode().EnsureVisible();
				((Control)(object)tree).Focus();
				model.SetActiveProject(projectNodes.Keys.First());
			}
		}

		private void SolutionTree_SizeChanged(object sender, EventArgs e)
		{
			if (projectNodes == null)
			{
				return;
			}
			Size size = CalcProjectTreeSize();
			foreach (ProjectNodeModel value in projectNodes.Values)
			{
				if (value.Tree != null)
				{
					ProjectTree projectTree = value.Tree;
					ProjectTree projectTree2 = value.Tree;
					Size size3 = (value.Tree.Size = size);
					Size size4 = size3;
					Size size6 = (projectTree2.MaximumSize = size4);
					size3 = (projectTree.MinimumSize = size6);
					Size size8 = size3;
				}
			}
		}

		protected virtual void OnFilterBarClosed()
		{
			this.FilterBarClosed?.Invoke(this);
		}

		public void EnableFilter(bool enable)
		{
			filterBar.Visible = enable;
			if (enable)
			{
				filterBar.Activate();
				Filter(filterBar.Filter);
			}
			else
			{
				ClearFilter();
			}
		}

		private void FilterBar_CancelClick(object sender)
		{
			ClearFilter();
			EnableFilter(enable: false);
			OnFilterBarClosed();
		}

		public void Filter(string filterString)
		{
			foreach (ProjectNodeModel value in projectNodes.Values)
			{
				value.Filter(filterString);
			}
		}

		public void ClearFilter()
		{
			foreach (ProjectNodeModel value in projectNodes.Values)
			{
				value.ClearFilter();
			}
		}

		private void filterBar_FilterRequest(object sender)
		{
			if (string.IsNullOrEmpty(filterBar.Filter))
			{
				ClearFilter();
			}
			else
			{
				Filter(filterBar.Filter);
			}
		}

		private Dictionary<Guid, List<Asset>> GetSelectedAssets()
		{
			Dictionary<Guid, List<Asset>> dictionary = new Dictionary<Guid, List<Asset>>();
			foreach (Guid key in projectNodes.Keys)
			{
				List<ProjectTree.NodeContext> selectedAssets = projectNodes[key].Tree.SelectedAssets;
				if (selectedAssets.Count > 0)
				{
					List<Asset> value = new List<Asset>(selectedAssets.Select((ProjectTree.NodeContext x) => x.Asset));
					dictionary.Add(key, value);
				}
			}
			return dictionary;
		}

		private ProjectNodeModel GetProjectModel(Node node)
		{
			Node selectedNode = tree.get_SelectedNode();
			while (selectedNode != null && selectedNode.get_Tag() == null && selectedNode != null)
			{
				selectedNode = selectedNode.get_Parent();
			}
			if (selectedNode == null)
			{
				return null;
			}
			if (selectedNode.get_Tag() is ProjectNodeModel)
			{
				return (ProjectNodeModel)selectedNode.get_Tag();
			}
			return null;
		}

		private Guid GetSelectedProject()
		{
			ProjectNodeModel projectModel = GetProjectModel(tree.get_SelectedNode());
			return (projectModel != null) ? projectModel.Tree.ProjectBuilder.get_ActiveProject().get_Id() : Guid.Empty;
		}

		private void tree_NodeDragFeedback(object sender, TreeDragFeedbackEventArgs e)
		{
			e.AllowDrop = false;
		}

		private void tree_SelectionChanged(object sender, EventArgs e)
		{
			OnSelectionChanged(this);
			Guid selectedProject = GetSelectedProject();
			if (ActiveProject != selectedProject)
			{
				OnProjectSelected(selectedProject);
			}
		}

		protected override void Dispose(bool disposing)
		{
			if (disposing && components != null)
			{
				components.Dispose();
			}
			base.Dispose(disposing);
		}

		private void InitializeComponent()
		{
			//IL_0002: Unknown result type (might be due to invalid IL or missing references)
			//IL_000c: Expected O, but got Unknown
			//IL_000d: Unknown result type (might be due to invalid IL or missing references)
			//IL_0017: Expected O, but got Unknown
			//IL_0018: Unknown result type (might be due to invalid IL or missing references)
			//IL_0022: Expected O, but got Unknown
			//IL_0023: Unknown result type (might be due to invalid IL or missing references)
			//IL_002d: Expected O, but got Unknown
			//IL_002e: Unknown result type (might be due to invalid IL or missing references)
			//IL_0038: Expected O, but got Unknown
			//IL_0039: Unknown result type (might be due to invalid IL or missing references)
			//IL_0043: Expected O, but got Unknown
			//IL_0044: Unknown result type (might be due to invalid IL or missing references)
			//IL_004e: Expected O, but got Unknown
			//IL_004f: Unknown result type (might be due to invalid IL or missing references)
			//IL_0059: Expected O, but got Unknown
			//IL_005a: Unknown result type (might be due to invalid IL or missing references)
			//IL_0064: Expected O, but got Unknown
			//IL_0065: Unknown result type (might be due to invalid IL or missing references)
			//IL_006f: Expected O, but got Unknown
			//IL_0070: Unknown result type (might be due to invalid IL or missing references)
			//IL_007a: Expected O, but got Unknown
			//IL_007b: Unknown result type (might be due to invalid IL or missing references)
			//IL_0085: Expected O, but got Unknown
			//IL_0086: Unknown result type (might be due to invalid IL or missing references)
			//IL_0090: Expected O, but got Unknown
			//IL_0091: Unknown result type (might be due to invalid IL or missing references)
			//IL_009b: Expected O, but got Unknown
			//IL_009c: Unknown result type (might be due to invalid IL or missing references)
			//IL_00a6: Expected O, but got Unknown
			//IL_00a7: Unknown result type (might be due to invalid IL or missing references)
			//IL_00b1: Expected O, but got Unknown
			//IL_00b2: Unknown result type (might be due to invalid IL or missing references)
			//IL_00bc: Expected O, but got Unknown
			//IL_00bd: Unknown result type (might be due to invalid IL or missing references)
			//IL_00c7: Expected O, but got Unknown
			//IL_00c8: Unknown result type (might be due to invalid IL or missing references)
			//IL_00d2: Expected O, but got Unknown
			//IL_00d3: Unknown result type (might be due to invalid IL or missing references)
			//IL_00dd: Expected O, but got Unknown
			//IL_00de: Unknown result type (might be due to invalid IL or missing references)
			//IL_00e8: Expected O, but got Unknown
			//IL_00e9: Unknown result type (might be due to invalid IL or missing references)
			//IL_00f3: Expected O, but got Unknown
			//IL_00f4: Unknown result type (might be due to invalid IL or missing references)
			//IL_00fe: Expected O, but got Unknown
			//IL_00ff: Unknown result type (might be due to invalid IL or missing references)
			//IL_0109: Expected O, but got Unknown
			//IL_010a: Unknown result type (might be due to invalid IL or missing references)
			//IL_0114: Expected O, but got Unknown
			//IL_0115: Unknown result type (might be due to invalid IL or missing references)
			//IL_011f: Expected O, but got Unknown
			//IL_0120: Unknown result type (might be due to invalid IL or missing references)
			//IL_012a: Expected O, but got Unknown
			//IL_012b: Unknown result type (might be due to invalid IL or missing references)
			//IL_0135: Expected O, but got Unknown
			//IL_0136: Unknown result type (might be due to invalid IL or missing references)
			//IL_0140: Expected O, but got Unknown
			//IL_0141: Unknown result type (might be due to invalid IL or missing references)
			//IL_014b: Expected O, but got Unknown
			//IL_014c: Unknown result type (might be due to invalid IL or missing references)
			//IL_0156: Expected O, but got Unknown
			//IL_0157: Unknown result type (might be due to invalid IL or missing references)
			//IL_0161: Expected O, but got Unknown
			//IL_0162: Unknown result type (might be due to invalid IL or missing references)
			//IL_016c: Expected O, but got Unknown
			//IL_016d: Unknown result type (might be due to invalid IL or missing references)
			//IL_0177: Expected O, but got Unknown
			//IL_0178: Unknown result type (might be due to invalid IL or missing references)
			//IL_0182: Expected O, but got Unknown
			//IL_0183: Unknown result type (might be due to invalid IL or missing references)
			//IL_018d: Expected O, but got Unknown
			//IL_018e: Unknown result type (might be due to invalid IL or missing references)
			//IL_0198: Expected O, but got Unknown
			//IL_0199: Unknown result type (might be due to invalid IL or missing references)
			//IL_01a3: Expected O, but got Unknown
			//IL_01a4: Unknown result type (might be due to invalid IL or missing references)
			//IL_01ae: Expected O, but got Unknown
			//IL_01af: Unknown result type (might be due to invalid IL or missing references)
			//IL_01b9: Expected O, but got Unknown
			//IL_01ba: Unknown result type (might be due to invalid IL or missing references)
			//IL_01c4: Expected O, but got Unknown
			//IL_01c5: Unknown result type (might be due to invalid IL or missing references)
			//IL_01cf: Expected O, but got Unknown
			//IL_01d0: Unknown result type (might be due to invalid IL or missing references)
			//IL_01da: Expected O, but got Unknown
			//IL_01db: Unknown result type (might be due to invalid IL or missing references)
			//IL_01e5: Expected O, but got Unknown
			//IL_01e6: Unknown result type (might be due to invalid IL or missing references)
			//IL_01f0: Expected O, but got Unknown
			//IL_01f1: Unknown result type (might be due to invalid IL or missing references)
			//IL_01fb: Expected O, but got Unknown
			//IL_0404: Unknown result type (might be due to invalid IL or missing references)
			//IL_040e: Expected O, but got Unknown
			this.tree = new AdvTree();
			this.advTree1 = new AdvTree();
			this.columnHeader3 = new ColumnHeader();
			this.columnHeader4 = new ColumnHeader();
			this.node1 = new Node();
			this.node2 = new Node();
			this.node5 = new Node();
			this.node6 = new Node();
			this.node9 = new Node();
			this.node10 = new Node();
			this.node35 = new Node();
			this.cell4 = new Cell();
			this.node36 = new Node();
			this.node37 = new Node();
			this.node38 = new Node();
			this.node39 = new Node();
			this.node41 = new Node();
			this.node42 = new Node();
			this.nodeConnector4 = new NodeConnector();
			this.elementStyle2 = new ElementStyle();
			this.advTree2 = new AdvTree();
			this.columnHeader7 = new ColumnHeader();
			this.columnHeader8 = new ColumnHeader();
			this.node11 = new Node();
			this.node17 = new Node();
			this.node19 = new Node();
			this.node12 = new Node();
			this.node13 = new Node();
			this.node14 = new Node();
			this.node15 = new Node();
			this.cell6 = new Cell();
			this.node16 = new Node();
			this.node21 = new Node();
			this.node22 = new Node();
			this.node40 = new Node();
			this.node43 = new Node();
			this.node44 = new Node();
			this.nodeConnector1 = new NodeConnector();
			this.elementStyle1 = new ElementStyle();
			this.node45 = new Node();
			this.node46 = new Node();
			this.elementStyle4 = new ElementStyle();
			this.node47 = new Node();
			this.node48 = new Node();
			this.nodeConnector2 = new NodeConnector();
			this.elementStyle8 = new ElementStyle();
			this.filterBar = new GrBuildStudio.FilterBar();
			((System.ComponentModel.ISupportInitialize)this.tree).BeginInit();
			((System.Windows.Forms.Control)(object)this.tree).SuspendLayout();
			((System.ComponentModel.ISupportInitialize)this.advTree1).BeginInit();
			((System.ComponentModel.ISupportInitialize)this.advTree2).BeginInit();
			base.SuspendLayout();
			((System.Windows.Forms.Control)(object)this.tree).AccessibleRole = System.Windows.Forms.AccessibleRole.Outline;
			((System.Windows.Forms.Control)(object)this.tree).AllowDrop = true;
			((System.Windows.Forms.Control)(object)this.tree).BackColor = System.Drawing.SystemColors.Window;
			this.tree.get_BackgroundStyle().set_Class("TreeBorderKey");
			this.tree.get_BackgroundStyle().set_CornerType((eCornerType)1);
			((System.Windows.Forms.Control)(object)this.tree).Controls.Add((System.Windows.Forms.Control)(object)this.advTree2);
			((System.Windows.Forms.Control)(object)this.tree).Dock = System.Windows.Forms.DockStyle.Fill;
			this.tree.set_ExpandButtonType((eExpandButtonType)3);
			this.tree.set_FullRowSelect(false);
			this.tree.set_LicenseKey("F962CEC7-CD8F-4911-A9E9-CAB39962FC1F");
			((System.Windows.Forms.Control)(object)this.tree).Location = new System.Drawing.Point(0, 45);
			((System.Windows.Forms.Control)(object)this.tree).Name = "tree";
			this.tree.get_Nodes().AddRange((Node[])(object)new Node[2] { this.node45, this.node47 });
			this.tree.set_NodesConnector(this.nodeConnector2);
			this.tree.set_NodeStyle(this.elementStyle8);
			this.tree.set_PathSeparator(";");
			((System.Windows.Forms.Control)(object)this.tree).Size = new System.Drawing.Size(500, 459);
			this.tree.get_Styles().Add(this.elementStyle8);
			this.tree.get_Styles().Add(this.elementStyle4);
			((System.Windows.Forms.Control)(object)this.tree).TabIndex = 10;
			this.tree.set_TileSize(new System.Drawing.Size(400, 30));
			this.tree.set_View((eView)1);
			this.tree.add_SelectionChanged(new System.EventHandler(tree_SelectionChanged));
			this.tree.add_NodeDragFeedback(new TreeDragFeedbackEventHander(tree_NodeDragFeedback));
			((System.Windows.Forms.Control)(object)this.advTree1).AccessibleRole = System.Windows.Forms.AccessibleRole.Outline;
			((System.Windows.Forms.Control)(object)this.advTree1).AllowDrop = true;
			((System.Windows.Forms.Control)(object)this.advTree1).BackColor = System.Drawing.SystemColors.Window;
			this.advTree1.get_BackgroundStyle().set_Class("TreeBorderKey");
			this.advTree1.get_BackgroundStyle().set_CornerType((eCornerType)1);
			this.advTree1.get_Columns().Add(this.columnHeader3);
			this.advTree1.get_Columns().Add(this.columnHeader4);
			this.advTree1.set_LicenseKey("F962CEC7-CD8F-4911-A9E9-CAB39962FC1F");
			((System.Windows.Forms.Control)(object)this.advTree1).Location = new System.Drawing.Point(18, 45);
			((System.Windows.Forms.Control)(object)this.advTree1).Name = "advTree1";
			this.advTree1.get_Nodes().AddRange((Node[])(object)new Node[4] { this.node1, this.node6, this.node37, this.node39 });
			this.advTree1.set_NodesConnector(this.nodeConnector4);
			this.advTree1.set_NodeStyle(this.elementStyle2);
			this.advTree1.set_PathSeparator(";");
			((System.Windows.Forms.Control)(object)this.advTree1).Size = new System.Drawing.Size(400, 198);
			this.advTree1.get_Styles().Add(this.elementStyle2);
			((System.Windows.Forms.Control)(object)this.advTree1).TabIndex = 10;
			((System.Windows.Forms.Control)(object)this.advTree1).Text = "advTree1";
			this.columnHeader3.set_Name("columnHeader3");
			this.columnHeader3.set_StretchToFill(true);
			this.columnHeader3.set_Text("Stacked Texture");
			this.columnHeader3.get_Width().set_Absolute(150);
			this.columnHeader4.set_Name("columnHeader4");
			this.columnHeader4.set_Text("State");
			this.columnHeader4.get_Width().set_Absolute(150);
			this.node1.set_Image((System.Drawing.Image)GrBuildStudio.Properties.Resources.exclamation);
			this.node1.set_Name("node1");
			this.node1.get_Nodes().AddRange((Node[])(object)new Node[2] { this.node2, this.node5 });
			this.node1.set_Text("BlueMarble");
			this.node2.set_Expanded(true);
			this.node2.set_Name("node2");
			this.node2.set_Text("Diffuse: bluemarble_d.png");
			this.node5.set_Expanded(true);
			this.node5.set_Name("node5");
			this.node5.set_Text("Normals: bluemarble_n.png");
			this.node6.set_Image((System.Drawing.Image)GrBuildStudio.Properties.Resources.bullet_green);
			this.node6.set_Name("node6");
			this.node6.get_Nodes().AddRange((Node[])(object)new Node[2] { this.node9, this.node36 });
			this.node6.set_Text("Glider");
			this.node9.set_Name("node9");
			this.node9.get_Nodes().AddRange((Node[])(object)new Node[1] { this.node10 });
			this.node9.set_Text("Diffuse: UDIM");
			this.node10.set_Name("node10");
			this.node10.get_Nodes().AddRange((Node[])(object)new Node[1] { this.node35 });
			this.node10.set_Text("102 items found... expand to view");
			this.node35.get_Cells().Add(this.cell4);
			this.node35.set_Expanded(true);
			this.node35.set_Name("node35");
			this.node35.set_Text("world.topo.bathy.200412.3x21600x21600.A0_n.png");
			this.cell4.set_Name("cell4");
			this.cell4.set_StyleMouseOver((ElementStyle)null);
			this.cell4.set_Text("Built");
			this.node36.set_Expanded(true);
			this.node36.set_Name("node36");
			this.node36.set_Text("Normals: UDIM");
			this.node37.set_Image((System.Drawing.Image)GrBuildStudio.Properties.Resources.bullet_green);
			this.node37.set_Name("node37");
			this.node37.get_Nodes().AddRange((Node[])(object)new Node[1] { this.node38 });
			this.node37.set_Text("Loft");
			this.node38.set_Expanded(true);
			this.node38.set_Name("node38");
			this.node38.set_Text("node16");
			this.node39.set_Image((System.Drawing.Image)GrBuildStudio.Properties.Resources.error_add);
			this.node39.set_Name("node39");
			this.node39.get_Nodes().AddRange((Node[])(object)new Node[2] { this.node41, this.node42 });
			this.node39.set_Text("Stacked texture 3");
			this.node41.set_Expanded(true);
			this.node41.set_Name("node41");
			this.node41.set_Text("node10");
			this.node42.set_Expanded(true);
			this.node42.set_Name("node42");
			this.node42.set_Text("node11");
			this.nodeConnector4.set_LineColor(System.Drawing.SystemColors.ControlText);
			this.elementStyle2.set_CornerType((eCornerType)1);
			this.elementStyle2.set_Name("elementStyle2");
			this.elementStyle2.set_TextColor(System.Drawing.SystemColors.ControlText);
			((System.Windows.Forms.Control)(object)this.advTree2).AccessibleRole = System.Windows.Forms.AccessibleRole.Outline;
			((System.Windows.Forms.Control)(object)this.advTree2).AllowDrop = true;
			((System.Windows.Forms.Control)(object)this.advTree2).BackColor = System.Drawing.SystemColors.Window;
			this.advTree2.get_BackgroundStyle().set_Class("TreeBorderKey");
			this.advTree2.get_BackgroundStyle().set_CornerType((eCornerType)1);
			this.advTree2.get_Columns().Add(this.columnHeader7);
			this.advTree2.get_Columns().Add(this.columnHeader8);
			this.advTree2.set_LicenseKey("F962CEC7-CD8F-4911-A9E9-CAB39962FC1F");
			((System.Windows.Forms.Control)(object)this.advTree2).Location = new System.Drawing.Point(18, 87);
			((System.Windows.Forms.Control)(object)this.advTree2).Name = "advTree2";
			this.advTree2.get_Nodes().AddRange((Node[])(object)new Node[4] { this.node11, this.node12, this.node21, this.node40 });
			this.advTree2.set_NodesConnector(this.nodeConnector1);
			this.advTree2.set_NodeStyle(this.elementStyle1);
			this.advTree2.set_PathSeparator(";");
			((System.Windows.Forms.Control)(object)this.advTree2).Size = new System.Drawing.Size(400, 196);
			this.advTree2.get_Styles().Add(this.elementStyle1);
			((System.Windows.Forms.Control)(object)this.advTree2).TabIndex = 9;
			((System.Windows.Forms.Control)(object)this.advTree2).Text = "advTree1";
			this.columnHeader7.set_Name("columnHeader7");
			this.columnHeader7.set_StretchToFill(true);
			this.columnHeader7.set_Text("Stacked Texture");
			this.columnHeader7.get_Width().set_Absolute(150);
			this.columnHeader8.set_Name("columnHeader8");
			this.columnHeader8.set_Text("State");
			this.columnHeader8.get_Width().set_Absolute(150);
			this.node11.set_Image((System.Drawing.Image)GrBuildStudio.Properties.Resources.exclamation);
			this.node11.set_Name("node11");
			this.node11.get_Nodes().AddRange((Node[])(object)new Node[2] { this.node17, this.node19 });
			this.node11.set_Text("BlueMarble");
			this.node17.set_Expanded(true);
			this.node17.set_Name("node17");
			this.node17.set_Text("Diffuse: bluemarble_d.png");
			this.node19.set_Expanded(true);
			this.node19.set_Name("node19");
			this.node19.set_Text("Normals: bluemarble_n.png");
			this.node12.set_Image((System.Drawing.Image)GrBuildStudio.Properties.Resources.bullet_green);
			this.node12.set_Name("node12");
			this.node12.get_Nodes().AddRange((Node[])(object)new Node[2] { this.node13, this.node16 });
			this.node12.set_Text("Glider");
			this.node13.set_Name("node13");
			this.node13.get_Nodes().AddRange((Node[])(object)new Node[1] { this.node14 });
			this.node13.set_Text("Diffuse: UDIM");
			this.node14.set_Name("node14");
			this.node14.get_Nodes().AddRange((Node[])(object)new Node[1] { this.node15 });
			this.node14.set_Text("102 items found... expand to view");
			this.node15.get_Cells().Add(this.cell6);
			this.node15.set_Expanded(true);
			this.node15.set_Name("node15");
			this.node15.set_Text("world.topo.bathy.200412.3x21600x21600.A0_n.png");
			this.cell6.set_Name("cell6");
			this.cell6.set_StyleMouseOver((ElementStyle)null);
			this.cell6.set_Text("Built");
			this.node16.set_Expanded(true);
			this.node16.set_Name("node16");
			this.node16.set_Text("Normals: UDIM");
			this.node21.set_Image((System.Drawing.Image)GrBuildStudio.Properties.Resources.bullet_green);
			this.node21.set_Name("node21");
			this.node21.get_Nodes().AddRange((Node[])(object)new Node[1] { this.node22 });
			this.node21.set_Text("Loft");
			this.node22.set_Expanded(true);
			this.node22.set_Name("node22");
			this.node22.set_Text("node16");
			this.node40.set_Image((System.Drawing.Image)GrBuildStudio.Properties.Resources.error_add);
			this.node40.set_Name("node40");
			this.node40.get_Nodes().AddRange((Node[])(object)new Node[2] { this.node43, this.node44 });
			this.node40.set_Text("Stacked texture 3");
			this.node43.set_Expanded(true);
			this.node43.set_Name("node43");
			this.node43.set_Text("node10");
			this.node44.set_Expanded(true);
			this.node44.set_Name("node44");
			this.node44.set_Text("node11");
			this.nodeConnector1.set_LineColor(System.Drawing.SystemColors.ControlText);
			this.elementStyle1.set_CornerType((eCornerType)1);
			this.elementStyle1.set_Name("elementStyle1");
			this.elementStyle1.set_TextColor(System.Drawing.SystemColors.ControlText);
			this.node45.set_Name("node45");
			this.node45.get_Nodes().AddRange((Node[])(object)new Node[1] { this.node46 });
			this.node45.set_Style(this.elementStyle4);
			this.node45.set_Text("<b>Tile Set 'BlueMarble'</b> - 3 layers (RGBA, Norm, RGBA)");
			this.node46.set_Expanded(true);
			this.node46.set_HostedControl((System.Windows.Forms.Control)(object)this.advTree1);
			this.node46.set_Name("node46");
			this.node46.set_Text("advTree3");
			this.elementStyle4.set_CornerType((eCornerType)1);
			this.elementStyle4.set_Font(new System.Drawing.Font("Microsoft Sans Serif", 9.75f, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, 0));
			this.elementStyle4.set_MarginBottom(6);
			this.elementStyle4.set_MarginTop(6);
			this.elementStyle4.set_Name("elementStyle4");
			this.node47.set_Expanded(true);
			this.node47.set_Name("node47");
			this.node47.get_Nodes().AddRange((Node[])(object)new Node[1] { this.node48 });
			this.node47.set_Style(this.elementStyle4);
			this.node47.set_Text("<b>Tile Set 'Loft'</b> - 2 layers (RGB, RGBA)");
			this.node48.set_Expanded(true);
			this.node48.set_HostedControl((System.Windows.Forms.Control)(object)this.advTree2);
			this.node48.set_Name("node48");
			this.node48.set_Text("advTree1");
			this.nodeConnector2.set_LineColor(System.Drawing.SystemColors.ControlText);
			this.elementStyle8.set_CornerType((eCornerType)1);
			this.elementStyle8.set_Name("elementStyle8");
			this.elementStyle8.set_TextColor(System.Drawing.SystemColors.ControlText);
			this.filterBar.Dock = System.Windows.Forms.DockStyle.Top;
			this.filterBar.Filter = "";
			this.filterBar.Location = new System.Drawing.Point(0, 0);
			this.filterBar.Name = "filterBar";
			this.filterBar.Size = new System.Drawing.Size(500, 45);
			this.filterBar.TabIndex = 11;
			this.filterBar.Visible = false;
			this.filterBar.FilterRequest += new GrBuildStudio.FilterBar.FilterRequestEventHandler(filterBar_FilterRequest);
			this.filterBar.CancelClick += new GrBuildStudio.FilterBar.CancelClickEventHandler(FilterBar_CancelClick);
			base.AutoScaleDimensions = new System.Drawing.SizeF(6f, 13f);
			base.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;
			base.Controls.Add((System.Windows.Forms.Control)(object)this.tree);
			base.Controls.Add(this.filterBar);
			base.Name = "SolutionTree";
			base.Size = new System.Drawing.Size(500, 504);
			base.SizeChanged += new System.EventHandler(SolutionTree_SizeChanged);
			((System.ComponentModel.ISupportInitialize)this.tree).EndInit();
			((System.Windows.Forms.Control)(object)this.tree).ResumeLayout(false);
			((System.ComponentModel.ISupportInitialize)this.advTree1).EndInit();
			((System.ComponentModel.ISupportInitialize)this.advTree2).EndInit();
			base.ResumeLayout(false);
		}
	}
	internal class State
	{
		private static Bitmap iconInfo = Resources.asset_info;

		private static Bitmap iconWarning = Resources.asset_warning;

		private static Bitmap iconError = Resources.asset_error;

		private static Bitmap iconImported = Resources.asset_imported;

		private static Bitmap iconBuilt = Resources.asset_built;

		private static Bitmap iconBuiltWithInfo = Resources.asset_built_info;

		private static Bitmap iconPartiallyBuilt = Resources.asset_partially_built;

		private static Bitmap iconPartiallyBuiltWithInfo = Resources.asset_partially_built_info;

		private static Bitmap iconUnknown = Resources.asset_unknown;

		public static string GetAssetStateInfo(AssetState state)
		{
			//IL_0011: Unknown result type (might be due to invalid IL or missing references)
			//IL_0017: Unknown result type (might be due to invalid IL or missing references)
			//IL_001d: Unknown result type (might be due to invalid IL or missing references)
			//IL_0029: Unknown result type (might be due to invalid IL or missing references)
			//IL_002f: Invalid comparison between Unknown and I4
			//IL_0032: Unknown result type (might be due to invalid IL or missing references)
			//IL_0038: Invalid comparison between Unknown and I4
			//IL_0043: Unknown result type (might be due to invalid IL or missing references)
			//IL_0049: Invalid comparison between Unknown and I4
			//IL_004c: Unknown result type (might be due to invalid IL or missing references)
			//IL_0052: Invalid comparison between Unknown and I4
			//IL_0067: Unknown result type (might be due to invalid IL or missing references)
			string result = "Unknown";
			if (state != null)
			{
				string info = GetInfo(state.get_PipelineState(), state.get_FailureState(), state.get_SoupFailureState());
				if ((int)state.get_FailureState() != 7 || (int)state.get_Changes() > 0)
				{
					result = (((int)state.get_FailureState() != 7) ? info : (((int)state.get_PipelineState() != 5) ? info : "One of the layers of the Stacked Texture was changed, Build the Project."));
				}
				else
				{
					result = info;
					result = (((int)state.get_PipelineState() != 0) ? info : "UDim Changed, Build to add/remove the changed UDim patches.");
				}
			}
			return result;
		}

		public static bool IsValidState(PipelineState state, FailureState failure, SoupFailureState soupFailure)
		{
			//IL_0001: Unknown result type (might be due to invalid IL or missing references)
			//IL_0003: Invalid comparison between Unknown and I4
			//IL_0006: Unknown result type (might be due to invalid IL or missing references)
			//IL_0009: Unknown result type (might be due to invalid IL or missing references)
			//IL_000b: Invalid comparison between Unknown and I4
			//IL_000d: Unknown result type (might be due to invalid IL or missing references)
			//IL_000f: Invalid comparison between Unknown and I4
			//IL_0011: Unknown result type (might be due to invalid IL or missing references)
			//IL_0013: Invalid comparison between Unknown and I4
			//IL_0015: Unknown result type (might be due to invalid IL or missing references)
			//IL_0017: Invalid comparison between Unknown and I4
			//IL_0027: Unknown result type (might be due to invalid IL or missing references)
			//IL_0029: Invalid comparison between Unknown and I4
			bool result = (int)failure == 7;
			if (((int)failure == 0 || (int)failure == 1) && ((int)state == 3 || (int)state == 4 || (int)state == 5))
			{
				result = true;
			}
			if ((int)soupFailure == 1)
			{
				result = false;
			}
			return result;
		}

		public static string GetInfo(PipelineState state, FailureState failure, SoupFailureState soupFailure)
		{
			//IL_0001: Unknown result type (might be due to invalid IL or missing references)
			//IL_0002: Unknown result type (might be due to invalid IL or missing references)
			//IL_0003: Unknown result type (might be due to invalid IL or missing references)
			//IL_000e: Unknown result type (might be due to invalid IL or missing references)
			//IL_000f: Unknown result type (might be due to invalid IL or missing references)
			//IL_0010: Unknown result type (might be due to invalid IL or missing references)
			//IL_0011: Unknown result type (might be due to invalid IL or missing references)
			//IL_0012: Unknown result type (might be due to invalid IL or missing references)
			//IL_0034: Expected I4, but got Unknown
			//IL_006d: Unknown result type (might be due to invalid IL or missing references)
			//IL_006f: Invalid comparison between Unknown and I4
			//IL_0087: Unknown result type (might be due to invalid IL or missing references)
			//IL_00b1: Expected I4, but got Unknown
			if (IsValidState(state, failure, soupFailure))
			{
				switch ((int)state)
				{
				case 5:
					return "The Stacked Texture was succesfully built.";
				case 2:
				case 3:
				case 4:
					return "The Stacked texture is partially build, Build the project.";
				case 0:
				case 1:
					return "The Stacked Texture is Imported, Build the project.";
				case 6:
					return "Unknown state, try to rebuild to fix.";
				default:
					return "Unknown state, try to rebuild to fix.";
				}
			}
			if ((int)soupFailure == 1)
			{
				return "The gtex file is inaccessible.";
			}
			if (1 == 0)
			{
			}
			string result = (int)failure switch
			{
				0 => "One or more of the textures were not found, please check this and Rescan or delete the Stacked Texture.", 
				1 => "One or more of the textures are Inaccessible.", 
				5 => "The layer resolutions don't macth.", 
				3 => "The UDim has an invalid pattren, please check this and Rebuild.", 
				4 => "The Dimensions of the pattren are invalid, please check this and Rebuild.", 
				6 => "The Stacked Texture's border is Invalid, please change the border and Rebuild.", 
				2 => "The texture format is invalid, please change the texture format and Rebuild.", 
				8 => "Unknown error, try to Rebuild.", 
				_ => "No error", 
			};
			if (1 == 0)
			{
			}
			return result;
		}

		public static Bitmap GetAssetIcon(AssetState state)
		{
			//IL_0002: Unknown result type (might be due to invalid IL or missing references)
			//IL_0008: Unknown result type (might be due to invalid IL or missing references)
			//IL_000e: Unknown result type (might be due to invalid IL or missing references)
			return GetAssetIcon(state.get_PipelineState(), state.get_FailureState(), state.get_SoupFailureState());
		}

		public static Bitmap GetAssetIcon(PipelineState state, FailureState failure, SoupFailureState soupFailure)
		{
			//IL_0001: Unknown result type (might be due to invalid IL or missing references)
			//IL_0002: Unknown result type (might be due to invalid IL or missing references)
			//IL_0003: Unknown result type (might be due to invalid IL or missing references)
			//IL_0011: Unknown result type (might be due to invalid IL or missing references)
			//IL_0013: Invalid comparison between Unknown and I4
			//IL_0015: Unknown result type (might be due to invalid IL or missing references)
			//IL_0018: Unknown result type (might be due to invalid IL or missing references)
			//IL_001a: Invalid comparison between Unknown and I4
			//IL_0020: Unknown result type (might be due to invalid IL or missing references)
			//IL_0022: Invalid comparison between Unknown and I4
			//IL_003c: Unknown result type (might be due to invalid IL or missing references)
			//IL_003d: Unknown result type (might be due to invalid IL or missing references)
			//IL_003f: Unknown result type (might be due to invalid IL or missing references)
			//IL_0041: Unknown result type (might be due to invalid IL or missing references)
			//IL_0043: Unknown result type (might be due to invalid IL or missing references)
			//IL_0066: Expected I4, but got Unknown
			if (IsValidState(state, failure, soupFailure))
			{
				bool flag = (int)failure == 1 || (int)failure == 0 || (int)failure == 2;
				bool flag2 = (int)soupFailure != 3;
				if (flag && flag2)
				{
					return iconError;
				}
				switch ((int)state)
				{
				case 5:
					if (!flag)
					{
						return iconBuilt;
					}
					return iconBuiltWithInfo;
				case 2:
				case 3:
				case 4:
					if (!flag)
					{
						return iconPartiallyBuilt;
					}
					return iconPartiallyBuiltWithInfo;
				case 0:
				case 1:
					return iconImported;
				case 6:
					return iconUnknown;
				default:
					return iconUnknown;
				}
			}
			return iconError;
		}

		public static Bitmap GetLayerIcon(AssetState assetState, LayerAssetState layerState)
		{
			//IL_0002: Unknown result type (might be due to invalid IL or missing references)
			//IL_0008: Unknown result type (might be due to invalid IL or missing references)
			//IL_000e: Unknown result type (might be due to invalid IL or missing references)
			//IL_002c: Unknown result type (might be due to invalid IL or missing references)
			//IL_0032: Invalid comparison between Unknown and I4
			//IL_0035: Unknown result type (might be due to invalid IL or missing references)
			//IL_003d: Unknown result type (might be due to invalid IL or missing references)
			//IL_0043: Invalid comparison between Unknown and I4
			if (IsValidState(assetState.get_PipelineState(), assetState.get_FailureState(), assetState.get_SoupFailureState()))
			{
				bool flag = GetAssetIcon(assetState) == iconError;
				bool flag2 = (int)layerState.get_FailureState() == 1 || (int)layerState.get_FailureState() == 0 || (int)layerState.get_FailureState() == 2;
				if (flag2 && flag)
				{
					return iconError;
				}
				if (flag2)
				{
					return iconInfo;
				}
				return null;
			}
			return iconError;
		}

		public static Bitmap GetTextureIcon(AssetState state, TextureChanges changes)
		{
			//IL_000f: Unknown result type (might be due to invalid IL or missing references)
			//IL_0010: Unknown result type (might be due to invalid IL or missing references)
			//IL_0011: Unknown result type (might be due to invalid IL or missing references)
			//IL_0012: Unknown result type (might be due to invalid IL or missing references)
			//IL_0013: Unknown result type (might be due to invalid IL or missing references)
			//IL_0029: Expected I4, but got Unknown
			bool flag = GetAssetIcon(state) == iconError;
			switch ((int)changes)
			{
			case 0:
				return null;
			case 2:
				return iconImported;
			case 1:
			case 3:
				if (!flag)
				{
					return iconInfo;
				}
				return iconError;
			default:
				return iconUnknown;
			}
		}

		public static string GetAssetState(AssetState state, out Bitmap icon)
		{
			//IL_001b: Unknown result type (might be due to invalid IL or missing references)
			//IL_0020: Unknown result type (might be due to invalid IL or missing references)
			//IL_0031: Unknown result type (might be due to invalid IL or missing references)
			//IL_0037: Invalid comparison between Unknown and I4
			//IL_0051: Unknown result type (might be due to invalid IL or missing references)
			//IL_0056: Unknown result type (might be due to invalid IL or missing references)
			//IL_006e: Unknown result type (might be due to invalid IL or missing references)
			//IL_0074: Unknown result type (might be due to invalid IL or missing references)
			//IL_007a: Unknown result type (might be due to invalid IL or missing references)
			//IL_0087: Unknown result type (might be due to invalid IL or missing references)
			//IL_008d: Invalid comparison between Unknown and I4
			//IL_009d: Unknown result type (might be due to invalid IL or missing references)
			//IL_00a3: Unknown result type (might be due to invalid IL or missing references)
			//IL_00a9: Unknown result type (might be due to invalid IL or missing references)
			//IL_00b5: Unknown result type (might be due to invalid IL or missing references)
			//IL_00cc: Unknown result type (might be due to invalid IL or missing references)
			//IL_00d2: Invalid comparison between Unknown and I4
			//IL_00e3: Unknown result type (might be due to invalid IL or missing references)
			//IL_00e9: Unknown result type (might be due to invalid IL or missing references)
			//IL_00ef: Unknown result type (might be due to invalid IL or missing references)
			//IL_00fe: Unknown result type (might be due to invalid IL or missing references)
			//IL_0104: Invalid comparison between Unknown and I4
			//IL_0114: Unknown result type (might be due to invalid IL or missing references)
			//IL_011a: Unknown result type (might be due to invalid IL or missing references)
			//IL_0120: Unknown result type (might be due to invalid IL or missing references)
			//IL_012f: Unknown result type (might be due to invalid IL or missing references)
			//IL_0135: Invalid comparison between Unknown and I4
			//IL_0150: Unknown result type (might be due to invalid IL or missing references)
			//IL_0156: Unknown result type (might be due to invalid IL or missing references)
			//IL_015c: Unknown result type (might be due to invalid IL or missing references)
			string result = "Unknown";
			icon = iconUnknown;
			if (state != null)
			{
				PipelineState pipelineState = state.get_PipelineState();
				string text = ((object)(PipelineState)(ref pipelineState)).ToString();
				if ((int)state.get_PipelineState() == 5 && state.get_builtForGTexStreaming())
				{
					text = "Built for GTex Streaming";
				}
				FailureState failureState = state.get_FailureState();
				string text2 = ((object)(FailureState)(ref failureState)).ToString();
				string text3 = "Changed";
				if (IsValidState(state.get_PipelineState(), state.get_FailureState(), state.get_SoupFailureState()) && (int)state.get_Changes() == 0)
				{
					result = text;
					icon = GetAssetIcon(state.get_PipelineState(), state.get_FailureState(), state.get_SoupFailureState());
					result = (((int)state.get_PipelineState() != 0) ? text : "UDim Changed");
				}
				else if ((int)state.get_SoupFailureState() == 1)
				{
					result = "GTEXInaccessible";
					icon = GetAssetIcon(state.get_PipelineState(), state.get_FailureState(), state.get_SoupFailureState());
				}
				else if ((int)state.get_FailureState() != 7)
				{
					result = text2;
					icon = GetAssetIcon(state.get_PipelineState(), state.get_FailureState(), state.get_SoupFailureState());
				}
				else if ((int)state.get_PipelineState() == 5)
				{
					result = text3;
					icon = iconPartiallyBuilt;
				}
				else
				{
					result = text;
					icon = GetAssetIcon(state.get_PipelineState(), state.get_FailureState(), state.get_SoupFailureState());
				}
			}
			return result;
		}

		public static string GetLayerState(AssetState assetState, LayerAssetState layerState, out Bitmap icon)
		{
			//IL_0014: Unknown result type (might be due to invalid IL or missing references)
			//IL_0019: Unknown result type (might be due to invalid IL or missing references)
			//IL_0030: Unknown result type (might be due to invalid IL or missing references)
			//IL_0038: Unknown result type (might be due to invalid IL or missing references)
			//IL_003e: Invalid comparison between Unknown and I4
			//IL_0054: Unknown result type (might be due to invalid IL or missing references)
			//IL_005a: Invalid comparison between Unknown and I4
			string result = "Unknown";
			icon = null;
			if (layerState != null)
			{
				FailureState failureState = layerState.get_FailureState();
				string text = ((object)(FailureState)(ref failureState)).ToString();
				string text2 = "Changed";
				if ((int)layerState.get_Changes() == 0 && (int)layerState.get_FailureState() == 7)
				{
					result = "Ok";
				}
				else if ((int)layerState.get_FailureState() != 7)
				{
					result = text;
					icon = GetLayerIcon(assetState, layerState);
				}
				else
				{
					result = text2;
				}
			}
			return result;
		}

		public static string GetTextureState(AssetState assetState, TextureAssetState textureState, out Bitmap icon)
		{
			//IL_0014: Unknown result type (might be due to invalid IL or missing references)
			//IL_001a: Invalid comparison between Unknown and I4
			//IL_002c: Unknown result type (might be due to invalid IL or missing references)
			//IL_0031: Unknown result type (might be due to invalid IL or missing references)
			//IL_0043: Unknown result type (might be due to invalid IL or missing references)
			string result = "Unknown";
			icon = null;
			if (textureState != null)
			{
				if ((int)textureState.get_Changes() == 0)
				{
					result = "Ok";
				}
				else
				{
					TextureChanges changes = textureState.get_Changes();
					result = ((object)(TextureChanges)(ref changes)).ToString();
					icon = GetTextureIcon(assetState, textureState.get_Changes());
				}
			}
			return result;
		}
	}
	public class StudioLogger : Logger
	{
		private MessageBoxLogListener messageBoxLogger;

		public static StudioLogger Global = new StudioLogger();

		public StudioLogger()
			: base(Defaults.get_Verbosity())
		{
			//IL_0001: Unknown result type (might be due to invalid IL or missing references)
			//IL_000e: Unknown result type (might be due to invalid IL or missing references)
			((Logger)this).set_VerbosityLevel(Defaults.get_Verbosity());
			messageBoxLogger = new MessageBoxLogListener();
			((Logger)this).RegisterLogListener((LogListener)(object)messageBoxLogger);
		}

		public void SetOwnerWindow(Form owner)
		{
			messageBoxLogger.Owner = owner;
		}

		public void LogException(Exception e)
		{
			CrashReportForm crashReportForm = new CrashReportForm();
			crashReportForm.Exception = e;
			crashReportForm.Message = e.Message;
			crashReportForm.Mode = CrashReportForm.DisplayMode.Error;
			crashReportForm.ShowDialog();
		}
	}
	internal static class TaskbarList
	{
		private static object _syncLock = new object();

		private static ITaskbarList4 _taskbarList;

		internal static ITaskbarList4 Instance
		{
			get
			{
				if (_taskbarList == null)
				{
					lock (_syncLock)
					{
						if (_taskbarList == null)
						{
							_taskbarList = (ITaskbarList4)new CTaskbarList();
							_taskbarList.HrInit();
						}
					}
				}
				return _taskbarList;
			}
		}

		public static bool RunningOnWin7
		{
			get
			{
				if (Environment.OSVersion.Platform == PlatformID.Win32NT)
				{
					return Environment.OSVersion.Version.CompareTo(new Version(6, 1)) >= 0;
				}
				return false;
			}
		}
	}
	public class TaskBarProgressBar
	{
		private Form parent;

		public TaskBarProgressBar(Form parent)
		{
			this.parent = parent;
		}

		public void Start()
		{
			if (TaskbarList.RunningOnWin7 && parent != null)
			{
				_ = parent.Handle;
				TaskbarList.Instance.SetProgressState(parent.Handle, TaskbarProgressBarStatus.Normal);
			}
		}

		public void Stop()
		{
			if (TaskbarList.RunningOnWin7 && parent != null)
			{
				_ = parent.Handle;
				TaskbarList.Instance.SetProgressState(parent.Handle, TaskbarProgressBarStatus.NoProgress);
			}
		}

		public void SetError()
		{
			if (TaskbarList.RunningOnWin7 && parent != null)
			{
				_ = parent.Handle;
				TaskbarList.Instance.SetProgressState(parent.Handle, TaskbarProgressBarStatus.Error);
			}
		}

		public void Reset()
		{
			if (TaskbarList.RunningOnWin7 && parent != null)
			{
				_ = parent.Handle;
				TaskbarList.Instance.SetProgressState(parent.Handle, TaskbarProgressBarStatus.NoProgress);
			}
		}

		public void SetValue(ulong value, ulong max)
		{
			if (TaskbarList.RunningOnWin7 && parent != null)
			{
				_ = parent.Handle;
				TaskbarList.Instance.SetProgressValue(parent.Handle, value, max);
			}
		}
	}
	internal enum TaskbarProgressBarStatus
	{
		NoProgress = 0,
		Indeterminate = 1,
		Normal = 2,
		Error = 4,
		Paused = 8
	}
	[StructLayout(LayoutKind.Sequential, CharSet = CharSet.Auto)]
	internal struct ThumbButton
	{
		internal const int Clicked = 6144;

		[MarshalAs(UnmanagedType.U4)]
		internal ThumbButtonMask Mask;

		internal uint Id;

		internal uint Bitmap;

		internal IntPtr Icon;

		[MarshalAs(UnmanagedType.ByValTStr, SizeConst = 260)]
		internal string Tip;

		[MarshalAs(UnmanagedType.U4)]
		internal ThumbButtonOptions Flags;
	}
	internal enum ThumbButtonMask
	{
		Bitmap = 1,
		Icon = 2,
		Tooltip = 4,
		THB_FLAGS = 8
	}
	[Flags]
	internal enum ThumbButtonOptions
	{
		Enabled = 0,
		Disabled = 1,
		DismissOnClick = 2,
		NoBackground = 4,
		Hidden = 8,
		NonInteractive = 0x10
	}
	public class ToolTip : SuperTooltip
	{
		private ResourceManager resources;

		public ToolTip()
		{
			//IL_002c: Unknown result type (might be due to invalid IL or missing references)
			//IL_0036: Expected O, but got Unknown
			InitializeComponent();
			resources = new ResourceManager(typeof(Resources));
			((SuperTooltip)this).add_BeforeTooltipDisplay(new SuperTooltipEventHandler(Component1_BeforeTooltipDisplay));
		}

		private void Component1_BeforeTooltipDisplay(object sender, SuperTooltipEventArgs e)
		{
			if (e.TooltipInfo.get_BodyText() == string.Empty && e.TooltipInfo.get_HeaderText() == string.Empty && e.TooltipInfo.get_FooterText() == string.Empty)
			{
				e.Cancel = true;
				return;
			}
			string bodyText = e.TooltipInfo.get_BodyText();
			string @string = resources.GetString(bodyText);
			if (@string == null)
			{
				return;
			}
			if (@string == string.Empty)
			{
				e.Cancel = true;
				return;
			}
			string[] array = @string.Split(';');
			e.Cancel = true;
			e.TooltipInfo.set_HeaderVisible(false);
			e.TooltipInfo.set_FooterVisible(false);
			e.TooltipInfo.set_HeaderText(array[0]);
			if (array[0] != string.Empty)
			{
				e.TooltipInfo.set_HeaderVisible(true);
				e.Cancel = false;
			}
			if (array.Length > 1)
			{
				e.TooltipInfo.set_BodyText(array[1]);
				if (array[1] != string.Empty)
				{
					e.Cancel = false;
				}
			}
			else
			{
				e.TooltipInfo.set_BodyText(string.Empty);
			}
			if (array.Length > 2)
			{
				if (array[2] != string.Empty)
				{
					e.TooltipInfo.set_FooterText(array[2]);
					e.TooltipInfo.set_FooterVisible(true);
					e.Cancel = false;
				}
			}
			else
			{
				e.TooltipInfo.set_FooterText(string.Empty);
			}
		}

		private void InitializeComponent()
		{
		}
	}
	public class UserSettings
	{
		private SolutionModel model;

		public SolutionSettings Solution { get; private set; }

		public UserSettings(SolutionModel model)
		{
			this.model = model;
			Solution = null;
		}

		public void OnSolutionClosing(object sender, Solution solution)
		{
			if (Solution != null)
			{
				Solution.Save();
			}
		}

		public void OnSolutionLoaded(object sender, Solution solution)
		{
			Solution = new SolutionSettings(model, solution);
			Solution.Load();
		}

		public void OnProjectAddedToSolution(object sender, SolutionProjectDecriptor project, ProjectBuilder builder, bool isNew)
		{
			Solution[project.get_Id()] = new ProjectSettings(builder);
		}

		public void OnProjectRemovedFromSolution(object sender, SolutionProjectDecriptor project)
		{
			Solution.Remove(project.get_Id());
		}
	}
}
namespace GrBuildStudio.Tools
{
	internal class AssemblyHelper
	{
		public static string AssemblyTitle
		{
			get
			{
				object[] customAttributes = Assembly.GetExecutingAssembly().GetCustomAttributes(typeof(AssemblyTitleAttribute), inherit: false);
				if (customAttributes.Length != 0)
				{
					AssemblyTitleAttribute assemblyTitleAttribute = (AssemblyTitleAttribute)customAttributes[0];
					if (assemblyTitleAttribute.Title != "")
					{
						return assemblyTitleAttribute.Title;
					}
				}
				return Path.GetFileNameWithoutExtension(Assembly.GetExecutingAssembly().CodeBase);
			}
		}

		public static string AssemblyInformationalVersion
		{
			get
			{
				object[] customAttributes = Assembly.GetExecutingAssembly().GetCustomAttributes(typeof(AssemblyInformationalVersionAttribute), inherit: false);
				if (customAttributes.Length == 0)
				{
					return "";
				}
				return ((AssemblyInformationalVersionAttribute)customAttributes[0]).InformationalVersion;
			}
		}

		public static string AssemblyDescription
		{
			get
			{
				object[] customAttributes = Assembly.GetExecutingAssembly().GetCustomAttributes(typeof(AssemblyDescriptionAttribute), inherit: false);
				if (customAttributes.Length == 0)
				{
					return "";
				}
				return ((AssemblyDescriptionAttribute)customAttributes[0]).Description;
			}
		}

		public static string AssemblyProduct
		{
			get
			{
				object[] customAttributes = Assembly.GetExecutingAssembly().GetCustomAttributes(typeof(AssemblyProductAttribute), inherit: false);
				if (customAttributes.Length == 0)
				{
					return "";
				}
				return ((AssemblyProductAttribute)customAttributes[0]).Product;
			}
		}

		public static string AssemblyCopyright
		{
			get
			{
				object[] customAttributes = Assembly.GetExecutingAssembly().GetCustomAttributes(typeof(AssemblyCopyrightAttribute), inherit: false);
				if (customAttributes.Length == 0)
				{
					return "";
				}
				return ((AssemblyCopyrightAttribute)customAttributes[0]).Copyright;
			}
		}

		public static string AssemblyCompany
		{
			get
			{
				object[] customAttributes = Assembly.GetExecutingAssembly().GetCustomAttributes(typeof(AssemblyCompanyAttribute), inherit: false);
				if (customAttributes.Length == 0)
				{
					return "";
				}
				return ((AssemblyCompanyAttribute)customAttributes[0]).Company;
			}
		}
	}
	internal class ClipboardHelper
	{
		public static void CopyText(string text)
		{
			Thread thread = new Thread((ThreadStart)delegate
			{
				Clipboard.SetText(text);
			});
			thread.SetApartmentState(ApartmentState.STA);
			thread.Start();
			thread.Join();
		}
	}
	internal class DialogUtil
	{
		private static string lastSolutionLocation;

		public static string SolutionOpenDialogFilter => "GrBuildStudio Solution (*.grsln)|*.grsln";

		public static string ImportScriptOpenDialogFilter => "GrBuild Import Script (*.xml, *.grscript)|*.xml;*.grscript|All Files (*.*)|*.*";

		public static string SolutionLocation
		{
			get
			{
				if (lastSolutionLocation == null || !Directory.Exists(lastSolutionLocation))
				{
					lastSolutionLocation = Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.Personal), "Graphine");
				}
				return lastSolutionLocation;
			}
			set
			{
				if (Directory.Exists(value))
				{
					lastSolutionLocation = Path.GetFullPath(value);
				}
			}
		}
	}
	public enum FormMode
	{
		ChildWindow,
		Standalone
	}
	internal class GrimTools
	{
		public static string[] GetSupportedExtensions()
		{
			int numSupportedFormats = ImageFactory.GetNumSupportedFormats();
			string[] array = new string[numSupportedFormats];
			for (int i = 0; i < numSupportedFormats; i++)
			{
				array[i] = ImageFactory.GetSupportedFormatExtension(i);
			}
			return array;
		}

		public static string GetExtensionsFilterString()
		{
			string[] supportedExtensions = GetSupportedExtensions();
			return "*" + string.Join(";*", supportedExtensions);
		}

		public static string GetCompleteFilterString()
		{
			return string.Format("Image Files ({0})|{0}|All Files (*.*)|*.*", GetExtensionsFilterString());
		}
	}
	public abstract class ObservableList<T> : IEnumerable<T>, IEnumerable
	{
		public delegate void ItemAddedEventHandler(object sender, T Item);

		public delegate void ItemRemovedEventHandler(object sender, T Item);

		public delegate void ItemsClearedEventHandler(object sender);

		protected List<T> items = new List<T>();

		public event ItemAddedEventHandler ItemAdded;

		public event ItemRemovedEventHandler ItemRemoved;

		public event ItemsClearedEventHandler ItemsCleared;

		protected virtual void OnItemAdded(T r)
		{
			this.ItemAdded?.Invoke(this, r);
		}

		protected virtual void OnItemRemoved(T r)
		{
			this.ItemRemoved?.Invoke(this, r);
		}

		protected virtual void OnItemsCleared()
		{
			this.ItemsCleared?.Invoke(this);
		}

		public IEnumerator<T> GetEnumerator()
		{
			return items.GetEnumerator();
		}

		public T[] ToArray()
		{
			return items.ToArray();
		}

		public void Add(T item)
		{
			items.Add(item);
			OnItemAdded(item);
		}

		public void Remove(T item)
		{
			items.Remove(item);
			OnItemRemoved(item);
		}

		public void Clear()
		{
			items.Clear();
			OnItemsCleared();
		}

		public int IndexOf(T item)
		{
			return items.IndexOf(item);
		}

		IEnumerator IEnumerable.GetEnumerator()
		{
			return items.GetEnumerator();
		}
	}
	internal class ShellTools
	{
		public static void OpenExplorerAndSelect(string filename)
		{
			string arguments = "/e, /select, \"" + filename + "\"";
			Process.Start("explorer", arguments);
		}

		public static void OpenExplorer(string path)
		{
			string arguments = "\"" + path + "\"";
			Process.Start("explorer", arguments);
		}

		public static void OpenGTSInViewer(string filename)
		{
			Process.Start(filename);
		}

		public static string GetGtsPath(ProjectBuilder builder)
		{
			if (builder.get_ActiveProject() == null)
			{
				return null;
			}
			string fullPath = Path.GetFullPath(builder.get_ActiveProject().get_BuildConfiguration().get_OutputDirectory());
			string outputFilename = builder.get_ActiveProject().get_BuildConfiguration().get_OutputFilename();
			return Path.Combine(fullPath, outputFilename);
		}

		public static void OpenGTSInViewer(ProjectBuilder builder)
		{
			string gtsPath = GetGtsPath(builder);
			if (gtsPath != null && File.Exists(gtsPath))
			{
				OpenGTSInViewer(gtsPath);
			}
		}

		public static void OpenGtsInExplorer(ProjectBuilder builder)
		{
			string gtsPath = GetGtsPath(builder);
			if (gtsPath != null)
			{
				if (File.Exists(gtsPath))
				{
					OpenExplorerAndSelect(gtsPath);
				}
				else
				{
					OpenExplorer(Paths.GetDirectoryName(gtsPath));
				}
			}
		}

		public static string MakePathRelative(string filePath, string referencePath)
		{
			Uri uri = new Uri(filePath);
			return new Uri(referencePath).MakeRelativeUri(uri).ToString();
		}

		public static string GetAbsolutePath(string path1, string path2)
		{
			string text = Path.DirectorySeparatorChar.ToString();
			string text2 = Path.GetFullPath(path1);
			if (!text2.EndsWith(text))
			{
				text2 += text;
			}
			return Path.GetFullPath(Path.Combine(Paths.GetDirectoryName(text2), path2));
		}

		public static string StringToBytes(string input)
		{
			string text = input.ToLower();
			text.Replace(" ", "");
			text.Replace(",", ".");
			if (Regex.Match(text, "^[0-9]+([.][0-9]+)?(gb|mb|kb|b)$").Success)
			{
				Regex.Match(text, "(gb|mb|kb|b)");
			}
			return text;
		}

		public static string ShortenPathname(string pathname, int maxLength)
		{
			if (pathname.Length <= maxLength)
			{
				return pathname;
			}
			string text = Path.GetPathRoot(pathname);
			if (text.Length > 3)
			{
				text += Path.DirectorySeparatorChar;
			}
			string[] array = pathname.Substring(text.Length).Split(Path.DirectorySeparatorChar, Path.AltDirectorySeparatorChar);
			int num = array.GetLength(0) - 1;
			if (array.GetLength(0) == 1)
			{
				if (array[0].Length > 5)
				{
					if (text.Length + 6 >= maxLength)
					{
						return text + array[0].Substring(0, 3) + "...";
					}
					return pathname.Substring(0, maxLength - 3) + "...";
				}
				return pathname;
			}
			if (text.Length + 4 + array[num].Length > maxLength)
			{
				text += "...\\";
				int length = array[num].Length;
				if (length < 6)
				{
					return text + array[num];
				}
				length = ((text.Length + 6 < maxLength) ? (maxLength - text.Length - 3) : 3);
				return text + array[num].Substring(0, length) + "...";
			}
			if (array.GetLength(0) == 2)
			{
				return text + "...\\" + array[1];
			}
			int num2 = 0;
			int num3 = 0;
			for (int i = 0; i < num; i++)
			{
				if (array[i].Length > num2)
				{
					num3 = i;
					num2 = array[i].Length;
				}
			}
			int num4 = pathname.Length - num2 + 3;
			int num5 = num3 + 1;
			while (num4 > maxLength)
			{
				if (num3 > 0)
				{
					num4 -= array[--num3].Length - 1;
				}
				if (num4 <= maxLength)
				{
					break;
				}
				if (num5 < num)
				{
					num4 -= array[++num5].Length - 1;
				}
				if (num3 == 0 && num5 == num)
				{
					break;
				}
			}
			for (int j = 0; j < num3; j++)
			{
				text = text + array[j] + "\\";
			}
			text += "...\\";
			for (int k = num5; k < num; k++)
			{
				text = text + array[k] + "\\";
			}
			return text + array[num];
		}
	}
	public enum SourceMode
	{
		SingleSource,
		MultiSource,
		MultiSource3,
		MultiSource4
	}
	internal class UserExperience
	{
		public static string SuggestProjectName(SolutionModel currentSolution)
		{
			string defaultTileSetName = Constants.DefaultTileSetName;
			string text = defaultTileSetName;
			int num = 0;
			while (currentSolution.HasProject(text))
			{
				text = $"{defaultTileSetName}{++num}";
			}
			return text;
		}

		public static string SuggestProjectNameOnDisk(string path)
		{
			string defaultTileSetName = Constants.DefaultTileSetName;
			int num = 0;
			string text = defaultTileSetName;
			while (Directory.Exists(Path.Combine(Path.GetFullPath(path), text)))
			{
				text = $"{defaultTileSetName}{++num}";
			}
			return text;
		}

		public static string SuggestSolutionName(string path)
		{
			string defaultSolutionName = Constants.DefaultSolutionName;
			int num = 1;
			string text = $"{defaultSolutionName}{num}.{Constants.SolutionExtension}";
			while (File.Exists(Path.Combine(Path.GetFullPath(path), text)))
			{
				text = $"{defaultSolutionName}{++num}.{Constants.SolutionExtension}";
			}
			return text;
		}
	}
}
namespace GrBuildStudio.Properties
{
	[GeneratedCode("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
	[DebuggerNonUserCode]
	[CompilerGenerated]
	public class Resources
	{
		private static ResourceManager resourceMan;

		private static CultureInfo resourceCulture;

		[EditorBrowsable(EditorBrowsableState.Advanced)]
		public static ResourceManager ResourceManager
		{
			get
			{
				if (resourceMan == null)
				{
					resourceMan = new ResourceManager("GrBuildStudio.Properties.Resources", typeof(Resources).Assembly);
				}
				return resourceMan;
			}
		}

		[EditorBrowsable(EditorBrowsableState.Advanced)]
		public static CultureInfo Culture
		{
			get
			{
				return resourceCulture;
			}
			set
			{
				resourceCulture = value;
			}
		}

		public static Bitmap about_logo => (Bitmap)ResourceManager.GetObject("about_logo", resourceCulture);

		public static Bitmap add => (Bitmap)ResourceManager.GetObject("add", resourceCulture);

		public static Bitmap asset_built => (Bitmap)ResourceManager.GetObject("asset_built", resourceCulture);

		public static Bitmap asset_built_info => (Bitmap)ResourceManager.GetObject("asset_built_info", resourceCulture);

		public static Bitmap asset_error => (Bitmap)ResourceManager.GetObject("asset_error", resourceCulture);

		public static Bitmap asset_imported => (Bitmap)ResourceManager.GetObject("asset_imported", resourceCulture);

		public static Bitmap asset_info => (Bitmap)ResourceManager.GetObject("asset_info", resourceCulture);

		public static Bitmap asset_partially_built => (Bitmap)ResourceManager.GetObject("asset_partially_built", resourceCulture);

		public static Bitmap asset_partially_built_info => (Bitmap)ResourceManager.GetObject("asset_partially_built_info", resourceCulture);

		public static Bitmap asset_unknown => (Bitmap)ResourceManager.GetObject("asset_unknown", resourceCulture);

		public static Bitmap asset_warning => (Bitmap)ResourceManager.GetObject("asset_warning", resourceCulture);

		public static Bitmap bar_tilesetviewer => (Bitmap)ResourceManager.GetObject("bar_tilesetviewer", resourceCulture);

		public static Bitmap big_warning => (Bitmap)ResourceManager.GetObject("big_warning", resourceCulture);

		public static Bitmap BlueMarble_tile => (Bitmap)ResourceManager.GetObject("BlueMarble_tile", resourceCulture);

		public static Bitmap build => (Bitmap)ResourceManager.GetObject("build", resourceCulture);

		public static Bitmap bullet_green => (Bitmap)ResourceManager.GetObject("bullet_green", resourceCulture);

		public static Bitmap clean => (Bitmap)ResourceManager.GetObject("clean", resourceCulture);

		public static Bitmap cross => (Bitmap)ResourceManager.GetObject("cross", resourceCulture);

		public static Bitmap database_refresh => (Bitmap)ResourceManager.GetObject("database_refresh", resourceCulture);

		public static Bitmap delete => (Bitmap)ResourceManager.GetObject("delete", resourceCulture);

		public static Bitmap disk => (Bitmap)ResourceManager.GetObject("disk", resourceCulture);

		public static Bitmap error => (Bitmap)ResourceManager.GetObject("error", resourceCulture);

		public static Bitmap error_add => (Bitmap)ResourceManager.GetObject("error_add", resourceCulture);

		public static Bitmap exclamation => (Bitmap)ResourceManager.GetObject("exclamation", resourceCulture);

		public static Bitmap exclamation_octagon_fram => (Bitmap)ResourceManager.GetObject("exclamation_octagon_fram", resourceCulture);

		public static Bitmap folder_picture => (Bitmap)ResourceManager.GetObject("folder_picture", resourceCulture);

		public static Bitmap icon_readonly => (Bitmap)ResourceManager.GetObject("icon_readonly", resourceCulture);

		public static Bitmap image_add => (Bitmap)ResourceManager.GetObject("image_add", resourceCulture);

		public static Bitmap info => (Bitmap)ResourceManager.GetObject("info", resourceCulture);

		public static Bitmap magnifier => (Bitmap)ResourceManager.GetObject("magnifier", resourceCulture);

		public static Bitmap page_white_database => (Bitmap)ResourceManager.GetObject("page_white_database", resourceCulture);

		public static Bitmap page_white_gear => (Bitmap)ResourceManager.GetObject("page_white_gear", resourceCulture);

		public static Bitmap page_white_star => (Bitmap)ResourceManager.GetObject("page_white_star", resourceCulture);

		public static Bitmap Preview => (Bitmap)ResourceManager.GetObject("Preview", resourceCulture);

		public static Bitmap rebuild => (Bitmap)ResourceManager.GetObject("rebuild", resourceCulture);

		public static Bitmap table_delete => (Bitmap)ResourceManager.GetObject("table_delete", resourceCulture);

		public static string TT_A_TAG => ResourceManager.GetString("TT_A_TAG", resourceCulture);

		public static string TT_BATCHIMPORT_FOLDER => ResourceManager.GetString("TT_BATCHIMPORT_FOLDER", resourceCulture);

		public static string TT_BATCHIMPORT_MATCHINGFILES => ResourceManager.GetString("TT_BATCHIMPORT_MATCHINGFILES", resourceCulture);

		public static string TT_BATCHIMPORT_NAMETEMPLATE => ResourceManager.GetString("TT_BATCHIMPORT_NAMETEMPLATE", resourceCulture);

		public static string TT_BATCHIMPORT_TEMPLATE => ResourceManager.GetString("TT_BATCHIMPORT_TEMPLATE", resourceCulture);

		public static string TT_BUILD_ICON => ResourceManager.GetString("TT_BUILD_ICON", resourceCulture);

		public static string TT_BUILDPROFILE_COMBOBOX => ResourceManager.GetString("TT_BUILDPROFILE_COMBOBOX", resourceCulture);

		public static string TT_BUILDSUMMARY_OUTPUTFILES => ResourceManager.GetString("TT_BUILDSUMMARY_OUTPUTFILES", resourceCulture);

		public static string TT_BUILDSUMMARY_OUTPUTPATH => ResourceManager.GetString("TT_BUILDSUMMARY_OUTPUTPATH", resourceCulture);

		public static string TT_BUILDSUMMARY_SIZE => ResourceManager.GetString("TT_BUILDSUMMARY_SIZE", resourceCulture);

		public static string TT_CLEAN_ICON => ResourceManager.GetString("TT_CLEAN_ICON", resourceCulture);

		public static string TT_CODINGPROFILE_COMBOBOX => ResourceManager.GetString("TT_CODINGPROFILE_COMBOBOX", resourceCulture);

		public static string TT_CUSTOMLAYOUT_CHECKLAYER => ResourceManager.GetString("TT_CUSTOMLAYOUT_CHECKLAYER", resourceCulture);

		public static string TT_CUSTOMLAYOUT_CODINGPROFILE => ResourceManager.GetString("TT_CUSTOMLAYOUT_CODINGPROFILE", resourceCulture);

		public static string TT_CUSTOMLAYOUT_DATATYPE => ResourceManager.GetString("TT_CUSTOMLAYOUT_DATATYPE", resourceCulture);

		public static string TT_CUSTOMLAYOUT_DEFAULTCOLOR => ResourceManager.GetString("TT_CUSTOMLAYOUT_DEFAULTCOLOR", resourceCulture);

		public static string TT_CUSTOMLAYOUT_LAYERNAME => ResourceManager.GetString("TT_CUSTOMLAYOUT_LAYERNAME", resourceCulture);

		public static string TT_CUSTOMLAYOUT_QUALITYPROFILE => ResourceManager.GetString("TT_CUSTOMLAYOUT_QUALITYPROFILE", resourceCulture);

		public static string TT_FILTER => ResourceManager.GetString("TT_FILTER", resourceCulture);

		public static string TT_GTEXOUTPUTFOLDER_LABEL => ResourceManager.GetString("TT_GTEXOUTPUTFOLDER_LABEL", resourceCulture);

		public static string TT_IMPORT_ICON => ResourceManager.GetString("TT_IMPORT_ICON", resourceCulture);

		public static string TT_LAYERASSETDETAILS_CONTROL => ResourceManager.GetString("TT_LAYERASSETDETAILS_CONTROL", resourceCulture);

		public static string TT_NEW_ICON => ResourceManager.GetString("TT_NEW_ICON", resourceCulture);

		public static string TT_NEWPROJECT_LAYERLIST => ResourceManager.GetString("TT_NEWPROJECT_LAYERLIST", resourceCulture);

		public static string TT_NEWPROJECT_SOLUTIONLOCATION => ResourceManager.GetString("TT_NEWPROJECT_SOLUTIONLOCATION", resourceCulture);

		public static string TT_NEWPROJECT_SOLUTIONNAME => ResourceManager.GetString("TT_NEWPROJECT_SOLUTIONNAME", resourceCulture);

		public static string TT_NEWPROJECT_TILESETNAME => ResourceManager.GetString("TT_NEWPROJECT_TILESETNAME", resourceCulture);

		public static string TT_NO_TOOLTIP => ResourceManager.GetString("TT_NO_TOOLTIP", resourceCulture);

		public static string TT_OPEN_ICON => ResourceManager.GetString("TT_OPEN_ICON", resourceCulture);

		public static string TT_OPENGTS_ICON => ResourceManager.GetString("TT_OPENGTS_ICON", resourceCulture);

		public static string TT_OPTION_FLIP => ResourceManager.GetString("TT_OPTION_FLIP", resourceCulture);

		public static string TT_OPTION_LAYER_TARGETSIZE => ResourceManager.GetString("TT_OPTION_LAYER_TARGETSIZE", resourceCulture);

		public static string TT_OPTION_MIPMAPSOURCE => ResourceManager.GetString("TT_OPTION_MIPMAPSOURCE", resourceCulture);

		public static string TT_OPTION_QUALITYLEVEL => ResourceManager.GetString("TT_OPTION_QUALITYLEVEL", resourceCulture);

		public static string TT_OPTION_SWIZZLE => ResourceManager.GetString("TT_OPTION_SWIZZLE", resourceCulture);

		public static string TT_OPTION_TILINGMETHOD => ResourceManager.GetString("TT_OPTION_TILINGMETHOD", resourceCulture);

		public static string TT_OUTPUTFILE_LABEL => ResourceManager.GetString("TT_OUTPUTFILE_LABEL", resourceCulture);

		public static string TT_PAGEFOLDER_LABEL => ResourceManager.GetString("TT_PAGEFOLDER_LABEL", resourceCulture);

		public static string TT_PROPERTIES_HIGHQUALCODING => ResourceManager.GetString("TT_PROPERTIES_HIGHQUALCODING", resourceCulture);

		public static string TT_PROPERTIES_INDIE_TILEHEIGHT => ResourceManager.GetString("TT_PROPERTIES_INDIE_TILEHEIGHT", resourceCulture);

		public static string TT_PROPERTIES_INDIE_TILEWIDTH => ResourceManager.GetString("TT_PROPERTIES_INDIE_TILEWIDTH", resourceCulture);

		public static string TT_PROPERTIES_MIPSTRIPPING => ResourceManager.GetString("TT_PROPERTIES_MIPSTRIPPING", resourceCulture);

		public static string TT_PROPERTIES_NOREDIRECTION => ResourceManager.GetString("TT_PROPERTIES_NOREDIRECTION", resourceCulture);

		public static string TT_PROPERTIES_NOSHAREDMIPS => ResourceManager.GetString("TT_PROPERTIES_NOSHAREDMIPS", resourceCulture);

		public static string TT_PROPERTIES_PATCHING => ResourceManager.GetString("TT_PROPERTIES_PATCHING", resourceCulture);

		public static string TT_PROPERTIES_TILEHEIGHT => ResourceManager.GetString("TT_PROPERTIES_TILEHEIGHT", resourceCulture);

		public static string TT_PROPERTIES_TILEWIDTH => ResourceManager.GetString("TT_PROPERTIES_TILEWIDTH", resourceCulture);

		public static string TT_REBUILD_ICON => ResourceManager.GetString("TT_REBUILD_ICON", resourceCulture);

		public static string TT_RESCAN_ICON => ResourceManager.GetString("TT_RESCAN_ICON", resourceCulture);

		public static string TT_SINGLEASSET_DESC_LABEL => ResourceManager.GetString("TT_SINGLEASSET_DESC_LABEL", resourceCulture);

		public static string TT_SINGLEASSET_NAME_COMBOBOX => ResourceManager.GetString("TT_SINGLEASSET_NAME_COMBOBOX", resourceCulture);

		public static string TT_SINGLEASSET_TEMPLATE_TBOX => ResourceManager.GetString("TT_SINGLEASSET_TEMPLATE_TBOX", resourceCulture);

		public static string TT_TARGET_COMBOBOX => ResourceManager.GetString("TT_TARGET_COMBOBOX", resourceCulture);

		public static string TT_UNIFORMCODING_CHECKBOX => ResourceManager.GetString("TT_UNIFORMCODING_CHECKBOX", resourceCulture);

		public static Bitmap warning => (Bitmap)ResourceManager.GetObject("warning", resourceCulture);

		internal Resources()
		{
		}
	}
	[CompilerGenerated]
	[GeneratedCode("Microsoft.VisualStudio.Editors.SettingsDesigner.SettingsSingleFileGenerator", "12.0.0.0")]
	internal sealed class Settings : ApplicationSettingsBase
	{
		private static Settings defaultInstance = (Settings)SettingsBase.Synchronized(new Settings());

		public static Settings Default => defaultInstance;
	}
}
namespace GrBuildStudio.Controls
{
	public class BatchTemplateControl : UserControl
	{
		public delegate void UpdateTemplateHandler(object sender, EventArgs e, int subtextureIndex);

		private readonly string[] defaultTemplates = new string[4] { "*.jpg", "*", "*_n.jpg", "n_*" };

		private ComboBox[] comboBoxes = new ComboBox[4];

		private SourceMode sourceMode;

		private IContainer components;

		private ComboBox channel0ComboBox;

		private ComboBox channel1ComboBox;

		private ComboBox channel3ComboBox;

		private ComboBox channel2ComboBox;

		public SourceMode ActiveSourceMode
		{
			get
			{
				return sourceMode;
			}
			set
			{
				UpdateSourceMode(sourceMode, value);
			}
		}

		public event UpdateTemplateHandler UpdateTemplate;

		public string GetTemplate(int subtextureIndex)
		{
			if (subtextureIndex < 0 || subtextureIndex >= 4)
			{
				return null;
			}
			return comboBoxes[subtextureIndex].Text;
		}

		public BatchTemplateControl()
		{
			InitializeComponent();
			comboBoxes[0] = channel0ComboBox;
			comboBoxes[1] = channel1ComboBox;
			comboBoxes[2] = channel2ComboBox;
			comboBoxes[3] = channel3ComboBox;
			ActiveSourceMode = sourceMode;
		}

		public void Init(ToolTip ToolTip, string p, int layerIndex, BatchInfo batchInfo)
		{
			//IL_00dc: Unknown result type (might be due to invalid IL or missing references)
			//IL_00e3: Expected O, but got Unknown
			for (int i = 0; i < comboBoxes.Length; i++)
			{
				string[] array = null;
				List<string> list = batchInfo.GetChannelInfo(i).Templates.Where((string _str) => !string.IsNullOrEmpty(_str)).ToList();
				if (list.Count != 0)
				{
					array = new string[list.Count];
					int num = 0;
					foreach (string item in list)
					{
						array[num++] = item;
					}
				}
				else
				{
					array = defaultTemplates;
				}
				ComboBox comboBox = comboBoxes[i];
				comboBox.TabIndex = 10 * (layerIndex + 1) + 4;
				comboBox.Text = array[0];
				comboBox.DisplayMember = "Text";
				for (int j = 0; j < array.Length; j++)
				{
					ComboItem val = new ComboItem();
					val.set_Text(array[j]);
					val.set_ForeColor(System.Drawing.Color.Black);
					comboBox.Items.Add(val);
				}
				comboBox.Tag = i;
				comboBox.Leave += onUpdateTemplate;
				comboBox.KeyPress += onKeyPress;
				comboBox.SelectedIndexChanged += onUpdateTemplate;
			}
		}

		private void UpdateSourceMode(SourceMode from, SourceMode to)
		{
			this.sourceMode = to;
			bool[] array = new bool[4]
			{
				true,
				this.sourceMode == SourceMode.MultiSource || this.sourceMode == SourceMode.MultiSource3 || this.sourceMode == SourceMode.MultiSource4,
				this.sourceMode == SourceMode.MultiSource3 || this.sourceMode == SourceMode.MultiSource4,
				this.sourceMode == SourceMode.MultiSource4
			};
			for (int i = 0; i < 4; i++)
			{
				comboBoxes[i].Visible = array[i];
			}
			int num = 3;
			int num2 = 20;
			int num3 = 6;
			int num4 = 0;
			int num5 = 25;
			SourceMode sourceMode = this.sourceMode;
			if (1 == 0)
			{
			}
			int num6 = sourceMode switch
			{
				SourceMode.MultiSource4 => num + num2 * 4 + 3 * num3 + num4, 
				SourceMode.MultiSource3 => num + num2 * 3 + 2 * num3 + num4, 
				SourceMode.MultiSource => num + num2 * 2 + num3 + num4, 
				_ => num + num2 + num4, 
			};
			if (1 == 0)
			{
			}
			int num7 = num6;
			base.Size = new Size(base.Size.Width, num7);
		}

		private void onKeyPress(object sender, KeyPressEventArgs e)
		{
			if (e.KeyChar == Convert.ToChar(Keys.Return))
			{
				onUpdateTemplate(sender, e);
			}
		}

		private void onUpdateTemplate(object sender, EventArgs e)
		{
			int subtextureIndex = (int)((ComboBox)sender).Tag;
			if (this.UpdateTemplate != null)
			{
				this.UpdateTemplate(this, e, subtextureIndex);
			}
		}

		protected override void Dispose(bool disposing)
		{
			if (disposing && components != null)
			{
				components.Dispose();
			}
			base.Dispose(disposing);
		}

		private void InitializeComponent()
		{
			this.channel0ComboBox = new System.Windows.Forms.ComboBox();
			this.channel1ComboBox = new System.Windows.Forms.ComboBox();
			this.channel3ComboBox = new System.Windows.Forms.ComboBox();
			this.channel2ComboBox = new System.Windows.Forms.ComboBox();
			base.SuspendLayout();
			this.channel0ComboBox.FormattingEnabled = true;
			this.channel0ComboBox.Location = new System.Drawing.Point(5, 3);
			this.channel0ComboBox.Name = "channel0ComboBox";
			this.channel0ComboBox.Size = new System.Drawing.Size(130, 21);
			this.channel0ComboBox.TabIndex = 0;
			this.channel1ComboBox.FormattingEnabled = true;
			this.channel1ComboBox.Location = new System.Drawing.Point(5, 28);
			this.channel1ComboBox.Name = "channel1ComboBox";
			this.channel1ComboBox.Size = new System.Drawing.Size(130, 21);
			this.channel1ComboBox.TabIndex = 1;
			this.channel3ComboBox.FormattingEnabled = true;
			this.channel3ComboBox.Location = new System.Drawing.Point(5, 78);
			this.channel3ComboBox.Name = "channel3ComboBox";
			this.channel3ComboBox.Size = new System.Drawing.Size(130, 21);
			this.channel3ComboBox.TabIndex = 2;
			this.channel2ComboBox.FormattingEnabled = true;
			this.channel2ComboBox.Location = new System.Drawing.Point(5, 53);
			this.channel2ComboBox.Name = "channel2ComboBox";
			this.channel2ComboBox.Size = new System.Drawing.Size(130, 21);
			this.channel2ComboBox.TabIndex = 3;
			base.AutoScaleDimensions = new System.Drawing.SizeF(6f, 13f);
			base.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;
			base.Controls.Add(this.channel2ComboBox);
			base.Controls.Add(this.channel3ComboBox);
			base.Controls.Add(this.channel1ComboBox);
			base.Controls.Add(this.channel0ComboBox);
			base.Name = "BatchTemplateControl";
			base.Size = new System.Drawing.Size(140, 103);
			base.ResumeLayout(false);
		}
	}
	public class ChannelPickerControl : UserControl
	{
		public enum FileFolderMode
		{
			File,
			Folder
		}

		public delegate void PickedHandler(object sender, EventArgs e, int subtextureIndex);

		public delegate void PickedResetHandler(object sender, int idx);

		public delegate void PickedUpdateHandler(object sender, EventArgs e, int subtextureIndex);

		public delegate void SourceModeChangedHandler(object sender, SourceMode mode);

		public delegate bool SourceModeChangingDelegate(object sender, SourceMode from, SourceMode to);

		public delegate void PickerFileDroppedHandler(object sender, int subIndex, string filePath);

		private SourceMode sourceMode;

		private ContextMenuStrip contextMenu;

		private Dictionary<AssetPackingMode, ChannelMask> allPossibileMasks = new Dictionary<AssetPackingMode, ChannelMask>();

		private string fullDatatypeName = string.Empty;

		private bool maskableDatatype;

		private DataType dataType;

		private IContainer components;

		private PickerControl channel1Picker;

		private PickerControl channel0Picker;

		private Button buttonSelectSource;

		private Label channel0Label;

		private Label channel1Label;

		private GroupBox groupLine;

		private PickerControl channel2Picker;

		private PickerControl channel3Picker;

		private Label channel2Label;

		private Label channel3Label;

		public SourceMode ActiveSourceMode
		{
			get
			{
				return sourceMode;
			}
			set
			{
				UpdateSourceMode(sourceMode, value);
			}
		}

		public bool ReadOnly
		{
			set
			{
				channel0Picker.DisplayTextBox.ReadOnly = value;
				channel1Picker.DisplayTextBox.ReadOnly = value;
				channel2Picker.DisplayTextBox.ReadOnly = value;
				channel3Picker.DisplayTextBox.ReadOnly = value;
			}
		}

		public event PickedHandler PickerPicked;

		public event PickedResetHandler PickerReset;

		public event PickedUpdateHandler PickerUpdate;

		public event SourceModeChangedHandler SourceModeChanged;

		public event SourceModeChangingDelegate SourceModeChanging;

		public event PickerFileDroppedHandler PickerFileDropped;

		public void SetDisplayText(int subtexIndex, string text)
		{
			switch (ActiveSourceMode)
			{
			case SourceMode.SingleSource:
				channel0Picker.DisplayTextBox.Text = text;
				break;
			case SourceMode.MultiSource:
				if (subtexIndex == 0)
				{
					channel0Picker.DisplayTextBox.Text = text;
				}
				else
				{
					channel1Picker.DisplayTextBox.Text = text;
				}
				break;
			case SourceMode.MultiSource3:
				switch (subtexIndex)
				{
				case 0:
					channel0Picker.DisplayTextBox.Text = text;
					break;
				case 1:
					channel1Picker.DisplayTextBox.Text = text;
					break;
				case 2:
					channel2Picker.DisplayTextBox.Text = text;
					break;
				}
				break;
			case SourceMode.MultiSource4:
				switch (subtexIndex)
				{
				case 0:
					channel0Picker.DisplayTextBox.Text = text;
					break;
				case 1:
					channel1Picker.DisplayTextBox.Text = text;
					break;
				case 2:
					channel2Picker.DisplayTextBox.Text = text;
					break;
				case 3:
					channel3Picker.DisplayTextBox.Text = text;
					break;
				}
				break;
			}
		}

		public string GetDisplayText(int subTexIndex)
		{
			switch (ActiveSourceMode)
			{
			case SourceMode.SingleSource:
				return channel0Picker.DisplayTextBox.Text;
			case SourceMode.MultiSource:
				if (subTexIndex == 0)
				{
					return channel0Picker.DisplayTextBox.Text;
				}
				return channel1Picker.DisplayTextBox.Text;
			case SourceMode.MultiSource3:
				switch (subTexIndex)
				{
				case 0:
					return channel0Picker.DisplayTextBox.Text;
				case 1:
					return channel1Picker.DisplayTextBox.Text;
				case 2:
					return channel2Picker.DisplayTextBox.Text;
				}
				break;
			case SourceMode.MultiSource4:
				switch (subTexIndex)
				{
				case 0:
					return channel0Picker.DisplayTextBox.Text;
				case 1:
					return channel1Picker.DisplayTextBox.Text;
				case 2:
					return channel2Picker.DisplayTextBox.Text;
				case 3:
					return channel3Picker.DisplayTextBox.Text;
				}
				break;
			}
			return null;
		}

		public ChannelPickerControl(DataType _dataType)
		{
			InitializeComponent();
			dataType = _dataType;
			ChannelMerging.GetAllChannelMasks(dataType, ref allPossibileMasks);
			maskableDatatype = allPossibileMasks.Count > 0;
			if (maskableDatatype)
			{
				fullDatatypeName = ChannelMerging.GetDataTypeChannelNames(dataType);
				CreateContextMenu();
				UpdateLabels();
			}
			ActiveSourceMode = SourceMode.SingleSource;
			UpdateVisibility();
		}

		public void Init(ToolTip ToolTip, string ToolTipBodyText, int layerIndex, FileFolderMode fileFolderMode)
		{
			//IL_0050: Unknown result type (might be due to invalid IL or missing references)
			//IL_0055: Unknown result type (might be due to invalid IL or missing references)
			//IL_005f: Expected O, but got Unknown
			PickerControl[] array = new PickerControl[4] { channel0Picker, channel1Picker, channel2Picker, channel3Picker };
			for (int i = 0; i < 4; i++)
			{
				((SuperTooltip)ToolTip).SetSuperTooltip((IComponent)array[i].DisplayTextBox, new SuperTooltipInfo("", "", ToolTipBodyText, (Image)null, (Image)null, ((SuperTooltip)ToolTip).get_DefaultTooltipSettings().get_Color()));
				array[i].ChooseButton.Text = "Choose";
				array[i].ChooseButton.TabIndex = 10 * (layerIndex + 1) + 2;
				array[i].DisplayTextBox.TabIndex = 10 * (layerIndex + 1);
				array[i].DisplayTextBox.ReadOnly = true;
				array[i].DisplayTextBox.Text = "Empty";
				array[i].DisplayTextBox.KeyPress += channelPicker_KeyPress;
				array[i].AllowFileDrop = fileFolderMode == FileFolderMode.File;
				array[i].AllowFolderDrop = fileFolderMode == FileFolderMode.Folder;
			}
		}

		public void Reset()
		{
			for (int i = 0; i < 4; i++)
			{
				SetDisplayText(i, "Empty");
				pickers_Reset(i);
			}
		}

		private void UpdateVisibility()
		{
			buttonSelectSource.Visible = maskableDatatype;
			bool visible = maskableDatatype && (this.sourceMode == SourceMode.MultiSource || this.sourceMode == SourceMode.MultiSource3 || this.sourceMode == SourceMode.MultiSource4);
			bool visible2 = maskableDatatype && (this.sourceMode == SourceMode.MultiSource3 || this.sourceMode == SourceMode.MultiSource4);
			bool visible3 = maskableDatatype && this.sourceMode == SourceMode.MultiSource4;
			channel1Picker.Visible = visible;
			channel1Label.Visible = visible;
			channel2Picker.Visible = visible2;
			channel2Label.Visible = visible2;
			channel3Picker.Visible = visible3;
			channel3Label.Visible = visible3;
			groupLine.Visible = visible;
			int num = 2;
			int num2 = channel1Picker.Location.X - num;
			Point location = channel0Picker.Location;
			location.X = (maskableDatatype ? channel1Picker.Location.X : num);
			Size size = channel1Picker.Size;
			size.Width = (maskableDatatype ? channel1Picker.Size.Width : (channel1Picker.Size.Width + num2));
			channel0Picker.Location = location;
			channel0Picker.Size = size;
			int num3 = 3;
			int num4 = 20;
			int num5 = 6;
			int num6 = 0;
			int num7 = 25;
			SourceMode sourceMode = this.sourceMode;
			if (1 == 0)
			{
			}
			int num8 = sourceMode switch
			{
				SourceMode.MultiSource4 => num3 + num4 * 4 + 3 * num5 + num6, 
				SourceMode.MultiSource3 => num3 + num4 * 3 + 2 * num5 + num6, 
				SourceMode.MultiSource => num3 + num4 * 2 + num5 + num6, 
				_ => num3 + num4 + num6, 
			};
			if (1 == 0)
			{
			}
			int num9 = num8;
			base.Size = new Size(base.Size.Width, num9);
		}

		private void UpdateSourceMode(SourceMode from, SourceMode to)
		{
			sourceMode = to;
			OnSourceModeChanged(to);
			UpdateVisibility();
			UpdateLabels();
			UpdateContextMenu();
		}

		private void CreateContextMenu()
		{
			contextMenu = new ContextMenuStrip();
			ToolStripMenuItem toolStripMenuItem = new ToolStripMenuItem();
			toolStripMenuItem.Checked = true;
			toolStripMenuItem.Text = "Single Source (" + fullDatatypeName + ")";
			toolStripMenuItem.Click += src_Click;
			toolStripMenuItem.Tag = SourceMode.SingleSource;
			contextMenu.Items.Add(toolStripMenuItem);
			if (allPossibileMasks.ContainsKey((AssetPackingMode)1))
			{
				ChannelMask val = allPossibileMasks[(AssetPackingMode)1];
				ToolStripMenuItem toolStripMenuItem2 = new ToolStripMenuItem();
				object[] args = new string[2]
				{
					val.humanReadable[0],
					val.humanReadable[1]
				};
				toolStripMenuItem2.Text = string.Format("Multiple Sources ({0} + {1})", args);
				toolStripMenuItem2.Checked = false;
				toolStripMenuItem2.Click += src_Click;
				toolStripMenuItem2.Tag = SourceMode.MultiSource;
				contextMenu.Items.Add(toolStripMenuItem2);
			}
			if (allPossibileMasks.ContainsKey((AssetPackingMode)2))
			{
				ChannelMask val2 = allPossibileMasks[(AssetPackingMode)2];
				ToolStripMenuItem toolStripMenuItem3 = new ToolStripMenuItem();
				object[] args = new string[3]
				{
					val2.humanReadable[0],
					val2.humanReadable[1],
					val2.humanReadable[2]
				};
				toolStripMenuItem3.Text = string.Format("Multiple Sources ({0} + {1} + {2})", args);
				toolStripMenuItem3.Checked = false;
				toolStripMenuItem3.Click += src_Click;
				toolStripMenuItem3.Tag = SourceMode.MultiSource3;
				contextMenu.Items.Add(toolStripMenuItem3);
			}
			if (allPossibileMasks.ContainsKey((AssetPackingMode)3))
			{
				ChannelMask val3 = allPossibileMasks[(AssetPackingMode)3];
				ToolStripMenuItem toolStripMenuItem4 = new ToolStripMenuItem();
				object[] args = val3.humanReadable;
				toolStripMenuItem4.Text = string.Format("Multiple Sources ({0} + {1} + {2} + {3})", args);
				toolStripMenuItem4.Checked = false;
				toolStripMenuItem4.Click += src_Click;
				toolStripMenuItem4.Tag = SourceMode.MultiSource4;
				contextMenu.Items.Add(toolStripMenuItem4);
			}
		}

		private void UpdateLabels()
		{
			Label[] array = new Label[4] { channel0Label, channel1Label, channel2Label, channel3Label };
			if (ActiveSourceMode == SourceMode.SingleSource)
			{
				array[0].Text = fullDatatypeName;
				array[1].Text = string.Empty;
			}
			else if (ActiveSourceMode == SourceMode.MultiSource)
			{
				if (allPossibileMasks.ContainsKey((AssetPackingMode)1))
				{
					ChannelMask val = allPossibileMasks[(AssetPackingMode)1];
					array[0].Text = val.humanReadable[0];
					array[1].Text = val.humanReadable[1];
				}
			}
			else if (ActiveSourceMode == SourceMode.MultiSource3)
			{
				if (allPossibileMasks.ContainsKey((AssetPackingMode)2))
				{
					ChannelMask val2 = allPossibileMasks[(AssetPackingMode)2];
					array[0].Text = val2.humanReadable[0];
					array[1].Text = val2.humanReadable[1];
					array[2].Text = val2.humanReadable[2];
				}
			}
			else if (ActiveSourceMode == SourceMode.MultiSource4 && allPossibileMasks.ContainsKey((AssetPackingMode)3))
			{
				ChannelMask val3 = allPossibileMasks[(AssetPackingMode)3];
				array[0].Text = val3.humanReadable[0];
				array[1].Text = val3.humanReadable[1];
				array[2].Text = val3.humanReadable[2];
				array[3].Text = val3.humanReadable[3];
			}
		}

		private void UpdateContextMenu()
		{
			if (contextMenu == null)
			{
				return;
			}
			SourceMode activeSourceMode = ActiveSourceMode;
			foreach (ToolStripMenuItem item in contextMenu.Items)
			{
				item.Checked = (SourceMode)item.Tag == activeSourceMode;
			}
		}

		private void src_Click(object sender, EventArgs e)
		{
			SourceMode sourceMode = (SourceMode)((ToolStripMenuItem)sender).Tag;
			if (OnSourceModeChanging(this, ActiveSourceMode, sourceMode))
			{
				ActiveSourceMode = sourceMode;
			}
		}

		private void options_Click(object sender, EventArgs e)
		{
			if (contextMenu != null)
			{
				contextMenu.Show(Control.MousePosition);
			}
		}

		private void pickers_Picked(object sender, EventArgs e, int subtextureIndex)
		{
			if (this.PickerPicked != null)
			{
				this.PickerPicked(this, e, subtextureIndex);
			}
		}

		private void pickers_Reset(int idx)
		{
			if (this.PickerReset != null)
			{
				this.PickerReset(this, idx);
			}
		}

		private void pickers_Update(object sender, EventArgs e, int subtextureIndex)
		{
			if (this.PickerUpdate != null)
			{
				this.PickerUpdate(this, e, subtextureIndex);
			}
		}

		private void OnSourceModeChanged(SourceMode mode)
		{
			if (this.SourceModeChanged != null)
			{
				this.SourceModeChanged(this, mode);
			}
		}

		private bool OnSourceModeChanging(object sender, SourceMode from, SourceMode to)
		{
			if (this.SourceModeChanging != null)
			{
				return this.SourceModeChanging(this, from, to);
			}
			return true;
		}

		private void channelPicker_Picked(object sender, EventArgs e)
		{
			PickerControl pickerControl = (PickerControl)sender;
			pickers_Picked(sender, e, (int)pickerControl.Tag);
		}

		private void channelPicker_Leave(object sender, EventArgs e)
		{
			PickerControl pickerControl = (PickerControl)sender;
			pickers_Update(sender, e, (int)pickerControl.Tag);
		}

		private void channelPicker_KeyPress(object sender, KeyPressEventArgs e)
		{
			if (e.KeyChar == Convert.ToChar(Keys.Return))
			{
				PickerControl pickerControl = (PickerControl)sender;
				pickers_Update(sender, e, (int)pickerControl.Tag);
			}
		}

		private void OnPickerFileDropped(object sender, int subIndex, string filePath)
		{
			if (this.PickerFileDropped != null)
			{
				this.PickerFileDropped(this, subIndex, filePath);
			}
		}

		private void channelPicker_FileDropped(object sender, string filePath)
		{
			PickerControl pickerControl = (PickerControl)sender;
			OnPickerFileDropped(this, (int)pickerControl.Tag, filePath);
		}

		protected override void Dispose(bool disposing)
		{
			if (disposing && components != null)
			{
				components.Dispose();
			}
			base.Dispose(disposing);
		}

		private void InitializeComponent()
		{
			this.buttonSelectSource = new System.Windows.Forms.Button();
			this.channel0Label = new System.Windows.Forms.Label();
			this.channel1Label = new System.Windows.Forms.Label();
			this.groupLine = new System.Windows.Forms.GroupBox();
			this.channel0Picker = new GrBuildStudio.Controls.PickerControl();
			this.channel1Picker = new GrBuildStudio.Controls.PickerControl();
			this.channel2Picker = new GrBuildStudio.Controls.PickerControl();
			this.channel3Picker = new GrBuildStudio.Controls.PickerControl();
			this.channel2Label = new System.Windows.Forms.Label();
			this.channel3Label = new System.Windows.Forms.Label();
			base.SuspendLayout();
			this.buttonSelectSource.Font = new System.Drawing.Font("Microsoft Sans Serif", 6f, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, 0);
			this.buttonSelectSource.Location = new System.Drawing.Point(1, 5);
			this.buttonSelectSource.Margin = new System.Windows.Forms.Padding(0);
			this.buttonSelectSource.Name = "buttonSelectSource";
			this.buttonSelectSource.Size = new System.Drawing.Size(14, 14);
			this.buttonSelectSource.TabIndex = 0;
			this.buttonSelectSource.Text = "â¼";
			this.buttonSelectSource.UseVisualStyleBackColor = true;
			this.buttonSelectSource.Click += new System.EventHandler(options_Click);
			this.channel0Label.AutoSize = true;
			this.channel0Label.Location = new System.Drawing.Point(23, 7);
			this.channel0Label.Name = "channel0Label";
			this.channel0Label.Size = new System.Drawing.Size(30, 13);
			this.channel0Label.TabIndex = 1;
			this.channel0Label.Text = "RGB";
			this.channel1Label.AutoSize = true;
			this.channel1Label.Location = new System.Drawing.Point(23, 32);
			this.channel1Label.Name = "channel1Label";
			this.channel1Label.Size = new System.Drawing.Size(14, 13);
			this.channel1Label.TabIndex = 3;
			this.channel1Label.Text = "A";
			this.channel2Label.AutoSize = true;
			this.channel2Label.Location = new System.Drawing.Point(23, 57);
			this.channel2Label.Name = "channel2Label";
			this.channel2Label.Size = new System.Drawing.Size(15, 13);
			this.channel2Label.TabIndex = 5;
			this.channel2Label.Text = "G";
			this.channel3Label.AutoSize = true;
			this.channel3Label.Location = new System.Drawing.Point(24, 83);
			this.channel3Label.Name = "channel3Label";
			this.channel3Label.Size = new System.Drawing.Size(14, 13);
			this.channel3Label.TabIndex = 7;
			this.channel3Label.Text = "B";
			this.groupLine.Location = new System.Drawing.Point(18, 0);
			this.groupLine.Name = "groupLine";
			this.groupLine.Size = new System.Drawing.Size(2, 102);
			this.groupLine.TabIndex = 12;
			this.groupLine.TabStop = false;
			this.channel0Picker.AllowFileDrop = true;
			this.channel0Picker.AllowFolderDrop = false;
			this.channel0Picker.Anchor = System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Left | System.Windows.Forms.AnchorStyles.Right;
			this.channel0Picker.Location = new System.Drawing.Point(65, 3);
			this.channel0Picker.Name = "channel0Picker";
			this.channel0Picker.Size = new System.Drawing.Size(210, 20);
			this.channel0Picker.TabIndex = 2;
			this.channel0Picker.Template = null;
			this.channel0Picker.Picked += new System.EventHandler(channelPicker_Picked);
			this.channel0Picker.FileDropped += new GrBuildStudio.Controls.PickerControl.FileDroppedHandler(channelPicker_FileDropped);
			this.channel0Picker.Leave += new System.EventHandler(channelPicker_Leave);
			this.channel0Picker.Tag = 0;
			this.channel1Picker.AllowFileDrop = true;
			this.channel1Picker.AllowFolderDrop = false;
			this.channel1Picker.Anchor = System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Left | System.Windows.Forms.AnchorStyles.Right;
			this.channel1Picker.Location = new System.Drawing.Point(65, 29);
			this.channel1Picker.Name = "channel1Picker";
			this.channel1Picker.Size = new System.Drawing.Size(210, 20);
			this.channel1Picker.TabIndex = 4;
			this.channel1Picker.Template = null;
			this.channel1Picker.Picked += new System.EventHandler(channelPicker_Picked);
			this.channel1Picker.FileDropped += new GrBuildStudio.Controls.PickerControl.FileDroppedHandler(channelPicker_FileDropped);
			this.channel1Picker.Leave += new System.EventHandler(channelPicker_Leave);
			this.channel1Picker.Tag = 1;
			this.channel2Picker.AllowFileDrop = true;
			this.channel2Picker.AllowFolderDrop = false;
			this.channel2Picker.Anchor = System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Left | System.Windows.Forms.AnchorStyles.Right;
			this.channel2Picker.Location = new System.Drawing.Point(65, 55);
			this.channel2Picker.Name = "channel2Picker";
			this.channel2Picker.Size = new System.Drawing.Size(210, 20);
			this.channel2Picker.TabIndex = 6;
			this.channel2Picker.Template = null;
			this.channel2Picker.Picked += new System.EventHandler(channelPicker_Picked);
			this.channel2Picker.FileDropped += new GrBuildStudio.Controls.PickerControl.FileDroppedHandler(channelPicker_FileDropped);
			this.channel2Picker.Leave += new System.EventHandler(channelPicker_Leave);
			this.channel2Picker.Tag = 2;
			this.channel3Picker.AllowFileDrop = true;
			this.channel3Picker.AllowFolderDrop = false;
			this.channel3Picker.Anchor = System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Left | System.Windows.Forms.AnchorStyles.Right;
			this.channel3Picker.Location = new System.Drawing.Point(65, 81);
			this.channel3Picker.Name = "channel3Picker";
			this.channel3Picker.Size = new System.Drawing.Size(210, 20);
			this.channel3Picker.TabIndex = 8;
			this.channel3Picker.Template = null;
			this.channel3Picker.Picked += new System.EventHandler(channelPicker_Picked);
			this.channel3Picker.FileDropped += new GrBuildStudio.Controls.PickerControl.FileDroppedHandler(channelPicker_FileDropped);
			this.channel3Picker.Leave += new System.EventHandler(channelPicker_Leave);
			this.channel3Picker.Tag = 3;
			base.AutoScaleDimensions = new System.Drawing.SizeF(6f, 13f);
			base.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;
			base.Controls.Add(this.channel3Label);
			base.Controls.Add(this.channel2Label);
			base.Controls.Add(this.channel3Picker);
			base.Controls.Add(this.channel2Picker);
			base.Controls.Add(this.channel0Picker);
			base.Controls.Add(this.groupLine);
			base.Controls.Add(this.channel1Picker);
			base.Controls.Add(this.channel1Label);
			base.Controls.Add(this.buttonSelectSource);
			base.Controls.Add(this.channel0Label);
			base.Name = "ChannelPickerControl";
			base.Size = new System.Drawing.Size(277, 101);
			base.ResumeLayout(false);
			base.PerformLayout();
		}
	}
	internal class ComboBoxHelper
	{
		private class ComboBoxItem
		{
			public string Text { get; set; }

			public object Tag { get; set; }

			public ComboBoxItem()
			{
				Text = string.Empty;
				Tag = null;
			}

			public ComboBoxItem(string text)
			{
				Text = text;
				Tag = null;
			}

			public ComboBoxItem(string text, object tag)
			{
				Text = text;
				Tag = tag;
			}

			public override string ToString()
			{
				return Text;
			}
		}

		internal static T GetSelectedEnumValue<T>(ComboBox combo)
		{
			ComboBoxItem comboBoxItem = (ComboBoxItem)combo.SelectedItem;
			if (comboBoxItem == null)
			{
				return (T)System.Enum.Parse(typeof(T), combo.SelectedText);
			}
			return (T)comboBoxItem.Tag;
		}

		internal static string GetSelectedValue(ComboBox combo)
		{
			ComboBoxItem comboBoxItem = (ComboBoxItem)combo.SelectedItem;
			if (comboBoxItem == null)
			{
				return combo.SelectedText;
			}
			return (string)comboBoxItem.Tag;
		}

		internal static T GetSelectedValue<T>(ComboBox combo)
		{
			return (T)((ComboBoxItem)combo.SelectedItem).Tag;
		}

		internal static void FillEnumComboBox<T>(ComboBox combo)
		{
			combo.Items.Clear();
			new List<T>();
			Array values = System.Enum.GetValues(typeof(T));
			for (int i = 0; i < values.Length; i++)
			{
				ComboBoxItem comboBoxItem = new ComboBoxItem();
				T val = (T)values.GetValue(i);
				comboBoxItem.Text = val.ToString();
				comboBoxItem.Tag = val;
				combo.Items.Add(comboBoxItem);
			}
		}

		internal static void FillEnumComboBox<T>(ComboBox combo, Func<T, string> toString)
		{
			combo.Items.Clear();
			new List<T>();
			Array values = System.Enum.GetValues(typeof(T));
			for (int i = 0; i < values.Length; i++)
			{
				ComboBoxItem comboBoxItem = new ComboBoxItem();
				T val = (T)values.GetValue(i);
				comboBoxItem.Text = toString(val);
				comboBoxItem.Tag = val;
				combo.Items.Add(comboBoxItem);
			}
		}

		internal static void FillComboBox<T>(ComboBox combo, List<T> list)
		{
			combo.Items.Clear();
			foreach (T item in list)
			{
				ComboBoxItem comboBoxItem = new ComboBoxItem();
				comboBoxItem.Text = item.ToString();
				comboBoxItem.Tag = item;
				combo.Items.Add(comboBoxItem);
			}
		}

		internal static void FillComboBox<T>(ComboBox combo, T[] values, string[] strings)
		{
			if (values.Length != strings.Length)
			{
				throw new Exception("Both lists values and strings need to be equal size");
			}
			combo.Items.Clear();
			for (int i = 0; i < values.Length; i++)
			{
				ComboBoxItem comboBoxItem = new ComboBoxItem();
				comboBoxItem.Text = strings[i];
				comboBoxItem.Tag = values[i];
				combo.Items.Add(comboBoxItem);
			}
		}

		internal static void FillComboBox<T>(ComboBox combo, List<T> values, List<string> strings)
		{
			FillComboBox(combo, values.ToArray(), strings.ToArray());
		}

		internal static void FillComboBox(ComboBox combo, List<string> list)
		{
			combo.Items.Clear();
			foreach (string item in list)
			{
				ComboBoxItem comboBoxItem = new ComboBoxItem();
				comboBoxItem.Text = item;
				comboBoxItem.Tag = item;
				combo.Items.Add(comboBoxItem);
			}
		}

		internal static void FillComboboxValues<T>(ComboBox combo, List<T> values, Func<T, string> toString)
		{
			combo.Items.Clear();
			foreach (T value in values)
			{
				ComboBoxItem comboBoxItem = new ComboBoxItem();
				comboBoxItem.Text = toString(value);
				comboBoxItem.Tag = value;
				combo.Items.Add(comboBoxItem);
			}
		}

		internal static void AddComboboxValue<T>(ComboBox combo, T value, string text)
		{
			ComboBoxItem comboBoxItem = new ComboBoxItem();
			comboBoxItem.Text = text;
			comboBoxItem.Tag = value;
			combo.Items.Add(comboBoxItem);
		}

		internal static void SelectComboBoxItem(ComboBox combo, object tag)
		{
			for (int i = 0; i < combo.Items.Count; i++)
			{
				ComboBoxItem comboBoxItem = (ComboBoxItem)combo.Items[i];
				if (comboBoxItem != null && comboBoxItem.Tag.Equals(tag))
				{
					combo.SelectedIndex = i;
					break;
				}
			}
		}

		internal static void SelectComboBoxItem<T>(ComboBox combo, T tag)
		{
			for (int i = 0; i < combo.Items.Count; i++)
			{
				ComboBoxItem comboBoxItem = (ComboBoxItem)combo.Items[i];
				if (comboBoxItem != null && comboBoxItem.Tag.Equals(tag))
				{
					combo.SelectedIndex = i;
					break;
				}
			}
		}

		internal static void SelectComboBoxItem<T>(ComboBox combo, Func<T, bool> selector)
		{
			for (int i = 0; i < combo.Items.Count; i++)
			{
				ComboBoxItem comboBoxItem = (ComboBoxItem)combo.Items[i];
				if (comboBoxItem != null && selector((T)comboBoxItem.Tag))
				{
					combo.SelectedIndex = i;
					break;
				}
			}
		}
	}
	public class InvertChannelsControl : UserControl
	{
		public delegate void OnValuesChangedDelegate(object sender, EventArgs e);

		private bool loading;

		private IContainer components;

		private CheckBoxX checkBox1;

		private CheckBoxX checkBox2;

		private CheckBoxX checkBox3;

		private CheckBoxX checkBox4;

		public int maxChannels { get; private set; }

		public string InvertValue { get; private set; }

		public event OnValuesChangedDelegate ValuesChanged;

		public InvertChannelsControl()
		{
			InitializeComponent();
		}

		public void Initialize(int numChannelsActive, string captions, string invertValues)
		{
			maxChannels = numChannelsActive;
			loading = true;
			SetValues(invertValues);
			LoadCaptions(captions);
			loading = false;
			((Control)(object)checkBox1).Visible = numChannelsActive > 0;
			((Control)(object)checkBox2).Visible = numChannelsActive > 1;
			((Control)(object)checkBox3).Visible = numChannelsActive > 2;
			((Control)(object)checkBox4).Visible = numChannelsActive > 3;
		}

		private bool BitValue(string s, int index)
		{
			if (s.Length <= index)
			{
				return false;
			}
			return s[index].Equals('1');
		}

		private string BitsToString(bool[] bits)
		{
			StringBuilder stringBuilder = new StringBuilder();
			foreach (bool flag in bits)
			{
				stringBuilder.Append(flag ? "1" : "0");
			}
			return stringBuilder.ToString();
		}

		private void LoadCaptions(string captions)
		{
			CheckBoxX[] array = (CheckBoxX[])(object)new CheckBoxX[4] { checkBox1, checkBox2, checkBox3, checkBox4 };
			for (int i = 0; i < 4; i++)
			{
				if (captions.Length > i)
				{
					((Control)(object)array[i]).Text = captions[i].ToString();
				}
			}
		}

		private void SetValues(string invertValues)
		{
			if (string.IsNullOrEmpty(invertValues))
			{
				invertValues = "0000";
			}
			CheckBoxX[] array = (CheckBoxX[])(object)new CheckBoxX[4] { checkBox1, checkBox2, checkBox3, checkBox4 };
			for (int i = 0; i < 4; i++)
			{
				((Control)(object)array[i]).Visible = maxChannels > i;
				if (maxChannels > i)
				{
					array[i].set_Checked(BitValue(invertValues, i));
				}
			}
			InvertValue = invertValues;
			OnValuesChanged();
		}

		private string GetValues()
		{
			bool[] array = new bool[4];
			CheckBoxX[] array2 = (CheckBoxX[])(object)new CheckBoxX[4] { checkBox1, checkBox2, checkBox3, checkBox4 };
			for (int i = 0; i < 4; i++)
			{
				array[i] = array2[i].get_Checked();
			}
			return BitsToString(array);
		}

		private void checkBox1_CheckedChanged(object sender, EventArgs e)
		{
			if (!loading)
			{
				InvertValue = GetValues();
				OnValuesChanged();
			}
		}

		private void checkBox2_CheckedChanged(object sender, EventArgs e)
		{
			if (!loading)
			{
				InvertValue = GetValues();
				OnValuesChanged();
			}
		}

		private void checkBox3_CheckedChanged(object sender, EventArgs e)
		{
			if (!loading)
			{
				InvertValue = GetValues();
				OnValuesChanged();
			}
		}

		private void checkBox4_CheckedChanged(object sender, EventArgs e)
		{
			if (!loading)
			{
				InvertValue = GetValues();
				OnValuesChanged();
			}
		}

		private void OnValuesChanged()
		{
			this.ValuesChanged?.Invoke(this, new EventArgs());
		}

		protected override void Dispose(bool disposing)
		{
			if (disposing && components != null)
			{
				components.Dispose();
			}
			base.Dispose(disposing);
		}

		private void InitializeComponent()
		{
			//IL_0002: Unknown result type (might be due to invalid IL or missing references)
			//IL_000c: Expected O, but got Unknown
			//IL_000d: Unknown result type (might be due to invalid IL or missing references)
			//IL_0017: Expected O, but got Unknown
			//IL_0018: Unknown result type (might be due to invalid IL or missing references)
			//IL_0022: Expected O, but got Unknown
			//IL_0023: Unknown result type (might be due to invalid IL or missing references)
			//IL_002d: Expected O, but got Unknown
			this.checkBox1 = new CheckBoxX();
			this.checkBox2 = new CheckBoxX();
			this.checkBox3 = new CheckBoxX();
			this.checkBox4 = new CheckBoxX();
			base.SuspendLayout();
			((System.Windows.Forms.Control)(object)this.checkBox1).AutoSize = true;
			((BaseItemControl)this.checkBox1).get_BackgroundStyle().set_CornerType((eCornerType)1);
			((System.Windows.Forms.Control)(object)this.checkBox1).Location = new System.Drawing.Point(0, 0);
			((System.Windows.Forms.Control)(object)this.checkBox1).Name = "checkBox1";
			((System.Windows.Forms.Control)(object)this.checkBox1).Size = new System.Drawing.Size(30, 15);
			((System.Windows.Forms.Control)(object)this.checkBox1).TabIndex = 0;
			((System.Windows.Forms.Control)(object)this.checkBox1).Text = "R";
			this.checkBox1.add_CheckedChanged(new System.EventHandler(checkBox1_CheckedChanged));
			((System.Windows.Forms.Control)(object)this.checkBox2).AutoSize = true;
			((BaseItemControl)this.checkBox2).get_BackgroundStyle().set_CornerType((eCornerType)1);
			((System.Windows.Forms.Control)(object)this.checkBox2).Location = new System.Drawing.Point(40, 0);
			((System.Windows.Forms.Control)(object)this.checkBox2).Name = "checkBox2";
			((System.Windows.Forms.Control)(object)this.checkBox2).Size = new System.Drawing.Size(31, 15);
			((System.Windows.Forms.Control)(object)this.checkBox2).TabIndex = 1;
			((System.Windows.Forms.Control)(object)this.checkBox2).Text = "G";
			this.checkBox2.add_CheckedChanged(new System.EventHandler(checkBox2_CheckedChanged));
			((System.Windows.Forms.Control)(object)this.checkBox3).AutoSize = true;
			((BaseItemControl)this.checkBox3).get_BackgroundStyle().set_CornerType((eCornerType)1);
			((System.Windows.Forms.Control)(object)this.checkBox3).Location = new System.Drawing.Point(80, 0);
			((System.Windows.Forms.Control)(object)this.checkBox3).Name = "checkBox3";
			((System.Windows.Forms.Control)(object)this.checkBox3).Size = new System.Drawing.Size(30, 15);
			((System.Windows.Forms.Control)(object)this.checkBox3).TabIndex = 2;
			((System.Windows.Forms.Control)(object)this.checkBox3).Text = "B";
			this.checkBox3.add_CheckedChanged(new System.EventHandler(checkBox3_CheckedChanged));
			((System.Windows.Forms.Control)(object)this.checkBox4).AutoSize = true;
			((BaseItemControl)this.checkBox4).get_BackgroundStyle().set_CornerType((eCornerType)1);
			((System.Windows.Forms.Control)(object)this.checkBox4).Location = new System.Drawing.Point(120, 0);
			((System.Windows.Forms.Control)(object)this.checkBox4).Name = "checkBox4";
			((System.Windows.Forms.Control)(object)this.checkBox4).Size = new System.Drawing.Size(30, 15);
			((System.Windows.Forms.Control)(object)this.checkBox4).TabIndex = 3;
			((System.Windows.Forms.Control)(object)this.checkBox4).Text = "A";
			this.checkBox4.add_CheckedChanged(new System.EventHandler(checkBox4_CheckedChanged));
			base.AutoScaleDimensions = new System.Drawing.SizeF(6f, 13f);
			base.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;
			base.Controls.Add((System.Windows.Forms.Control)(object)this.checkBox4);
			base.Controls.Add((System.Windows.Forms.Control)(object)this.checkBox3);
			base.Controls.Add((System.Windows.Forms.Control)(object)this.checkBox2);
			base.Controls.Add((System.Windows.Forms.Control)(object)this.checkBox1);
			base.Name = "InvertChannelsControl";
			base.Size = new System.Drawing.Size(168, 14);
			base.ResumeLayout(false);
			base.PerformLayout();
		}
	}
	public class PathBoxControl : UserControl, INotifyPropertyChanged
	{
		public enum PathBoxPathType
		{
			File,
			Folder
		}

		public enum PathBoxLoadSave
		{
			Load,
			Save
		}

		public delegate void PreprocessSelectedPathHandler(object sender, string filePath, out string processedFilePath, out bool accept);

		private string path;

		private IContainer components;

		private TextBoxX textBoxX1;

		public PathBoxPathType PathType { get; set; }

		public PathBoxLoadSave LoadSave { get; set; }

		public FileDialog OpenSaveFileDialog { get; private set; }

		public FolderBrowserDialog FolderBrowserDialog { get; private set; }

		public string Path
		{
			get
			{
				return path;
			}
			set
			{
				path = value;
				NotifyPropertyChanged("Path");
			}
		}

		public event PreprocessSelectedPathHandler PreprocessSelectedPath;

		public event PropertyChangedEventHandler PropertyChanged;

		public PathBoxControl()
			: this(PathBoxPathType.Folder, PathBoxLoadSave.Load)
		{
		}

		public PathBoxControl(PathBoxPathType pathType)
			: this(pathType, PathBoxLoadSave.Load)
		{
		}

		public PathBoxControl(PathBoxLoadSave loadSave)
			: this(PathBoxPathType.Folder, loadSave)
		{
		}

		public PathBoxControl(PathBoxPathType pathType, PathBoxLoadSave loadSave)
		{
			InitializeComponent();
			((Control)(object)textBoxX1).DataBindings.Add("Text", this, "Path");
			PathType = pathType;
			LoadSave = loadSave;
			if (loadSave == PathBoxLoadSave.Load)
			{
				OpenSaveFileDialog = new OpenFileDialog();
			}
			else
			{
				OpenSaveFileDialog = new SaveFileDialog();
			}
			FolderBrowserDialog = new FolderBrowserDialog();
		}

		private void OnPreprocessSelectedPath(object sender, string filePath, out string processedFilePath, out bool accept)
		{
			if (this.PreprocessSelectedPath != null)
			{
				this.PreprocessSelectedPath(this, filePath, out processedFilePath, out accept);
				return;
			}
			processedFilePath = filePath;
			accept = true;
		}

		private string PreprocessPath(string path)
		{
			OnPreprocessSelectedPath(this, path, out var processedFilePath, out var accept);
			if (accept)
			{
				return processedFilePath;
			}
			return path;
		}

		private void textBoxX1_ButtonCustomClick(object sender, EventArgs e)
		{
			if (PathType == PathBoxPathType.File)
			{
				FileDialog openSaveFileDialog = OpenSaveFileDialog;
				if (openSaveFileDialog.ShowDialog() == DialogResult.OK)
				{
					((Control)(object)textBoxX1).Text = PreprocessPath(openSaveFileDialog.FileName);
					((Control)(object)textBoxX1).DataBindings["Text"].WriteValue();
				}
			}
			else if (PathType == PathBoxPathType.Folder)
			{
				FolderBrowserDialog folderBrowserDialog = FolderBrowserDialog;
				folderBrowserDialog.SelectedPath = ((Control)(object)textBoxX1).Text;
				if (folderBrowserDialog.ShowDialog() == DialogResult.OK)
				{
					((Control)(object)textBoxX1).Text = PreprocessPath(folderBrowserDialog.SelectedPath);
					((Control)(object)textBoxX1).DataBindings["Text"].WriteValue();
				}
			}
		}

		protected void NotifyPropertyChanged(string propertyName)
		{
			if (this.PropertyChanged != null)
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}

		protected override bool ProcessCmdKey(ref Message msg, Keys keyData)
		{
			if (keyData == Keys.Return)
			{
				TextBoxBase textBoxBase = base.ActiveControl as TextBoxBase;
				if (textBoxBase == null || !textBoxBase.Multiline)
				{
					textBoxBase.DataBindings["Text"].WriteValue();
					return true;
				}
			}
			return base.ProcessCmdKey(ref msg, keyData);
		}

		private void PathBox_EnabledChanged(object sender, EventArgs e)
		{
			((Control)(object)textBoxX1).Enabled = base.Enabled;
			((Control)(object)textBoxX1).BackColor = (base.Enabled ? System.Drawing.Color.White : BackColor);
		}

		protected override void Dispose(bool disposing)
		{
			if (disposing && components != null)
			{
				components.Dispose();
			}
			base.Dispose(disposing);
		}

		private void InitializeComponent()
		{
			//IL_0002: Unknown result type (might be due to invalid IL or missing references)
			//IL_000c: Expected O, but got Unknown
			this.textBoxX1 = new TextBoxX();
			base.SuspendLayout();
			((System.Windows.Forms.Control)(object)this.textBoxX1).Anchor = System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Left | System.Windows.Forms.AnchorStyles.Right;
			((System.Windows.Forms.Control)(object)this.textBoxX1).BackColor = System.Drawing.Color.White;
			this.textBoxX1.get_Border().set_Class("TextBoxBorder");
			this.textBoxX1.get_Border().set_CornerType((eCornerType)1);
			this.textBoxX1.get_ButtonCustom().set_Text("...");
			this.textBoxX1.get_ButtonCustom().set_Visible(true);
			((System.Windows.Forms.Control)(object)this.textBoxX1).ForeColor = System.Drawing.Color.Black;
			((System.Windows.Forms.Control)(object)this.textBoxX1).Location = new System.Drawing.Point(0, 0);
			((System.Windows.Forms.Control)(object)this.textBoxX1).Margin = new System.Windows.Forms.Padding(0);
			((System.Windows.Forms.Control)(object)this.textBoxX1).Name = "textBoxX1";
			this.textBoxX1.set_PreventEnterBeep(true);
			((System.Windows.Forms.Control)(object)this.textBoxX1).Size = new System.Drawing.Size(51, 20);
			((System.Windows.Forms.Control)(object)this.textBoxX1).TabIndex = 1;
			((System.Windows.Forms.Control)(object)this.textBoxX1).Text = "Test";
			this.textBoxX1.add_ButtonCustomClick(new System.EventHandler(textBoxX1_ButtonCustomClick));
			base.AutoScaleDimensions = new System.Drawing.SizeF(6f, 13f);
			base.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;
			base.Controls.Add((System.Windows.Forms.Control)(object)this.textBoxX1);
			base.Margin = new System.Windows.Forms.Padding(0);
			base.Name = "PathBox";
			base.Size = new System.Drawing.Size(51, 20);
			base.EnabledChanged += new System.EventHandler(PathBox_EnabledChanged);
			base.ResumeLayout(false);
		}
	}
	public class PickerControl : UserControl
	{
		public delegate void FileDroppedHandler(object sender, string filePath);

		private IContainer components;

		private TextBox textBoxDisplay;

		private Button buttonChoose;

		public ImportTemplateInfo Template { get; set; }

		public TextBox DisplayTextBox => textBoxDisplay;

		public Button ChooseButton => buttonChoose;

		public bool AllowFileDrop { get; set; }

		public bool AllowFolderDrop { get; set; }

		public event EventHandler Picked;

		public event FileDroppedHandler FileDropped;

		public PickerControl()
		{
			InitializeComponent();
			textBoxDisplay.ReadOnly = true;
		}

		private void buttonChoose_Click(object sender, EventArgs e)
		{
			OnPicked();
		}

		protected virtual void OnPicked()
		{
			this.Picked?.Invoke(this, new EventArgs());
		}

		private void textBoxDisplay_DragDrop(object sender, DragEventArgs e)
		{
			if (!AllowFileDrop && !AllowFolderDrop)
			{
				return;
			}
			string[] array = (string[])e.Data.GetData(DataFormats.FileDrop, autoConvert: false);
			if (array.Length != 0)
			{
				string text = array[0];
				if (AllowFolderDrop && Directory.Exists(text))
				{
					OnFileDropped(this, text);
				}
				if (AllowFileDrop && File.Exists(text))
				{
					OnFileDropped(this, text);
				}
			}
		}

		private void OnFileDropped(object sender, string filePath)
		{
			if (this.FileDropped != null)
			{
				this.FileDropped(this, filePath);
			}
		}

		private void textBoxDisplay_DragEnter(object sender, DragEventArgs e)
		{
			e.Effect = DragDropEffects.None;
			if (!AllowFileDrop && !AllowFolderDrop)
			{
				return;
			}
			string[] array = (string[])e.Data.GetData(DataFormats.FileDrop, autoConvert: false);
			if (array.Length != 0)
			{
				string path = array[0];
				if (AllowFolderDrop && Directory.Exists(path))
				{
					e.Effect = DragDropEffects.Copy;
				}
				if (AllowFileDrop && File.Exists(path))
				{
					e.Effect = DragDropEffects.Copy;
				}
			}
		}

		protected override void Dispose(bool disposing)
		{
			if (disposing && components != null)
			{
				components.Dispose();
			}
			base.Dispose(disposing);
		}

		private void InitializeComponent()
		{
			this.textBoxDisplay = new System.Windows.Forms.TextBox();
			this.buttonChoose = new System.Windows.Forms.Button();
			base.SuspendLayout();
			this.textBoxDisplay.AllowDrop = true;
			this.textBoxDisplay.Anchor = System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Left | System.Windows.Forms.AnchorStyles.Right;
			this.textBoxDisplay.Location = new System.Drawing.Point(0, 0);
			this.textBoxDisplay.Name = "textBoxDisplay";
			this.textBoxDisplay.Size = new System.Drawing.Size(155, 20);
			this.textBoxDisplay.TabIndex = 0;
			this.textBoxDisplay.DragDrop += new System.Windows.Forms.DragEventHandler(textBoxDisplay_DragDrop);
			this.textBoxDisplay.DragEnter += new System.Windows.Forms.DragEventHandler(textBoxDisplay_DragEnter);
			this.buttonChoose.Anchor = System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Right;
			this.buttonChoose.Location = new System.Drawing.Point(156, -1);
			this.buttonChoose.Name = "buttonChoose";
			this.buttonChoose.Size = new System.Drawing.Size(60, 22);
			this.buttonChoose.TabIndex = 1;
			this.buttonChoose.Text = "Choose...";
			this.buttonChoose.UseVisualStyleBackColor = true;
			this.buttonChoose.Click += new System.EventHandler(buttonChoose_Click);
			base.AutoScaleDimensions = new System.Drawing.SizeF(6f, 13f);
			base.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;
			base.Controls.Add(this.buttonChoose);
			base.Controls.Add(this.textBoxDisplay);
			base.Name = "PickerControl";
			base.Size = new System.Drawing.Size(215, 20);
			base.ResumeLayout(false);
			base.PerformLayout();
		}
	}
	public class ScrollableEditList : UserControl
	{
		public class RowItem
		{
			public Control Control { get; private set; }

			public string Text { get; private set; }

			public RowItem(Control control, string text)
			{
				Control = control;
				Text = text;
			}

			public RowItem(Control control)
			{
				Control = control;
				Text = null;
			}

			public RowItem(string text)
			{
				Control = null;
				Text = text;
			}
		}

		public class ColumnItem
		{
			public int Width { get; private set; }

			public string Caption { get; private set; }

			public ColumnItem(string caption, int width)
			{
				Caption = caption;
				Width = width;
			}
		}

		public class Row
		{
			public List<RowItem> RowItems { get; private set; }

			public int Width => RowItems.Count;

			public Row()
			{
				RowItems = new List<RowItem>();
			}
		}

		public class RowCollection : ObservableList<Row>
		{
		}

		public class ColumnCollection : ObservableList<ColumnItem>
		{
		}

		private IContainer components;

		private ButtonItem buttonItem2;

		private ButtonItem buttonItem3;

		private ButtonItem buttonItem4;

		private ButtonItem buttonItem5;

		private ControlContainerItem controlContainerItem3;

		private ButtonItem buttonItem7;

		private ButtonItem buttonItem8;

		private ButtonItem buttonItem9;

		private ButtonItem buttonItem10;

		private ControlContainerItem controlContainerItem1;

		private AdvTree advTree1;

		private ColumnHeader columnHeader5;

		private ColumnHeader columnHeader6;

		private Node node1;

		private Cell cell1;

		private NodeConnector nodeConnector1;

		private ElementStyle elementStyle1;

		private Node node2;

		private Cell cell2;

		private Cell cell3;

		private Cell cell4;

		private ColumnHeader columnHeader7;

		public RowCollection Rows { get; private set; }

		public int ColumnCount { get; private set; }

		public ColumnCollection Columns { get; private set; }

		private void SetColumnHeaders(ColumnItem[] columns)
		{
			//IL_0017: Unknown result type (might be due to invalid IL or missing references)
			//IL_001d: Expected O, but got Unknown
			((CollectionBase)(object)advTree1.get_Columns()).Clear();
			for (int i = 0; i < columns.Length; i++)
			{
				ColumnHeader val = new ColumnHeader();
				val.set_Text(columns[i].Caption);
				val.set_Name(columns[i].Caption);
				val.get_Width().set_Absolute(columns[i].Width);
				val.set_SortingEnabled(false);
				advTree1.get_Columns().Add(val);
			}
		}

		public ScrollableEditList()
		{
			InitializeComponent();
			((CollectionBase)(object)advTree1.get_Nodes()).Clear();
			((CollectionBase)(object)advTree1.get_Columns()).Clear();
			Rows = new RowCollection();
			Rows.ItemAdded += Rows_RowAdded;
			Rows.ItemRemoved += Rows_RowRemoved;
			Rows.ItemsCleared += Rows_RowsCleared;
			Columns = new ColumnCollection();
			Columns.ItemAdded += Columns_ItemAdded;
			Columns.ItemRemoved += Columns_ItemRemoved;
			Columns.ItemsCleared += Columns_ItemsCleared;
		}

		public void Clear()
		{
			((CollectionBase)(object)advTree1.get_Nodes()).Clear();
		}

		private void Columns_ItemsCleared(object sender)
		{
			SetColumnHeaders(Columns.ToArray());
		}

		private void Columns_ItemRemoved(object sender, ColumnItem Item)
		{
			SetColumnHeaders(Columns.ToArray());
		}

		private void Columns_ItemAdded(object sender, ColumnItem Item)
		{
			SetColumnHeaders(Columns.ToArray());
		}

		private Node FindNode(Row row)
		{
			//IL_001b: Unknown result type (might be due to invalid IL or missing references)
			//IL_0021: Expected O, but got Unknown
			foreach (Node item in (CollectionBase)(object)advTree1.get_Nodes())
			{
				Node val = item;
				if ((Row)val.get_Tag() == row)
				{
					return val;
				}
			}
			return null;
		}

		private void Rows_RowRemoved(object sender, Row row)
		{
			Node val = FindNode(row);
			if (val != null)
			{
				advTree1.get_Nodes().Remove(val);
			}
		}

		private void Rows_RowsCleared(object sender)
		{
			((CollectionBase)(object)advTree1.get_Nodes()).Clear();
		}

		private void Rows_RowAdded(object sender, Row row)
		{
			//IL_0001: Unknown result type (might be due to invalid IL or missing references)
			//IL_0007: Expected O, but got Unknown
			//IL_007e: Unknown result type (might be due to invalid IL or missing references)
			//IL_0084: Expected O, but got Unknown
			Node val = new Node();
			if (row.RowItems.Count > 0)
			{
				for (int i = 0; i < row.Width; i++)
				{
					if (i == 0)
					{
						val.set_Text(row.RowItems[0].Text);
						if (row.RowItems[i].Control != null)
						{
							val.set_HostedControl(row.RowItems[i].Control);
						}
						continue;
					}
					Cell val2 = new Cell();
					val2.set_Text(row.RowItems[i].Text);
					if (row.RowItems[i].Control != null)
					{
						val2.set_HostedControl(row.RowItems[i].Control);
					}
					val.get_Cells().Add(val2);
				}
			}
			advTree1.get_Nodes().Add(val);
		}

		protected override void Dispose(bool disposing)
		{
			if (disposing && components != null)
			{
				components.Dispose();
			}
			base.Dispose(disposing);
		}

		private void InitializeComponent()
		{
			//IL_0002: Unknown result type (might be due to invalid IL or missing references)
			//IL_000c: Expected O, but got Unknown
			//IL_000d: Unknown result type (might be due to invalid IL or missing references)
			//IL_0017: Expected O, but got Unknown
			//IL_0018: Unknown result type (might be due to invalid IL or missing references)
			//IL_0022: Expected O, but got Unknown
			//IL_0023: Unknown result type (might be due to invalid IL or missing references)
			//IL_002d: Expected O, but got Unknown
			//IL_002e: Unknown result type (might be due to invalid IL or missing references)
			//IL_0038: Expected O, but got Unknown
			//IL_0039: Unknown result type (might be due to invalid IL or missing references)
			//IL_0043: Expected O, but got Unknown
			//IL_0044: Unknown result type (might be due to invalid IL or missing references)
			//IL_004e: Expected O, but got Unknown
			//IL_004f: Unknown result type (might be due to invalid IL or missing references)
			//IL_0059: Expected O, but got Unknown
			//IL_005a: Unknown result type (might be due to invalid IL or missing references)
			//IL_0064: Expected O, but got Unknown
			//IL_0065: Unknown result type (might be due to invalid IL or missing references)
			//IL_006f: Expected O, but got Unknown
			//IL_0070: Unknown result type (might be due to invalid IL or missing references)
			//IL_007a: Expected O, but got Unknown
			//IL_007b: Unknown result type (might be due to invalid IL or missing references)
			//IL_0085: Expected O, but got Unknown
			//IL_0086: Unknown result type (might be due to invalid IL or missing references)
			//IL_0090: Expected O, but got Unknown
			//IL_0091: Unknown result type (might be due to invalid IL or missing references)
			//IL_009b: Expected O, but got Unknown
			//IL_009c: Unknown result type (might be due to invalid IL or missing references)
			//IL_00a6: Expected O, but got Unknown
			//IL_00a7: Unknown result type (might be due to invalid IL or missing references)
			//IL_00b1: Expected O, but got Unknown
			//IL_00b2: Unknown result type (might be due to invalid IL or missing references)
			//IL_00bc: Expected O, but got Unknown
			//IL_00bd: Unknown result type (might be due to invalid IL or missing references)
			//IL_00c7: Expected O, but got Unknown
			//IL_00c8: Unknown result type (might be due to invalid IL or missing references)
			//IL_00d2: Expected O, but got Unknown
			//IL_00d3: Unknown result type (might be due to invalid IL or missing references)
			//IL_00dd: Expected O, but got Unknown
			//IL_00de: Unknown result type (might be due to invalid IL or missing references)
			//IL_00e8: Expected O, but got Unknown
			//IL_00e9: Unknown result type (might be due to invalid IL or missing references)
			//IL_00f3: Expected O, but got Unknown
			this.buttonItem2 = new ButtonItem();
			this.buttonItem3 = new ButtonItem();
			this.buttonItem4 = new ButtonItem();
			this.buttonItem5 = new ButtonItem();
			this.controlContainerItem3 = new ControlContainerItem();
			this.buttonItem7 = new ButtonItem();
			this.buttonItem8 = new ButtonItem();
			this.buttonItem9 = new ButtonItem();
			this.buttonItem10 = new ButtonItem();
			this.controlContainerItem1 = new ControlContainerItem();
			this.advTree1 = new AdvTree();
			this.columnHeader5 = new ColumnHeader();
			this.columnHeader6 = new ColumnHeader();
			this.columnHeader7 = new ColumnHeader();
			this.node1 = new Node();
			this.cell1 = new Cell();
			this.cell3 = new Cell();
			this.node2 = new Node();
			this.cell2 = new Cell();
			this.cell4 = new Cell();
			this.nodeConnector1 = new NodeConnector();
			this.elementStyle1 = new ElementStyle();
			((System.ComponentModel.ISupportInitialize)this.advTree1).BeginInit();
			base.SuspendLayout();
			this.buttonItem2.set_Checked(true);
			((BaseItem)this.buttonItem2).set_Name("buttonItem2");
			((BaseItem)this.buttonItem2).set_Text("None");
			((BaseItem)this.buttonItem3).set_Name("buttonItem3");
			((BaseItem)this.buttonItem3).set_Text("Horizontal");
			((BaseItem)this.buttonItem4).set_Name("buttonItem4");
			((BaseItem)this.buttonItem4).set_Text("Vertical");
			((BaseItem)this.buttonItem5).set_Name("buttonItem5");
			((BaseItem)this.buttonItem5).set_Text("Both");
			this.controlContainerItem3.set_AllowItemResize(true);
			this.controlContainerItem3.set_MenuVisibility((eMenuVisibility)0);
			((BaseItem)this.controlContainerItem3).set_Name("controlContainerItem3");
			((BaseItem)this.controlContainerItem3).set_Text("controlContainerItem1");
			this.buttonItem7.set_Checked(true);
			((BaseItem)this.buttonItem7).set_Name("buttonItem7");
			((BaseItem)this.buttonItem7).set_Text("None");
			((BaseItem)this.buttonItem8).set_Name("buttonItem8");
			((BaseItem)this.buttonItem8).set_Text("Horizontal");
			((BaseItem)this.buttonItem9).set_Name("buttonItem9");
			((BaseItem)this.buttonItem9).set_Text("Vertical");
			((BaseItem)this.buttonItem10).set_Name("buttonItem10");
			((BaseItem)this.buttonItem10).set_Text("Both");
			this.controlContainerItem1.set_AllowItemResize(true);
			this.controlContainerItem1.set_MenuVisibility((eMenuVisibility)0);
			((BaseItem)this.controlContainerItem1).set_Name("controlContainerItem1");
			((BaseItem)this.controlContainerItem1).set_Text("controlContainerItem1");
			((System.Windows.Forms.Control)(object)this.advTree1).AccessibleRole = System.Windows.Forms.AccessibleRole.Outline;
			this.advTree1.set_AllowExternalDrop(false);
			this.advTree1.set_AllowUserToResizeColumns(false);
			((System.Windows.Forms.Control)(object)this.advTree1).BackColor = System.Drawing.SystemColors.Window;
			this.advTree1.get_BackgroundStyle().set_Class("TreeBorderKey");
			this.advTree1.get_BackgroundStyle().set_CornerType((eCornerType)1);
			this.advTree1.get_Columns().Add(this.columnHeader5);
			this.advTree1.get_Columns().Add(this.columnHeader6);
			this.advTree1.get_Columns().Add(this.columnHeader7);
			((System.Windows.Forms.Control)(object)this.advTree1).Dock = System.Windows.Forms.DockStyle.Fill;
			this.advTree1.set_DragDropEnabled(false);
			this.advTree1.set_DragDropNodeCopyEnabled(false);
			this.advTree1.set_ExpandWidth(0);
			this.advTree1.set_FullRowSelect(false);
			this.advTree1.set_GridColumnLines(false);
			this.advTree1.set_HideSelection(true);
			this.advTree1.set_LicenseKey("F962CEC7-CD8F-4911-A9E9-CAB39962FC1F");
			((System.Windows.Forms.Control)(object)this.advTree1).Location = new System.Drawing.Point(0, 0);
			((System.Windows.Forms.Control)(object)this.advTree1).Name = "advTree1";
			this.advTree1.get_Nodes().AddRange((Node[])(object)new Node[2] { this.node1, this.node2 });
			this.advTree1.set_NodesConnector(this.nodeConnector1);
			this.advTree1.set_NodeStyle(this.elementStyle1);
			this.advTree1.set_NodeStyleSelected(this.elementStyle1);
			this.advTree1.set_PathSeparator(";");
			this.advTree1.set_SelectionBox(false);
			this.advTree1.set_SelectionBoxStyle((eSelectionStyle)0);
			((System.Windows.Forms.Control)(object)this.advTree1).Size = new System.Drawing.Size(501, 88);
			this.advTree1.get_Styles().Add(this.elementStyle1);
			((System.Windows.Forms.Control)(object)this.advTree1).TabIndex = 52;
			((System.Windows.Forms.Control)(object)this.advTree1).Text = "advTree1";
			this.columnHeader5.set_Name("columnHeader5");
			this.columnHeader5.set_Text("Layer");
			this.columnHeader5.get_Width().set_Absolute(150);
			this.columnHeader6.set_Name("columnHeader6");
			this.columnHeader6.set_Text("Path");
			this.columnHeader6.get_Width().set_Absolute(150);
			this.columnHeader7.set_Name("columnHeader7");
			this.columnHeader7.set_Text("File");
			this.columnHeader7.get_Width().set_Absolute(150);
			this.node1.get_Cells().Add(this.cell1);
			this.node1.get_Cells().Add(this.cell3);
			this.node1.set_Expanded(true);
			this.node1.set_Name("node1");
			this.node1.set_Text("color");
			this.cell1.set_Name("cell1");
			this.cell1.set_StyleMouseOver((ElementStyle)null);
			this.cell1.set_Text("Test");
			this.cell3.set_Name("cell3");
			this.cell3.set_StyleMouseOver((ElementStyle)null);
			this.node2.get_Cells().Add(this.cell2);
			this.node2.get_Cells().Add(this.cell4);
			this.node2.set_Expanded(true);
			this.node2.set_Name("node2");
			this.node2.set_Text("normals");
			this.cell2.set_Name("cell2");
			this.cell2.set_StyleMouseOver((ElementStyle)null);
			this.cell4.set_Name("cell4");
			this.cell4.set_StyleMouseOver((ElementStyle)null);
			this.nodeConnector1.set_LineColor(System.Drawing.SystemColors.ControlText);
			this.elementStyle1.set_CornerType((eCornerType)1);
			this.elementStyle1.set_Name("elementStyle1");
			this.elementStyle1.set_TextColor(System.Drawing.SystemColors.ControlText);
			base.AutoScaleDimensions = new System.Drawing.SizeF(6f, 13f);
			base.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;
			base.Controls.Add((System.Windows.Forms.Control)(object)this.advTree1);
			base.Name = "ScrollableEditList";
			base.Size = new System.Drawing.Size(501, 88);
			((System.ComponentModel.ISupportInitialize)this.advTree1).EndInit();
			base.ResumeLayout(false);
		}
	}
	public class SwizzleControl : UserControl
	{
		public delegate void OnSwizzleChangedDelegate(object sender, EventArgs e);

		private ContextMenuStrip contextMenu;

		private bool loading;

		private IContainer components;

		private ComboBox comboBoxSwizzle3;

		private ComboBox comboBoxSwizzle2;

		private ComboBox comboBoxSwizzle1;

		private ComboBox comboBoxSwizzle0;

		private Button buttonOptions;

		public int maxChannels { get; set; }

		public string Swizzle { get; private set; }

		private bool ShowPresetButton { get; set; }

		private SwizzlePreset[] Presets { get; set; }

		public event OnSwizzleChangedDelegate OnSwizzleChanged;

		public SwizzleControl()
		{
			InitializeComponent();
		}

		public void Initialize(int numChannelsActive, string swizzleValue, bool showPresetButton = false, SwizzlePreset[] presets = null)
		{
			maxChannels = numChannelsActive;
			loading = true;
			LoadSwizzle(swizzleValue);
			loading = false;
			Presets = presets;
			ShowPresetButton = showPresetButton;
			buttonOptions.Visible = ShowPresetButton;
			if (ShowPresetButton)
			{
				CreateContextMenu();
			}
		}

		public void LoadSwizzle(string swizzleValue)
		{
			comboBoxSwizzle0.Enabled = maxChannels >= 1;
			comboBoxSwizzle1.Enabled = maxChannels >= 2;
			comboBoxSwizzle2.Enabled = maxChannels >= 3;
			comboBoxSwizzle3.Enabled = maxChannels >= 4;
			if (swizzleValue == null || swizzleValue == string.Empty)
			{
				swizzleValue = "0123";
			}
			if (maxChannels >= 1)
			{
				comboBoxSwizzle0.Text = ((swizzleValue.Length >= 1) ? swizzleValue[0].ToString() : "0");
			}
			if (maxChannels >= 2)
			{
				comboBoxSwizzle1.Text = ((swizzleValue.Length >= 2) ? swizzleValue[1].ToString() : "1");
			}
			if (maxChannels >= 3)
			{
				comboBoxSwizzle2.Text = ((swizzleValue.Length >= 3) ? swizzleValue[2].ToString() : "2");
			}
			if (maxChannels >= 4)
			{
				comboBoxSwizzle3.Text = ((swizzleValue.Length >= 4) ? swizzleValue[3].ToString() : "3");
			}
			Swizzle = swizzleValue;
		}

		private void comboBoxSwizzleX_SelectedIndexChanged(object sender, EventArgs e)
		{
			if (!loading)
			{
				Swizzle = "";
				if (maxChannels >= 1)
				{
					Swizzle += comboBoxSwizzle0.SelectedItem.ToString();
				}
				if (maxChannels >= 2)
				{
					Swizzle += comboBoxSwizzle1.SelectedItem.ToString();
				}
				if (maxChannels >= 3)
				{
					Swizzle += comboBoxSwizzle2.SelectedItem.ToString();
				}
				if (maxChannels >= 4)
				{
					Swizzle += comboBoxSwizzle3.SelectedItem.ToString();
				}
				onSwizzleChanged();
			}
		}

		private void onSwizzleChanged()
		{
			this.OnSwizzleChanged?.Invoke(this, new EventArgs());
		}

		private void buttonOptions_Click(object sender, EventArgs e)
		{
			if (contextMenu != null)
			{
				Point position = new Point(buttonOptions.Size.Width - 1, 1);
				contextMenu.Show(buttonOptions, position);
			}
		}

		private void CreateContextMenu()
		{
			contextMenu = new ContextMenuStrip();
			ToolStripMenuItem toolStripMenuItem = new ToolStripMenuItem();
			toolStripMenuItem.Text = "Presets";
			SwizzlePreset[] swizzlePresets = Constants.SwizzlePresets;
			SwizzlePreset[] array = swizzlePresets;
			foreach (SwizzlePreset swizzlePreset in array)
			{
				ToolStripMenuItem toolStripMenuItem2 = new ToolStripMenuItem();
				toolStripMenuItem2.Tag = swizzlePreset;
				toolStripMenuItem2.Text = swizzlePreset.Name;
				toolStripMenuItem2.Click += item_Click;
				toolStripMenuItem.DropDownItems.Add(toolStripMenuItem2);
			}
			contextMenu.Items.Add(toolStripMenuItem);
		}

		private void item_Click(object sender, EventArgs e)
		{
			SwizzlePreset swizzlePreset = (SwizzlePreset)((ToolStripMenuItem)sender).Tag;
			LoadSwizzle(swizzlePreset.Pattern);
		}

		protected override void Dispose(bool disposing)
		{
			if (disposing && components != null)
			{
				components.Dispose();
			}
			base.Dispose(disposing);
		}

		private void InitializeComponent()
		{
			this.comboBoxSwizzle3 = new System.Windows.Forms.ComboBox();
			this.comboBoxSwizzle2 = new System.Windows.Forms.ComboBox();
			this.comboBoxSwizzle1 = new System.Windows.Forms.ComboBox();
			this.comboBoxSwizzle0 = new System.Windows.Forms.ComboBox();
			this.buttonOptions = new System.Windows.Forms.Button();
			base.SuspendLayout();
			this.comboBoxSwizzle3.DropDownStyle = System.Windows.Forms.ComboBoxStyle.DropDownList;
			this.comboBoxSwizzle3.FormattingEnabled = true;
			this.comboBoxSwizzle3.Items.AddRange(new object[4] { "0", "1", "2", "3" });
			this.comboBoxSwizzle3.Location = new System.Drawing.Point(108, 0);
			this.comboBoxSwizzle3.Name = "comboBoxSwizzle3";
			this.comboBoxSwizzle3.Size = new System.Drawing.Size(30, 21);
			this.comboBoxSwizzle3.TabIndex = 56;
			this.comboBoxSwizzle3.SelectedIndexChanged += new System.EventHandler(comboBoxSwizzleX_SelectedIndexChanged);
			this.comboBoxSwizzle2.DropDownStyle = System.Windows.Forms.ComboBoxStyle.DropDownList;
			this.comboBoxSwizzle2.FormattingEnabled = true;
			this.comboBoxSwizzle2.Items.AddRange(new object[4] { "0", "1", "2", "3" });
			this.comboBoxSwizzle2.Location = new System.Drawing.Point(72, 0);
			this.comboBoxSwizzle2.Name = "comboBoxSwizzle2";
			this.comboBoxSwizzle2.Size = new System.Drawing.Size(30, 21);
			this.comboBoxSwizzle2.TabIndex = 55;
			this.comboBoxSwizzle2.SelectedIndexChanged += new System.EventHandler(comboBoxSwizzleX_SelectedIndexChanged);
			this.comboBoxSwizzle1.DropDownStyle = System.Windows.Forms.ComboBoxStyle.DropDownList;
			this.comboBoxSwizzle1.FormattingEnabled = true;
			this.comboBoxSwizzle1.Items.AddRange(new object[4] { "0", "1", "2", "3" });
			this.comboBoxSwizzle1.Location = new System.Drawing.Point(36, 0);
			this.comboBoxSwizzle1.Name = "comboBoxSwizzle1";
			this.comboBoxSwizzle1.Size = new System.Drawing.Size(30, 21);
			this.comboBoxSwizzle1.TabIndex = 54;
			this.comboBoxSwizzle1.SelectedIndexChanged += new System.EventHandler(comboBoxSwizzleX_SelectedIndexChanged);
			this.comboBoxSwizzle0.DropDownStyle = System.Windows.Forms.ComboBoxStyle.DropDownList;
			this.comboBoxSwizzle0.FormattingEnabled = true;
			this.comboBoxSwizzle0.Items.AddRange(new object[4] { "0", "1", "2", "3" });
			this.comboBoxSwizzle0.Location = new System.Drawing.Point(0, 0);
			this.comboBoxSwizzle0.Name = "comboBoxSwizzle0";
			this.comboBoxSwizzle0.Size = new System.Drawing.Size(30, 21);
			this.comboBoxSwizzle0.TabIndex = 53;
			this.comboBoxSwizzle0.SelectedIndexChanged += new System.EventHandler(comboBoxSwizzleX_SelectedIndexChanged);
			this.buttonOptions.Font = new System.Drawing.Font("Microsoft Sans Serif", 6f, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, 0);
			this.buttonOptions.Location = new System.Drawing.Point(144, 0);
			this.buttonOptions.Margin = new System.Windows.Forms.Padding(0);
			this.buttonOptions.Name = "buttonOptions";
			this.buttonOptions.Size = new System.Drawing.Size(14, 14);
			this.buttonOptions.TabIndex = 58;
			this.buttonOptions.Text = "â¼";
			this.buttonOptions.Click += new System.EventHandler(buttonOptions_Click);
			base.AutoScaleDimensions = new System.Drawing.SizeF(6f, 13f);
			base.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;
			base.Controls.Add(this.buttonOptions);
			base.Controls.Add(this.comboBoxSwizzle3);
			base.Controls.Add(this.comboBoxSwizzle2);
			base.Controls.Add(this.comboBoxSwizzle1);
			base.Controls.Add(this.comboBoxSwizzle0);
			base.Name = "SwizzleControl";
			base.Size = new System.Drawing.Size(165, 21);
			base.ResumeLayout(false);
		}
	}
	public class SwizzlePreset
	{
		public string Name { get; set; }

		public string Pattern { get; set; }

		public static SwizzlePreset Default => new SwizzlePreset("Default", "0123");

		public static SwizzlePreset RtoA => new SwizzlePreset("Red to Alpha", "0000");

		public static SwizzlePreset BtoA => new SwizzlePreset("Blue to Alpha", "1111");

		public static SwizzlePreset GtoA => new SwizzlePreset("Green to Alpha", "2222");

		public static SwizzlePreset AtoRGB => new SwizzlePreset("Alpha to RGB", "3333");

		public static SwizzlePreset RGBA => new SwizzlePreset("RGBA", "0123");

		public static SwizzlePreset BGRA => new SwizzlePreset("BGRA", "2103");

		public static SwizzlePreset AAAA => new SwizzlePreset("AAAA", "3333");

		public SwizzlePreset(string name, string pattern)
		{
			Name = name;
			Pattern = pattern;
		}
	}
}
namespace GraphineLicenseManager
{
	internal class Activation
	{
		private static string LicenceManagerExe = "GraphineLicenseManager.exe";

		public static readonly string[] activationServers = new string[1] { "http://graphineactivation.appspot.com/graphine_activation" };

		public static string HardwareKey
		{
			get
			{
				string s = FindMACAddresses();
				byte[] bytes = Encoding.UTF8.GetBytes(s);
				return LicenseStringHelpers.EncodeToString(SHA512.Create().ComputeHash(bytes));
			}
		}

		public static string ActivateLicense(string licence, LicenseStringHelpers.GetProxyCredentialsDelegate proxyCredentialsGetter)
		{
			for (int i = 0; i < activationServers.Length; i++)
			{
				string server = activationServers[i];
				try
				{
					string text = ActivateLicense(server, licence, null);
					if (text != null)
					{
						return text;
					}
				}
				catch (LicenseStringHelpers.NeedProxyCredentialsException ex)
				{
					if (proxyCredentialsGetter != null)
					{
						NetworkCredential credential = new NetworkCredential();
						if (!proxyCredentialsGetter(ex.Realm, credential))
						{
							throw new Exception("Could not retrieve proxy server credentials!");
						}
						string text2 = ActivateLicense(server, licence, credential);
						if (text2 != null)
						{
							return text2;
						}
					}
				}
				catch (Exception ex2)
				{
					if (i == activationServers.Length - 1)
					{
						throw ex2;
					}
				}
			}
			return null;
		}

		private static string ActivateLicense(string server, string license, NetworkCredential credential)
		{
			string text = LicenseStringHelpers.RetrieveString(server + "?method=activate&license=" + Uri.EscapeDataString(license) + "&hardware_id=" + Uri.EscapeDataString(HardwareKey) + "&machine_name=" + Uri.EscapeDataString(Environment.MachineName), credential);
			CheckActivation(license, text);
			PersistActivation(license, text);
			return text;
		}

		public static void CheckActivation(string license, string activation)
		{
			if (!LicenseStringHelpers.IsSignatureValid(activation, GraphineKeys.publicActivationKey))
			{
				throw new Exception("The provided activation key is invalid or has been tampred with.");
			}
			string keyField = LicenseStringHelpers.GetKeyField(activation, "hardware");
			string keyField2 = LicenseStringHelpers.GetKeyField(license, "signature");
			string keyField3 = LicenseStringHelpers.GetKeyField(activation, "key");
			if (string.Compare(HardwareKey, keyField, ignoreCase: false) != 0)
			{
				throw new Exception("The provided activation key is for this hardware.");
			}
			if (string.Compare(keyField2, keyField3, ignoreCase: false) != 0)
			{
				throw new Exception("The provided activation key is not for this license.");
			}
			string keyField4 = LicenseStringHelpers.GetKeyField(activation, "expires");
			if (LicenseStringHelpers.GetNow() > LicenseStringHelpers.ParseDate(keyField4))
			{
				throw new Exception("The provided activation has expired.");
			}
		}

		public static void PersistActivation(string license, string activation)
		{
			string[] array = LicenseStringHelpers.GetKeyField(license, "product").Split(',');
			string[] array2 = array;
			foreach (string text in array2)
			{
				LicenseStringHelpers.WriteRegistryValue("SOFTWARE\\Graphine\\" + text, "Activation", activation);
			}
		}

		public static void DeleteActivation(string license)
		{
			string[] array = LicenseStringHelpers.GetKeyField(license, "product").Split(',');
			string[] array2 = array;
			foreach (string text in array2)
			{
				LicenseStringHelpers.DeleteRegistryValue("SOFTWARE\\Graphine\\" + text, "Activation");
			}
		}

		public static string DetectActivation(string license)
		{
			string text = null;
			string[] array = LicenseStringHelpers.GetKeyField(license, "product").Split(',');
			string[] array2 = array;
			foreach (string text2 in array2)
			{
				try
				{
					text = LicenseStringHelpers.ReadRegistryValue("SOFTWARE\\Graphine\\" + text2, "Activation");
				}
				catch (Exception)
				{
					continue;
				}
				if (text != null)
				{
					try
					{
						CheckActivation(license, text);
						return text;
					}
					catch (Exception)
					{
					}
				}
			}
			return null;
		}

		public static int ExpireDays(string activation)
		{
			if (activation == null)
			{
				return 0;
			}
			string keyField = LicenseStringHelpers.GetKeyField(activation, "expires");
			DateTime now = LicenseStringHelpers.GetNow();
			if (keyField != null)
			{
				return (int)(LicenseStringHelpers.ParseDate(keyField) - now).TotalDays;
			}
			return 0;
		}

		private static string FindMACAddresses()
		{
			string text = "";
			foreach (ManagementObject item in new ManagementObjectSearcher("SELECT * FROM Win32_NetworkAdapter WHERE(AdapterType = 'Ethernet 802.3') AND (MACAddress IS NOT NULL) AND PNPDeviceId LIKE '%PCI%'").Get())
			{
				text += item["MACAddress"].ToString();
			}
			return text;
		}

		private static string GetHDDSerialNumbers()
		{
			string text = "";
			foreach (ManagementObject item in new ManagementObjectSearcher("SELECT * FROM Win32_PhysicalMedia WHERE SerialNumber IS NOT NULL").Get())
			{
				text += item["SerialNumber"].ToString();
			}
			return text;
		}

		private static string FindLicenseManagerBesideAssembly()
		{
			string location = Assembly.GetExecutingAssembly().Location;
			if (location == null)
			{
				return null;
			}
			string text = Path.Combine(Path.GetDirectoryName(location), LicenceManagerExe);
			if (File.Exists(text))
			{
				return text;
			}
			return null;
		}

		private static string FindLicenseManagerUnityPluginsFolder()
		{
			return null;
		}

		private static string FindLicenseManagerBesideExecutable()
		{
			string baseDirectory = AppDomain.CurrentDomain.BaseDirectory;
			if (baseDirectory == null)
			{
				return null;
			}
			string text = Path.Combine(baseDirectory, LicenceManagerExe);
			if (File.Exists(text))
			{
				return text;
			}
			return null;
		}

		private static string FindLicenseManagerInSdkDirectory()
		{
			string environmentVariable = Environment.GetEnvironmentVariable("GRANITESDK_PATH");
			if (environmentVariable == null)
			{
				return null;
			}
			string text = Path.Combine(Path.Combine(Path.Combine(environmentVariable, "Binaries"), "x64"), LicenceManagerExe);
			if (File.Exists(text))
			{
				return text;
			}
			return null;
		}

		private static string FindLicenseManagerInToolsDirectory()
		{
			string environmentVariable = Environment.GetEnvironmentVariable("GRANITE_TOOLS_PATH");
			if (environmentVariable == null)
			{
				return null;
			}
			string text = Path.Combine(environmentVariable, LicenceManagerExe);
			if (File.Exists(text))
			{
				return text;
			}
			return null;
		}

		private static string FindLicenseManagerInCWD()
		{
			string fullPath = Path.GetFullPath(LicenceManagerExe);
			if (File.Exists(fullPath))
			{
				return fullPath;
			}
			return null;
		}

		public static bool RunLicenseManager(string productDescription, string[] acceptableProductLicenses, string extraCmdArgs, bool trySilent)
		{
			Process process = new Process();
			string text = null;
			text = FindLicenseManagerBesideAssembly();
			if (text == null)
			{
				text = FindLicenseManagerBesideExecutable();
			}
			if (text == null)
			{
				text = FindLicenseManagerUnityPluginsFolder();
			}
			if (text == null)
			{
				text = FindLicenseManagerInToolsDirectory();
			}
			if (text == null)
			{
				text = FindLicenseManagerInSdkDirectory();
			}
			if (text == null)
			{
				text = FindLicenseManagerInCWD();
			}
			if (text != null)
			{
				try
				{
					process.StartInfo.UseShellExecute = true;
					process.StartInfo.FileName = text;
					process.StartInfo.Arguments = "\"" + productDescription + "\"";
					if (extraCmdArgs != null)
					{
						ProcessStartInfo startInfo = process.StartInfo;
						startInfo.Arguments = startInfo.Arguments + " " + extraCmdArgs;
					}
					if (trySilent)
					{
						process.StartInfo.Arguments += " -trysilent";
					}
					foreach (string text2 in acceptableProductLicenses)
					{
						ProcessStartInfo startInfo2 = process.StartInfo;
						startInfo2.Arguments = startInfo2.Arguments + " \"" + text2 + "\"";
					}
					process.Start();
					process.WaitForExit();
				}
				catch (Exception)
				{
					return false;
				}
				return true;
			}
			return false;
		}
	}
	internal class GraphineKeys
	{
		public static byte[] publicKey = new byte[32]
		{
			71, 233, 65, 252, 115, 90, 173, 9, 126, 115,
			60, 156, 190, 180, 25, 68, 145, 246, 44, 42,
			67, 22, 192, 1, 18, 195, 215, 126, 179, 37,
			35, 191
		};

		public static byte[] publicActivationKey = new byte[32]
		{
			127, 219, 104, 49, 168, 5, 222, 208, 36, 31,
			198, 211, 110, 248, 132, 205, 199, 53, 1, 145,
			243, 46, 67, 186, 44, 200, 222, 250, 72, 120,
			249, 101
		};
	}
	internal class License
	{
		public static void CheckLicense(string licence, string product)
		{
			if (!LicenseStringHelpers.IsSignatureValid(licence, GraphineKeys.publicKey))
			{
				throw new Exception("The provided license is invalid or has been tampred with.");
			}
			string[] array = LicenseStringHelpers.GetKeyField(licence, "product").Split(',');
			bool flag = false;
			string[] array2 = array;
			string[] array3 = array2;
			foreach (string strB in array3)
			{
				if (string.Compare(product, strB, ignoreCase: true) == 0)
				{
					flag = true;
					break;
				}
			}
			if (!flag)
			{
				throw new Exception("The provided license key is not a valid " + product + " license.");
			}
			string keyField = LicenseStringHelpers.GetKeyField(licence, "expires");
			if (LicenseStringHelpers.GetNow() > LicenseStringHelpers.ParseDate(keyField))
			{
				throw new Exception("The provided license has expired.");
			}
		}

		public static string DetectLicense(string[] products, out int productIndex)
		{
			string text = null;
			for (int i = 0; i < products.Length; i++)
			{
				try
				{
					text = LicenseStringHelpers.ReadRegistryValue("SOFTWARE\\Graphine\\" + products[i], "License");
				}
				catch (Exception)
				{
					continue;
				}
				if (text != null)
				{
					try
					{
						CheckLicense(text, products[i]);
						productIndex = i;
						return text;
					}
					catch (Exception)
					{
					}
				}
			}
			productIndex = -1;
			return null;
		}

		public static void PersistLicense(string license)
		{
			string[] array = LicenseStringHelpers.GetKeyField(license, "product").Split(',');
			string[] array2 = array;
			foreach (string text in array2)
			{
				LicenseStringHelpers.WriteRegistryValue("SOFTWARE\\Graphine\\" + text, "License", license);
			}
		}

		public static void DeleteLicense(string license)
		{
			string[] array = LicenseStringHelpers.GetKeyField(license, "product").Split(',');
			string[] array2 = array;
			foreach (string text in array2)
			{
				LicenseStringHelpers.DeleteRegistryValue("SOFTWARE\\Graphine\\" + text, "License");
			}
		}

		public static void CheckLicenseAndActivate(string productDescription, string[] products, out int licenseId, out int subLicenseId, string extraManagerCmdArgs = null)
		{
			int productIndex = 0;
			string text = DetectLicense(products, out productIndex);
			if (text != null)
			{
				if (Activation.DetectActivation(text) == null)
				{
					Activation.RunLicenseManager(productDescription, products, extraManagerCmdArgs, trySilent: true);
					if (Activation.DetectActivation(text) == null)
					{
						throw new ArgumentException("Invalid License (1)");
					}
				}
			}
			else
			{
				Activation.RunLicenseManager(productDescription, products, extraManagerCmdArgs, trySilent: true);
				text = DetectLicense(products, out productIndex);
				if (text == null)
				{
					throw new ArgumentException("Invalid License (2)");
				}
				if (Activation.DetectActivation(text) == null)
				{
					throw new ArgumentException("Invalid License (3)");
				}
			}
			licenseId = productIndex;
			string keyField = LicenseStringHelpers.GetKeyField(text, "sub");
			if (keyField != null)
			{
				subLicenseId = 0;
				int.TryParse(keyField, out subLicenseId);
			}
			else
			{
				subLicenseId = 0;
			}
		}
	}
	internal class LicenseStringHelpers
	{
		public class ActivationUserException : Exception
		{
			public string DisplayHtml;
		}

		public class NeedProxyCredentialsException : Exception
		{
			public string Realm;
		}

		public delegate bool GetProxyCredentialsDelegate(string realm, NetworkCredential credential);

		private static readonly string HEXES = "0123456789abcdef";

		private const int KEY_QUERY_VALUE = 1;

		private const int KEY_SET_VALUE = 2;

		private const int KEY_WRITE = 131078;

		private const int KEY_READ = 131097;

		private const int KEY_WOW64_64KEY = 256;

		private const int REG_SZ = 1;

		private const int ERROR_SUCCESS = 0;

		private const int KEY_ALL_ACCESS = 983103;

		public static bool IsSignatureValid(string licence, byte[] publicKey)
		{
			int num = licence.LastIndexOf('|');
			if (num < 0)
			{
				return false;
			}
			int num2 = licence.IndexOf(':', num);
			if (num2 < 0)
			{
				return false;
			}
			byte[] signature = DecodeFromString(licence.Substring(num2 + 1));
			byte[] bytes = Encoding.UTF8.GetBytes(licence.Substring(0, num));
			return Signature.Verify(signature, bytes, publicKey);
		}

		public static string GetKeyField(string key, string field)
		{
			int num = key.IndexOf(field);
			if (num < 0)
			{
				return null;
			}
			int length = field.Length;
			if (num + length < key.Length && key[num + length] == ':')
			{
				int num2 = key.IndexOf('|', num + length + 1);
				if (num2 < 0)
				{
					return key.Substring(num + length + 1).Replace('+', ' ');
				}
				int num3 = num + length + 1;
				return key.Substring(num3, num2 - num3).Replace('+', ' ');
			}
			return null;
		}

		private static int CharToNibble(char c)
		{
			if (c >= '0' && c <= '9')
			{
				return c - 48;
			}
			if (c >= 'a' && c <= 'f')
			{
				return c - 97 + 10;
			}
			throw new ArgumentException("Invalid hex character.");
		}

		public static byte[] DecodeFromString(string s)
		{
			if (s.Length % 2 != 0)
			{
				throw new ArgumentException("Invalid hex string length");
			}
			int num = s.Length / 2;
			byte[] array = new byte[num];
			for (int i = 0; i < num; i++)
			{
				array[i] = (byte)((CharToNibble(s[i * 2]) << 4) | CharToNibble(s[i * 2 + 1]));
			}
			return array;
		}

		public static string EncodeToString(byte[] raw)
		{
			if (raw == null)
			{
				return null;
			}
			return EncodeToString(raw, 0, raw.Length);
		}

		public static string EncodeToString(byte[] raw, int first, int count)
		{
			if (raw == null)
			{
				return null;
			}
			StringBuilder stringBuilder = new StringBuilder(2 * count);
			for (int i = 0; i < count; i++)
			{
				byte b = raw[first + i];
				stringBuilder.Append(HEXES[(b & 0xF0) >> 4]);
				stringBuilder.Append(HEXES[b & 0xF]);
			}
			return stringBuilder.ToString();
		}

		public static string EncodeToCString(byte[] raw)
		{
			if (raw == null)
			{
				return null;
			}
			StringBuilder stringBuilder = new StringBuilder(2 * raw.Length);
			for (int i = 0; i < raw.Length; i++)
			{
				stringBuilder.Append("0x");
				stringBuilder.Append(HEXES[(raw[i] & 0xF0) >> 4]);
				stringBuilder.Append(HEXES[raw[i] & 0xF]);
				if (i != raw.Length - 1)
				{
					stringBuilder.Append(", ");
				}
			}
			return stringBuilder.ToString();
		}

		public static Dictionary<string, string> SplitKey(string key)
		{
			string[] array = key.Split('|');
			Dictionary<string, string> dictionary = new Dictionary<string, string>();
			string[] array2 = array;
			for (int i = 0; i < array2.Length; i++)
			{
				string[] array3 = array2[i].Split(':');
				if (array3.Length == 2)
				{
					dictionary.Add(array3[0], array3[1]);
				}
			}
			return dictionary;
		}

		public static DateTime ParseDate(string licenceDate)
		{
			return DateTime.ParseExact(licenceDate, "dd-MM-yyyy", CultureInfo.InvariantCulture, DateTimeStyles.None);
		}

		public static DateTime GetNow()
		{
			return DateTime.Now;
		}

		public static string EncodeBase32(byte[] data)
		{
			if (data.Length > 268435456)
			{
				return null;
			}
			int num = 0;
			char[] array = new char[(data.Length * 8 + 5 - 1) / 5];
			if (data.Length != 0)
			{
				int num2 = data[0];
				int num3 = 1;
				int num4 = 8;
				while (num4 > 0 || num3 < data.Length)
				{
					if (num4 < 5)
					{
						if (num3 < data.Length)
						{
							num2 <<= 8;
							num2 |= data[num3++] & 0xFF;
							num4 += 8;
						}
						else
						{
							int num5 = 5 - num4;
							num2 <<= num5;
							num4 += num5;
						}
					}
					int index = 0x1F & (num2 >> num4 - 5);
					num4 -= 5;
					array[num++] = "ABCDEFGHIJKLMNOPQRSTUVWXYZ234567"[index];
				}
			}
			return new string(array);
		}

		public static byte[] DecodeBase32(string coded)
		{
			int num = 0;
			int num2 = 0;
			int num3 = 0;
			int num4 = 0;
			for (int i = 0; i < coded.Length; i++)
			{
				char c = coded[i];
				if (c == ' ' || c == '\t' || c == '\r' || c == '\n' || c == '-' || c == 'â' || c == 'â' || c == 'â' || c == 'â')
				{
					continue;
				}
				switch (c)
				{
				case '0':
					c = 'O';
					break;
				case '1':
					c = 'L';
					break;
				case '8':
					c = 'B';
					break;
				}
				if ((c >= 'A' && c <= 'Z') || (c >= 'a' && c <= 'z'))
				{
					c = (char)((c & 0x1F) - 1);
				}
				else
				{
					if (c < '2' || c > '7')
					{
						string text = c.ToString();
						int num5 = c;
						throw new Exception("Invalid character: '" + text + "' #" + num5);
					}
					c = (char)(c - 24);
				}
				num4++;
			}
			byte[] array = new byte[num4 * 5 / 8];
			for (int j = 0; j < coded.Length; j++)
			{
				char c2 = coded[j];
				if (c2 == ' ' || c2 == '\t' || c2 == '\r' || c2 == '\n' || c2 == '-')
				{
					continue;
				}
				num <<= 5;
				switch (c2)
				{
				case '0':
					c2 = 'O';
					break;
				case '1':
					c2 = 'L';
					break;
				case '8':
					c2 = 'B';
					break;
				}
				if ((c2 >= 'A' && c2 <= 'Z') || (c2 >= 'a' && c2 <= 'z'))
				{
					c2 = (char)((c2 & 0x1F) - 1);
				}
				else
				{
					if (c2 < '2' || c2 > '7')
					{
						return null;
					}
					c2 = (char)(c2 - 24);
				}
				num |= c2;
				num2 += 5;
				if (num2 >= 8)
				{
					array[num3++] = (byte)(num >> num2 - 8);
					num2 -= 8;
				}
			}
			return array;
		}

		[DllImport("Advapi32.dll")]
		private static extern uint RegOpenKeyExW(UIntPtr hKey, [MarshalAs(UnmanagedType.LPWStr)] string lpSubKey, uint ulOptions, int samDesired, out UIntPtr phkResult);

		[DllImport("Advapi32.dll")]
		private static extern uint RegCloseKey(UIntPtr hKey);

		[DllImport("Advapi32.dll")]
		private static extern uint RegQueryValueExW(UIntPtr hKey, [MarshalAs(UnmanagedType.LPWStr)] string lpValueName, int lpReserved, ref uint lpType, [MarshalAs(UnmanagedType.LPWStr)] StringBuilder lpData, ref uint lpcbData);

		[DllImport("Advapi32.dll")]
		private static extern uint RegSetValueExW(UIntPtr hKey, [MarshalAs(UnmanagedType.LPWStr)] string lpValueName, uint Reserved, uint dwType, [MarshalAs(UnmanagedType.LPWStr)] string lpData, uint cbData);

		[DllImport("Advapi32.dll")]
		private static extern uint RegCreateKeyExW(UIntPtr hKey, [MarshalAs(UnmanagedType.LPWStr)] string lpSubKey, uint Reserved, [MarshalAs(UnmanagedType.LPWStr)] string lpClass, uint dwOptions, uint samDesired, UIntPtr lpSecurityAttributes, ref UIntPtr phkResult, ref uint lpdwDisposition);

		[DllImport("Advapi32.dll")]
		private static extern uint RegDeleteValueW(UIntPtr hKey, [MarshalAs(UnmanagedType.LPWStr)] string valueName);

		public static string ReadRegistryValue(string key, string value)
		{
			UIntPtr hKey = (UIntPtr)2147483650u;
			UIntPtr phkResult = UIntPtr.Zero;
			try
			{
				if (RegOpenKeyExW(hKey, key, 0u, 131353, out phkResult) != 0)
				{
					return null;
				}
				uint lpType = 0u;
				StringBuilder stringBuilder = new StringBuilder(2048);
				uint lpcbData = (uint)(stringBuilder.Capacity * 2);
				if (RegQueryValueExW(phkResult, value, 0, ref lpType, stringBuilder, ref lpcbData) != 0)
				{
					return null;
				}
				if (lpType != 1)
				{
					return null;
				}
				return stringBuilder.ToString();
			}
			finally
			{
				if (UIntPtr.Zero != phkResult)
				{
					RegCloseKey(phkResult);
				}
			}
		}

		public static void WriteRegistryValue(string keyName, string valueName, string value)
		{
			UIntPtr hKey = (UIntPtr)2147483650u;
			UIntPtr phkResult = UIntPtr.Zero;
			try
			{
				uint lpdwDisposition = 0u;
				if (RegCreateKeyExW(hKey, keyName, 0u, null, 0u, 131334u, UIntPtr.Zero, ref phkResult, ref lpdwDisposition) != 0)
				{
					throw new Exception("RegCreateKeyExW failed");
				}
				if (RegSetValueExW(phkResult, valueName, 0u, 1u, value, (uint)(2 * (value.Length + 1))) != 0)
				{
					throw new Exception("RegSetValueExW failed");
				}
			}
			finally
			{
				if (UIntPtr.Zero != phkResult)
				{
					RegCloseKey(phkResult);
				}
			}
		}

		public static void DeleteRegistryValue(string keyName, string valueName)
		{
			UIntPtr hKey = (UIntPtr)2147483650u;
			UIntPtr phkResult = UIntPtr.Zero;
			try
			{
				if (RegOpenKeyExW(hKey, keyName, 0u, 983359, out phkResult) != 0)
				{
					throw new Exception("RegOpenKeyEx error");
				}
				if (RegDeleteValueW(phkResult, valueName) != 0)
				{
					throw new Exception("RegOpenKeyEx error");
				}
			}
			finally
			{
				if (UIntPtr.Zero != phkResult)
				{
					RegCloseKey(phkResult);
				}
			}
		}

		public static string RetrieveString(string fullRequestUrl, NetworkCredential credential)
		{
			HttpWebRequest httpWebRequest = (HttpWebRequest)WebRequest.Create(fullRequestUrl);
			if (credential != null && httpWebRequest.Proxy != null)
			{
				httpWebRequest.Proxy.Credentials = credential;
			}
			HttpWebResponse httpWebResponse = null;
			try
			{
				httpWebResponse = (HttpWebResponse)httpWebRequest.GetResponse();
			}
			catch (WebException ex)
			{
				if (ex.Status == WebExceptionStatus.ProtocolError)
				{
					if (ex.Response is HttpWebResponse httpWebResponse2)
					{
						if (httpWebResponse2.StatusCode == HttpStatusCode.ProxyAuthenticationRequired)
						{
							throw new NeedProxyCredentialsException
							{
								Realm = httpWebResponse2.GetResponseHeader("Proxy-Authenticate")
							};
						}
						StreamReader streamReader = new StreamReader(httpWebResponse2.GetResponseStream());
						throw new ActivationUserException
						{
							DisplayHtml = streamReader.ReadToEnd()
						};
					}
					throw ex;
				}
				throw ex;
			}
			Console.WriteLine(httpWebResponse.StatusDescription);
			Stream responseStream = httpWebResponse.GetResponseStream();
			StreamReader streamReader2 = new StreamReader(responseStream);
			string text = streamReader2.ReadToEnd();
			text = text.Trim();
			streamReader2.Close();
			responseStream.Close();
			httpWebResponse.Close();
			return text;
		}

		private static string RetrieveLicense(string server, string tempraryLicenseString, string company, string userName, string email, NetworkCredential credential)
		{
			return RetrieveString(server + "?method=retrieve&license=" + Uri.EscapeDataString(tempraryLicenseString) + "&company=" + Uri.EscapeDataString(company) + "&name=" + Uri.EscapeDataString(userName) + "&email=" + Uri.EscapeDataString(email), credential);
		}

		public static string RetrieveLicense(string temoraryLicenseString, string company, string userName, string email, GetProxyCredentialsDelegate proxyCredentialsGetter)
		{
			for (int i = 0; i < Activation.activationServers.Length; i++)
			{
				string server = Activation.activationServers[i];
				try
				{
					string text = RetrieveLicense(server, temoraryLicenseString, company, userName, email, null);
					if (text != null)
					{
						return text;
					}
				}
				catch (NeedProxyCredentialsException ex)
				{
					if (proxyCredentialsGetter != null)
					{
						NetworkCredential credential = new NetworkCredential();
						if (!proxyCredentialsGetter(ex.Realm, credential))
						{
							throw new Exception("Could not retrieve proxy server credentials!");
						}
						string text2 = RetrieveLicense(server, temoraryLicenseString, company, userName, email, credential);
						if (text2 != null)
						{
							return text2;
						}
					}
				}
				catch (Exception ex2)
				{
					if (i == Activation.activationServers.Length - 1)
					{
						throw ex2;
					}
				}
			}
			return null;
		}

		public static string DecodeUserLicense(string baseCodedLicense)
		{
			byte[] array = DecodeBase32(baseCodedLicense);
			if (array == null)
			{
				throw new Exception("Invalid license format.");
			}
			int num = -1;
			for (int i = 0; i < array.Length; i++)
			{
				if (array[i] == 0)
				{
					num = i;
					break;
				}
			}
			if (num < 0)
			{
				throw new Exception("Invalid license format. Could not extract a signature from the provided license.");
			}
			return Encoding.UTF8.GetString(array, 0, num) + "|signature:" + EncodeToString(array, num + 1, array.Length - num - 1);
		}
	}
}
namespace GraphineLicenseManager.Ed25519b
{
	internal class Extra
	{
		public static int readUnsigned(byte b)
		{
			return b & 0xFF;
		}

		public static long load_3(byte[] inp, int ofs, int shift)
		{
			return (long)((ulong)(readUnsigned(inp[ofs]) | ((long)readUnsigned(inp[1 + ofs]) << 8) | ((long)readUnsigned(inp[2 + ofs]) << 16)) >> shift);
		}

		public static long load_4(byte[] inp, int ofs, int shift)
		{
			return (long)((ulong)(readUnsigned(inp[ofs]) | ((long)readUnsigned(inp[1 + ofs]) << 8) | ((long)readUnsigned(inp[2 + ofs]) << 16) | ((long)readUnsigned(inp[3 + ofs]) << 24)) >> shift);
		}

		public static void sc_reduce(byte[] s)
		{
			long num = 0x1FFFFF & load_3(s, 0, 0);
			long num2 = 0x1FFFFF & load_4(s, 2, 5);
			long num3 = 0x1FFFFF & load_3(s, 5, 2);
			long num4 = 0x1FFFFF & load_4(s, 7, 7);
			long num5 = 0x1FFFFF & load_4(s, 10, 4);
			long num6 = 0x1FFFFF & load_3(s, 13, 1);
			long num7 = 0x1FFFFF & load_4(s, 15, 6);
			long num8 = 0x1FFFFF & load_3(s, 18, 3);
			long num9 = 0x1FFFFF & load_3(s, 21, 0);
			long num10 = 0x1FFFFF & load_4(s, 23, 5);
			long num11 = 0x1FFFFF & load_3(s, 26, 2);
			long num12 = 0x1FFFFF & load_4(s, 28, 7);
			long num13 = 0x1FFFFF & load_4(s, 31, 4);
			long num14 = 0x1FFFFF & load_3(s, 34, 1);
			long num15 = 0x1FFFFF & load_4(s, 36, 6);
			long num16 = 0x1FFFFF & load_3(s, 39, 3);
			long num17 = 0x1FFFFF & load_3(s, 42, 0);
			long num18 = 0x1FFFFF & load_4(s, 44, 5);
			long num19 = 0x1FFFFF & load_3(s, 47, 2);
			long num20 = 0x1FFFFF & load_4(s, 49, 7);
			long num21 = 0x1FFFFF & load_4(s, 52, 4);
			long num22 = 0x1FFFFF & load_3(s, 55, 1);
			long num23 = 0x1FFFFF & load_4(s, 57, 6);
			long num24 = load_4(s, 60, 3);
			num12 += num24 * 666643;
			num13 += num24 * 470296;
			num14 += num24 * 654183;
			num15 -= num24 * 997805;
			num16 += num24 * 136657;
			num17 -= num24 * 683901;
			num24 = 0L;
			num11 += num23 * 666643;
			num12 += num23 * 470296;
			num13 += num23 * 654183;
			num14 -= num23 * 997805;
			num15 += num23 * 136657;
			num16 -= num23 * 683901;
			num23 = 0L;
			num10 += num22 * 666643;
			num11 += num22 * 470296;
			num12 += num22 * 654183;
			num13 -= num22 * 997805;
			num14 += num22 * 136657;
			num15 -= num22 * 683901;
			num22 = 0L;
			num9 += num21 * 666643;
			num10 += num21 * 470296;
			num11 += num21 * 654183;
			num12 -= num21 * 997805;
			num13 += num21 * 136657;
			num14 -= num21 * 683901;
			num21 = 0L;
			num8 += num20 * 666643;
			num9 += num20 * 470296;
			num10 += num20 * 654183;
			num11 -= num20 * 997805;
			num12 += num20 * 136657;
			num13 -= num20 * 683901;
			num20 = 0L;
			num7 += num19 * 666643;
			num8 += num19 * 470296;
			num9 += num19 * 654183;
			num10 -= num19 * 997805;
			num11 += num19 * 136657;
			num12 -= num19 * 683901;
			num19 = 0L;
			long num25 = num7 + 1048576 >> 21;
			num8 += num25;
			num7 -= num25 << 21;
			long num26 = num9 + 1048576 >> 21;
			num10 += num26;
			num9 -= num26 << 21;
			long num27 = num11 + 1048576 >> 21;
			num12 += num27;
			num11 -= num27 << 21;
			long num28 = num13 + 1048576 >> 21;
			num14 += num28;
			num13 -= num28 << 21;
			long num29 = num15 + 1048576 >> 21;
			num16 += num29;
			num15 -= num29 << 21;
			long num30 = num17 + 1048576 >> 21;
			num18 += num30;
			num17 -= num30 << 21;
			long num31 = num8 + 1048576 >> 21;
			num9 += num31;
			num8 -= num31 << 21;
			long num32 = num10 + 1048576 >> 21;
			num11 += num32;
			num10 -= num32 << 21;
			long num33 = num12 + 1048576 >> 21;
			num13 += num33;
			num12 -= num33 << 21;
			long num34 = num14 + 1048576 >> 21;
			num15 += num34;
			num14 -= num34 << 21;
			long num35 = num16 + 1048576 >> 21;
			num17 += num35;
			num16 -= num35 << 21;
			num6 += num18 * 666643;
			num7 += num18 * 470296;
			num8 += num18 * 654183;
			num9 -= num18 * 997805;
			num10 += num18 * 136657;
			num11 -= num18 * 683901;
			num18 = 0L;
			num5 += num17 * 666643;
			num6 += num17 * 470296;
			num7 += num17 * 654183;
			num8 -= num17 * 997805;
			num9 += num17 * 136657;
			num10 -= num17 * 683901;
			num17 = 0L;
			num4 += num16 * 666643;
			num5 += num16 * 470296;
			num6 += num16 * 654183;
			num7 -= num16 * 997805;
			num8 += num16 * 136657;
			num9 -= num16 * 683901;
			num16 = 0L;
			num3 += num15 * 666643;
			num4 += num15 * 470296;
			num5 += num15 * 654183;
			num6 -= num15 * 997805;
			num7 += num15 * 136657;
			num8 -= num15 * 683901;
			num15 = 0L;
			num2 += num14 * 666643;
			num3 += num14 * 470296;
			num4 += num14 * 654183;
			num5 -= num14 * 997805;
			num6 += num14 * 136657;
			num7 -= num14 * 683901;
			num14 = 0L;
			num += num13 * 666643;
			num2 += num13 * 470296;
			num3 += num13 * 654183;
			num4 -= num13 * 997805;
			num5 += num13 * 136657;
			num6 -= num13 * 683901;
			num13 = 0L;
			long num36 = num + 1048576 >> 21;
			num2 += num36;
			num -= num36 << 21;
			long num37 = num3 + 1048576 >> 21;
			num4 += num37;
			num3 -= num37 << 21;
			long num38 = num5 + 1048576 >> 21;
			num6 += num38;
			num5 -= num38 << 21;
			num25 = num7 + 1048576 >> 21;
			num8 += num25;
			num7 -= num25 << 21;
			num26 = num9 + 1048576 >> 21;
			num10 += num26;
			num9 -= num26 << 21;
			num27 = num11 + 1048576 >> 21;
			num12 += num27;
			num11 -= num27 << 21;
			long num39 = num2 + 1048576 >> 21;
			num3 += num39;
			num2 -= num39 << 21;
			long num40 = num4 + 1048576 >> 21;
			num5 += num40;
			num4 -= num40 << 21;
			long num41 = num6 + 1048576 >> 21;
			num7 += num41;
			num6 -= num41 << 21;
			num31 = num8 + 1048576 >> 21;
			num9 += num31;
			num8 -= num31 << 21;
			num32 = num10 + 1048576 >> 21;
			num11 += num32;
			num10 -= num32 << 21;
			num33 = num12 + 1048576 >> 21;
			num13 += num33;
			num12 -= num33 << 21;
			num += num13 * 666643;
			num2 += num13 * 470296;
			num3 += num13 * 654183;
			num4 -= num13 * 997805;
			num5 += num13 * 136657;
			num6 -= num13 * 683901;
			num13 = 0L;
			num36 = num >> 21;
			num2 += num36;
			num -= num36 << 21;
			num39 = num2 >> 21;
			num3 += num39;
			num2 -= num39 << 21;
			num37 = num3 >> 21;
			num4 += num37;
			num3 -= num37 << 21;
			num40 = num4 >> 21;
			num5 += num40;
			num4 -= num40 << 21;
			num38 = num5 >> 21;
			num6 += num38;
			num5 -= num38 << 21;
			num41 = num6 >> 21;
			num7 += num41;
			num6 -= num41 << 21;
			num25 = num7 >> 21;
			num8 += num25;
			num7 -= num25 << 21;
			num31 = num8 >> 21;
			num9 += num31;
			num8 -= num31 << 21;
			num26 = num9 >> 21;
			num10 += num26;
			num9 -= num26 << 21;
			num32 = num10 >> 21;
			num11 += num32;
			num10 -= num32 << 21;
			num27 = num11 >> 21;
			num12 += num27;
			num11 -= num27 << 21;
			num33 = num12 >> 21;
			num13 += num33;
			num12 -= num33 << 21;
			num += num13 * 666643;
			num2 += num13 * 470296;
			num3 += num13 * 654183;
			num4 -= num13 * 997805;
			num5 += num13 * 136657;
			num6 -= num13 * 683901;
			num13 = 0L;
			num36 = num >> 21;
			num2 += num36;
			num -= num36 << 21;
			num39 = num2 >> 21;
			num3 += num39;
			num2 -= num39 << 21;
			num37 = num3 >> 21;
			num4 += num37;
			num3 -= num37 << 21;
			num40 = num4 >> 21;
			num5 += num40;
			num4 -= num40 << 21;
			num38 = num5 >> 21;
			num6 += num38;
			num5 -= num38 << 21;
			num41 = num6 >> 21;
			num7 += num41;
			num6 -= num41 << 21;
			num25 = num7 >> 21;
			num8 += num25;
			num7 -= num25 << 21;
			num31 = num8 >> 21;
			num9 += num31;
			num8 -= num31 << 21;
			num26 = num9 >> 21;
			num10 += num26;
			num9 -= num26 << 21;
			num32 = num10 >> 21;
			num11 += num32;
			num10 -= num32 << 21;
			num27 = num11 >> 21;
			num12 += num27;
			num11 -= num27 << 21;
			s[0] = (byte)num;
			s[1] = (byte)(num >> 8);
			s[2] = (byte)((num >> 16) | (num2 << 5));
			s[3] = (byte)(num2 >> 3);
			s[4] = (byte)(num2 >> 11);
			s[5] = (byte)((num2 >> 19) | (num3 << 2));
			s[6] = (byte)(num3 >> 6);
			s[7] = (byte)((num3 >> 14) | (num4 << 7));
			s[8] = (byte)(num4 >> 1);
			s[9] = (byte)(num4 >> 9);
			s[10] = (byte)((num4 >> 17) | (num5 << 4));
			s[11] = (byte)(num5 >> 4);
			s[12] = (byte)(num5 >> 12);
			s[13] = (byte)((num5 >> 20) | (num6 << 1));
			s[14] = (byte)(num6 >> 7);
			s[15] = (byte)((num6 >> 15) | (num7 << 6));
			s[16] = (byte)(num7 >> 2);
			s[17] = (byte)(num7 >> 10);
			s[18] = (byte)((num7 >> 18) | (num8 << 3));
			s[19] = (byte)(num8 >> 5);
			s[20] = (byte)(num8 >> 13);
			s[21] = (byte)num9;
			s[22] = (byte)(num9 >> 8);
			s[23] = (byte)((num9 >> 16) | (num10 << 5));
			s[24] = (byte)(num10 >> 3);
			s[25] = (byte)(num10 >> 11);
			s[26] = (byte)((num10 >> 19) | (num11 << 2));
			s[27] = (byte)(num11 >> 6);
			s[28] = (byte)((num11 >> 14) | (num12 << 7));
			s[29] = (byte)(num12 >> 1);
			s[30] = (byte)(num12 >> 9);
			s[31] = (byte)(num12 >> 17);
		}

		public static void sc_muladd(byte[] s, byte[] a, byte[] b, byte[] c)
		{
			long num = 0x1FFFFF & load_3(a, 0, 0);
			long num2 = 0x1FFFFF & load_4(a, 2, 5);
			long num3 = 0x1FFFFF & load_3(a, 5, 2);
			long num4 = 0x1FFFFF & load_4(a, 7, 7);
			long num5 = 0x1FFFFF & load_4(a, 10, 4);
			long num6 = 0x1FFFFF & load_3(a, 13, 1);
			long num7 = 0x1FFFFF & load_4(a, 15, 6);
			long num8 = 0x1FFFFF & load_3(a, 18, 3);
			long num9 = 0x1FFFFF & load_3(a, 21, 0);
			long num10 = 0x1FFFFF & load_4(a, 23, 5);
			long num11 = 0x1FFFFF & load_3(a, 26, 2);
			long num12 = load_4(a, 28, 7);
			long num13 = 0x1FFFFF & load_3(b, 0, 0);
			long num14 = 0x1FFFFF & load_4(b, 2, 5);
			long num15 = 0x1FFFFF & load_3(b, 5, 2);
			long num16 = 0x1FFFFF & load_4(b, 7, 7);
			long num17 = 0x1FFFFF & load_4(b, 10, 4);
			long num18 = 0x1FFFFF & load_3(b, 13, 1);
			long num19 = 0x1FFFFF & load_4(b, 15, 6);
			long num20 = 0x1FFFFF & load_3(b, 18, 3);
			long num21 = 0x1FFFFF & load_3(b, 21, 0);
			long num22 = 0x1FFFFF & load_4(b, 23, 5);
			long num23 = 0x1FFFFF & load_3(b, 26, 2);
			long num24 = load_4(b, 28, 7);
			long num25 = 0x1FFFFF & load_3(c, 0, 0);
			long num26 = 0x1FFFFF & load_4(c, 2, 5);
			long num27 = 0x1FFFFF & load_3(c, 5, 2);
			long num28 = 0x1FFFFF & load_4(c, 7, 7);
			long num29 = 0x1FFFFF & load_4(c, 10, 4);
			long num30 = 0x1FFFFF & load_3(c, 13, 1);
			long num31 = 0x1FFFFF & load_4(c, 15, 6);
			long num32 = 0x1FFFFF & load_3(c, 18, 3);
			long num33 = 0x1FFFFF & load_3(c, 21, 0);
			long num34 = 0x1FFFFF & load_4(c, 23, 5);
			long num35 = 0x1FFFFF & load_3(c, 26, 2);
			long num36 = load_4(c, 28, 7);
			long num37 = num25 + num * num13;
			long num38 = num26 + num * num14 + num2 * num13;
			long num39 = num27 + num * num15 + num2 * num14 + num3 * num13;
			long num40 = num28 + num * num16 + num2 * num15 + num3 * num14 + num4 * num13;
			long num41 = num29 + num * num17 + num2 * num16 + num3 * num15 + num4 * num14 + num5 * num13;
			long num42 = num30 + num * num18 + num2 * num17 + num3 * num16 + num4 * num15 + num5 * num14 + num6 * num13;
			long num43 = num31 + num * num19 + num2 * num18 + num3 * num17 + num4 * num16 + num5 * num15 + num6 * num14 + num7 * num13;
			long num44 = num32 + num * num20 + num2 * num19 + num3 * num18 + num4 * num17 + num5 * num16 + num6 * num15 + num7 * num14 + num8 * num13;
			long num45 = num33 + num * num21 + num2 * num20 + num3 * num19 + num4 * num18 + num5 * num17 + num6 * num16 + num7 * num15 + num8 * num14 + num9 * num13;
			long num46 = num34 + num * num22 + num2 * num21 + num3 * num20 + num4 * num19 + num5 * num18 + num6 * num17 + num7 * num16 + num8 * num15 + num9 * num14 + num10 * num13;
			long num47 = num35 + num * num23 + num2 * num22 + num3 * num21 + num4 * num20 + num5 * num19 + num6 * num18 + num7 * num17 + num8 * num16 + num9 * num15 + num10 * num14 + num11 * num13;
			long num48 = num36 + num * num24 + num2 * num23 + num3 * num22 + num4 * num21 + num5 * num20 + num6 * num19 + num7 * num18 + num8 * num17 + num9 * num16 + num10 * num15 + num11 * num14 + num12 * num13;
			long num49 = num2 * num24 + num3 * num23 + num4 * num22 + num5 * num21 + num6 * num20 + num7 * num19 + num8 * num18 + num9 * num17 + num10 * num16 + num11 * num15 + num12 * num14;
			long num50 = num3 * num24 + num4 * num23 + num5 * num22 + num6 * num21 + num7 * num20 + num8 * num19 + num9 * num18 + num10 * num17 + num11 * num16 + num12 * num15;
			long num51 = num4 * num24 + num5 * num23 + num6 * num22 + num7 * num21 + num8 * num20 + num9 * num19 + num10 * num18 + num11 * num17 + num12 * num16;
			long num52 = num5 * num24 + num6 * num23 + num7 * num22 + num8 * num21 + num9 * num20 + num10 * num19 + num11 * num18 + num12 * num17;
			long num53 = num6 * num24 + num7 * num23 + num8 * num22 + num9 * num21 + num10 * num20 + num11 * num19 + num12 * num18;
			long num54 = num7 * num24 + num8 * num23 + num9 * num22 + num10 * num21 + num11 * num20 + num12 * num19;
			long num55 = num8 * num24 + num9 * num23 + num10 * num22 + num11 * num21 + num12 * num20;
			long num56 = num9 * num24 + num10 * num23 + num11 * num22 + num12 * num21;
			long num57 = num10 * num24 + num11 * num23 + num12 * num22;
			long num58 = num11 * num24 + num12 * num23;
			long num59 = num12 * num24;
			long num60 = 0L;
			long num61 = num37 + 1048576 >> 21;
			num38 += num61;
			num37 -= num61 << 21;
			long num62 = num39 + 1048576 >> 21;
			num40 += num62;
			num39 -= num62 << 21;
			long num63 = num41 + 1048576 >> 21;
			num42 += num63;
			num41 -= num63 << 21;
			long num64 = num43 + 1048576 >> 21;
			num44 += num64;
			num43 -= num64 << 21;
			long num65 = num45 + 1048576 >> 21;
			num46 += num65;
			num45 -= num65 << 21;
			long num66 = num47 + 1048576 >> 21;
			num48 += num66;
			num47 -= num66 << 21;
			long num67 = num49 + 1048576 >> 21;
			num50 += num67;
			num49 -= num67 << 21;
			long num68 = num51 + 1048576 >> 21;
			num52 += num68;
			num51 -= num68 << 21;
			long num69 = num53 + 1048576 >> 21;
			num54 += num69;
			num53 -= num69 << 21;
			long num70 = num55 + 1048576 >> 21;
			num56 += num70;
			num55 -= num70 << 21;
			long num71 = num57 + 1048576 >> 21;
			num58 += num71;
			num57 -= num71 << 21;
			long num72 = num59 + 1048576 >> 21;
			num60 += num72;
			num59 -= num72 << 21;
			long num73 = num38 + 1048576 >> 21;
			num39 += num73;
			num38 -= num73 << 21;
			long num74 = num40 + 1048576 >> 21;
			num41 += num74;
			num40 -= num74 << 21;
			long num75 = num42 + 1048576 >> 21;
			num43 += num75;
			num42 -= num75 << 21;
			long num76 = num44 + 1048576 >> 21;
			num45 += num76;
			num44 -= num76 << 21;
			long num77 = num46 + 1048576 >> 21;
			num47 += num77;
			num46 -= num77 << 21;
			long num78 = num48 + 1048576 >> 21;
			num49 += num78;
			num48 -= num78 << 21;
			long num79 = num50 + 1048576 >> 21;
			num51 += num79;
			num50 -= num79 << 21;
			long num80 = num52 + 1048576 >> 21;
			num53 += num80;
			num52 -= num80 << 21;
			long num81 = num54 + 1048576 >> 21;
			num55 += num81;
			num54 -= num81 << 21;
			long num82 = num56 + 1048576 >> 21;
			num57 += num82;
			num56 -= num82 << 21;
			long num83 = num58 + 1048576 >> 21;
			num59 += num83;
			num58 -= num83 << 21;
			num48 += num60 * 666643;
			num49 += num60 * 470296;
			num50 += num60 * 654183;
			num51 -= num60 * 997805;
			num52 += num60 * 136657;
			num53 -= num60 * 683901;
			num60 = 0L;
			num47 += num59 * 666643;
			num48 += num59 * 470296;
			num49 += num59 * 654183;
			num50 -= num59 * 997805;
			num51 += num59 * 136657;
			num52 -= num59 * 683901;
			num59 = 0L;
			num46 += num58 * 666643;
			num47 += num58 * 470296;
			num48 += num58 * 654183;
			num49 -= num58 * 997805;
			num50 += num58 * 136657;
			num51 -= num58 * 683901;
			num58 = 0L;
			num45 += num57 * 666643;
			num46 += num57 * 470296;
			num47 += num57 * 654183;
			num48 -= num57 * 997805;
			num49 += num57 * 136657;
			num50 -= num57 * 683901;
			num57 = 0L;
			num44 += num56 * 666643;
			num45 += num56 * 470296;
			num46 += num56 * 654183;
			num47 -= num56 * 997805;
			num48 += num56 * 136657;
			num49 -= num56 * 683901;
			num56 = 0L;
			num43 += num55 * 666643;
			num44 += num55 * 470296;
			num45 += num55 * 654183;
			num46 -= num55 * 997805;
			num47 += num55 * 136657;
			num48 -= num55 * 683901;
			num55 = 0L;
			num64 = num43 + 1048576 >> 21;
			num44 += num64;
			num43 -= num64 << 21;
			num65 = num45 + 1048576 >> 21;
			num46 += num65;
			num45 -= num65 << 21;
			num66 = num47 + 1048576 >> 21;
			num48 += num66;
			num47 -= num66 << 21;
			num67 = num49 + 1048576 >> 21;
			num50 += num67;
			num49 -= num67 << 21;
			num68 = num51 + 1048576 >> 21;
			num52 += num68;
			num51 -= num68 << 21;
			num69 = num53 + 1048576 >> 21;
			num54 += num69;
			num53 -= num69 << 21;
			num76 = num44 + 1048576 >> 21;
			num45 += num76;
			num44 -= num76 << 21;
			num77 = num46 + 1048576 >> 21;
			num47 += num77;
			num46 -= num77 << 21;
			num78 = num48 + 1048576 >> 21;
			num49 += num78;
			num48 -= num78 << 21;
			num79 = num50 + 1048576 >> 21;
			num51 += num79;
			num50 -= num79 << 21;
			num80 = num52 + 1048576 >> 21;
			num53 += num80;
			num52 -= num80 << 21;
			num42 += num54 * 666643;
			num43 += num54 * 470296;
			num44 += num54 * 654183;
			num45 -= num54 * 997805;
			num46 += num54 * 136657;
			num47 -= num54 * 683901;
			num54 = 0L;
			num41 += num53 * 666643;
			num42 += num53 * 470296;
			num43 += num53 * 654183;
			num44 -= num53 * 997805;
			num45 += num53 * 136657;
			num46 -= num53 * 683901;
			num53 = 0L;
			num40 += num52 * 666643;
			num41 += num52 * 470296;
			num42 += num52 * 654183;
			num43 -= num52 * 997805;
			num44 += num52 * 136657;
			num45 -= num52 * 683901;
			num52 = 0L;
			num39 += num51 * 666643;
			num40 += num51 * 470296;
			num41 += num51 * 654183;
			num42 -= num51 * 997805;
			num43 += num51 * 136657;
			num44 -= num51 * 683901;
			num51 = 0L;
			num38 += num50 * 666643;
			num39 += num50 * 470296;
			num40 += num50 * 654183;
			num41 -= num50 * 997805;
			num42 += num50 * 136657;
			num43 -= num50 * 683901;
			num50 = 0L;
			num37 += num49 * 666643;
			num38 += num49 * 470296;
			num39 += num49 * 654183;
			num40 -= num49 * 997805;
			num41 += num49 * 136657;
			num42 -= num49 * 683901;
			num49 = 0L;
			num61 = num37 + 1048576 >> 21;
			num38 += num61;
			num37 -= num61 << 21;
			num62 = num39 + 1048576 >> 21;
			num40 += num62;
			num39 -= num62 << 21;
			num63 = num41 + 1048576 >> 21;
			num42 += num63;
			num41 -= num63 << 21;
			num64 = num43 + 1048576 >> 21;
			num44 += num64;
			num43 -= num64 << 21;
			num65 = num45 + 1048576 >> 21;
			num46 += num65;
			num45 -= num65 << 21;
			num66 = num47 + 1048576 >> 21;
			num48 += num66;
			num47 -= num66 << 21;
			num73 = num38 + 1048576 >> 21;
			num39 += num73;
			num38 -= num73 << 21;
			num74 = num40 + 1048576 >> 21;
			num41 += num74;
			num40 -= num74 << 21;
			num75 = num42 + 1048576 >> 21;
			num43 += num75;
			num42 -= num75 << 21;
			num76 = num44 + 1048576 >> 21;
			num45 += num76;
			num44 -= num76 << 21;
			num77 = num46 + 1048576 >> 21;
			num47 += num77;
			num46 -= num77 << 21;
			num78 = num48 + 1048576 >> 21;
			num49 += num78;
			num48 -= num78 << 21;
			num37 += num49 * 666643;
			num38 += num49 * 470296;
			num39 += num49 * 654183;
			num40 -= num49 * 997805;
			num41 += num49 * 136657;
			num42 -= num49 * 683901;
			num49 = 0L;
			num61 = num37 >> 21;
			num38 += num61;
			num37 -= num61 << 21;
			num73 = num38 >> 21;
			num39 += num73;
			num38 -= num73 << 21;
			num62 = num39 >> 21;
			num40 += num62;
			num39 -= num62 << 21;
			num74 = num40 >> 21;
			num41 += num74;
			num40 -= num74 << 21;
			num63 = num41 >> 21;
			num42 += num63;
			num41 -= num63 << 21;
			num75 = num42 >> 21;
			num43 += num75;
			num42 -= num75 << 21;
			num64 = num43 >> 21;
			num44 += num64;
			num43 -= num64 << 21;
			num76 = num44 >> 21;
			num45 += num76;
			num44 -= num76 << 21;
			num65 = num45 >> 21;
			num46 += num65;
			num45 -= num65 << 21;
			num77 = num46 >> 21;
			num47 += num77;
			num46 -= num77 << 21;
			num66 = num47 >> 21;
			num48 += num66;
			num47 -= num66 << 21;
			num78 = num48 >> 21;
			num49 += num78;
			num48 -= num78 << 21;
			num37 += num49 * 666643;
			num38 += num49 * 470296;
			num39 += num49 * 654183;
			num40 -= num49 * 997805;
			num41 += num49 * 136657;
			num42 -= num49 * 683901;
			num49 = 0L;
			num61 = num37 >> 21;
			num38 += num61;
			num37 -= num61 << 21;
			num73 = num38 >> 21;
			num39 += num73;
			num38 -= num73 << 21;
			num62 = num39 >> 21;
			num40 += num62;
			num39 -= num62 << 21;
			num74 = num40 >> 21;
			num41 += num74;
			num40 -= num74 << 21;
			num63 = num41 >> 21;
			num42 += num63;
			num41 -= num63 << 21;
			num75 = num42 >> 21;
			num43 += num75;
			num42 -= num75 << 21;
			num64 = num43 >> 21;
			num44 += num64;
			num43 -= num64 << 21;
			num76 = num44 >> 21;
			num45 += num76;
			num44 -= num76 << 21;
			num65 = num45 >> 21;
			num46 += num65;
			num45 -= num65 << 21;
			num77 = num46 >> 21;
			num47 += num77;
			num46 -= num77 << 21;
			num66 = num47 >> 21;
			num48 += num66;
			num47 -= num66 << 21;
			s[0] = (byte)num37;
			s[1] = (byte)(num37 >> 8);
			s[2] = (byte)((num37 >> 16) | (num38 << 5));
			s[3] = (byte)(num38 >> 3);
			s[4] = (byte)(num38 >> 11);
			s[5] = (byte)((num38 >> 19) | (num39 << 2));
			s[6] = (byte)(num39 >> 6);
			s[7] = (byte)((num39 >> 14) | (num40 << 7));
			s[8] = (byte)(num40 >> 1);
			s[9] = (byte)(num40 >> 9);
			s[10] = (byte)((num40 >> 17) | (num41 << 4));
			s[11] = (byte)(num41 >> 4);
			s[12] = (byte)(num41 >> 12);
			s[13] = (byte)((num41 >> 20) | (num42 << 1));
			s[14] = (byte)(num42 >> 7);
			s[15] = (byte)((num42 >> 15) | (num43 << 6));
			s[16] = (byte)(num43 >> 2);
			s[17] = (byte)(num43 >> 10);
			s[18] = (byte)((num43 >> 18) | (num44 << 3));
			s[19] = (byte)(num44 >> 5);
			s[20] = (byte)(num44 >> 13);
			s[21] = (byte)num45;
			s[22] = (byte)(num45 >> 8);
			s[23] = (byte)((num45 >> 16) | (num46 << 5));
			s[24] = (byte)(num46 >> 3);
			s[25] = (byte)(num46 >> 11);
			s[26] = (byte)((num46 >> 19) | (num47 << 2));
			s[27] = (byte)(num47 >> 6);
			s[28] = (byte)((num47 >> 14) | (num48 << 7));
			s[29] = (byte)(num48 >> 1);
			s[30] = (byte)(num48 >> 9);
			s[31] = (byte)(num48 >> 17);
		}
	}
	internal class FieldElement
	{
		public static int[] New()
		{
			return new int[10];
		}

		public static int[] New(int a, int b, int c, int d, int e, int f, int g, int h, int i, int j)
		{
			return new int[10] { a, b, c, d, e, f, g, h, i, j };
		}

		public static int readUnsigned(byte b)
		{
			return b & 0xFF;
		}

		public static long load_3(byte[] inp, int ofs)
		{
			return readUnsigned(inp[ofs]) | ((long)readUnsigned(inp[1 + ofs]) << 8) | ((long)readUnsigned(inp[2 + ofs]) << 16);
		}

		public static long load_4(byte[] inp, int ofs)
		{
			return readUnsigned(inp[ofs]) | ((long)readUnsigned(inp[1 + ofs]) << 8) | ((long)readUnsigned(inp[2 + ofs]) << 16) | ((long)readUnsigned(inp[3 + ofs]) << 24);
		}

		public static void fe_0(int[] h)
		{
			h[0] = 0;
			h[1] = 0;
			h[2] = 0;
			h[3] = 0;
			h[4] = 0;
			h[5] = 0;
			h[6] = 0;
			h[7] = 0;
			h[8] = 0;
			h[9] = 0;
		}

		public static void fe_1(int[] h)
		{
			h[0] = 1;
			h[1] = 0;
			h[2] = 0;
			h[3] = 0;
			h[4] = 0;
			h[5] = 0;
			h[6] = 0;
			h[7] = 0;
			h[8] = 0;
			h[9] = 0;
		}

		public static void fe_add(int[] h, int[] f, int[] g)
		{
			int num = f[0];
			int num2 = f[1];
			int num3 = f[2];
			int num4 = f[3];
			int num5 = f[4];
			int num6 = f[5];
			int num7 = f[6];
			int num8 = f[7];
			int num9 = f[8];
			int num10 = f[9];
			int num11 = g[0];
			int num12 = g[1];
			int num13 = g[2];
			int num14 = g[3];
			int num15 = g[4];
			int num16 = g[5];
			int num17 = g[6];
			int num18 = g[7];
			int num19 = g[8];
			int num20 = g[9];
			int num21 = num + num11;
			int num22 = num2 + num12;
			int num23 = num3 + num13;
			int num24 = num4 + num14;
			int num25 = num5 + num15;
			int num26 = num6 + num16;
			int num27 = num7 + num17;
			int num28 = num8 + num18;
			int num29 = num9 + num19;
			int num30 = num10 + num20;
			h[0] = num21;
			h[1] = num22;
			h[2] = num23;
			h[3] = num24;
			h[4] = num25;
			h[5] = num26;
			h[6] = num27;
			h[7] = num28;
			h[8] = num29;
			h[9] = num30;
		}

		public static void fe_cmov(int[] f, int[] g, int b)
		{
			int num = f[0];
			int num2 = f[1];
			int num3 = f[2];
			int num4 = f[3];
			int num5 = f[4];
			int num6 = f[5];
			int num7 = f[6];
			int num8 = f[7];
			int num9 = f[8];
			int num10 = f[9];
			int num11 = g[0];
			int num12 = g[1];
			int num13 = g[2];
			int num14 = g[3];
			int num15 = g[4];
			int num16 = g[5];
			int num17 = g[6];
			int num18 = g[7];
			int num19 = g[8];
			int num20 = g[9];
			int num21 = num ^ num11;
			int num22 = num2 ^ num12;
			int num23 = num3 ^ num13;
			int num24 = num4 ^ num14;
			int num25 = num5 ^ num15;
			int num26 = num6 ^ num16;
			int num27 = num7 ^ num17;
			int num28 = num8 ^ num18;
			int num29 = num9 ^ num19;
			int num30 = num10 ^ num20;
			b = -b;
			num21 &= b;
			num22 &= b;
			num23 &= b;
			num24 &= b;
			num25 &= b;
			num26 &= b;
			num27 &= b;
			num28 &= b;
			num29 &= b;
			num30 &= b;
			f[0] = num ^ num21;
			f[1] = num2 ^ num22;
			f[2] = num3 ^ num23;
			f[3] = num4 ^ num24;
			f[4] = num5 ^ num25;
			f[5] = num6 ^ num26;
			f[6] = num7 ^ num27;
			f[7] = num8 ^ num28;
			f[8] = num9 ^ num29;
			f[9] = num10 ^ num30;
		}

		public static void fe_cswap(int[] f, int[] g, int b)
		{
			int num = f[0];
			int num2 = f[1];
			int num3 = f[2];
			int num4 = f[3];
			int num5 = f[4];
			int num6 = f[5];
			int num7 = f[6];
			int num8 = f[7];
			int num9 = f[8];
			int num10 = f[9];
			int num11 = g[0];
			int num12 = g[1];
			int num13 = g[2];
			int num14 = g[3];
			int num15 = g[4];
			int num16 = g[5];
			int num17 = g[6];
			int num18 = g[7];
			int num19 = g[8];
			int num20 = g[9];
			int num21 = num ^ num11;
			int num22 = num2 ^ num12;
			int num23 = num3 ^ num13;
			int num24 = num4 ^ num14;
			int num25 = num5 ^ num15;
			int num26 = num6 ^ num16;
			int num27 = num7 ^ num17;
			int num28 = num8 ^ num18;
			int num29 = num9 ^ num19;
			int num30 = num10 ^ num20;
			b = -b;
			num21 &= b;
			num22 &= b;
			num23 &= b;
			num24 &= b;
			num25 &= b;
			num26 &= b;
			num27 &= b;
			num28 &= b;
			num29 &= b;
			num30 &= b;
			f[0] = num ^ num21;
			f[1] = num2 ^ num22;
			f[2] = num3 ^ num23;
			f[3] = num4 ^ num24;
			f[4] = num5 ^ num25;
			f[5] = num6 ^ num26;
			f[6] = num7 ^ num27;
			f[7] = num8 ^ num28;
			f[8] = num9 ^ num29;
			f[9] = num10 ^ num30;
			g[0] = num11 ^ num21;
			g[1] = num12 ^ num22;
			g[2] = num13 ^ num23;
			g[3] = num14 ^ num24;
			g[4] = num15 ^ num25;
			g[5] = num16 ^ num26;
			g[6] = num17 ^ num27;
			g[7] = num18 ^ num28;
			g[8] = num19 ^ num29;
			g[9] = num20 ^ num30;
		}

		public static void fe_copy(int[] h, int[] f)
		{
			int num = f[0];
			int num2 = f[1];
			int num3 = f[2];
			int num4 = f[3];
			int num5 = f[4];
			int num6 = f[5];
			int num7 = f[6];
			int num8 = f[7];
			int num9 = f[8];
			int num10 = f[9];
			h[0] = num;
			h[1] = num2;
			h[2] = num3;
			h[3] = num4;
			h[4] = num5;
			h[5] = num6;
			h[6] = num7;
			h[7] = num8;
			h[8] = num9;
			h[9] = num10;
		}

		public static void fe_frombytes(int[] h, byte[] s)
		{
			long num = load_4(s, 0);
			long num2 = load_3(s, 4) << 6;
			long num3 = load_3(s, 7) << 5;
			long num4 = load_3(s, 10) << 3;
			long num5 = load_3(s, 13) << 2;
			long num6 = load_4(s, 16);
			long num7 = load_3(s, 20) << 7;
			long num8 = load_3(s, 23) << 5;
			long num9 = load_3(s, 26) << 4;
			long num10 = (load_3(s, 29) & 0x7FFFFF) << 2;
			long num11 = num10 + 16777216 >> 25;
			num += num11 * 19;
			num10 -= num11 << 25;
			long num12 = num2 + 16777216 >> 25;
			num3 += num12;
			num2 -= num12 << 25;
			long num13 = num4 + 16777216 >> 25;
			num5 += num13;
			num4 -= num13 << 25;
			long num14 = num6 + 16777216 >> 25;
			num7 += num14;
			num6 -= num14 << 25;
			long num15 = num8 + 16777216 >> 25;
			num9 += num15;
			num8 -= num15 << 25;
			long num16 = num + 33554432 >> 26;
			num2 += num16;
			num -= num16 << 26;
			long num17 = num3 + 33554432 >> 26;
			num4 += num17;
			num3 -= num17 << 26;
			long num18 = num5 + 33554432 >> 26;
			num6 += num18;
			num5 -= num18 << 26;
			long num19 = num7 + 33554432 >> 26;
			num8 += num19;
			num7 -= num19 << 26;
			long num20 = num9 + 33554432 >> 26;
			num10 += num20;
			num9 -= num20 << 26;
			h[0] = (int)num;
			h[1] = (int)num2;
			h[2] = (int)num3;
			h[3] = (int)num4;
			h[4] = (int)num5;
			h[5] = (int)num6;
			h[6] = (int)num7;
			h[7] = (int)num8;
			h[8] = (int)num9;
			h[9] = (int)num10;
		}

		public static void fe_invert(int[] outp, int[] z)
		{
			int[] array = New();
			int[] array2 = New();
			int[] array3 = New();
			int[] array4 = New();
			fe_sq(array, z);
			for (int i = 1; i < 1; i++)
			{
				fe_sq(array, array);
			}
			fe_sq(array2, array);
			for (int j = 1; j < 2; j++)
			{
				fe_sq(array2, array2);
			}
			fe_mul(array2, z, array2);
			fe_mul(array, array, array2);
			fe_sq(array3, array);
			for (int k = 1; k < 1; k++)
			{
				fe_sq(array3, array3);
			}
			fe_mul(array2, array2, array3);
			fe_sq(array3, array2);
			for (int l = 1; l < 5; l++)
			{
				fe_sq(array3, array3);
			}
			fe_mul(array2, array3, array2);
			fe_sq(array3, array2);
			for (int m = 1; m < 10; m++)
			{
				fe_sq(array3, array3);
			}
			fe_mul(array3, array3, array2);
			fe_sq(array4, array3);
			for (int n = 1; n < 20; n++)
			{
				fe_sq(array4, array4);
			}
			fe_mul(array3, array4, array3);
			fe_sq(array3, array3);
			for (int num = 1; num < 10; num++)
			{
				fe_sq(array3, array3);
			}
			fe_mul(array2, array3, array2);
			fe_sq(array3, array2);
			for (int num2 = 1; num2 < 50; num2++)
			{
				fe_sq(array3, array3);
			}
			fe_mul(array3, array3, array2);
			fe_sq(array4, array3);
			for (int num3 = 1; num3 < 100; num3++)
			{
				fe_sq(array4, array4);
			}
			fe_mul(array3, array4, array3);
			fe_sq(array3, array3);
			for (int num4 = 1; num4 < 50; num4++)
			{
				fe_sq(array3, array3);
			}
			fe_mul(array2, array3, array2);
			fe_sq(array2, array2);
			for (int num5 = 1; num5 < 5; num5++)
			{
				fe_sq(array2, array2);
			}
			fe_mul(outp, array2, array);
		}

		public static int fe_isnegative(int[] f)
		{
			byte[] array = new byte[32];
			fe_tobytes(array, f);
			return array[0] & 1;
		}

		public static int fe_isnonzero(int[] f)
		{
			byte[] array = new byte[32];
			fe_tobytes(array, f);
			if ((byte)((byte)((byte)((byte)((byte)((byte)((byte)((byte)((byte)((byte)((byte)((byte)((byte)((byte)((byte)((byte)((byte)((byte)((byte)((byte)((byte)((byte)((byte)((byte)((byte)((byte)((byte)((byte)((byte)((byte)((byte)(array[0] | array[1]) | array[2]) | array[3]) | array[4]) | array[5]) | array[6]) | array[7]) | array[8]) | array[9]) | array[10]) | array[11]) | array[12]) | array[13]) | array[14]) | array[15]) | array[16]) | array[17]) | array[18]) | array[19]) | array[20]) | array[21]) | array[22]) | array[23]) | array[24]) | array[25]) | array[26]) | array[27]) | array[28]) | array[29]) | array[30]) | array[31]) == 0)
			{
				return 0;
			}
			return 1;
		}

		public static void fe_mul(int[] h, int[] f, int[] g)
		{
			int num = f[0];
			int num2 = f[1];
			int num3 = f[2];
			int num4 = f[3];
			int num5 = f[4];
			int num6 = f[5];
			int num7 = f[6];
			int num8 = f[7];
			int num9 = f[8];
			int num10 = f[9];
			int num11 = g[0];
			int num12 = g[1];
			int num13 = g[2];
			int num14 = g[3];
			int num15 = g[4];
			int num16 = g[5];
			int num17 = g[6];
			int num18 = g[7];
			int num19 = g[8];
			int num20 = g[9];
			int num21 = 19 * num12;
			int num22 = 19 * num13;
			int num23 = 19 * num14;
			int num24 = 19 * num15;
			int num25 = 19 * num16;
			int num26 = 19 * num17;
			int num27 = 19 * num18;
			int num28 = 19 * num19;
			int num29 = 19 * num20;
			int num30 = 2 * num2;
			int num31 = 2 * num4;
			int num32 = 2 * num6;
			int num33 = 2 * num8;
			int num34 = 2 * num10;
			long num35 = (long)num * (long)num11;
			long num36 = (long)num * (long)num12;
			long num37 = (long)num * (long)num13;
			long num38 = (long)num * (long)num14;
			long num39 = (long)num * (long)num15;
			long num40 = (long)num * (long)num16;
			long num41 = (long)num * (long)num17;
			long num42 = (long)num * (long)num18;
			long num43 = (long)num * (long)num19;
			long num44 = (long)num * (long)num20;
			long num45 = (long)num2 * (long)num11;
			long num46 = (long)num30 * (long)num12;
			long num47 = (long)num2 * (long)num13;
			long num48 = (long)num30 * (long)num14;
			long num49 = (long)num2 * (long)num15;
			long num50 = (long)num30 * (long)num16;
			long num51 = (long)num2 * (long)num17;
			long num52 = (long)num30 * (long)num18;
			long num53 = (long)num2 * (long)num19;
			long num54 = (long)num30 * (long)num29;
			long num55 = (long)num3 * (long)num11;
			long num56 = (long)num3 * (long)num12;
			long num57 = (long)num3 * (long)num13;
			long num58 = (long)num3 * (long)num14;
			long num59 = (long)num3 * (long)num15;
			long num60 = (long)num3 * (long)num16;
			long num61 = (long)num3 * (long)num17;
			long num62 = (long)num3 * (long)num18;
			long num63 = (long)num3 * (long)num28;
			long num64 = (long)num3 * (long)num29;
			long num65 = (long)num4 * (long)num11;
			long num66 = (long)num31 * (long)num12;
			long num67 = (long)num4 * (long)num13;
			long num68 = (long)num31 * (long)num14;
			long num69 = (long)num4 * (long)num15;
			long num70 = (long)num31 * (long)num16;
			long num71 = (long)num4 * (long)num17;
			long num72 = (long)num31 * (long)num27;
			long num73 = (long)num4 * (long)num28;
			long num74 = (long)num31 * (long)num29;
			long num75 = (long)num5 * (long)num11;
			long num76 = (long)num5 * (long)num12;
			long num77 = (long)num5 * (long)num13;
			long num78 = (long)num5 * (long)num14;
			long num79 = (long)num5 * (long)num15;
			long num80 = (long)num5 * (long)num16;
			long num81 = (long)num5 * (long)num26;
			long num82 = (long)num5 * (long)num27;
			long num83 = (long)num5 * (long)num28;
			long num84 = (long)num5 * (long)num29;
			long num85 = (long)num6 * (long)num11;
			long num86 = (long)num32 * (long)num12;
			long num87 = (long)num6 * (long)num13;
			long num88 = (long)num32 * (long)num14;
			long num89 = (long)num6 * (long)num15;
			long num90 = (long)num32 * (long)num25;
			long num91 = (long)num6 * (long)num26;
			long num92 = (long)num32 * (long)num27;
			long num93 = (long)num6 * (long)num28;
			long num94 = (long)num32 * (long)num29;
			long num95 = (long)num7 * (long)num11;
			long num96 = (long)num7 * (long)num12;
			long num97 = (long)num7 * (long)num13;
			long num98 = (long)num7 * (long)num14;
			long num99 = (long)num7 * (long)num24;
			long num100 = (long)num7 * (long)num25;
			long num101 = (long)num7 * (long)num26;
			long num102 = (long)num7 * (long)num27;
			long num103 = (long)num7 * (long)num28;
			long num104 = (long)num7 * (long)num29;
			long num105 = (long)num8 * (long)num11;
			long num106 = (long)num33 * (long)num12;
			long num107 = (long)num8 * (long)num13;
			long num108 = (long)num33 * (long)num23;
			long num109 = (long)num8 * (long)num24;
			long num110 = (long)num33 * (long)num25;
			long num111 = (long)num8 * (long)num26;
			long num112 = (long)num33 * (long)num27;
			long num113 = (long)num8 * (long)num28;
			long num114 = (long)num33 * (long)num29;
			long num115 = (long)num9 * (long)num11;
			long num116 = (long)num9 * (long)num12;
			long num117 = (long)num9 * (long)num22;
			long num118 = (long)num9 * (long)num23;
			long num119 = (long)num9 * (long)num24;
			long num120 = (long)num9 * (long)num25;
			long num121 = (long)num9 * (long)num26;
			long num122 = (long)num9 * (long)num27;
			long num123 = (long)num9 * (long)num28;
			long num124 = (long)num9 * (long)num29;
			long num125 = (long)num10 * (long)num11;
			long num126 = (long)num34 * (long)num21;
			long num127 = (long)num10 * (long)num22;
			long num128 = (long)num34 * (long)num23;
			long num129 = (long)num10 * (long)num24;
			long num130 = (long)num34 * (long)num25;
			long num131 = (long)num10 * (long)num26;
			long num132 = (long)num34 * (long)num27;
			long num133 = (long)num10 * (long)num28;
			long num134 = (long)num34 * (long)num29;
			long num135 = num35 + num54 + num63 + num72 + num81 + num90 + num99 + num108 + num117 + num126;
			long num136 = num36 + num45 + num64 + num73 + num82 + num91 + num100 + num109 + num118 + num127;
			long num137 = num37 + num46 + num55 + num74 + num83 + num92 + num101 + num110 + num119 + num128;
			long num138 = num38 + num47 + num56 + num65 + num84 + num93 + num102 + num111 + num120 + num129;
			long num139 = num39 + num48 + num57 + num66 + num75 + num94 + num103 + num112 + num121 + num130;
			long num140 = num40 + num49 + num58 + num67 + num76 + num85 + num104 + num113 + num122 + num131;
			long num141 = num41 + num50 + num59 + num68 + num77 + num86 + num95 + num114 + num123 + num132;
			long num142 = num42 + num51 + num60 + num69 + num78 + num87 + num96 + num105 + num124 + num133;
			long num143 = num43 + num52 + num61 + num70 + num79 + num88 + num97 + num106 + num115 + num134;
			long num144 = num44 + num53 + num62 + num71 + num80 + num89 + num98 + num107 + num116 + num125;
			long num145 = num135 + 33554432 >> 26;
			num136 += num145;
			num135 -= num145 << 26;
			long num146 = num139 + 33554432 >> 26;
			num140 += num146;
			num139 -= num146 << 26;
			long num147 = num136 + 16777216 >> 25;
			num137 += num147;
			num136 -= num147 << 25;
			long num148 = num140 + 16777216 >> 25;
			num141 += num148;
			num140 -= num148 << 25;
			long num149 = num137 + 33554432 >> 26;
			num138 += num149;
			num137 -= num149 << 26;
			long num150 = num141 + 33554432 >> 26;
			num142 += num150;
			num141 -= num150 << 26;
			long num151 = num138 + 16777216 >> 25;
			num139 += num151;
			num138 -= num151 << 25;
			long num152 = num142 + 16777216 >> 25;
			num143 += num152;
			num142 -= num152 << 25;
			num146 = num139 + 33554432 >> 26;
			num140 += num146;
			num139 -= num146 << 26;
			long num153 = num143 + 33554432 >> 26;
			num144 += num153;
			num143 -= num153 << 26;
			long num154 = num144 + 16777216 >> 25;
			num135 += num154 * 19;
			num144 -= num154 << 25;
			num145 = num135 + 33554432 >> 26;
			num136 += num145;
			num135 -= num145 << 26;
			h[0] = (int)num135;
			h[1] = (int)num136;
			h[2] = (int)num137;
			h[3] = (int)num138;
			h[4] = (int)num139;
			h[5] = (int)num140;
			h[6] = (int)num141;
			h[7] = (int)num142;
			h[8] = (int)num143;
			h[9] = (int)num144;
		}

		public static void fe_mul121666(int[] h, int[] f)
		{
			int num = f[0];
			int num2 = f[1];
			int num3 = f[2];
			int num4 = f[3];
			int num5 = f[4];
			int num6 = f[5];
			int num7 = f[6];
			int num8 = f[7];
			int num9 = f[8];
			int num10 = f[9];
			long num11 = (long)num * 121666L;
			long num12 = (long)num2 * 121666L;
			long num13 = (long)num3 * 121666L;
			long num14 = (long)num4 * 121666L;
			long num15 = (long)num5 * 121666L;
			long num16 = (long)num6 * 121666L;
			long num17 = (long)num7 * 121666L;
			long num18 = (long)num8 * 121666L;
			long num19 = (long)num9 * 121666L;
			long num20 = (long)num10 * 121666L;
			long num21 = num20 + 16777216 >> 25;
			num11 += num21 * 19;
			num20 -= num21 << 25;
			long num22 = num12 + 16777216 >> 25;
			num13 += num22;
			num12 -= num22 << 25;
			long num23 = num14 + 16777216 >> 25;
			num15 += num23;
			num14 -= num23 << 25;
			long num24 = num16 + 16777216 >> 25;
			num17 += num24;
			num16 -= num24 << 25;
			long num25 = num18 + 16777216 >> 25;
			num19 += num25;
			num18 -= num25 << 25;
			long num26 = num11 + 33554432 >> 26;
			num12 += num26;
			num11 -= num26 << 26;
			long num27 = num13 + 33554432 >> 26;
			num14 += num27;
			num13 -= num27 << 26;
			long num28 = num15 + 33554432 >> 26;
			num16 += num28;
			num15 -= num28 << 26;
			long num29 = num17 + 33554432 >> 26;
			num18 += num29;
			num17 -= num29 << 26;
			long num30 = num19 + 33554432 >> 26;
			num20 += num30;
			num19 -= num30 << 26;
			h[0] = (int)num11;
			h[1] = (int)num12;
			h[2] = (int)num13;
			h[3] = (int)num14;
			h[4] = (int)num15;
			h[5] = (int)num16;
			h[6] = (int)num17;
			h[7] = (int)num18;
			h[8] = (int)num19;
			h[9] = (int)num20;
		}

		public static void fe_neg(int[] h, int[] f)
		{
			int num = f[0];
			int num2 = f[1];
			int num3 = f[2];
			int num4 = f[3];
			int num5 = f[4];
			int num6 = f[5];
			int num7 = f[6];
			int num8 = f[7];
			int num9 = f[8];
			int num10 = f[9];
			int num11 = -num;
			int num12 = -num2;
			int num13 = -num3;
			int num14 = -num4;
			int num15 = -num5;
			int num16 = -num6;
			int num17 = -num7;
			int num18 = -num8;
			int num19 = -num9;
			int num20 = -num10;
			h[0] = num11;
			h[1] = num12;
			h[2] = num13;
			h[3] = num14;
			h[4] = num15;
			h[5] = num16;
			h[6] = num17;
			h[7] = num18;
			h[8] = num19;
			h[9] = num20;
		}

		public static void fe_pow22523(int[] outp, int[] z)
		{
			int[] array = New();
			int[] array2 = New();
			int[] array3 = New();
			fe_sq(array, z);
			for (int i = 1; i < 1; i++)
			{
				fe_sq(array, array);
			}
			fe_sq(array2, array);
			for (int j = 1; j < 2; j++)
			{
				fe_sq(array2, array2);
			}
			fe_mul(array2, z, array2);
			fe_mul(array, array, array2);
			fe_sq(array, array);
			for (int k = 1; k < 1; k++)
			{
				fe_sq(array, array);
			}
			fe_mul(array, array2, array);
			fe_sq(array2, array);
			for (int l = 1; l < 5; l++)
			{
				fe_sq(array2, array2);
			}
			fe_mul(array, array2, array);
			fe_sq(array2, array);
			for (int m = 1; m < 10; m++)
			{
				fe_sq(array2, array2);
			}
			fe_mul(array2, array2, array);
			fe_sq(array3, array2);
			for (int n = 1; n < 20; n++)
			{
				fe_sq(array3, array3);
			}
			fe_mul(array2, array3, array2);
			fe_sq(array2, array2);
			for (int num = 1; num < 10; num++)
			{
				fe_sq(array2, array2);
			}
			fe_mul(array, array2, array);
			fe_sq(array2, array);
			for (int num2 = 1; num2 < 50; num2++)
			{
				fe_sq(array2, array2);
			}
			fe_mul(array2, array2, array);
			fe_sq(array3, array2);
			for (int num3 = 1; num3 < 100; num3++)
			{
				fe_sq(array3, array3);
			}
			fe_mul(array2, array3, array2);
			fe_sq(array2, array2);
			for (int num4 = 1; num4 < 50; num4++)
			{
				fe_sq(array2, array2);
			}
			fe_mul(array, array2, array);
			fe_sq(array, array);
			for (int num5 = 1; num5 < 2; num5++)
			{
				fe_sq(array, array);
			}
			fe_mul(outp, array, z);
		}

		public static void fe_sq(int[] h, int[] f)
		{
			int num = f[0];
			int num2 = f[1];
			int num3 = f[2];
			int num4 = f[3];
			int num5 = f[4];
			int num6 = f[5];
			int num7 = f[6];
			int num8 = f[7];
			int num9 = f[8];
			int num10 = f[9];
			int num11 = 2 * num;
			int num12 = 2 * num2;
			int num13 = 2 * num3;
			int num14 = 2 * num4;
			int num15 = 2 * num5;
			int num16 = 2 * num6;
			int num17 = 2 * num7;
			int num18 = 2 * num8;
			int num19 = 38 * num6;
			int num20 = 19 * num7;
			int num21 = 38 * num8;
			int num22 = 19 * num9;
			int num23 = 38 * num10;
			long num24 = (long)num * (long)num;
			long num25 = (long)num11 * (long)num2;
			long num26 = (long)num11 * (long)num3;
			long num27 = (long)num11 * (long)num4;
			long num28 = (long)num11 * (long)num5;
			long num29 = (long)num11 * (long)num6;
			long num30 = (long)num11 * (long)num7;
			long num31 = (long)num11 * (long)num8;
			long num32 = (long)num11 * (long)num9;
			long num33 = (long)num11 * (long)num10;
			long num34 = (long)num12 * (long)num2;
			long num35 = (long)num12 * (long)num3;
			long num36 = (long)num12 * (long)num14;
			long num37 = (long)num12 * (long)num5;
			long num38 = (long)num12 * (long)num16;
			long num39 = (long)num12 * (long)num7;
			long num40 = (long)num12 * (long)num18;
			long num41 = (long)num12 * (long)num9;
			long num42 = (long)num12 * (long)num23;
			long num43 = (long)num3 * (long)num3;
			long num44 = (long)num13 * (long)num4;
			long num45 = (long)num13 * (long)num5;
			long num46 = (long)num13 * (long)num6;
			long num47 = (long)num13 * (long)num7;
			long num48 = (long)num13 * (long)num8;
			long num49 = (long)num13 * (long)num22;
			long num50 = (long)num3 * (long)num23;
			long num51 = (long)num14 * (long)num4;
			long num52 = (long)num14 * (long)num5;
			long num53 = (long)num14 * (long)num16;
			long num54 = (long)num14 * (long)num7;
			long num55 = (long)num14 * (long)num21;
			long num56 = (long)num14 * (long)num22;
			long num57 = (long)num14 * (long)num23;
			long num58 = (long)num5 * (long)num5;
			long num59 = (long)num15 * (long)num6;
			long num60 = (long)num15 * (long)num20;
			long num61 = (long)num5 * (long)num21;
			long num62 = (long)num15 * (long)num22;
			long num63 = (long)num5 * (long)num23;
			long num64 = (long)num6 * (long)num19;
			long num65 = (long)num16 * (long)num20;
			long num66 = (long)num16 * (long)num21;
			long num67 = (long)num16 * (long)num22;
			long num68 = (long)num16 * (long)num23;
			long num69 = (long)num7 * (long)num20;
			long num70 = (long)num7 * (long)num21;
			long num71 = (long)num17 * (long)num22;
			long num72 = (long)num7 * (long)num23;
			long num73 = (long)num8 * (long)num21;
			long num74 = (long)num18 * (long)num22;
			long num75 = (long)num18 * (long)num23;
			long num76 = (long)num9 * (long)num22;
			long num77 = (long)num9 * (long)num23;
			long num78 = (long)num10 * (long)num23;
			long num79 = num24 + num42 + num49 + num55 + num60 + num64;
			long num80 = num25 + num50 + num56 + num61 + num65;
			long num81 = num26 + num34 + num57 + num62 + num66 + num69;
			long num82 = num27 + num35 + num63 + num67 + num70;
			long num83 = num28 + num36 + num43 + num68 + num71 + num73;
			long num84 = num29 + num37 + num44 + num72 + num74;
			long num85 = num30 + num38 + num45 + num51 + num75 + num76;
			long num86 = num31 + num39 + num46 + num52 + num77;
			long num87 = num32 + num40 + num47 + num53 + num58 + num78;
			long num88 = num33 + num41 + num48 + num54 + num59;
			long num89 = num79 + 33554432 >> 26;
			num80 += num89;
			num79 -= num89 << 26;
			long num90 = num83 + 33554432 >> 26;
			num84 += num90;
			num83 -= num90 << 26;
			long num91 = num80 + 16777216 >> 25;
			num81 += num91;
			num80 -= num91 << 25;
			long num92 = num84 + 16777216 >> 25;
			num85 += num92;
			num84 -= num92 << 25;
			long num93 = num81 + 33554432 >> 26;
			num82 += num93;
			num81 -= num93 << 26;
			long num94 = num85 + 33554432 >> 26;
			num86 += num94;
			num85 -= num94 << 26;
			long num95 = num82 + 16777216 >> 25;
			num83 += num95;
			num82 -= num95 << 25;
			long num96 = num86 + 16777216 >> 25;
			num87 += num96;
			num86 -= num96 << 25;
			num90 = num83 + 33554432 >> 26;
			num84 += num90;
			num83 -= num90 << 26;
			long num97 = num87 + 33554432 >> 26;
			num88 += num97;
			num87 -= num97 << 26;
			long num98 = num88 + 16777216 >> 25;
			num79 += num98 * 19;
			num88 -= num98 << 25;
			num89 = num79 + 33554432 >> 26;
			num80 += num89;
			num79 -= num89 << 26;
			h[0] = (int)num79;
			h[1] = (int)num80;
			h[2] = (int)num81;
			h[3] = (int)num82;
			h[4] = (int)num83;
			h[5] = (int)num84;
			h[6] = (int)num85;
			h[7] = (int)num86;
			h[8] = (int)num87;
			h[9] = (int)num88;
		}

		public static void fe_sq2(int[] h, int[] f)
		{
			int num = f[0];
			int num2 = f[1];
			int num3 = f[2];
			int num4 = f[3];
			int num5 = f[4];
			int num6 = f[5];
			int num7 = f[6];
			int num8 = f[7];
			int num9 = f[8];
			int num10 = f[9];
			int num11 = 2 * num;
			int num12 = 2 * num2;
			int num13 = 2 * num3;
			int num14 = 2 * num4;
			int num15 = 2 * num5;
			int num16 = 2 * num6;
			int num17 = 2 * num7;
			int num18 = 2 * num8;
			int num19 = 38 * num6;
			int num20 = 19 * num7;
			int num21 = 38 * num8;
			int num22 = 19 * num9;
			int num23 = 38 * num10;
			long num24 = (long)num * (long)num;
			long num25 = (long)num11 * (long)num2;
			long num26 = (long)num11 * (long)num3;
			long num27 = (long)num11 * (long)num4;
			long num28 = (long)num11 * (long)num5;
			long num29 = (long)num11 * (long)num6;
			long num30 = (long)num11 * (long)num7;
			long num31 = (long)num11 * (long)num8;
			long num32 = (long)num11 * (long)num9;
			long num33 = (long)num11 * (long)num10;
			long num34 = (long)num12 * (long)num2;
			long num35 = (long)num12 * (long)num3;
			long num36 = (long)num12 * (long)num14;
			long num37 = (long)num12 * (long)num5;
			long num38 = (long)num12 * (long)num16;
			long num39 = (long)num12 * (long)num7;
			long num40 = (long)num12 * (long)num18;
			long num41 = (long)num12 * (long)num9;
			long num42 = (long)num12 * (long)num23;
			long num43 = (long)num3 * (long)num3;
			long num44 = (long)num13 * (long)num4;
			long num45 = (long)num13 * (long)num5;
			long num46 = (long)num13 * (long)num6;
			long num47 = (long)num13 * (long)num7;
			long num48 = (long)num13 * (long)num8;
			long num49 = (long)num13 * (long)num22;
			long num50 = (long)num3 * (long)num23;
			long num51 = (long)num14 * (long)num4;
			long num52 = (long)num14 * (long)num5;
			long num53 = (long)num14 * (long)num16;
			long num54 = (long)num14 * (long)num7;
			long num55 = (long)num14 * (long)num21;
			long num56 = (long)num14 * (long)num22;
			long num57 = (long)num14 * (long)num23;
			long num58 = (long)num5 * (long)num5;
			long num59 = (long)num15 * (long)num6;
			long num60 = (long)num15 * (long)num20;
			long num61 = (long)num5 * (long)num21;
			long num62 = (long)num15 * (long)num22;
			long num63 = (long)num5 * (long)num23;
			long num64 = (long)num6 * (long)num19;
			long num65 = (long)num16 * (long)num20;
			long num66 = (long)num16 * (long)num21;
			long num67 = (long)num16 * (long)num22;
			long num68 = (long)num16 * (long)num23;
			long num69 = (long)num7 * (long)num20;
			long num70 = (long)num7 * (long)num21;
			long num71 = (long)num17 * (long)num22;
			long num72 = (long)num7 * (long)num23;
			long num73 = (long)num8 * (long)num21;
			long num74 = (long)num18 * (long)num22;
			long num75 = (long)num18 * (long)num23;
			long num76 = (long)num9 * (long)num22;
			long num77 = (long)num9 * (long)num23;
			long num78 = (long)num10 * (long)num23;
			long num79 = num24 + num42 + num49 + num55 + num60 + num64;
			long num80 = num25 + num50 + num56 + num61 + num65;
			long num81 = num26 + num34 + num57 + num62 + num66 + num69;
			long num82 = num27 + num35 + num63 + num67 + num70;
			long num83 = num28 + num36 + num43 + num68 + num71 + num73;
			long num84 = num29 + num37 + num44 + num72 + num74;
			long num85 = num30 + num38 + num45 + num51 + num75 + num76;
			long num86 = num31 + num39 + num46 + num52 + num77;
			long num87 = num32 + num40 + num47 + num53 + num58 + num78;
			long num88 = num33 + num41 + num48 + num54 + num59;
			num79 += num79;
			num80 += num80;
			num81 += num81;
			num82 += num82;
			num83 += num83;
			num84 += num84;
			num85 += num85;
			num86 += num86;
			num87 += num87;
			num88 += num88;
			long num89 = num79 + 33554432 >> 26;
			num80 += num89;
			num79 -= num89 << 26;
			long num90 = num83 + 33554432 >> 26;
			num84 += num90;
			num83 -= num90 << 26;
			long num91 = num80 + 16777216 >> 25;
			num81 += num91;
			num80 -= num91 << 25;
			long num92 = num84 + 16777216 >> 25;
			num85 += num92;
			num84 -= num92 << 25;
			long num93 = num81 + 33554432 >> 26;
			num82 += num93;
			num81 -= num93 << 26;
			long num94 = num85 + 33554432 >> 26;
			num86 += num94;
			num85 -= num94 << 26;
			long num95 = num82 + 16777216 >> 25;
			num83 += num95;
			num82 -= num95 << 25;
			long num96 = num86 + 16777216 >> 25;
			num87 += num96;
			num86 -= num96 << 25;
			num90 = num83 + 33554432 >> 26;
			num84 += num90;
			num83 -= num90 << 26;
			long num97 = num87 + 33554432 >> 26;
			num88 += num97;
			num87 -= num97 << 26;
			long num98 = num88 + 16777216 >> 25;
			num79 += num98 * 19;
			num88 -= num98 << 25;
			num89 = num79 + 33554432 >> 26;
			num80 += num89;
			num79 -= num89 << 26;
			h[0] = (int)num79;
			h[1] = (int)num80;
			h[2] = (int)num81;
			h[3] = (int)num82;
			h[4] = (int)num83;
			h[5] = (int)num84;
			h[6] = (int)num85;
			h[7] = (int)num86;
			h[8] = (int)num87;
			h[9] = (int)num88;
		}

		public static void fe_sub(int[] h, int[] f, int[] g)
		{
			int num = f[0];
			int num2 = f[1];
			int num3 = f[2];
			int num4 = f[3];
			int num5 = f[4];
			int num6 = f[5];
			int num7 = f[6];
			int num8 = f[7];
			int num9 = f[8];
			int num10 = f[9];
			int num11 = g[0];
			int num12 = g[1];
			int num13 = g[2];
			int num14 = g[3];
			int num15 = g[4];
			int num16 = g[5];
			int num17 = g[6];
			int num18 = g[7];
			int num19 = g[8];
			int num20 = g[9];
			int num21 = num - num11;
			int num22 = num2 - num12;
			int num23 = num3 - num13;
			int num24 = num4 - num14;
			int num25 = num5 - num15;
			int num26 = num6 - num16;
			int num27 = num7 - num17;
			int num28 = num8 - num18;
			int num29 = num9 - num19;
			int num30 = num10 - num20;
			h[0] = num21;
			h[1] = num22;
			h[2] = num23;
			h[3] = num24;
			h[4] = num25;
			h[5] = num26;
			h[6] = num27;
			h[7] = num28;
			h[8] = num29;
			h[9] = num30;
		}

		public static void fe_tobytes(byte[] s, int[] h)
		{
			int num = h[0];
			int num2 = h[1];
			int num3 = h[2];
			int num4 = h[3];
			int num5 = h[4];
			int num6 = h[5];
			int num7 = h[6];
			int num8 = h[7];
			int num9 = h[8];
			int num10 = h[9];
			int num11 = 19 * num10 + 16777216 >> 25;
			num11 = num + num11 >> 26;
			num11 = num2 + num11 >> 25;
			num11 = num3 + num11 >> 26;
			num11 = num4 + num11 >> 25;
			num11 = num5 + num11 >> 26;
			num11 = num6 + num11 >> 25;
			num11 = num7 + num11 >> 26;
			num11 = num8 + num11 >> 25;
			num11 = num9 + num11 >> 26;
			num11 = num10 + num11 >> 25;
			num += 19 * num11;
			int num12 = num >> 26;
			num2 += num12;
			num -= num12 << 26;
			int num13 = num2 >> 25;
			num3 += num13;
			num2 -= num13 << 25;
			int num14 = num3 >> 26;
			num4 += num14;
			num3 -= num14 << 26;
			int num15 = num4 >> 25;
			num5 += num15;
			num4 -= num15 << 25;
			int num16 = num5 >> 26;
			num6 += num16;
			num5 -= num16 << 26;
			int num17 = num6 >> 25;
			num7 += num17;
			num6 -= num17 << 25;
			int num18 = num7 >> 26;
			num8 += num18;
			num7 -= num18 << 26;
			int num19 = num8 >> 25;
			num9 += num19;
			num8 -= num19 << 25;
			int num20 = num9 >> 26;
			num10 += num20;
			num9 -= num20 << 26;
			int num21 = num10 >> 25;
			num10 -= num21 << 25;
			s[0] = (byte)num;
			s[1] = (byte)(num >> 8);
			s[2] = (byte)(num >> 16);
			s[3] = (byte)((num >> 24) | (num2 << 2));
			s[4] = (byte)(num2 >> 6);
			s[5] = (byte)(num2 >> 14);
			s[6] = (byte)((num2 >> 22) | (num3 << 3));
			s[7] = (byte)(num3 >> 5);
			s[8] = (byte)(num3 >> 13);
			s[9] = (byte)((num3 >> 21) | (num4 << 5));
			s[10] = (byte)(num4 >> 3);
			s[11] = (byte)(num4 >> 11);
			s[12] = (byte)((num4 >> 19) | (num5 << 6));
			s[13] = (byte)(num5 >> 2);
			s[14] = (byte)(num5 >> 10);
			s[15] = (byte)(num5 >> 18);
			s[16] = (byte)num6;
			s[17] = (byte)(num6 >> 8);
			s[18] = (byte)(num6 >> 16);
			s[19] = (byte)((num6 >> 24) | (num7 << 1));
			s[20] = (byte)(num7 >> 7);
			s[21] = (byte)(num7 >> 15);
			s[22] = (byte)((num7 >> 23) | (num8 << 3));
			s[23] = (byte)(num8 >> 5);
			s[24] = (byte)(num8 >> 13);
			s[25] = (byte)((num8 >> 21) | (num9 << 4));
			s[26] = (byte)(num9 >> 4);
			s[27] = (byte)(num9 >> 12);
			s[28] = (byte)((num9 >> 20) | (num10 << 6));
			s[29] = (byte)(num10 >> 2);
			s[30] = (byte)(num10 >> 10);
			s[31] = (byte)(num10 >> 18);
		}
	}
	internal class GroupElement
	{
		internal class ge_p2
		{
			public int[] X = FieldElement.New();

			public int[] Y = FieldElement.New();

			public int[] Z = FieldElement.New();
		}

		internal class ge_p3
		{
			public int[] X = FieldElement.New();

			public int[] Y = FieldElement.New();

			public int[] Z = FieldElement.New();

			public int[] T = FieldElement.New();
		}

		internal class ge_p1p1
		{
			public int[] X = FieldElement.New();

			public int[] Y = FieldElement.New();

			public int[] Z = FieldElement.New();

			public int[] T = FieldElement.New();
		}

		internal class ge_precomp
		{
			public int[] yplusx = FieldElement.New();

			public int[] yminusx = FieldElement.New();

			public int[] xy2d = FieldElement.New();

			public ge_precomp(int[] yplusx, int[] yminusx, int[] xy2d)
			{
				this.yplusx = yplusx;
				this.yminusx = yminusx;
				this.xy2d = xy2d;
			}
		}

		internal class ge_cached
		{
			public int[] YplusX = FieldElement.New();

			public int[] YminusX = FieldElement.New();

			public int[] Z = FieldElement.New();

			public int[] T2d = FieldElement.New();
		}

		private static int[] d = new int[10] { -10913610, 13857413, -15372611, 6949391, 114729, -8787816, -6275908, -3247719, -18696448, -12055116 };

		private static int[] sqrtm1 = new int[10] { -32595792, -7943725, 9377950, 3500415, 12389472, -272473, -25146209, -2005654, 326686, 11406482 };

		private static int[] d2 = new int[10] { -21827239, -5839606, -30745221, 13898782, 229458, 15978800, -12551817, -6495438, 29715968, 9444199 };

		private static ge_precomp[] Bi = new ge_precomp[8]
		{
			new ge_precomp(new int[10] { 25967493, -14356035, 29566456, 3660896, -12694345, 4014787, 27544626, -11754271, -6079156, 2047605 }, new int[10] { -12545711, 934262, -2722910, 3049990, -727428, 9406986, 12720692, 5043384, 19500929, -15469378 }, new int[10] { -8738181, 4489570, 9688441, -14785194, 10184609, -12363380, 29287919, 11864899, -24514362, -4438546 }),
			new ge_precomp(new int[10] { 15636291, -9688557, 24204773, -7912398, 616977, -16685262, 27787600, -14772189, 28944400, -1550024 }, new int[10] { 16568933, 4717097, -11556148, -1102322, 15682896, -11807043, 16354577, -11775962, 7689662, 11199574 }, new int[10] { 30464156, -5976125, -11779434, -15670865, 23220365, 15915852, 7512774, 10017326, -17749093, -9920357 }),
			new ge_precomp(new int[10] { 10861363, 11473154, 27284546, 1981175, -30064349, 12577861, 32867885, 14515107, -15438304, 10819380 }, new int[10] { 4708026, 6336745, 20377586, 9066809, -11272109, 6594696, -25653668, 12483688, -12668491, 5581306 }, new int[10] { 19563160, 16186464, -29386857, 4097519, 10237984, -4348115, 28542350, 13850243, -23678021, -15815942 }),
			new ge_precomp(new int[10] { 5153746, 9909285, 1723747, -2777874, 30523605, 5516873, 19480852, 5230134, -23952439, -15175766 }, new int[10] { -30269007, -3463509, 7665486, 10083793, 28475525, 1649722, 20654025, 16520125, 30598449, 7715701 }, new int[10] { 28881845, 14381568, 9657904, 3680757, -20181635, 7843316, -31400660, 1370708, 29794553, -1409300 }),
			new ge_precomp(new int[10] { -22518993, -6692182, 14201702, -8745502, -23510406, 8844726, 18474211, -1361450, -13062696, 13821877 }, new int[10] { -6455177, -7839871, 3374702, -4740862, -27098617, -10571707, 31655028, -7212327, 18853322, -14220951 }, new int[10] { 4566830, -12963868, -28974889, -12240689, -7602672, -2830569, -8514358, -10431137, 2207753, -3209784 }),
			new ge_precomp(new int[10] { -25154831, -4185821, 29681144, 7868801, -6854661, -9423865, -12437364, -663000, -31111463, -16132436 }, new int[10] { 25576264, -2703214, 7349804, -11814844, 16472782, 9300885, 3844789, 15725684, 171356, 6466918 }, new int[10] { 23103977, 13316479, 9739013, -16149481, 817875, -15038942, 8965339, -14088058, -30714912, 16193877 }),
			new ge_precomp(new int[10] { -33521811, 3180713, -2394130, 14003687, -16903474, -16270840, 17238398, 4729455, -18074513, 9256800 }, new int[10] { -25182317, -4174131, 32336398, 5036987, -21236817, 11360617, 22616405, 9761698, -19827198, 630305 }, new int[10] { -13720693, 2639453, -24237460, -7406481, 9494427, -5774029, -6554551, -15960994, -2449256, -14291300 }),
			new ge_precomp(new int[10] { -3151181, -5046075, 9282714, 6866145, -31907062, -863023, -18940575, 15033784, 25105118, -7894876 }, new int[10] { -24326370, 15950226, -31801215, -14592823, -11662737, -5090925, 1573892, -2625887, 2198790, -15804619 }, new int[10] { -3099351, 10324967, -2241613, 7453183, -5446979, -2735503, -13812022, -16236442, -32461234, -12290683 })
		};

		private static ge_precomp[][] Base = new ge_precomp[32][]
		{
			new ge_precomp[8]
			{
				new ge_precomp(FieldElement.New(25967493, -14356035, 29566456, 3660896, -12694345, 4014787, 27544626, -11754271, -6079156, 2047605), FieldElement.New(-12545711, 934262, -2722910, 3049990, -727428, 9406986, 12720692, 5043384, 19500929, -15469378), FieldElement.New(-8738181, 4489570, 9688441, -14785194, 10184609, -12363380, 29287919, 11864899, -24514362, -4438546)),
				new ge_precomp(FieldElement.New(-12815894, -12976347, -21581243, 11784320, -25355658, -2750717, -11717903, -3814571, -358445, -10211303), FieldElement.New(-21703237, 6903825, 27185491, 6451973, -29577724, -9554005, -15616551, 11189268, -26829678, -5319081), FieldElement.New(26966642, 11152617, 32442495, 15396054, 14353839, -12752335, -3128826, -9541118, -15472047, -4166697)),
				new ge_precomp(FieldElement.New(15636291, -9688557, 24204773, -7912398, 616977, -16685262, 27787600, -14772189, 28944400, -1550024), FieldElement.New(16568933, 4717097, -11556148, -1102322, 15682896, -11807043, 16354577, -11775962, 7689662, 11199574), FieldElement.New(30464156, -5976125, -11779434, -15670865, 23220365, 15915852, 7512774, 10017326, -17749093, -9920357)),
				new ge_precomp(FieldElement.New(-17036878, 13921892, 10945806, -6033431, 27105052, -16084379, -28926210, 15006023, 3284568, -6276540), FieldElement.New(23599295, -8306047, -11193664, -7687416, 13236774, 10506355, 7464579, 9656445, 13059162, 10374397), FieldElement.New(7798556, 16710257, 3033922, 2874086, 28997861, 2835604, 32406664, -3839045, -641708, -101325)),
				new ge_precomp(FieldElement.New(10861363, 11473154, 27284546, 1981175, -30064349, 12577861, 32867885, 14515107, -15438304, 10819380), FieldElement.New(4708026, 6336745, 20377586, 9066809, -11272109, 6594696, -25653668, 12483688, -12668491, 5581306), FieldElement.New(19563160, 16186464, -29386857, 4097519, 10237984, -4348115, 28542350, 13850243, -23678021, -15815942)),
				new ge_precomp(FieldElement.New(-15371964, -12862754, 32573250, 4720197, -26436522, 5875511, -19188627, -15224819, -9818940, -12085777), FieldElement.New(-8549212, 109983, 15149363, 2178705, 22900618, 4543417, 3044240, -15689887, 1762328, 14866737), FieldElement.New(-18199695, -15951423, -10473290, 1707278, -17185920, 3916101, -28236412, 3959421, 27914454, 4383652)),
				new ge_precomp(FieldElement.New(5153746, 9909285, 1723747, -2777874, 30523605, 5516873, 19480852, 5230134, -23952439, -15175766), FieldElement.New(-30269007, -3463509, 7665486, 10083793, 28475525, 1649722, 20654025, 16520125, 30598449, 7715701), FieldElement.New(28881845, 14381568, 9657904, 3680757, -20181635, 7843316, -31400660, 1370708, 29794553, -1409300)),
				new ge_precomp(FieldElement.New(14499471, -2729599, -33191113, -4254652, 28494862, 14271267, 30290735, 10876454, -33154098, 2381726), FieldElement.New(-7195431, -2655363, -14730155, 462251, -27724326, 3941372, -6236617, 3696005, -32300832, 15351955), FieldElement.New(27431194, 8222322, 16448760, -3907995, -18707002, 11938355, -32961401, -2970515, 29551813, 10109425))
			},
			new ge_precomp[8]
			{
				new ge_precomp(FieldElement.New(-13657040, -13155431, -31283750, 11777098, 21447386, 6519384, -2378284, -1627556, 10092783, -4764171), FieldElement.New(27939166, 14210322, 4677035, 16277044, -22964462, -12398139, -32508754, 12005538, -17810127, 12803510), FieldElement.New(17228999, -15661624, -1233527, 300140, -1224870, -11714777, 30364213, -9038194, 18016357, 4397660)),
				new ge_precomp(FieldElement.New(-10958843, -7690207, 4776341, -14954238, 27850028, -15602212, -26619106, 14544525, -17477504, 982639), FieldElement.New(29253598, 15796703, -2863982, -9908884, 10057023, 3163536, 7332899, -4120128, -21047696, 9934963), FieldElement.New(5793303, 16271923, -24131614, -10116404, 29188560, 1206517, -14747930, 4559895, -30123922, -10897950)),
				new ge_precomp(FieldElement.New(-27643952, -11493006, 16282657, -11036493, 28414021, -15012264, 24191034, 4541697, -13338309, 5500568), FieldElement.New(12650548, -1497113, 9052871, 11355358, -17680037, -8400164, -17430592, 12264343, 10874051, 13524335), FieldElement.New(25556948, -3045990, 714651, 2510400, 23394682, -10415330, 33119038, 5080568, -22528059, 5376628)),
				new ge_precomp(FieldElement.New(-26088264, -4011052, -17013699, -3537628, -6726793, 1920897, -22321305, -9447443, 4535768, 1569007), FieldElement.New(-2255422, 14606630, -21692440, -8039818, 28430649, 8775819, -30494562, 3044290, 31848280, 12543772), FieldElement.New(-22028579, 2943893, -31857513, 6777306, 13784462, -4292203, -27377195, -2062731, 7718482, 14474653)),
				new ge_precomp(FieldElement.New(2385315, 2454213, -22631320, 46603, -4437935, -15680415, 656965, -7236665, 24316168, -5253567), FieldElement.New(13741529, 10911568, -33233417, -8603737, -20177830, -1033297, 33040651, -13424532, -20729456, 8321686), FieldElement.New(21060490, -2212744, 15712757, -4336099, 1639040, 10656336, 23845965, -11874838, -9984458, 608372)),
				new ge_precomp(FieldElement.New(-13672732, -15087586, -10889693, -7557059, -6036909, 11305547, 1123968, -6780577, 27229399, 23887), FieldElement.New(-23244140, -294205, -11744728, 14712571, -29465699, -2029617, 12797024, -6440308, -1633405, 16678954), FieldElement.New(-29500620, 4770662, -16054387, 14001338, 7830047, 9564805, -1508144, -4795045, -17169265, 4904953)),
				new ge_precomp(FieldElement.New(24059557, 14617003, 19037157, -15039908, 19766093, -14906429, 5169211, 16191880, 2128236, -4326833), FieldElement.New(-16981152, 4124966, -8540610, -10653797, 30336522, -14105247, -29806336, 916033, -6882542, -2986532), FieldElement.New(-22630907, 12419372, -7134229, -7473371, -16478904, 16739175, 285431, 2763829, 15736322, 4143876)),
				new ge_precomp(FieldElement.New(2379352, 11839345, -4110402, -5988665, 11274298, 794957, 212801, -14594663, 23527084, -16458268), FieldElement.New(33431127, -11130478, -17838966, -15626900, 8909499, 8376530, -32625340, 4087881, -15188911, -14416214), FieldElement.New(1767683, 7197987, -13205226, -2022635, -13091350, 448826, 5799055, 4357868, -4774191, -16323038))
			},
			new ge_precomp[8]
			{
				new ge_precomp(FieldElement.New(6721966, 13833823, -23523388, -1551314, 26354293, -11863321, 23365147, -3949732, 7390890, 2759800), FieldElement.New(4409041, 2052381, 23373853, 10530217, 7676779, -12885954, 21302353, -4264057, 1244380, -12919645), FieldElement.New(-4421239, 7169619, 4982368, -2957590, 30256825, -2777540, 14086413, 9208236, 15886429, 16489664)),
				new ge_precomp(FieldElement.New(1996075, 10375649, 14346367, 13311202, -6874135, -16438411, -13693198, 398369, -30606455, -712933), FieldElement.New(-25307465, 9795880, -2777414, 14878809, -33531835, 14780363, 13348553, 12076947, -30836462, 5113182), FieldElement.New(-17770784, 11797796, 31950843, 13929123, -25888302, 12288344, -30341101, -7336386, 13847711, 5387222)),
				new ge_precomp(FieldElement.New(-18582163, -3416217, 17824843, -2340966, 22744343, -10442611, 8763061, 3617786, -19600662, 10370991), FieldElement.New(20246567, -14369378, 22358229, -543712, 18507283, -10413996, 14554437, -8746092, 32232924, 16763880), FieldElement.New(9648505, 10094563, 26416693, 14745928, -30374318, -6472621, 11094161, 15689506, 3140038, -16510092)),
				new ge_precomp(FieldElement.New(-16160072, 5472695, 31895588, 4744994, 8823515, 10365685, -27224800, 9448613, -28774454, 366295), FieldElement.New(19153450, 11523972, -11096490, -6503142, -24647631, 5420647, 28344573, 8041113, 719605, 11671788), FieldElement.New(8678025, 2694440, -6808014, 2517372, 4964326, 11152271, -15432916, -15266516, 27000813, -10195553)),
				new ge_precomp(FieldElement.New(-15157904, 7134312, 8639287, -2814877, -7235688, 10421742, 564065, 5336097, 6750977, -14521026), FieldElement.New(11836410, -3979488, 26297894, 16080799, 23455045, 15735944, 1695823, -8819122, 8169720, 16220347), FieldElement.New(-18115838, 8653647, 17578566, -6092619, -8025777, -16012763, -11144307, -2627664, -5990708, -14166033)),
				new ge_precomp(FieldElement.New(-23308498, -10968312, 15213228, -10081214, -30853605, -11050004, 27884329, 2847284, 2655861, 1738395), FieldElement.New(-27537433, -14253021, -25336301, -8002780, -9370762, 8129821, 21651608, -3239336, -19087449, -11005278), FieldElement.New(1533110, 3437855, 23735889, 459276, 29970501, 11335377, 26030092, 5821408, 10478196, 8544890)),
				new ge_precomp(FieldElement.New(32173121, -16129311, 24896207, 3921497, 22579056, -3410854, 19270449, 12217473, 17789017, -3395995), FieldElement.New(-30552961, -2228401, -15578829, -10147201, 13243889, 517024, 15479401, -3853233, 30460520, 1052596), FieldElement.New(-11614875, 13323618, 32618793, 8175907, -15230173, 12596687, 27491595, -4612359, 3179268, -9478891)),
				new ge_precomp(FieldElement.New(31947069, -14366651, -4640583, -15339921, -15125977, -6039709, -14756777, -16411740, 19072640, -9511060), FieldElement.New(11685058, 11822410, 3158003, -13952594, 33402194, -4165066, 5977896, -5215017, 473099, 5040608), FieldElement.New(-20290863, 8198642, -27410132, 11602123, 1290375, -2799760, 28326862, 1721092, -19558642, -3131606))
			},
			new ge_precomp[8]
			{
				new ge_precomp(FieldElement.New(7881532, 10687937, 7578723, 7738378, -18951012, -2553952, 21820786, 8076149, -27868496, 11538389), FieldElement.New(-19935666, 3899861, 18283497, -6801568, -15728660, -11249211, 8754525, 7446702, -5676054, 5797016), FieldElement.New(-11295600, -3793569, -15782110, -7964573, 12708869, -8456199, 2014099, -9050574, -2369172, -5877341)),
				new ge_precomp(FieldElement.New(-22472376, -11568741, -27682020, 1146375, 18956691, 16640559, 1192730, -3714199, 15123619, 10811505), FieldElement.New(14352098, -3419715, -18942044, 10822655, 32750596, 4699007, -70363, 15776356, -28886779, -11974553), FieldElement.New(-28241164, -8072475, -4978962, -5315317, 29416931, 1847569, -20654173, -16484855, 4714547, -9600655)),
				new ge_precomp(FieldElement.New(15200332, 8368572, 19679101, 15970074, -31872674, 1959451, 24611599, -4543832, -11745876, 12340220), FieldElement.New(12876937, -10480056, 33134381, 6590940, -6307776, 14872440, 9613953, 8241152, 15370987, 9608631), FieldElement.New(-4143277, -12014408, 8446281, -391603, 4407738, 13629032, -7724868, 15866074, -28210621, -8814099)),
				new ge_precomp(FieldElement.New(26660628, -15677655, 8393734, 358047, -7401291, 992988, -23904233, 858697, 20571223, 8420556), FieldElement.New(14620715, 13067227, -15447274, 8264467, 14106269, 15080814, 33531827, 12516406, -21574435, -12476749), FieldElement.New(236881, 10476226, 57258, -14677024, 6472998, 2466984, 17258519, 7256740, 8791136, 15069930)),
				new ge_precomp(FieldElement.New(1276410, -9371918, 22949635, -16322807, -23493039, -5702186, 14711875, 4874229, -30663140, -2331391), FieldElement.New(5855666, 4990204, -13711848, 7294284, -7804282, 1924647, -1423175, -7912378, -33069337, 9234253), FieldElement.New(20590503, -9018988, 31529744, -7352666, -2706834, 10650548, 31559055, -11609587, 18979186, 13396066)),
				new ge_precomp(FieldElement.New(24474287, 4968103, 22267082, 4407354, 24063882, -8325180, -18816887, 13594782, 33514650, 7021958), FieldElement.New(-11566906, -6565505, -21365085, 15928892, -26158305, 4315421, -25948728, -3916677, -21480480, 12868082), FieldElement.New(-28635013, 13504661, 19988037, -2132761, 21078225, 6443208, -21446107, 2244500, -12455797, -8089383)),
				new ge_precomp(FieldElement.New(-30595528, 13793479, -5852820, 319136, -25723172, -6263899, 33086546, 8957937, -15233648, 5540521), FieldElement.New(-11630176, -11503902, -8119500, -7643073, 2620056, 1022908, -23710744, -1568984, -16128528, -14962807), FieldElement.New(23152971, 775386, 27395463, 14006635, -9701118, 4649512, 1689819, 892185, -11513277, -15205948)),
				new ge_precomp(FieldElement.New(9770129, 9586738, 26496094, 4324120, 1556511, -3550024, 27453819, 4763127, -19179614, 5867134), FieldElement.New(-32765025, 1927590, 31726409, -4753295, 23962434, -16019500, 27846559, 5931263, -29749703, -16108455), FieldElement.New(27461885, -2977536, 22380810, 1815854, -23033753, -3031938, 7283490, -15148073, -19526700, 7734629))
			},
			new ge_precomp[8]
			{
				new ge_precomp(FieldElement.New(-8010264, -9590817, -11120403, 6196038, 29344158, -13430885, 7585295, -3176626, 18549497, 15302069), FieldElement.New(-32658337, -6171222, -7672793, -11051681, 6258878, 13504381, 10458790, -6418461, -8872242, 8424746), FieldElement.New(24687205, 8613276, -30667046, -3233545, 1863892, -1830544, 19206234, 7134917, -11284482, -828919)),
				new ge_precomp(FieldElement.New(11334899, -9218022, 8025293, 12707519, 17523892, -10476071, 10243738, -14685461, -5066034, 16498837), FieldElement.New(8911542, 6887158, -9584260, -6958590, 11145641, -9543680, 17303925, -14124238, 6536641, 10543906), FieldElement.New(-28946384, 15479763, -17466835, 568876, -1497683, 11223454, -2669190, -16625574, -27235709, 8876771)),
				new ge_precomp(FieldElement.New(-25742899, -12566864, -15649966, -846607, -33026686, -796288, -33481822, 15824474, -604426, -9039817), FieldElement.New(10330056, 70051, 7957388, -9002667, 9764902, 15609756, 27698697, -4890037, 1657394, 3084098), FieldElement.New(10477963, -7470260, 12119566, -13250805, 29016247, -5365589, 31280319, 14396151, -30233575, 15272409)),
				new ge_precomp(FieldElement.New(-12288309, 3169463, 28813183, 16658753, 25116432, -5630466, -25173957, -12636138, -25014757, 1950504), FieldElement.New(-26180358, 9489187, 11053416, -14746161, -31053720, 5825630, -8384306, -8767532, 15341279, 8373727), FieldElement.New(28685821, 7759505, -14378516, -12002860, -31971820, 4079242, 298136, -10232602, -2878207, 15190420)),
				new ge_precomp(FieldElement.New(-32932876, 13806336, -14337485, -15794431, -24004620, 10940928, 8669718, 2742393, -26033313, -6875003), FieldElement.New(-1580388, -11729417, -25979658, -11445023, -17411874, -10912854, 9291594, -16247779, -12154742, 6048605), FieldElement.New(-30305315, 14843444, 1539301, 11864366, 20201677, 1900163, 13934231, 5128323, 11213262, 9168384)),
				new ge_precomp(FieldElement.New(-26280513, 11007847, 19408960, -940758, -18592965, -4328580, -5088060, -11105150, 20470157, -16398701), FieldElement.New(-23136053, 9282192, 14855179, -15390078, -7362815, -14408560, -22783952, 14461608, 14042978, 5230683), FieldElement.New(29969567, -2741594, -16711867, -8552442, 9175486, -2468974, 21556951, 3506042, -5933891, -12449708)),
				new ge_precomp(FieldElement.New(-3144746, 8744661, 19704003, 4581278, -20430686, 6830683, -21284170, 8971513, -28539189, 15326563), FieldElement.New(-19464629, 10110288, -17262528, -3503892, -23500387, 1355669, -15523050, 15300988, -20514118, 9168260), FieldElement.New(-5353335, 4488613, -23803248, 16314347, 7780487, -15638939, -28948358, 9601605, 33087103, -9011387)),
				new ge_precomp(FieldElement.New(-19443170, -15512900, -20797467, -12445323, -29824447, 10229461, -27444329, -15000531, -5996870, 15664672), FieldElement.New(23294591, -16632613, -22650781, -8470978, 27844204, 11461195, 13099750, -2460356, 18151676, 13417686), FieldElement.New(-24722913, -4176517, -31150679, 5988919, -26858785, 6685065, 1661597, -12551441, 15271676, -15452665))
			},
			new ge_precomp[8]
			{
				new ge_precomp(FieldElement.New(11433042, -13228665, 8239631, -5279517, -1985436, -725718, -18698764, 2167544, -6921301, -13440182), FieldElement.New(-31436171, 15575146, 30436815, 12192228, -22463353, 9395379, -9917708, -8638997, 12215110, 12028277), FieldElement.New(14098400, 6555944, 23007258, 5757252, -15427832, -12950502, 30123440, 4617780, -16900089, -655628)),
				new ge_precomp(FieldElement.New(-4026201, -15240835, 11893168, 13718664, -14809462, 1847385, -15819999, 10154009, 23973261, -12684474), FieldElement.New(-26531820, -3695990, -1908898, 2534301, -31870557, -16550355, 18341390, -11419951, 32013174, -10103539), FieldElement.New(-25479301, 10876443, -11771086, -14625140, -12369567, 1838104, 21911214, 6354752, 4425632, -837822)),
				new ge_precomp(FieldElement.New(-10433389, -14612966, 22229858, -3091047, -13191166, 776729, -17415375, -12020462, 4725005, 14044970), FieldElement.New(19268650, -7304421, 1555349, 8692754, -21474059, -9910664, 6347390, -1411784, -19522291, -16109756), FieldElement.New(-24864089, 12986008, -10898878, -5558584, -11312371, -148526, 19541418, 8180106, 9282262, 10282508)),
				new ge_precomp(FieldElement.New(-26205082, 4428547, -8661196, -13194263, 4098402, -14165257, 15522535, 8372215, 5542595, -10702683), FieldElement.New(-10562541, 14895633, 26814552, -16673850, -17480754, -2489360, -2781891, 6993761, -18093885, 10114655), FieldElement.New(-20107055, -929418, 31422704, 10427861, -7110749, 6150669, -29091755, -11529146, 25953725, -106158)),
				new ge_precomp(FieldElement.New(-4234397, -8039292, -9119125, 3046000, 2101609, -12607294, 19390020, 6094296, -3315279, 12831125), FieldElement.New(-15998678, 7578152, 5310217, 14408357, -33548620, -224739, 31575954, 6326196, 7381791, -2421839), FieldElement.New(-20902779, 3296811, 24736065, -16328389, 18374254, 7318640, 6295303, 8082724, -15362489, 12339664)),
				new ge_precomp(FieldElement.New(27724736, 2291157, 6088201, -14184798, 1792727, 5857634, 13848414, 15768922, 25091167, 14856294), FieldElement.New(-18866652, 8331043, 24373479, 8541013, -701998, -9269457, 12927300, -12695493, -22182473, -9012899), FieldElement.New(-11423429, -5421590, 11632845, 3405020, 30536730, -11674039, -27260765, 13866390, 30146206, 9142070)),
				new ge_precomp(FieldElement.New(3924129, -15307516, -13817122, -10054960, 12291820, -668366, -27702774, 9326384, -8237858, 4171294), FieldElement.New(-15921940, 16037937, 6713787, 16606682, -21612135, 2790944, 26396185, 3731949, 345228, -5462949), FieldElement.New(-21327538, 13448259, 25284571, 1143661, 20614966, -8849387, 2031539, -12391231, -16253183, -13582083)),
				new ge_precomp(FieldElement.New(31016211, -16722429, 26371392, -14451233, -5027349, 14854137, 17477601, 3842657, 28012650, -16405420), FieldElement.New(-5075835, 9368966, -8562079, -4600902, -15249953, 6970560, -9189873, 16292057, -8867157, 3507940), FieldElement.New(29439664, 3537914, 23333589, 6997794, -17555561, -11018068, -15209202, -15051267, -9164929, 6580396))
			},
			new ge_precomp[8]
			{
				new ge_precomp(FieldElement.New(-12185861, -7679788, 16438269, 10826160, -8696817, -6235611, 17860444, -9273846, -2095802, 9304567), FieldElement.New(20714564, -4336911, 29088195, 7406487, 11426967, -5095705, 14792667, -14608617, 5289421, -477127), FieldElement.New(-16665533, -10650790, -6160345, -13305760, 9192020, -1802462, 17271490, 12349094, 26939669, -3752294)),
				new ge_precomp(FieldElement.New(-12889898, 9373458, 31595848, 16374215, 21471720, 13221525, -27283495, -12348559, -3698806, 117887), FieldElement.New(22263325, -6560050, 3984570, -11174646, -15114008, -566785, 28311253, 5358056, -23319780, 541964), FieldElement.New(16259219, 3261970, 2309254, -15534474, -16885711, -4581916, 24134070, -16705829, -13337066, -13552195)),
				new ge_precomp(FieldElement.New(9378160, -13140186, -22845982, -12745264, 28198281, -7244098, -2399684, -717351, 690426, 14876244), FieldElement.New(24977353, -314384, -8223969, -13465086, 28432343, -1176353, -13068804, -12297348, -22380984, 6618999), FieldElement.New(-1538174, 11685646, 12944378, 13682314, -24389511, -14413193, 8044829, -13817328, 32239829, -5652762)),
				new ge_precomp(FieldElement.New(-18603066, 4762990, -926250, 8885304, -28412480, -3187315, 9781647, -10350059, 32779359, 5095274), FieldElement.New(-33008130, -5214506, -32264887, -3685216, 9460461, -9327423, -24601656, 14506724, 21639561, -2630236), FieldElement.New(-16400943, -13112215, 25239338, 15531969, 3987758, -4499318, -1289502, -6863535, 17874574, 558605)),
				new ge_precomp(FieldElement.New(-13600129, 10240081, 9171883, 16131053, -20869254, 9599700, 33499487, 5080151, 2085892, 5119761), FieldElement.New(-22205145, -2519528, -16381601, 414691, -25019550, 2170430, 30634760, -8363614, -31999993, -5759884), FieldElement.New(-6845704, 15791202, 8550074, -1312654, 29928809, -12092256, 27534430, -7192145, -22351378, 12961482)),
				new ge_precomp(FieldElement.New(-24492060, -9570771, 10368194, 11582341, -23397293, -2245287, 16533930, 8206996, -30194652, -5159638), FieldElement.New(-11121496, -3382234, 2307366, 6362031, -135455, 8868177, -16835630, 7031275, 7589640, 8945490), FieldElement.New(-32152748, 8917967, 6661220, -11677616, -1192060, -15793393, 7251489, -11182180, 24099109, -14456170)),
				new ge_precomp(FieldElement.New(5019558, -7907470, 4244127, -14714356, -26933272, 6453165, -19118182, -13289025, -6231896, -10280736), FieldElement.New(10853594, 10721687, 26480089, 5861829, -22995819, 1972175, -1866647, -10557898, -3363451, -6441124), FieldElement.New(-17002408, 5906790, 221599, -6563147, 7828208, -13248918, 24362661, -2008168, -13866408, 7421392)),
				new ge_precomp(FieldElement.New(8139927, -6546497, 32257646, -5890546, 30375719, 1886181, -21175108, 15441252, 28826358, -4123029), FieldElement.New(6267086, 9695052, 7709135, -16603597, -32869068, -1886135, 14795160, -7840124, 13746021, -1742048), FieldElement.New(28584902, 7787108, -6732942, -15050729, 22846041, -7571236, -3181936, -363524, 4771362, -8419958))
			},
			new ge_precomp[8]
			{
				new ge_precomp(FieldElement.New(24949256, 6376279, -27466481, -8174608, -18646154, -9930606, 33543569, -12141695, 3569627, 11342593), FieldElement.New(26514989, 4740088, 27912651, 3697550, 19331575, -11472339, 6809886, 4608608, 7325975, -14801071), FieldElement.New(-11618399, -14554430, -24321212, 7655128, -1369274, 5214312, -27400540, 10258390, -17646694, -8186692)),
				new ge_precomp(FieldElement.New(11431204, 15823007, 26570245, 14329124, 18029990, 4796082, -31446179, 15580664, 9280358, -3973687), FieldElement.New(-160783, -10326257, -22855316, -4304997, -20861367, -13621002, -32810901, -11181622, -15545091, 4387441), FieldElement.New(-20799378, 12194512, 3937617, -5805892, -27154820, 9340370, -24513992, 8548137, 20617071, -7482001)),
				new ge_precomp(FieldElement.New(-938825, -3930586, -8714311, 16124718, 24603125, -6225393, -13775352, -11875822, 24345683, 10325460), FieldElement.New(-19855277, -1568885, -22202708, 8714034, 14007766, 6928528, 16318175, -1010689, 4766743, 3552007), FieldElement.New(-21751364, -16730916, 1351763, -803421, -4009670, 3950935, 3217514, 14481909, 10988822, -3994762)),
				new ge_precomp(FieldElement.New(15564307, -14311570, 3101243, 5684148, 30446780, -8051356, 12677127, -6505343, -8295852, 13296005), FieldElement.New(-9442290, 6624296, -30298964, -11913677, -4670981, -2057379, 31521204, 9614054, -30000824, 12074674), FieldElement.New(4771191, -135239, 14290749, -13089852, 27992298, 14998318, -1413936, -1556716, 29832613, -16391035)),
				new ge_precomp(FieldElement.New(7064884, -7541174, -19161962, -5067537, -18891269, -2912736, 25825242, 5293297, -27122660, 13101590), FieldElement.New(-2298563, 2439670, -7466610, 1719965, -27267541, -16328445, 32512469, -5317593, -30356070, -4190957), FieldElement.New(-30006540, 10162316, -33180176, 3981723, -16482138, -13070044, 14413974, 9515896, 19568978, 9628812)),
				new ge_precomp(FieldElement.New(33053803, 199357, 15894591, 1583059, 27380243, -4580435, -17838894, -6106839, -6291786, 3437740), FieldElement.New(-18978877, 3884493, 19469877, 12726490, 15913552, 13614290, -22961733, 70104, 7463304, 4176122), FieldElement.New(-27124001, 10659917, 11482427, -16070381, 12771467, -6635117, -32719404, -5322751, 24216882, 5944158)),
				new ge_precomp(FieldElement.New(8894125, 7450974, -2664149, -9765752, -28080517, -12389115, 19345746, 14680796, 11632993, 5847885), FieldElement.New(26942781, -2315317, 9129564, -4906607, 26024105, 11769399, -11518837, 6367194, -9727230, 4782140), FieldElement.New(19916461, -4828410, -22910704, -11414391, 25606324, -5972441, 33253853, 8220911, 6358847, -1873857)),
				new ge_precomp(FieldElement.New(801428, -2081702, 16569428, 11065167, 29875704, 96627, 7908388, -4480480, -13538503, 1387155), FieldElement.New(19646058, 5720633, -11416706, 12814209, 11607948, 12749789, 14147075, 15156355, -21866831, 11835260), FieldElement.New(19299512, 1155910, 28703737, 14890794, 2925026, 7269399, 26121523, 15467869, -26560550, 5052483))
			},
			new ge_precomp[8]
			{
				new ge_precomp(FieldElement.New(-3017432, 10058206, 1980837, 3964243, 22160966, 12322533, -6431123, -12618185, 12228557, -7003677), FieldElement.New(32944382, 14922211, -22844894, 5188528, 21913450, -8719943, 4001465, 13238564, -6114803, 8653815), FieldElement.New(22865569, -4652735, 27603668, -12545395, 14348958, 8234005, 24808405, 5719875, 28483275, 2841751)),
				new ge_precomp(FieldElement.New(-16420968, -1113305, -327719, -12107856, 21886282, -15552774, -1887966, -315658, 19932058, -12739203), FieldElement.New(-11656086, 10087521, -8864888, -5536143, -19278573, -3055912, 3999228, 13239134, -4777469, -13910208), FieldElement.New(1382174, -11694719, 17266790, 9194690, -13324356, 9720081, 20403944, 11284705, -14013818, 3093230)),
				new ge_precomp(FieldElement.New(16650921, -11037932, -1064178, 1570629, -8329746, 7352753, -302424, 16271225, -24049421, -6691850), FieldElement.New(-21911077, -5927941, -4611316, -5560156, -31744103, -10785293, 24123614, 15193618, -21652117, -16739389), FieldElement.New(-9935934, -4289447, -25279823, 4372842, 2087473, 10399484, 31870908, 14690798, 17361620, 11864968)),
				new ge_precomp(FieldElement.New(-11307610, 6210372, 13206574, 5806320, -29017692, -13967200, -12331205, -7486601, -25578460, -16240689), FieldElement.New(14668462, -12270235, 26039039, 15305210, 25515617, 4542480, 10453892, 6577524, 9145645, -6443880), FieldElement.New(5974874, 3053895, -9433049, -10385191, -31865124, 3225009, -7972642, 3936128, -5652273, -3050304)),
				new ge_precomp(FieldElement.New(30625386, -4729400, -25555961, -12792866, -20484575, 7695099, 17097188, -16303496, -27999779, 1803632), FieldElement.New(-3553091, 9865099, -5228566, 4272701, -5673832, -16689700, 14911344, 12196514, -21405489, 7047412), FieldElement.New(20093277, 9920966, -11138194, -5343857, 13161587, 12044805, -32856851, 4124601, -32343828, -10257566)),
				new ge_precomp(FieldElement.New(-20788824, 14084654, -13531713, 7842147, 19119038, -13822605, 4752377, -8714640, -21679658, 2288038), FieldElement.New(-26819236, -3283715, 29965059, 3039786, -14473765, 2540457, 29457502, 14625692, -24819617, 12570232), FieldElement.New(-1063558, -11551823, 16920318, 12494842, 1278292, -5869109, -21159943, -3498680, -11974704, 4724943)),
				new ge_precomp(FieldElement.New(17960970, -11775534, -4140968, -9702530, -8876562, -1410617, -12907383, -8659932, -29576300, 1903856), FieldElement.New(23134274, -14279132, -10681997, -1611936, 20684485, 15770816, -12989750, 3190296, 26955097, 14109738), FieldElement.New(15308788, 5320727, -30113809, -14318877, 22902008, 7767164, 29425325, -11277562, 31960942, 11934971)),
				new ge_precomp(FieldElement.New(-27395711, 8435796, 4109644, 12222639, -24627868, 14818669, 20638173, 4875028, 10491392, 1379718), FieldElement.New(-13159415, 9197841, 3875503, -8936108, -1383712, -5879801, 33518459, 16176658, 21432314, 12180697), FieldElement.New(-11787308, 11500838, 13787581, -13832590, -22430679, 10140205, 1465425, 12689540, -10301319, -13872883))
			},
			new ge_precomp[8]
			{
				new ge_precomp(FieldElement.New(5414091, -15386041, -21007664, 9643570, 12834970, 1186149, -2622916, -1342231, 26128231, 6032912), FieldElement.New(-26337395, -13766162, 32496025, -13653919, 17847801, -12669156, 3604025, 8316894, -25875034, -10437358), FieldElement.New(3296484, 6223048, 24680646, -12246460, -23052020, 5903205, -8862297, -4639164, 12376617, 3188849)),
				new ge_precomp(FieldElement.New(29190488, -14659046, 27549113, -1183516, 3520066, -10697301, 32049515, -7309113, -16109234, -9852307), FieldElement.New(-14744486, -9309156, 735818, -598978, -20407687, -5057904, 25246078, -15795669, 18640741, -960977), FieldElement.New(-6928835, -16430795, 10361374, 5642961, 4910474, 12345252, -31638386, -494430, 10530747, 1053335)),
				new ge_precomp(FieldElement.New(-29265967, -14186805, -13538216, -12117373, -19457059, -10655384, -31462369, -2948985, 24018831, 15026644), FieldElement.New(-22592535, -3145277, -2289276, 5953843, -13440189, 9425631, 25310643, 13003497, -2314791, -15145616), FieldElement.New(-27419985, -603321, -8043984, -1669117, -26092265, 13987819, -27297622, 187899, -23166419, -2531735)),
				new ge_precomp(FieldElement.New(-21744398, -13810475, 1844840, 5021428, -10434399, -15911473, 9716667, 16266922, -5070217, 726099), FieldElement.New(29370922, -6053998, 7334071, -15342259, 9385287, 2247707, -13661962, -4839461, 30007388, -15823341), FieldElement.New(-936379, 16086691, 23751945, -543318, -1167538, -5189036, 9137109, 730663, 9835848, 4555336)),
				new ge_precomp(FieldElement.New(-23376435, 1410446, -22253753, -12899614, 30867635, 15826977, 17693930, 544696, -11985298, 12422646), FieldElement.New(31117226, -12215734, -13502838, 6561947, -9876867, -12757670, -5118685, -4096706, 29120153, 13924425), FieldElement.New(-17400879, -14233209, 19675799, -2734756, -11006962, -5858820, -9383939, -11317700, 7240931, -237388)),
				new ge_precomp(FieldElement.New(-31361739, -11346780, -15007447, -5856218, -22453340, -12152771, 1222336, 4389483, 3293637, -15551743), FieldElement.New(-16684801, -14444245, 11038544, 11054958, -13801175, -3338533, -24319580, 7733547, 12796905, -6335822), FieldElement.New(-8759414, -10817836, -25418864, 10783769, -30615557, -9746811, -28253339, 3647836, 3222231, -11160462)),
				new ge_precomp(FieldElement.New(18606113, 1693100, -25448386, -15170272, 4112353, 10045021, 23603893, -2048234, -7550776, 2484985), FieldElement.New(9255317, -3131197, -12156162, -1004256, 13098013, -9214866, 16377220, -2102812, -19802075, -3034702), FieldElement.New(-22729289, 7496160, -5742199, 11329249, 19991973, -3347502, -31718148, 9936966, -30097688, -10618797)),
				new ge_precomp(FieldElement.New(21878590, -5001297, 4338336, 13643897, -3036865, 13160960, 19708896, 5415497, -7360503, -4109293), FieldElement.New(27736861, 10103576, 12500508, 8502413, -3413016, -9633558, 10436918, -1550276, -23659143, -8132100), FieldElement.New(19492550, -12104365, -29681976, -852630, -3208171, 12403437, 30066266, 8367329, 13243957, 8709688))
			},
			new ge_precomp[8]
			{
				new ge_precomp(FieldElement.New(12015105, 2801261, 28198131, 10151021, 24818120, -4743133, -11194191, -5645734, 5150968, 7274186), FieldElement.New(2831366, -12492146, 1478975, 6122054, 23825128, -12733586, 31097299, 6083058, 31021603, -9793610), FieldElement.New(-2529932, -2229646, 445613, 10720828, -13849527, -11505937, -23507731, 16354465, 15067285, -14147707)),
				new ge_precomp(FieldElement.New(7840942, 14037873, -33364863, 15934016, -728213, -3642706, 21403988, 1057586, -19379462, -12403220), FieldElement.New(915865, -16469274, 15608285, -8789130, -24357026, 6060030, -17371319, 8410997, -7220461, 16527025), FieldElement.New(32922597, -556987, 20336074, -16184568, 10903705, -5384487, 16957574, 52992, 23834301, 6588044)),
				new ge_precomp(FieldElement.New(32752030, 11232950, 3381995, -8714866, 22652988, -10744103, 17159699, 16689107, -20314580, -1305992), FieldElement.New(-4689649, 9166776, -25710296, -10847306, 11576752, 12733943, 7924251, -2752281, 1976123, -7249027), FieldElement.New(21251222, 16309901, -2983015, -6783122, 30810597, 12967303, 156041, -3371252, 12331345, -8237197)),
				new ge_precomp(FieldElement.New(8651614, -4477032, -16085636, -4996994, 13002507, 2950805, 29054427, -5106970, 10008136, -4667901), FieldElement.New(31486080, 15114593, -14261250, 12951354, 14369431, -7387845, 16347321, -13662089, 8684155, -10532952), FieldElement.New(19443825, 11385320, 24468943, -9659068, -23919258, 2187569, -26263207, -6086921, 31316348, 14219878)),
				new ge_precomp(FieldElement.New(-28594490, 1193785, 32245219, 11392485, 31092169, 15722801, 27146014, 6992409, 29126555, 9207390), FieldElement.New(32382935, 1110093, 18477781, 11028262, -27411763, -7548111, -4980517, 10843782, -7957600, -14435730), FieldElement.New(2814918, 7836403, 27519878, -7868156, -20894015, -11553689, -21494559, 8550130, 28346258, 1994730)),
				new ge_precomp(FieldElement.New(-19578299, 8085545, -14000519, -3948622, 2785838, -16231307, -19516951, 7174894, 22628102, 8115180), FieldElement.New(-30405132, 955511, -11133838, -15078069, -32447087, -13278079, -25651578, 3317160, -9943017, 930272), FieldElement.New(-15303681, -6833769, 28856490, 1357446, 23421993, 1057177, 24091212, -1388970, -22765376, -10650715)),
				new ge_precomp(FieldElement.New(-22751231, -5303997, -12907607, -12768866, -15811511, -7797053, -14839018, -16554220, -1867018, 8398970), FieldElement.New(-31969310, 2106403, -4736360, 1362501, 12813763, 16200670, 22981545, -6291273, 18009408, -15772772), FieldElement.New(-17220923, -9545221, -27784654, 14166835, 29815394, 7444469, 29551787, -3727419, 19288549, 1325865)),
				new ge_precomp(FieldElement.New(15100157, -15835752, -23923978, -1005098, -26450192, 15509408, 12376730, -3479146, 33166107, -8042750), FieldElement.New(20909231, 13023121, -9209752, 16251778, -5778415, -8094914, 12412151, 10018715, 2213263, -13878373), FieldElement.New(32529814, -11074689, 30361439, -16689753, -9135940, 1513226, 22922121, 6382134, -5766928, 8371348))
			},
			new ge_precomp[8]
			{
				new ge_precomp(FieldElement.New(9923462, 11271500, 12616794, 3544722, -29998368, -1721626, 12891687, -8193132, -26442943, 10486144), FieldElement.New(-22597207, -7012665, 8587003, -8257861, 4084309, -12970062, 361726, 2610596, -23921530, -11455195), FieldElement.New(5408411, -1136691, -4969122, 10561668, 24145918, 14240566, 31319731, -4235541, 19985175, -3436086)),
				new ge_precomp(FieldElement.New(-13994457, 16616821, 14549246, 3341099, 32155958, 13648976, -17577068, 8849297, 65030, 8370684), FieldElement.New(-8320926, -12049626, 31204563, 5839400, -20627288, -1057277, -19442942, 6922164, 12743482, -9800518), FieldElement.New(-2361371, 12678785, 28815050, 4759974, -23893047, 4884717, 23783145, 11038569, 18800704, 255233)),
				new ge_precomp(FieldElement.New(-5269658, -1773886, 13957886, 7990715, 23132995, 728773, 13393847, 9066957, 19258688, -14753793), FieldElement.New(-2936654, -10827535, -10432089, 14516793, -3640786, 4372541, -31934921, 2209390, -1524053, 2055794), FieldElement.New(580882, 16705327, 5468415, -2683018, -30926419, -14696000, -7203346, -8994389, -30021019, 7394435)),
				new ge_precomp(FieldElement.New(23838809, 1822728, -15738443, 15242727, 8318092, -3733104, -21672180, -3492205, -4821741, 14799921), FieldElement.New(13345610, 9759151, 3371034, -16137791, 16353039, 8577942, 31129804, 13496856, -9056018, 7402518), FieldElement.New(2286874, -4435931, -20042458, -2008336, -13696227, 5038122, 11006906, -15760352, 8205061, 1607563)),
				new ge_precomp(FieldElement.New(14414086, -8002132, 3331830, -3208217, 22249151, -5594188, 18364661, -2906958, 30019587, -9029278), FieldElement.New(-27688051, 1585953, -10775053, 931069, -29120221, -11002319, -14410829, 12029093, 9944378, 8024), FieldElement.New(4368715, -3709630, 29874200, -15022983, -20230386, -11410704, -16114594, -999085, -8142388, 5640030)),
				new ge_precomp(FieldElement.New(10299610, 13746483, 11661824, 16234854, 7630238, 5998374, 9809887, -16694564, 15219798, -14327783), FieldElement.New(27425505, -5719081, 3055006, 10660664, 23458024, 595578, -15398605, -1173195, -18342183, 9742717), FieldElement.New(6744077, 2427284, 26042789, 2720740, -847906, 1118974, 32324614, 7406442, 12420155, 1994844)),
				new ge_precomp(FieldElement.New(14012521, -5024720, -18384453, -9578469, -26485342, -3936439, -13033478, -10909803, 24319929, -6446333), FieldElement.New(16412690, -4507367, 10772641, 15929391, -17068788, -4658621, 10555945, -10484049, -30102368, -4739048), FieldElement.New(22397382, -7767684, -9293161, -12792868, 17166287, -9755136, -27333065, 6199366, 21880021, -12250760)),
				new ge_precomp(FieldElement.New(-4283307, 5368523, -31117018, 8163389, -30323063, 3209128, 16557151, 8890729, 8840445, 4957760), FieldElement.New(-15447727, 709327, -6919446, -10870178, -29777922, 6522332, -21720181, 12130072, -14796503, 5005757), FieldElement.New(-2114751, -14308128, 23019042, 15765735, -25269683, 6002752, 10183197, -13239326, -16395286, -2176112))
			},
			new ge_precomp[8]
			{
				new ge_precomp(FieldElement.New(-19025756, 1632005, 13466291, -7995100, -23640451, 16573537, -32013908, -3057104, 22208662, 2000468), FieldElement.New(3065073, -1412761, -25598674, -361432, -17683065, -5703415, -8164212, 11248527, -3691214, -7414184), FieldElement.New(10379208, -6045554, 8877319, 1473647, -29291284, -12507580, 16690915, 2553332, -3132688, 16400289)),
				new ge_precomp(FieldElement.New(15716668, 1254266, -18472690, 7446274, -8448918, 6344164, -22097271, -7285580, 26894937, 9132066), FieldElement.New(24158887, 12938817, 11085297, -8177598, -28063478, -4457083, -30576463, 64452, -6817084, -2692882), FieldElement.New(13488534, 7794716, 22236231, 5989356, 25426474, -12578208, 2350710, -3418511, -4688006, 2364226)),
				new ge_precomp(FieldElement.New(16335052, 9132434, 25640582, 6678888, 1725628, 8517937, -11807024, -11697457, 15445875, -7798101), FieldElement.New(29004207, -7867081, 28661402, -640412, -12794003, -7943086, 31863255, -4135540, -278050, -15759279), FieldElement.New(-6122061, -14866665, -28614905, 14569919, -10857999, -3591829, 10343412, -6976290, -29828287, -10815811)),
				new ge_precomp(FieldElement.New(27081650, 3463984, 14099042, -4517604, 1616303, -6205604, 29542636, 15372179, 17293797, 960709), FieldElement.New(20263915, 11434237, -5765435, 11236810, 13505955, -10857102, -16111345, 6493122, -19384511, 7639714), FieldElement.New(-2830798, -14839232, 25403038, -8215196, -8317012, -16173699, 18006287, -16043750, 29994677, -15808121)),
				new ge_precomp(FieldElement.New(9769828, 5202651, -24157398, -13631392, -28051003, -11561624, -24613141, -13860782, -31184575, 709464), FieldElement.New(12286395, 13076066, -21775189, -1176622, -25003198, 4057652, -32018128, -8890874, 16102007, 13205847), FieldElement.New(13733362, 5599946, 10557076, 3195751, -5557991, 8536970, -25540170, 8525972, 10151379, 10394400)),
				new ge_precomp(FieldElement.New(4024660, -16137551, 22436262, 12276534, -9099015, -2686099, 19698229, 11743039, -33302334, 8934414), FieldElement.New(-15879800, -4525240, -8580747, -2934061, 14634845, -698278, -9449077, 3137094, -11536886, 11721158), FieldElement.New(17555939, -5013938, 8268606, 2331751, -22738815, 9761013, 9319229, 8835153, -9205489, -1280045)),
				new ge_precomp(FieldElement.New(-461409, -7830014, 20614118, 16688288, -7514766, -4807119, 22300304, 505429, 6108462, -6183415), FieldElement.New(-5070281, 12367917, -30663534, 3234473, 32617080, -8422642, 29880583, -13483331, -26898490, -7867459), FieldElement.New(-31975283, 5726539, 26934134, 10237677, -3173717, -605053, 24199304, 3795095, 7592688, -14992079)),
				new ge_precomp(FieldElement.New(21594432, -14964228, 17466408, -4077222, 32537084, 2739898, 6407723, 12018833, -28256052, 4298412), FieldElement.New(-20650503, -11961496, -27236275, 570498, 3767144, -1717540, 13891942, -1569194, 13717174, 10805743), FieldElement.New(-14676630, -15644296, 15287174, 11927123, 24177847, -8175568, -796431, 14860609, -26938930, -5863836))
			},
			new ge_precomp[8]
			{
				new ge_precomp(FieldElement.New(12962541, 5311799, -10060768, 11658280, 18855286, -7954201, 13286263, -12808704, -4381056, 9882022), FieldElement.New(18512079, 11319350, -20123124, 15090309, 18818594, 5271736, -22727904, 3666879, -23967430, -3299429), FieldElement.New(-6789020, -3146043, 16192429, 13241070, 15898607, -14206114, -10084880, -6661110, -2403099, 5276065)),
				new ge_precomp(FieldElement.New(30169808, -5317648, 26306206, -11750859, 27814964, 7069267, 7152851, 3684982, 1449224, 13082861), FieldElement.New(10342826, 3098505, 2119311, 193222, 25702612, 12233820, 23697382, 15056736, -21016438, -8202000), FieldElement.New(-33150110, 3261608, 22745853, 7948688, 19370557, -15177665, -26171976, 6482814, -10300080, -11060101)),
				new ge_precomp(FieldElement.New(32869458, -5408545, 25609743, 15678670, -10687769, -15471071, 26112421, 2521008, -22664288, 6904815), FieldElement.New(29506923, 4457497, 3377935, -9796444, -30510046, 12935080, 1561737, 3841096, -29003639, -6657642), FieldElement.New(10340844, -6630377, -18656632, -2278430, 12621151, -13339055, 30878497, -11824370, -25584551, 5181966)),
				new ge_precomp(FieldElement.New(25940115, -12658025, 17324188, -10307374, -8671468, 15029094, 24396252, -16450922, -2322852, -12388574), FieldElement.New(-21765684, 9916823, -1300409, 4079498, -1028346, 11909559, 1782390, 12641087, 20603771, -6561742), FieldElement.New(-18882287, -11673380, 24849422, 11501709, 13161720, -4768874, 1925523, 11914390, 4662781, 7820689)),
				new ge_precomp(FieldElement.New(12241050, -425982, 8132691, 9393934, 32846760, -1599620, 29749456, 12172924, 16136752, 15264020), FieldElement.New(-10349955, -14680563, -8211979, 2330220, -17662549, -14545780, 10658213, 6671822, 19012087, 3772772), FieldElement.New(3753511, -3421066, 10617074, 2028709, 14841030, -6721664, 28718732, -15762884, 20527771, 12988982)),
				new ge_precomp(FieldElement.New(-14822485, -5797269, -3707987, 12689773, -898983, -10914866, -24183046, -10564943, 3299665, -12424953), FieldElement.New(-16777703, -15253301, -9642417, 4978983, 3308785, 8755439, 6943197, 6461331, -25583147, 8991218), FieldElement.New(-17226263, 1816362, -1673288, -6086439, 31783888, -8175991, -32948145, 7417950, -30242287, 1507265)),
				new ge_precomp(FieldElement.New(29692663, 6829891, -10498800, 4334896, 20945975, -11906496, -28887608, 8209391, 14606362, -10647073), FieldElement.New(-3481570, 8707081, 32188102, 5672294, 22096700, 1711240, -33020695, 9761487, 4170404, -2085325), FieldElement.New(-11587470, 14855945, -4127778, -1531857, -26649089, 15084046, 22186522, 16002000, -14276837, -8400798)),
				new ge_precomp(FieldElement.New(-4811456, 13761029, -31703877, -2483919, -3312471, 7869047, -7113572, -9620092, 13240845, 10965870), FieldElement.New(-7742563, -8256762, -14768334, -13656260, -23232383, 12387166, 4498947, 14147411, 29514390, 4302863), FieldElement.New(-13413405, -12407859, 20757302, -13801832, 14785143, 8976368, -5061276, -2144373, 17846988, -13971927))
			},
			new ge_precomp[8]
			{
				new ge_precomp(FieldElement.New(-2244452, -754728, -4597030, -1066309, -6247172, 1455299, -21647728, -9214789, -5222701, 12650267), FieldElement.New(-9906797, -16070310, 21134160, 12198166, -27064575, 708126, 387813, 13770293, -19134326, 10958663), FieldElement.New(22470984, 12369526, 23446014, -5441109, -21520802, -9698723, -11772496, -11574455, -25083830, 4271862)),
				new ge_precomp(FieldElement.New(-25169565, -10053642, -19909332, 15361595, -5984358, 2159192, 75375, -4278529, -32526221, 8469673), FieldElement.New(15854970, 4148314, -8893890, 7259002, 11666551, 13824734, -30531198, 2697372, 24154791, -9460943), FieldElement.New(15446137, -15806644, 29759747, 14019369, 30811221, -9610191, -31582008, 12840104, 24913809, 9815020)),
				new ge_precomp(FieldElement.New(-4709286, -5614269, -31841498, -12288893, -14443537, 10799414, -9103676, 13438769, 18735128, 9466238), FieldElement.New(11933045, 9281483, 5081055, -5183824, -2628162, -4905629, -7727821, -10896103, -22728655, 16199064), FieldElement.New(14576810, 379472, -26786533, -8317236, -29426508, -10812974, -102766, 1876699, 30801119, 2164795)),
				new ge_precomp(FieldElement.New(15995086, 3199873, 13672555, 13712240, -19378835, -4647646, -13081610, -15496269, -13492807, 1268052), FieldElement.New(-10290614, -3659039, -3286592, 10948818, 23037027, 3794475, -3470338, -12600221, -17055369, 3565904), FieldElement.New(29210088, -9419337, -5919792, -4952785, 10834811, -13327726, -16512102, -10820713, -27162222, -14030531)),
				new ge_precomp(FieldElement.New(-13161890, 15508588, 16663704, -8156150, -28349942, 9019123, -29183421, -3769423, 2244111, -14001979), FieldElement.New(-5152875, -3800936, -9306475, -6071583, 16243069, 14684434, -25673088, -16180800, 13491506, 4641841), FieldElement.New(10813417, 643330, -19188515, -728916, 30292062, -16600078, 27548447, -7721242, 14476989, -12767431)),
				new ge_precomp(FieldElement.New(10292079, 9984945, 6481436, 8279905, -7251514, 7032743, 27282937, -1644259, -27912810, 12651324), FieldElement.New(-31185513, -813383, 22271204, 11835308, 10201545, 15351028, 17099662, 3988035, 21721536, -3148940), FieldElement.New(10202177, -6545839, -31373232, -9574638, -32150642, -8119683, -12906320, 3852694, 13216206, 14842320)),
				new ge_precomp(FieldElement.New(-15815640, -10601066, -6538952, -7258995, -6984659, -6581778, -31500847, 13765824, -27434397, 9900184), FieldElement.New(14465505, -13833331, -32133984, -14738873, -27443187, 12990492, 33046193, 15796406, -7051866, -8040114), FieldElement.New(30924417, -8279620, 6359016, -12816335, 16508377, 9071735, -25488601, 15413635, 9524356, -7018878)),
				new ge_precomp(FieldElement.New(12274201, -13175547, 32627641, -1785326, 6736625, 13267305, 5237659, -5109483, 15663516, 4035784), FieldElement.New(-2951309, 8903985, 17349946, 601635, -16432815, -4612556, -13732739, -15889334, -22258478, 4659091), FieldElement.New(-16916263, -4952973, -30393711, -15158821, 20774812, 15897498, 5736189, 15026997, -2178256, -13455585))
			},
			new ge_precomp[8]
			{
				new ge_precomp(FieldElement.New(-8858980, -2219056, 28571666, -10155518, -474467, -10105698, -3801496, 278095, 23440562, -290208), FieldElement.New(10226241, -5928702, 15139956, 120818, -14867693, 5218603, 32937275, 11551483, -16571960, -7442864), FieldElement.New(17932739, -12437276, -24039557, 10749060, 11316803, 7535897, 22503767, 5561594, -3646624, 3898661)),
				new ge_precomp(FieldElement.New(7749907, -969567, -16339731, -16464, -25018111, 15122143, -1573531, 7152530, 21831162, 1245233), FieldElement.New(26958459, -14658026, 4314586, 8346991, -5677764, 11960072, -32589295, -620035, -30402091, -16716212), FieldElement.New(-12165896, 9166947, 33491384, 13673479, 29787085, 13096535, 6280834, 14587357, -22338025, 13987525)),
				new ge_precomp(FieldElement.New(-24349909, 7778775, 21116000, 15572597, -4833266, -5357778, -4300898, -5124639, -7469781, -2858068), FieldElement.New(9681908, -6737123, -31951644, 13591838, -6883821, 386950, 31622781, 6439245, -14581012, 4091397), FieldElement.New(-8426427, 1470727, -28109679, -1596990, 3978627, -5123623, -19622683, 12092163, 29077877, -14741988)),
				new ge_precomp(FieldElement.New(5269168, -6859726, -13230211, -8020715, 25932563, 1763552, -5606110, -5505881, -20017847, 2357889), FieldElement.New(32264008, -15407652, -5387735, -1160093, -2091322, -3946900, 23104804, -12869908, 5727338, 189038), FieldElement.New(14609123, -8954470, -6000566, -16622781, -14577387, -7743898, -26745169, 10942115, -25888931, -14884697)),
				new ge_precomp(FieldElement.New(20513500, 5557931, -15604613, 7829531, 26413943, -2019404, -21378968, 7471781, 13913677, -5137875), FieldElement.New(-25574376, 11967826, 29233242, 12948236, -6754465, 4713227, -8940970, 14059180, 12878652, 8511905), FieldElement.New(-25656801, 3393631, -2955415, -7075526, -2250709, 9366908, -30223418, 6812974, 5568676, -3127656)),
				new ge_precomp(FieldElement.New(11630004, 12144454, 2116339, 13606037, 27378885, 15676917, -17408753, -13504373, -14395196, 8070818), FieldElement.New(27117696, -10007378, -31282771, -5570088, 1127282, 12772488, -29845906, 10483306, -11552749, -1028714), FieldElement.New(10637467, -5688064, 5674781, 1072708, -26343588, -6982302, -1683975, 9177853, -27493162, 15431203)),
				new ge_precomp(FieldElement.New(20525145, 10892566, -12742472, 12779443, -29493034, 16150075, -28240519, 14943142, -15056790, -7935931), FieldElement.New(-30024462, 5626926, -551567, -9981087, 753598, 11981191, 25244767, -3239766, -3356550, 9594024), FieldElement.New(-23752644, 2636870, -5163910, -10103818, 585134, 7877383, 11345683, -6492290, 13352335, -10977084)),
				new ge_precomp(FieldElement.New(-1931799, -5407458, 3304649, -12884869, 17015806, -4877091, -29783850, -7752482, -13215537, -319204), FieldElement.New(20239939, 6607058, 6203985, 3483793, -18386976, -779229, -20723742, 15077870, -22750759, 14523817), FieldElement.New(27406042, -6041657, 27423596, -4497394, 4996214, 10002360, -28842031, -4545494, -30172742, -4805667))
			},
			new ge_precomp[8]
			{
				new ge_precomp(FieldElement.New(11374242, 12660715, 17861383, -12540833, 10935568, 1099227, -13886076, -9091740, -27727044, 11358504), FieldElement.New(-12730809, 10311867, 1510375, 10778093, -2119455, -9145702, 32676003, 11149336, -26123651, 4985768), FieldElement.New(-19096303, 341147, -6197485, -239033, 15756973, -8796662, -983043, 13794114, -19414307, -15621255)),
				new ge_precomp(FieldElement.New(6490081, 11940286, 25495923, -7726360, 8668373, -8751316, 3367603, 6970005, -1691065, -9004790), FieldElement.New(1656497, 13457317, 15370807, 6364910, 13605745, 8362338, -19174622, -5475723, -16796596, -5031438), FieldElement.New(-22273315, -13524424, -64685, -4334223, -18605636, -10921968, -20571065, -7007978, -99853, -10237333)),
				new ge_precomp(FieldElement.New(17747465, 10039260, 19368299, -4050591, -20630635, -16041286, 31992683, -15857976, -29260363, -5511971), FieldElement.New(31932027, -4986141, -19612382, 16366580, 22023614, 88450, 11371999, -3744247, 4882242, -10626905), FieldElement.New(29796507, 37186, 19818052, 10115756, -11829032, 3352736, 18551198, 3272828, -5190932, -4162409)),
				new ge_precomp(FieldElement.New(12501286, 4044383, -8612957, -13392385, -32430052, 5136599, -19230378, -3529697, 330070, -3659409), FieldElement.New(6384877, 2899513, 17807477, 7663917, -2358888, 12363165, 25366522, -8573892, -271295, 12071499), FieldElement.New(-8365515, -4042521, 25133448, -4517355, -6211027, 2265927, -32769618, 1936675, -5159697, 3829363)),
				new ge_precomp(FieldElement.New(28425966, -5835433, -577090, -4697198, -14217555, 6870930, 7921550, -6567787, 26333140, 14267664), FieldElement.New(-11067219, 11871231, 27385719, -10559544, -4585914, -11189312, 10004786, -8709488, -21761224, 8930324), FieldElement.New(-21197785, -16396035, 25654216, -1725397, 12282012, 11008919, 1541940, 4757911, -26491501, -16408940)),
				new ge_precomp(FieldElement.New(13537262, -7759490, -20604840, 10961927, -5922820, -13218065, -13156584, 6217254, -15943699, 13814990), FieldElement.New(-17422573, 15157790, 18705543, 29619, 24409717, -260476, 27361681, 9257833, -1956526, -1776914), FieldElement.New(-25045300, -10191966, 15366585, 15166509, -13105086, 8423556, -29171540, 12361135, -18685978, 4578290)),
				new ge_precomp(FieldElement.New(24579768, 3711570, 1342322, -11180126, -27005135, 14124956, -22544529, 14074919, 21964432, 8235257), FieldElement.New(-6528613, -2411497, 9442966, -5925588, 12025640, -1487420, -2981514, -1669206, 13006806, 2355433), FieldElement.New(-16304899, -13605259, -6632427, -5142349, 16974359, -10911083, 27202044, 1719366, 1141648, -12796236)),
				new ge_precomp(FieldElement.New(-12863944, -13219986, -8318266, -11018091, -6810145, -4843894, 13475066, -3133972, 32674895, 13715045), FieldElement.New(11423335, -5468059, 32344216, 8962751, 24989809, 9241752, -13265253, 16086212, -28740881, -15642093), FieldElement.New(-1409668, 12530728, -6368726, 10847387, 19531186, -14132160, -11709148, 7791794, -27245943, 4383347))
			},
			new ge_precomp[8]
			{
				new ge_precomp(FieldElement.New(-28970898, 5271447, -1266009, -9736989, -12455236, 16732599, -4862407, -4906449, 27193557, 6245191), FieldElement.New(-15193956, 5362278, -1783893, 2695834, 4960227, 12840725, 23061898, 3260492, 22510453, 8577507), FieldElement.New(-12632451, 11257346, -32692994, 13548177, -721004, 10879011, 31168030, 13952092, -29571492, -3635906)),
				new ge_precomp(FieldElement.New(3877321, -9572739, 32416692, 5405324, -11004407, -13656635, 3759769, 11935320, 5611860, 8164018), FieldElement.New(-16275802, 14667797, 15906460, 12155291, -22111149, -9039718, 32003002, -8832289, 5773085, -8422109), FieldElement.New(-23788118, -8254300, 1950875, 8937633, 18686727, 16459170, -905725, 12376320, 31632953, 190926)),
				new ge_precomp(FieldElement.New(-24593607, -16138885, -8423991, 13378746, 14162407, 6901328, -8288749, 4508564, -25341555, -3627528), FieldElement.New(8884438, -5884009, 6023974, 10104341, -6881569, -4941533, 18722941, -14786005, -1672488, 827625), FieldElement.New(-32720583, -16289296, -32503547, 7101210, 13354605, 2659080, -1800575, -14108036, -24878478, 1541286)),
				new ge_precomp(FieldElement.New(2901347, -1117687, 3880376, -10059388, -17620940, -3612781, -21802117, -3567481, 20456845, -1885033), FieldElement.New(27019610, 12299467, -13658288, -1603234, -12861660, -4861471, -19540150, -5016058, 29439641, 15138866), FieldElement.New(21536104, -6626420, -32447818, -10690208, -22408077, 5175814, -5420040, -16361163, 7779328, 109896)),
				new ge_precomp(FieldElement.New(30279744, 14648750, -8044871, 6425558, 13639621, -743509, 28698390, 12180118, 23177719, -554075), FieldElement.New(26572847, 3405927, -31701700, 12890905, -19265668, 5335866, -6493768, 2378492, 4439158, -13279347), FieldElement.New(-22716706, 3489070, -9225266, -332753, 18875722, -1140095, 14819434, -12731527, -17717757, -5461437)),
				new ge_precomp(FieldElement.New(-5056483, 16566551, 15953661, 3767752, -10436499, 15627060, -820954, 2177225, 8550082, -15114165), FieldElement.New(-18473302, 16596775, -381660, 15663611, 22860960, 15585581, -27844109, -3582739, -23260460, -8428588), FieldElement.New(-32480551, 15707275, -8205912, -5652081, 29464558, 2713815, -22725137, 15860482, -21902570, 1494193)),
				new ge_precomp(FieldElement.New(-19562091, -14087393, -25583872, -9299552, 13127842, 759709, 21923482, 16529112, 8742704, 12967017), FieldElement.New(-28464899, 1553205, 32536856, -10473729, -24691605, -406174, -8914625, -2933896, -29903758, 15553883), FieldElement.New(21877909, 3230008, 9881174, 10539357, -4797115, 2841332, 11543572, 14513274, 19375923, -12647961)),
				new ge_precomp(FieldElement.New(8832269, -14495485, 13253511, 5137575, 5037871, 4078777, 24880818, -6222716, 2862653, 9455043), FieldElement.New(29306751, 5123106, 20245049, -14149889, 9592566, 8447059, -2077124, -2990080, 15511449, 4789663), FieldElement.New(-20679756, 7004547, 8824831, -9434977, -4045704, -3750736, -5754762, 108893, 23513200, 16652362))
			},
			new ge_precomp[8]
			{
				new ge_precomp(FieldElement.New(-33256173, 4144782, -4476029, -6579123, 10770039, -7155542, -6650416, -12936300, -18319198, 10212860), FieldElement.New(2756081, 8598110, 7383731, -6859892, 22312759, -1105012, 21179801, 2600940, -9988298, -12506466), FieldElement.New(-24645692, 13317462, -30449259, -15653928, 21365574, -10869657, 11344424, 864440, -2499677, -16710063)),
				new ge_precomp(FieldElement.New(-26432803, 6148329, -17184412, -14474154, 18782929, -275997, -22561534, 211300, 2719757, 4940997), FieldElement.New(-1323882, 3911313, -6948744, 14759765, -30027150, 7851207, 21690126, 8518463, 26699843, 5276295), FieldElement.New(-13149873, -6429067, 9396249, 365013, 24703301, -10488939, 1321586, 149635, -15452774, 7159369)),
				new ge_precomp(FieldElement.New(9987780, -3404759, 17507962, 9505530, 9731535, -2165514, 22356009, 8312176, 22477218, -8403385), FieldElement.New(18155857, -16504990, 19744716, 9006923, 15154154, -10538976, 24256460, -4864995, -22548173, 9334109), FieldElement.New(2986088, -4911893, 10776628, -3473844, 10620590, -7083203, -21413845, 14253545, -22587149, 536906)),
				new ge_precomp(FieldElement.New(4377756, 8115836, 24567078, 15495314, 11625074, 13064599, 7390551, 10589625, 10838060, -15420424), FieldElement.New(-19342404, 867880, 9277171, -3218459, -14431572, -1986443, 19295826, -15796950, 6378260, 699185), FieldElement.New(7895026, 4057113, -7081772, -13077756, -17886831, -323126, -716039, 15693155, -5045064, -13373962)),
				new ge_precomp(FieldElement.New(-7737563, -5869402, -14566319, -7406919, 11385654, 13201616, 31730678, -10962840, -3918636, -9669325), FieldElement.New(10188286, -15770834, -7336361, 13427543, 22223443, 14896287, 30743455, 7116568, -21786507, 5427593), FieldElement.New(696102, 13206899, 27047647, -10632082, 15285305, -9853179, 10798490, -4578720, 19236243, 12477404)),
				new ge_precomp(FieldElement.New(-11229439, 11243796, -17054270, -8040865, -788228, -8167967, -3897669, 11180504, -23169516, 7733644), FieldElement.New(17800790, -14036179, -27000429, -11766671, 23887827, 3149671, 23466177, -10538171, 10322027, 15313801), FieldElement.New(26246234, 11968874, 32263343, -5468728, 6830755, -13323031, -15794704, -101982, -24449242, 10890804)),
				new ge_precomp(FieldElement.New(-31365647, 10271363, -12660625, -6267268, 16690207, -13062544, -14982212, 16484931, 25180797, -5334884), FieldElement.New(-586574, 10376444, -32586414, -11286356, 19801893, 10997610, 2276632, 9482883, 316878, 13820577), FieldElement.New(-9882808, -4510367, -2115506, 16457136, -11100081, 11674996, 30756178, -7515054, 30696930, -3712849)),
				new ge_precomp(FieldElement.New(32988917, -9603412, 12499366, 7910787, -10617257, -11931514, -7342816, -9985397, -32349517, 7392473), FieldElement.New(-8855661, 15927861, 9866406, -3649411, -2396914, -16655781, -30409476, -9134995, 25112947, -2926644), FieldElement.New(-2504044, -436966, 25621774, -5678772, 15085042, -5479877, -24884878, -13526194, 5537438, -13914319))
			},
			new ge_precomp[8]
			{
				new ge_precomp(FieldElement.New(-11225584, 2320285, -9584280, 10149187, -33444663, 5808648, -14876251, -1729667, 31234590, 6090599), FieldElement.New(-9633316, 116426, 26083934, 2897444, -6364437, -2688086, 609721, 15878753, -6970405, -9034768), FieldElement.New(-27757857, 247744, -15194774, -9002551, 23288161, -10011936, -23869595, 6503646, 20650474, 1804084)),
				new ge_precomp(FieldElement.New(-27589786, 15456424, 8972517, 8469608, 15640622, 4439847, 3121995, -10329713, 27842616, -202328), FieldElement.New(-15306973, 2839644, 22530074, 10026331, 4602058, 5048462, 28248656, 5031932, -11375082, 12714369), FieldElement.New(20807691, -7270825, 29286141, 11421711, -27876523, -13868230, -21227475, 1035546, -19733229, 12796920)),
				new ge_precomp(FieldElement.New(12076899, -14301286, -8785001, -11848922, -25012791, 16400684, -17591495, -12899438, 3480665, -15182815), FieldElement.New(-32361549, 5457597, 28548107, 7833186, 7303070, -11953545, -24363064, -15921875, -33374054, 2771025), FieldElement.New(-21389266, 421932, 26597266, 6860826, 22486084, -6737172, -17137485, -4210226, -24552282, 15673397)),
				new ge_precomp(FieldElement.New(-20184622, 2338216, 19788685, -9620956, -4001265, -8740893, -20271184, 4733254, 3727144, -12934448), FieldElement.New(6120119, 814863, -11794402, -622716, 6812205, -15747771, 2019594, 7975683, 31123697, -10958981), FieldElement.New(30069250, -11435332, 30434654, 2958439, 18399564, -976289, 12296869, 9204260, -16432438, 9648165)),
				new ge_precomp(FieldElement.New(32705432, -1550977, 30705658, 7451065, -11805606, 9631813, 3305266, 5248604, -26008332, -11377501), FieldElement.New(17219865, 2375039, -31570947, -5575615, -19459679, 9219903, 294711, 15298639, 2662509, -16297073), FieldElement.New(-1172927, -7558695, -4366770, -4287744, -21346413, -8434326, 32087529, -1222777, 32247248, -14389861)),
				new ge_precomp(FieldElement.New(14312628, 1221556, 17395390, -8700143, -4945741, -8684635, -28197744, -9637817, -16027623, -13378845), FieldElement.New(-1428825, -9678990, -9235681, 6549687, -7383069, -468664, 23046502, 9803137, 17597934, 2346211), FieldElement.New(18510800, 15337574, 26171504, 981392, -22241552, 7827556, -23491134, -11323352, 3059833, -11782870)),
				new ge_precomp(FieldElement.New(10141598, 6082907, 17829293, -1947643, 9830092, 13613136, -25556636, -5544586, -33502212, 3592096), FieldElement.New(33114168, -15889352, -26525686, -13343397, 33076705, 8716171, 1151462, 1521897, -982665, -6837803), FieldElement.New(-32939165, -4255815, 23947181, -324178, -33072974, -12305637, -16637686, 3891704, 26353178, 693168)),
				new ge_precomp(FieldElement.New(30374239, 1595580, -16884039, 13186931, 4600344, 406904, 9585294, -400668, 31375464, 14369965), FieldElement.New(-14370654, -7772529, 1510301, 6434173, -18784789, -6262728, 32732230, -13108839, 17901441, 16011505), FieldElement.New(18171223, -11934626, -12500402, 15197122, -11038147, -15230035, -19172240, -16046376, 8764035, 12309598))
			},
			new ge_precomp[8]
			{
				new ge_precomp(FieldElement.New(5975908, -5243188, -19459362, -9681747, -11541277, 14015782, -23665757, 1228319, 17544096, -10593782), FieldElement.New(5811932, -1715293, 3442887, -2269310, -18367348, -8359541, -18044043, -15410127, -5565381, 12348900), FieldElement.New(-31399660, 11407555, 25755363, 6891399, -3256938, 14872274, -24849353, 8141295, -10632534, -585479)),
				new ge_precomp(FieldElement.New(-12675304, 694026, -5076145, 13300344, 14015258, -14451394, -9698672, -11329050, 30944593, 1130208), FieldElement.New(8247766, -6710942, -26562381, -7709309, -14401939, -14648910, 4652152, 2488540, 23550156, -271232), FieldElement.New(17294316, -3788438, 7026748, 15626851, 22990044, 113481, 2267737, -5908146, -408818, -137719)),
				new ge_precomp(FieldElement.New(16091085, -16253926, 18599252, 7340678, 2137637, -1221657, -3364161, 14550936, 3260525, -7166271), FieldElement.New(-4910104, -13332887, 18550887, 10864893, -16459325, -7291596, -23028869, -13204905, -12748722, 2701326), FieldElement.New(-8574695, 16099415, 4629974, -16340524, -20786213, -6005432, -10018363, 9276971, 11329923, 1862132)),
				new ge_precomp(FieldElement.New(14763076, -15903608, -30918270, 3689867, 3511892, 10313526, -21951088, 12219231, -9037963, -940300), FieldElement.New(8894987, -3446094, 6150753, 3013931, 301220, 15693451, -31981216, -2909717, -15438168, 11595570), FieldElement.New(15214962, 3537601, -26238722, -14058872, 4418657, -15230761, 13947276, 10730794, -13489462, -4363670)),
				new ge_precomp(FieldElement.New(-2538306, 7682793, 32759013, 263109, -29984731, -7955452, -22332124, -10188635, 977108, 699994), FieldElement.New(-12466472, 4195084, -9211532, 550904, -15565337, 12917920, 19118110, -439841, -30534533, -14337913), FieldElement.New(31788461, -14507657, 4799989, 7372237, 8808585, -14747943, 9408237, -10051775, 12493932, -5409317)),
				new ge_precomp(FieldElement.New(-25680606, 5260744, -19235809, -6284470, -3695942, 16566087, 27218280, 2607121, 29375955, 6024730), FieldElement.New(842132, -2794693, -4763381, -8722815, 26332018, -12405641, 11831880, 6985184, -9940361, 2854096), FieldElement.New(-4847262, -7969331, 2516242, -5847713, 9695691, -7221186, 16512645, 960770, 12121869, 16648078)),
				new ge_precomp(FieldElement.New(-15218652, 14667096, -13336229, 2013717, 30598287, -464137, -31504922, -7882064, 20237806, 2838411), FieldElement.New(-19288047, 4453152, 15298546, -16178388, 22115043, -15972604, 12544294, -13470457, 1068881, -12499905), FieldElement.New(-9558883, -16518835, 33238498, 13506958, 30505848, -1114596, -8486907, -2630053, 12521378, 4845654)),
				new ge_precomp(FieldElement.New(-28198521, 10744108, -2958380, 10199664, 7759311, -13088600, 3409348, -873400, -6482306, -12885870), FieldElement.New(-23561822, 6230156, -20382013, 10655314, -24040585, -11621172, 10477734, -1240216, -3113227, 13974498), FieldElement.New(12966261, 15550616, -32038948, -1615346, 21025980, -629444, 5642325, 7188737, 18895762, 12629579))
			},
			new ge_precomp[8]
			{
				new ge_precomp(FieldElement.New(14741879, -14946887, 22177208, -11721237, 1279741, 8058600, 11758140, 789443, 32195181, 3895677), FieldElement.New(10758205, 15755439, -4509950, 9243698, -4879422, 6879879, -2204575, -3566119, -8982069, 4429647), FieldElement.New(-2453894, 15725973, -20436342, -10410672, -5803908, -11040220, -7135870, -11642895, 18047436, -15281743)),
				new ge_precomp(FieldElement.New(-25173001, -11307165, 29759956, 11776784, -22262383, -15820455, 10993114, -12850837, -17620701, -9408468), FieldElement.New(21987233, 700364, -24505048, 14972008, -7774265, -5718395, 32155026, 2581431, -29958985, 8773375), FieldElement.New(-25568350, 454463, -13211935, 16126715, 25240068, 8594567, 20656846, 12017935, -7874389, -13920155)),
				new ge_precomp(FieldElement.New(6028182, 6263078, -31011806, -11301710, -818919, 2461772, -31841174, -5468042, -1721788, -2776725), FieldElement.New(-12278994, 16624277, 987579, -5922598, 32908203, 1248608, 7719845, -4166698, 28408820, 6816612), FieldElement.New(-10358094, -8237829, 19549651, -12169222, 22082623, 16147817, 20613181, 13982702, -10339570, 5067943)),
				new ge_precomp(FieldElement.New(-30505967, -3821767, 12074681, 13582412, -19877972, 2443951, -19719286, 12746132, 5331210, -10105944), FieldElement.New(30528811, 3601899, -1957090, 4619785, -27361822, -15436388, 24180793, -12570394, 27679908, -1648928), FieldElement.New(9402404, -13957065, 32834043, 10838634, -26580150, -13237195, 26653274, -8685565, 22611444, -12715406)),
				new ge_precomp(FieldElement.New(22190590, 1118029, 22736441, 15130463, -30460692, -5991321, 19189625, -4648942, 4854859, 6622139), FieldElement.New(-8310738, -2953450, -8262579, -3388049, -10401731, -271929, 13424426, -3567227, 26404409, 13001963), FieldElement.New(-31241838, -15415700, -2994250, 8939346, 11562230, -12840670, -26064365, -11621720, -15405155, 11020693)),
				new ge_precomp(FieldElement.New(1866042, -7949489, -7898649, -10301010, 12483315, 13477547, 3175636, -12424163, 28761762, 1406734), FieldElement.New(-448555, -1777666, 13018551, 3194501, -9580420, -11161737, 24760585, -4347088, 25577411, -13378680), FieldElement.New(-24290378, 4759345, -690653, -1852816, 2066747, 10693769, -29595790, 9884936, -9368926, 4745410)),
				new ge_precomp(FieldElement.New(-9141284, 6049714, -19531061, -4341411, -31260798, 9944276, -15462008, -11311852, 10931924, -11931931), FieldElement.New(-16561513, 14112680, -8012645, 4817318, -8040464, -11414606, -22853429, 10856641, -20470770, 13434654), FieldElement.New(22759489, -10073434, -16766264, -1871422, 13637442, -10168091, 1765144, -12654326, 28445307, -5364710)),
				new ge_precomp(FieldElement.New(29875063, 12493613, 2795536, -3786330, 1710620, 15181182, -10195717, -8788675, 9074234, 1167180), FieldElement.New(-26205683, 11014233, -9842651, -2635485, -26908120, 7532294, -18716888, -9535498, 3843903, 9367684), FieldElement.New(-10969595, -6403711, 9591134, 9582310, 11349256, 108879, 16235123, 8601684, -139197, 4242895))
			},
			new ge_precomp[8]
			{
				new ge_precomp(FieldElement.New(22092954, -13191123, -2042793, -11968512, 32186753, -11517388, -6574341, 2470660, -27417366, 16625501), FieldElement.New(-11057722, 3042016, 13770083, -9257922, 584236, -544855, -7770857, 2602725, -27351616, 14247413), FieldElement.New(6314175, -10264892, -32772502, 15957557, -10157730, 168750, -8618807, 14290061, 27108877, -1180880)),
				new ge_precomp(FieldElement.New(-8586597, -7170966, 13241782, 10960156, -32991015, -13794596, 33547976, -11058889, -27148451, 981874), FieldElement.New(22833440, 9293594, -32649448, -13618667, -9136966, 14756819, -22928859, -13970780, -10479804, -16197962), FieldElement.New(-7768587, 3326786, -28111797, 10783824, 19178761, 14905060, 22680049, 13906969, -15933690, 3797899)),
				new ge_precomp(FieldElement.New(21721356, -4212746, -12206123, 9310182, -3882239, -13653110, 23740224, -2709232, 20491983, -8042152), FieldElement.New(9209270, -15135055, -13256557, -6167798, -731016, 15289673, 25947805, 15286587, 30997318, -6703063), FieldElement.New(7392032, 16618386, 23946583, -8039892, -13265164, -1533858, -14197445, -2321576, 17649998, -250080)),
				new ge_precomp(FieldElement.New(-9301088, -14193827, 30609526, -3049543, -25175069, -1283752, -15241566, -9525724, -2233253, 7662146), FieldElement.New(-17558673, 1763594, -33114336, 15908610, -30040870, -12174295, 7335080, -8472199, -3174674, 3440183), FieldElement.New(-19889700, -5977008, -24111293, -9688870, 10799743, -16571957, 40450, -4431835, 4862400, 1133)),
				new ge_precomp(FieldElement.New(-32856209, -7873957, -5422389, 14860950, -16319031, 7956142, 7258061, 311861, -30594991, -7379421), FieldElement.New(-3773428, -1565936, 28985340, 7499440, 24445838, 9325937, 29727763, 16527196, 18278453, 15405622), FieldElement.New(-4381906, 8508652, -19898366, -3674424, -5984453, 15149970, -13313598, 843523, -21875062, 13626197)),
				new ge_precomp(FieldElement.New(2281448, -13487055, -10915418, -2609910, 1879358, 16164207, -10783882, 3953792, 13340839, 15928663), FieldElement.New(31727126, -7179855, -18437503, -8283652, 2875793, -16390330, -25269894, -7014826, -23452306, 5964753), FieldElement.New(4100420, -5959452, -17179337, 6017714, -18705837, 12227141, -26684835, 11344144, 2538215, -7570755)),
				new ge_precomp(FieldElement.New(-9433605, 6123113, 11159803, -2156608, 30016280, 14966241, -20474983, 1485421, -629256, -15958862), FieldElement.New(-26804558, 4260919, 11851389, 9658551, -32017107, 16367492, -20205425, -13191288, 11659922, -11115118), FieldElement.New(26180396, 10015009, -30844224, -8581293, 5418197, 9480663, 2231568, -10170080, 33100372, -1306171)),
				new ge_precomp(FieldElement.New(15121113, -5201871, -10389905, 15427821, -27509937, -15992507, 21670947, 4486675, -5931810, -14466380), FieldElement.New(16166486, -9483733, -11104130, 6023908, -31926798, -1364923, 2340060, -16254968, -10735770, -10039824), FieldElement.New(28042865, -3557089, -12126526, 12259706, -3717498, -6945899, 6766453, -8689599, 18036436, 5803270))
			},
			new ge_precomp[8]
			{
				new ge_precomp(FieldElement.New(-817581, 6763912, 11803561, 1585585, 10958447, -2671165, 23855391, 4598332, -6159431, -14117438), FieldElement.New(-31031306, -14256194, 17332029, -2383520, 31312682, -5967183, 696309, 50292, -20095739, 11763584), FieldElement.New(-594563, -2514283, -32234153, 12643980, 12650761, 14811489, 665117, -12613632, -19773211, -10713562)),
				new ge_precomp(FieldElement.New(30464590, -11262872, -4127476, -12734478, 19835327, -7105613, -24396175, 2075773, -17020157, 992471), FieldElement.New(18357185, -6994433, 7766382, 16342475, -29324918, 411174, 14578841, 8080033, -11574335, -10601610), FieldElement.New(19598397, 10334610, 12555054, 2555664, 18821899, -10339780, 21873263, 16014234, 26224780, 16452269)),
				new ge_precomp(FieldElement.New(-30223925, 5145196, 5944548, 16385966, 3976735, 2009897, -11377804, -7618186, -20533829, 3698650), FieldElement.New(14187449, 3448569, -10636236, -10810935, -22663880, -3433596, 7268410, -10890444, 27394301, 12015369), FieldElement.New(19695761, 16087646, 28032085, 12999827, 6817792, 11427614, 20244189, -1312777, -13259127, -3402461)),
				new ge_precomp(FieldElement.New(30860103, 12735208, -1888245, -4699734, -16974906, 2256940, -8166013, 12298312, -8550524, -10393462), FieldElement.New(-5719826, -11245325, -1910649, 15569035, 26642876, -7587760, -5789354, -15118654, -4976164, 12651793), FieldElement.New(-2848395, 9953421, 11531313, -5282879, 26895123, -12697089, -13118820, -16517902, 9768698, -2533218)),
				new ge_precomp(FieldElement.New(-24719459, 1894651, -287698, -4704085, 15348719, -8156530, 32767513, 12765450, 4940095, 10678226), FieldElement.New(18860224, 15980149, -18987240, -1562570, -26233012, -11071856, -7843882, 13944024, -24372348, 16582019), FieldElement.New(-15504260, 4970268, -29893044, 4175593, -20993212, -2199756, -11704054, 15444560, -11003761, 7989037)),
				new ge_precomp(FieldElement.New(31490452, 5568061, -2412803, 2182383, -32336847, 4531686, -32078269, 6200206, -19686113, -14800171), FieldElement.New(-17308668, -15879940, -31522777, -2831, -32887382, 16375549, 8680158, -16371713, 28550068, -6857132), FieldElement.New(-28126887, -5688091, 16837845, -1820458, -6850681, 12700016, -30039981, 4364038, 1155602, 5988841)),
				new ge_precomp(FieldElement.New(21890435, -13272907, -12624011, 12154349, -7831873, 15300496, 23148983, -4470481, 24618407, 8283181), FieldElement.New(-33136107, -10512751, 9975416, 6841041, -31559793, 16356536, 3070187, -7025928, 1466169, 10740210), FieldElement.New(-1509399, -15488185, -13503385, -10655916, 32799044, 909394, -13938903, -5779719, -32164649, -15327040)),
				new ge_precomp(FieldElement.New(3960823, -14267803, -28026090, -15918051, -19404858, 13146868, 15567327, 951507, -3260321, -573935), FieldElement.New(24740841, 5052253, -30094131, 8961361, 25877428, 6165135, -24368180, 14397372, -7380369, -6144105), FieldElement.New(-28888365, 3510803, -28103278, -1158478, -11238128, -10631454, -15441463, -14453128, -1625486, -6494814))
			},
			new ge_precomp[8]
			{
				new ge_precomp(FieldElement.New(793299, -9230478, 8836302, -6235707, -27360908, -2369593, 33152843, -4885251, -9906200, -621852), FieldElement.New(5666233, 525582, 20782575, -8038419, -24538499, 14657740, 16099374, 1468826, -6171428, -15186581), FieldElement.New(-4859255, -3779343, -2917758, -6748019, 7778750, 11688288, -30404353, -9871238, -1558923, -9863646)),
				new ge_precomp(FieldElement.New(10896332, -7719704, 824275, 472601, -19460308, 3009587, 25248958, 14783338, -30581476, -15757844), FieldElement.New(10566929, 12612572, -31944212, 11118703, -12633376, 12362879, 21752402, 8822496, 24003793, 14264025), FieldElement.New(27713862, -7355973, -11008240, 9227530, 27050101, 2504721, 23886875, -13117525, 13958495, -5732453)),
				new ge_precomp(FieldElement.New(-23481610, 4867226, -27247128, 3900521, 29838369, -8212291, -31889399, -10041781, 7340521, -15410068), FieldElement.New(4646514, -8011124, -22766023, -11532654, 23184553, 8566613, 31366726, -1381061, -15066784, -10375192), FieldElement.New(-17270517, 12723032, -16993061, 14878794, 21619651, -6197576, 27584817, 3093888, -8843694, 3849921)),
				new ge_precomp(FieldElement.New(-9064912, 2103172, 25561640, -15125738, -5239824, 9582958, 32477045, -9017955, 5002294, -15550259), FieldElement.New(-12057553, -11177906, 21115585, -13365155, 8808712, -12030708, 16489530, 13378448, -25845716, 12741426), FieldElement.New(-5946367, 10645103, -30911586, 15390284, -3286982, -7118677, 24306472, 15852464, 28834118, -7646072)),
				new ge_precomp(FieldElement.New(-17335748, -9107057, -24531279, 9434953, -8472084, -583362, -13090771, 455841, 20461858, 5491305), FieldElement.New(13669248, -16095482, -12481974, -10203039, -14569770, -11893198, -24995986, 11293807, -28588204, -9421832), FieldElement.New(28497928, 6272777, -33022994, 14470570, 8906179, -1225630, 18504674, -14165166, 29867745, -8795943)),
				new ge_precomp(FieldElement.New(-16207023, 13517196, -27799630, -13697798, 24009064, -6373891, -6367600, -13175392, 22853429, -4012011), FieldElement.New(24191378, 16712145, -13931797, 15217831, 14542237, 1646131, 18603514, -11037887, 12876623, -2112447), FieldElement.New(17902668, 4518229, -411702, -2829247, 26878217, 5258055, -12860753, 608397, 16031844, 3723494)),
				new ge_precomp(FieldElement.New(-28632773, 12763728, -20446446, 7577504, 33001348, -13017745, 17558842, -7872890, 23896954, -4314245), FieldElement.New(-20005381, -12011952, 31520464, 605201, 2543521, 5991821, -2945064, 7229064, -9919646, -8826859), FieldElement.New(28816045, 298879, -28165016, -15920938, 19000928, -1665890, -12680833, -2949325, -18051778, -2082915)),
				new ge_precomp(FieldElement.New(16000882, -344896, 3493092, -11447198, -29504595, -13159789, 12577740, 16041268, -19715240, 7847707), FieldElement.New(10151868, 10572098, 27312476, 7922682, 14825339, 4723128, -32855931, -6519018, -10020567, 3852848), FieldElement.New(-11430470, 15697596, -21121557, -4420647, 5386314, 15063598, 16514493, -15932110, 29330899, -15076224))
			},
			new ge_precomp[8]
			{
				new ge_precomp(FieldElement.New(-25499735, -4378794, -15222908, -6901211, 16615731, 2051784, 3303702, 15490, -27548796, 12314391), FieldElement.New(15683520, -6003043, 18109120, -9980648, 15337968, -5997823, -16717435, 15921866, 16103996, -3731215), FieldElement.New(-23169824, -10781249, 13588192, -1628807, -3798557, -1074929, -19273607, 5402699, -29815713, -9841101)),
				new ge_precomp(FieldElement.New(23190676, 2384583, -32714340, 3462154, -29903655, -1529132, -11266856, 8911517, -25205859, 2739713), FieldElement.New(21374101, -3554250, -33524649, 9874411, 15377179, 11831242, -33529904, 6134907, 4931255, 11987849), FieldElement.New(-7732, -2978858, -16223486, 7277597, 105524, -322051, -31480539, 13861388, -30076310, 10117930)),
				new ge_precomp(FieldElement.New(-29501170, -10744872, -26163768, 13051539, -25625564, 5089643, -6325503, 6704079, 12890019, 15728940), FieldElement.New(-21972360, -11771379, -951059, -4418840, 14704840, 2695116, 903376, -10428139, 12885167, 8311031), FieldElement.New(-17516482, 5352194, 10384213, -13811658, 7506451, 13453191, 26423267, 4384730, 1888765, -5435404)),
				new ge_precomp(FieldElement.New(-25817338, -3107312, -13494599, -3182506, 30896459, -13921729, -32251644, -12707869, -19464434, -3340243), FieldElement.New(-23607977, -2665774, -526091, 4651136, 5765089, 4618330, 6092245, 14845197, 17151279, -9854116), FieldElement.New(-24830458, -12733720, -15165978, 10367250, -29530908, -265356, 22825805, -7087279, -16866484, 16176525)),
				new ge_precomp(FieldElement.New(-23583256, 6564961, 20063689, 3798228, -4740178, 7359225, 2006182, -10363426, -28746253, -10197509), FieldElement.New(-10626600, -4486402, -13320562, -5125317, 3432136, -6393229, 23632037, -1940610, 32808310, 1099883), FieldElement.New(15030977, 5768825, -27451236, -2887299, -6427378, -15361371, -15277896, -6809350, 2051441, -15225865)),
				new ge_precomp(FieldElement.New(-3362323, -7239372, 7517890, 9824992, 23555850, 295369, 5148398, -14154188, -22686354, 16633660), FieldElement.New(4577086, -16752288, 13249841, -15304328, 19958763, -14537274, 18559670, -10759549, 8402478, -9864273), FieldElement.New(-28406330, -1051581, -26790155, -907698, -17212414, -11030789, 9453451, -14980072, 17983010, 9967138)),
				new ge_precomp(FieldElement.New(-25762494, 6524722, 26585488, 9969270, 24709298, 1220360, -1677990, 7806337, 17507396, 3651560), FieldElement.New(-10420457, -4118111, 14584639, 15971087, -15768321, 8861010, 26556809, -5574557, -18553322, -11357135), FieldElement.New(2839101, 14284142, 4029895, 3472686, 14402957, 12689363, -26642121, 8459447, -5605463, -7621941)),
				new ge_precomp(FieldElement.New(-4839289, -3535444, 9744961, 2871048, 25113978, 3187018, -25110813, -849066, 17258084, -7977739), FieldElement.New(18164541, -10595176, -17154882, -1542417, 19237078, -9745295, 23357533, -15217008, 26908270, 12150756), FieldElement.New(-30264870, -7647865, 5112249, -7036672, -1499807, -6974257, 43168, -5537701, -32302074, 16215819))
			},
			new ge_precomp[8]
			{
				new ge_precomp(FieldElement.New(-6898905, 9824394, -12304779, -4401089, -31397141, -6276835, 32574489, 12532905, -7503072, -8675347), FieldElement.New(-27343522, -16515468, -27151524, -10722951, 946346, 16291093, 254968, 7168080, 21676107, -1943028), FieldElement.New(21260961, -8424752, -16831886, -11920822, -23677961, 3968121, -3651949, -6215466, -3556191, -7913075)),
				new ge_precomp(FieldElement.New(16544754, 13250366, -16804428, 15546242, -4583003, 12757258, -2462308, -8680336, -18907032, -9662799), FieldElement.New(-2415239, -15577728, 18312303, 4964443, -15272530, -12653564, 26820651, 16690659, 25459437, -4564609), FieldElement.New(-25144690, 11425020, 28423002, -11020557, -6144921, -15826224, 9142795, -2391602, -6432418, -1644817)),
				new ge_precomp(FieldElement.New(-23104652, 6253476, 16964147, -3768872, -25113972, -12296437, -27457225, -16344658, 6335692, 7249989), FieldElement.New(-30333227, 13979675, 7503222, -12368314, -11956721, -4621693, -30272269, 2682242, 25993170, -12478523), FieldElement.New(4364628, 5930691, 32304656, -10044554, -8054781, 15091131, 22857016, -10598955, 31820368, 15075278)),
				new ge_precomp(FieldElement.New(31879134, -8918693, 17258761, 90626, -8041836, -4917709, 24162788, -9650886, -17970238, 12833045), FieldElement.New(19073683, 14851414, -24403169, -11860168, 7625278, 11091125, -19619190, 2074449, -9413939, 14905377), FieldElement.New(24483667, -11935567, -2518866, -11547418, -1553130, 15355506, -25282080, 9253129, 27628530, -7555480)),
				new ge_precomp(FieldElement.New(17597607, 8340603, 19355617, 552187, 26198470, -3176583, 4593324, -9157582, -14110875, 15297016), FieldElement.New(510886, 14337390, -31785257, 16638632, 6328095, 2713355, -20217417, -11864220, 8683221, 2921426), FieldElement.New(18606791, 11874196, 27155355, -5281482, -24031742, 6265446, -25178240, -1278924, 4674690, 13890525)),
				new ge_precomp(FieldElement.New(13609624, 13069022, -27372361, -13055908, 24360586, 9592974, 14977157, 9835105, 4389687, 288396), FieldElement.New(9922506, -519394, 13613107, 5883594, -18758345, -434263, -12304062, 8317628, 23388070, 16052080), FieldElement.New(12720016, 11937594, -31970060, -5028689, 26900120, 8561328, -20155687, -11632979, -14754271, -10812892)),
				new ge_precomp(FieldElement.New(15961858, 14150409, 26716931, -665832, -22794328, 13603569, 11829573, 7467844, -28822128, 929275), FieldElement.New(11038231, -11582396, -27310482, -7316562, -10498527, -16307831, -23479533, -9371869, -21393143, 2465074), FieldElement.New(20017163, -4323226, 27915242, 1529148, 12396362, 15675764, 13817261, -9658066, 2463391, -4622140)),
				new ge_precomp(FieldElement.New(-16358878, -12663911, -12065183, 4996454, -1256422, 1073572, 9583558, 12851107, 4003896, 12673717), FieldElement.New(-1731589, -15155870, -3262930, 16143082, 19294135, 13385325, 14741514, -9103726, 7903886, 2348101), FieldElement.New(24536016, -16515207, 12715592, -3862155, 1511293, 10047386, -3842346, -7129159, -28377538, 10048127))
			},
			new ge_precomp[8]
			{
				new ge_precomp(FieldElement.New(-12622226, -6204820, 30718825, 2591312, -10617028, 12192840, 18873298, -7297090, -32297756, 15221632), FieldElement.New(-26478122, -11103864, 11546244, -1852483, 9180880, 7656409, -21343950, 2095755, 29769758, 6593415), FieldElement.New(-31994208, -2907461, 4176912, 3264766, 12538965, -868111, 26312345, -6118678, 30958054, 8292160)),
				new ge_precomp(FieldElement.New(31429822, -13959116, 29173532, 15632448, 12174511, -2760094, 32808831, 3977186, 26143136, -3148876), FieldElement.New(22648901, 1402143, -22799984, 13746059, 7936347, 365344, -8668633, -1674433, -3758243, -2304625), FieldElement.New(-15491917, 8012313, -2514730, -12702462, -23965846, -10254029, -1612713, -1535569, -16664475, 8194478)),
				new ge_precomp(FieldElement.New(27338066, -7507420, -7414224, 10140405, -19026427, -6589889, 27277191, 8855376, 28572286, 3005164), FieldElement.New(26287124, 4821776, 25476601, -4145903, -3764513, -15788984, -18008582, 1182479, -26094821, -13079595), FieldElement.New(-7171154, 3178080, 23970071, 6201893, -17195577, -4489192, -21876275, -13982627, 32208683, -1198248)),
				new ge_precomp(FieldElement.New(-16657702, 2817643, -10286362, 14811298, 6024667, 13349505, -27315504, -10497842, -27672585, -11539858), FieldElement.New(15941029, -9405932, -21367050, 8062055, 31876073, -238629, -15278393, -1444429, 15397331, -4130193), FieldElement.New(8934485, -13485467, -23286397, -13423241, -32446090, 14047986, 31170398, -1441021, -27505566, 15087184)),
				new ge_precomp(FieldElement.New(-18357243, -2156491, 24524913, -16677868, 15520427, -6360776, -15502406, 11461896, 16788528, -5868942), FieldElement.New(-1947386, 16013773, 21750665, 3714552, -17401782, -16055433, -3770287, -10323320, 31322514, -11615635), FieldElement.New(21426655, -5650218, -13648287, -5347537, -28812189, -4920970, -18275391, -14621414, 13040862, -12112948)),
				new ge_precomp(FieldElement.New(11293895, 12478086, -27136401, 15083750, -29307421, 14748872, 14555558, -13417103, 1613711, 4896935), FieldElement.New(-25894883, 15323294, -8489791, -8057900, 25967126, -13425460, 2825960, -4897045, -23971776, -11267415), FieldElement.New(-15924766, -5229880, -17443532, 6410664, 3622847, 10243618, 20615400, 12405433, -23753030, -8436416)),
				new ge_precomp(FieldElement.New(-7091295, 12556208, -20191352, 9025187, -17072479, 4333801, 4378436, 2432030, 23097949, -566018), FieldElement.New(4565804, -16025654, 20084412, -7842817, 1724999, 189254, 24767264, 10103221, -18512313, 2424778), FieldElement.New(366633, -11976806, 8173090, -6890119, 30788634, 5745705, -7168678, 1344109, -3642553, 12412659)),
				new ge_precomp(FieldElement.New(-24001791, 7690286, 14929416, -168257, -32210835, -13412986, 24162697, -15326504, -3141501, 11179385), FieldElement.New(18289522, -14724954, 8056945, 16430056, -21729724, 7842514, -6001441, -1486897, -18684645, -11443503), FieldElement.New(476239, 6601091, -6152790, -9723375, 17503545, -4863900, 27672959, 13403813, 11052904, 5219329))
			},
			new ge_precomp[8]
			{
				new ge_precomp(FieldElement.New(20678546, -8375738, -32671898, 8849123, -5009758, 14574752, 31186971, -3973730, 9014762, -8579056), FieldElement.New(-13644050, -10350239, -15962508, 5075808, -1514661, -11534600, -33102500, 9160280, 8473550, -3256838), FieldElement.New(24900749, 14435722, 17209120, -15292541, -22592275, 9878983, -7689309, -16335821, -24568481, 11788948)),
				new ge_precomp(FieldElement.New(-3118155, -11395194, -13802089, 14797441, 9652448, -6845904, -20037437, 10410733, -24568470, -1458691), FieldElement.New(-15659161, 16736706, -22467150, 10215878, -9097177, 7563911, 11871841, -12505194, -18513325, 8464118), FieldElement.New(-23400612, 8348507, -14585951, -861714, -3950205, -6373419, 14325289, 8628612, 33313881, -8370517)),
				new ge_precomp(FieldElement.New(-20186973, -4967935, 22367356, 5271547, -1097117, -4788838, -24805667, -10236854, -8940735, -5818269), FieldElement.New(-6948785, -1795212, -32625683, -16021179, 32635414, -7374245, 15989197, -12838188, 28358192, -4253904), FieldElement.New(-23561781, -2799059, -32351682, -1661963, -9147719, 10429267, -16637684, 4072016, -5351664, 5596589)),
				new ge_precomp(FieldElement.New(-28236598, -3390048, 12312896, 6213178, 3117142, 16078565, 29266239, 2557221, 1768301, 15373193), FieldElement.New(-7243358, -3246960, -4593467, -7553353, -127927, -912245, -1090902, -4504991, -24660491, 3442910), FieldElement.New(-30210571, 5124043, 14181784, 8197961, 18964734, -11939093, 22597931, 7176455, -18585478, 13365930)),
				new ge_precomp(FieldElement.New(-7877390, -1499958, 8324673, 4690079, 6261860, 890446, 24538107, -8570186, -9689599, -3031667), FieldElement.New(25008904, -10771599, -4305031, -9638010, 16265036, 15721635, 683793, -11823784, 15723479, -15163481), FieldElement.New(-9660625, 12374379, -27006999, -7026148, -7724114, -12314514, 11879682, 5400171, 519526, -1235876)),
				new ge_precomp(FieldElement.New(22258397, -16332233, -7869817, 14613016, -22520255, -2950923, -20353881, 7315967, 16648397, 7605640), FieldElement.New(-8081308, -8464597, -8223311, 9719710, 19259459, -15348212, 23994942, -5281555, -9468848, 4763278), FieldElement.New(-21699244, 9220969, -15730624, 1084137, -25476107, -2852390, 31088447, -7764523, -11356529, 728112)),
				new ge_precomp(FieldElement.New(26047220, -11751471, -6900323, -16521798, 24092068, 9158119, -4273545, -12555558, -29365436, -5498272), FieldElement.New(17510331, -322857, 5854289, 8403524, 17133918, -3112612, -28111007, 12327945, 10750447, 10014012), FieldElement.New(-10312768, 3936952, 9156313, -8897683, 16498692, -994647, -27481051, -666732, 3424691, 7540221)),
				new ge_precomp(FieldElement.New(30322361, -6964110, 11361005, -4143317, 7433304, 4989748, -7071422, -16317219, -9244265, 15258046), FieldElement.New(13054562, -2779497, 19155474, 469045, -12482797, 4566042, 5631406, 2711395, 1062915, -5136345), FieldElement.New(-19240248, -11254599, -29509029, -7499965, -5835763, 13005411, -6066489, 12194497, 32960380, 1459310))
			},
			new ge_precomp[8]
			{
				new ge_precomp(FieldElement.New(19852034, 7027924, 23669353, 10020366, 8586503, -6657907, 394197, -6101885, 18638003, -11174937), FieldElement.New(31395534, 15098109, 26581030, 8030562, -16527914, -5007134, 9012486, -7584354, -6643087, -5442636), FieldElement.New(-9192165, -2347377, -1997099, 4529534, 25766844, 607986, -13222, 9677543, -32294889, -6456008)),
				new ge_precomp(FieldElement.New(-2444496, -149937, 29348902, 8186665, 1873760, 12489863, -30934579, -7839692, -7852844, -8138429), FieldElement.New(-15236356, -15433509, 7766470, 746860, 26346930, -10221762, -27333451, 10754588, -9431476, 5203576), FieldElement.New(31834314, 14135496, -770007, 5159118, 20917671, -16768096, -7467973, -7337524, 31809243, 7347066)),
				new ge_precomp(FieldElement.New(-9606723, -11874240, 20414459, 13033986, 13716524, -11691881, 19797970, -12211255, 15192876, -2087490), FieldElement.New(-12663563, -2181719, 1168162, -3804809, 26747877, -14138091, 10609330, 12694420, 33473243, -13382104), FieldElement.New(33184999, 11180355, 15832085, -11385430, -1633671, 225884, 15089336, -11023903, -6135662, 14480053)),
				new ge_precomp(FieldElement.New(31308717, -5619998, 31030840, -1897099, 15674547, -6582883, 5496208, 13685227, 27595050, 8737275), FieldElement.New(-20318852, -15150239, 10933843, -16178022, 8335352, -7546022, -31008351, -12610604, 26498114, 66511), FieldElement.New(22644454, -8761729, -16671776, 4884562, -3105614, -13559366, 30540766, -4286747, -13327787, -7515095)),
				new ge_precomp(FieldElement.New(-28017847, 9834845, 18617207, -2681312, -3401956, -13307506, 8205540, 13585437, -17127465, 15115439), FieldElement.New(23711543, -672915, 31206561, -8362711, 6164647, -9709987, -33535882, -1426096, 8236921, 16492939), FieldElement.New(-23910559, -13515526, -26299483, -4503841, 25005590, -7687270, 19574902, 10071562, 6708380, -6222424)),
				new ge_precomp(FieldElement.New(2101391, -4930054, 19702731, 2367575, -15427167, 1047675, 5301017, 9328700, 29955601, -11678310), FieldElement.New(3096359, 9271816, -21620864, -15521844, -14847996, -7592937, -25892142, -12635595, -9917575, 6216608), FieldElement.New(-32615849, 338663, -25195611, 2510422, -29213566, -13820213, 24822830, -6146567, -26767480, 7525079)),
				new ge_precomp(FieldElement.New(-23066649, -13985623, 16133487, -7896178, -3389565, 778788, -910336, -2782495, -19386633, 11994101), FieldElement.New(21691500, -13624626, -641331, -14367021, 3285881, -3483596, -25064666, 9718258, -7477437, 13381418), FieldElement.New(18445390, -4202236, 14979846, 11622458, -1727110, -3582980, 23111648, -6375247, 28535282, 15779576)),
				new ge_precomp(FieldElement.New(30098053, 3089662, -9234387, 16662135, -21306940, 11308411, -14068454, 12021730, 9955285, -16303356), FieldElement.New(9734894, -14576830, -7473633, -9138735, 2060392, 11313496, -18426029, 9924399, 20194861, 13380996), FieldElement.New(-26378102, -7965207, -22167821, 15789297, -18055342, -6168792, -1984914, 15707771, 26342023, 10146099))
			},
			new ge_precomp[8]
			{
				new ge_precomp(FieldElement.New(-26016874, -219943, 21339191, -41388, 19745256, -2878700, -29637280, 2227040, 21612326, -545728), FieldElement.New(-13077387, 1184228, 23562814, -5970442, -20351244, -6348714, 25764461, 12243797, -20856566, 11649658), FieldElement.New(-10031494, 11262626, 27384172, 2271902, 26947504, -15997771, 39944, 6114064, 33514190, 2333242)),
				new ge_precomp(FieldElement.New(-21433588, -12421821, 8119782, 7219913, -21830522, -9016134, -6679750, -12670638, 24350578, -13450001), FieldElement.New(-4116307, -11271533, -23886186, 4843615, -30088339, 690623, -31536088, -10406836, 8317860, 12352766), FieldElement.New(18200138, -14475911, -33087759, -2696619, -23702521, -9102511, -23552096, -2287550, 20712163, 6719373)),
				new ge_precomp(FieldElement.New(26656208, 6075253, -7858556, 1886072, -28344043, 4262326, 11117530, -3763210, 26224235, -3297458), FieldElement.New(-17168938, -14854097, -3395676, -16369877, -19954045, 14050420, 21728352, 9493610, 18620611, -16428628), FieldElement.New(-13323321, 13325349, 11432106, 5964811, 18609221, 6062965, -5269471, -9725556, -30701573, -16479657)),
				new ge_precomp(FieldElement.New(-23860538, -11233159, 26961357, 1640861, -32413112, -16737940, 12248509, -5240639, 13735342, 1934062), FieldElement.New(25089769, 6742589, 17081145, -13406266, 21909293, -16067981, -15136294, -3765346, -21277997, 5473616), FieldElement.New(31883677, -7961101, 1083432, -11572403, 22828471, 13290673, -7125085, 12469656, 29111212, -5451014)),
				new ge_precomp(FieldElement.New(24244947, -15050407, -26262976, 2791540, -14997599, 16666678, 24367466, 6388839, -10295587, 452383), FieldElement.New(-25640782, -3417841, 5217916, 16224624, 19987036, -4082269, -24236251, -5915248, 15766062, 8407814), FieldElement.New(-20406999, 13990231, 15495425, 16395525, 5377168, 15166495, -8917023, -4388953, -8067909, 2276718)),
				new ge_precomp(FieldElement.New(30157918, 12924066, -17712050, 9245753, 19895028, 3368142, -23827587, 5096219, 22740376, -7303417), FieldElement.New(2041139, -14256350, 7783687, 13876377, -25946985, -13352459, 24051124, 13742383, -15637599, 13295222), FieldElement.New(33338237, -8505733, 12532113, 7977527, 9106186, -1715251, -17720195, -4612972, -4451357, -14669444)),
				new ge_precomp(FieldElement.New(-20045281, 5454097, -14346548, 6447146, 28862071, 1883651, -2469266, -4141880, 7770569, 9620597), FieldElement.New(23208068, 7979712, 33071466, 8149229, 1758231, -10834995, 30945528, -1694323, -33502340, -14767970), FieldElement.New(1439958, -16270480, -1079989, -793782, 4625402, 10647766, -5043801, 1220118, 30494170, -11440799)),
				new ge_precomp(FieldElement.New(-5037580, -13028295, -2970559, -3061767, 15640974, -6701666, -26739026, 926050, -1684339, -13333647), FieldElement.New(13908495, -3549272, 30919928, -6273825, -21521863, 7989039, 9021034, 9078865, 3353509, 4033511), FieldElement.New(-29663431, -15113610, 32259991, -344482, 24295849, -12912123, 23161163, 8839127, 27485041, 7356032))
			},
			new ge_precomp[8]
			{
				new ge_precomp(FieldElement.New(9661027, 705443, 11980065, -5370154, -1628543, 14661173, -6346142, 2625015, 28431036, -16771834), FieldElement.New(-23839233, -8311415, -25945511, 7480958, -17681669, -8354183, -22545972, 14150565, 15970762, 4099461), FieldElement.New(29262576, 16756590, 26350592, -8793563, 8529671, -11208050, 13617293, -9937143, 11465739, 8317062)),
				new ge_precomp(FieldElement.New(-25493081, -6962928, 32500200, -9419051, -23038724, -2302222, 14898637, 3848455, 20969334, -5157516), FieldElement.New(-20384450, -14347713, -18336405, 13884722, -33039454, 2842114, -21610826, -3649888, 11177095, 14989547), FieldElement.New(-24496721, -11716016, 16959896, 2278463, 12066309, 10137771, 13515641, 2581286, -28487508, 9930240)),
				new ge_precomp(FieldElement.New(-17751622, -2097826, 16544300, -13009300, -15914807, -14949081, 18345767, -13403753, 16291481, -5314038), FieldElement.New(-33229194, 2553288, 32678213, 9875984, 8534129, 6889387, -9676774, 6957617, 4368891, 9788741), FieldElement.New(16660756, 7281060, -10830758, 12911820, 20108584, -8101676, -21722536, -8613148, 16250552, -11111103)),
				new ge_precomp(FieldElement.New(-19765507, 2390526, -16551031, 14161980, 1905286, 6414907, 4689584, 10604807, -30190403, 4782747), FieldElement.New(-1354539, 14736941, -7367442, -13292886, 7710542, -14155590, -9981571, 4383045, 22546403, 437323), FieldElement.New(31665577, -12180464, -16186830, 1491339, -18368625, 3294682, 27343084, 2786261, -30633590, -14097016)),
				new ge_precomp(FieldElement.New(-14467279, -683715, -33374107, 7448552, 19294360, 14334329, -19690631, 2355319, -19284671, -6114373), FieldElement.New(15121312, -15796162, 6377020, -6031361, -10798111, -12957845, 18952177, 15496498, -29380133, 11754228), FieldElement.New(-2637277, -13483075, 8488727, -14303896, 12728761, -1622493, 7141596, 11724556, 22761615, -10134141)),
				new ge_precomp(FieldElement.New(16918416, 11729663, -18083579, 3022987, -31015732, -13339659, -28741185, -12227393, 32851222, 11717399), FieldElement.New(11166634, 7338049, -6722523, 4531520, -29468672, -7302055, 31474879, 3483633, -1193175, -4030831), FieldElement.New(-185635, 9921305, 31456609, -13536438, -12013818, 13348923, 33142652, 6546660, -19985279, -3948376)),
				new ge_precomp(FieldElement.New(-32460596, 11266712, -11197107, -7899103, 31703694, 3855903, -8537131, -12833048, -30772034, -15486313), FieldElement.New(-18006477, 12709068, 3991746, -6479188, -21491523, -10550425, -31135347, -16049879, 10928917, 3011958), FieldElement.New(-6957757, -15594337, 31696059, 334240, 29576716, 14796075, -30831056, -12805180, 18008031, 10258577)),
				new ge_precomp(FieldElement.New(-22448644, 15655569, 7018479, -4410003, -30314266, -1201591, -1853465, 1367120, 25127874, 6671743), FieldElement.New(29701166, -14373934, -10878120, 9279288, -17568, 13127210, 21382910, 11042292, 25838796, 4642684), FieldElement.New(-20430234, 14955537, -24126347, 8124619, -5369288, -5990470, 30468147, -13900640, 18423289, 4177476))
			}
		};

		private static void ge_add(ge_p1p1 r, ge_p3 p, ge_cached q)
		{
			int[] array = FieldElement.New();
			FieldElement.fe_add(r.X, p.Y, p.X);
			FieldElement.fe_sub(r.Y, p.Y, p.X);
			FieldElement.fe_mul(r.Z, r.X, q.YplusX);
			FieldElement.fe_mul(r.Y, r.Y, q.YminusX);
			FieldElement.fe_mul(r.T, q.T2d, p.T);
			FieldElement.fe_mul(r.X, p.Z, q.Z);
			FieldElement.fe_add(array, r.X, r.X);
			FieldElement.fe_sub(r.X, r.Z, r.Y);
			FieldElement.fe_add(r.Y, r.Z, r.Y);
			FieldElement.fe_add(r.Z, array, r.T);
			FieldElement.fe_sub(r.T, array, r.T);
		}

		private static void slide(sbyte[] r, byte[] a)
		{
			for (int i = 0; i < 256; i++)
			{
				r[i] = (sbyte)(1 & (a[i >> 3] >> (i & 7)));
			}
			for (int j = 0; j < 256; j++)
			{
				if (r[j] == 0)
				{
					continue;
				}
				for (int k = 1; k <= 6 && j + k < 256; k++)
				{
					if (r[j + k] == 0)
					{
						continue;
					}
					if (r[j] + (r[j + k] << k) <= 15)
					{
						r[j] += (sbyte)(r[j + k] << k);
						r[j + k] = 0;
						continue;
					}
					if (r[j] - (r[j + k] << k) < -15)
					{
						break;
					}
					r[j] -= (sbyte)(r[j + k] << k);
					for (int l = j + k; l < 256; l++)
					{
						if (r[l] == 0)
						{
							r[l] = 1;
							break;
						}
						r[l] = 0;
					}
				}
			}
		}

		public static void ge_double_scalarmult_vartime(ge_p2 r, byte[] a, ge_p3 A, byte[] b)
		{
			sbyte[] array = new sbyte[256];
			sbyte[] array2 = new sbyte[256];
			ge_cached[] array3 = new ge_cached[8];
			for (int i = 0; i < array3.Length; i++)
			{
				array3[i] = new ge_cached();
			}
			ge_p1p1 ge_p1p = new ge_p1p1();
			ge_p3 ge_p = new ge_p3();
			ge_p3 ge_p2 = new ge_p3();
			slide(array, a);
			slide(array2, b);
			ge_p3_to_cached(array3[0], A);
			ge_p3_dbl(ge_p1p, A);
			ge_p1p1_to_p3(ge_p2, ge_p1p);
			ge_add(ge_p1p, ge_p2, array3[0]);
			ge_p1p1_to_p3(ge_p, ge_p1p);
			ge_p3_to_cached(array3[1], ge_p);
			ge_add(ge_p1p, ge_p2, array3[1]);
			ge_p1p1_to_p3(ge_p, ge_p1p);
			ge_p3_to_cached(array3[2], ge_p);
			ge_add(ge_p1p, ge_p2, array3[2]);
			ge_p1p1_to_p3(ge_p, ge_p1p);
			ge_p3_to_cached(array3[3], ge_p);
			ge_add(ge_p1p, ge_p2, array3[3]);
			ge_p1p1_to_p3(ge_p, ge_p1p);
			ge_p3_to_cached(array3[4], ge_p);
			ge_add(ge_p1p, ge_p2, array3[4]);
			ge_p1p1_to_p3(ge_p, ge_p1p);
			ge_p3_to_cached(array3[5], ge_p);
			ge_add(ge_p1p, ge_p2, array3[5]);
			ge_p1p1_to_p3(ge_p, ge_p1p);
			ge_p3_to_cached(array3[6], ge_p);
			ge_add(ge_p1p, ge_p2, array3[6]);
			ge_p1p1_to_p3(ge_p, ge_p1p);
			ge_p3_to_cached(array3[7], ge_p);
			ge_p2_0(r);
			int num = 255;
			while (num >= 0 && array[num] == 0 && array2[num] == 0)
			{
				num--;
			}
			while (num >= 0)
			{
				ge_p2_dbl(ge_p1p, r);
				if (array[num] > 0)
				{
					ge_p1p1_to_p3(ge_p, ge_p1p);
					ge_add(ge_p1p, ge_p, array3[array[num] / 2]);
				}
				else if (array[num] < 0)
				{
					ge_p1p1_to_p3(ge_p, ge_p1p);
					ge_sub(ge_p1p, ge_p, array3[-array[num] / 2]);
				}
				if (array2[num] > 0)
				{
					ge_p1p1_to_p3(ge_p, ge_p1p);
					ge_madd(ge_p1p, ge_p, Bi[array2[num] / 2]);
				}
				else if (array2[num] < 0)
				{
					ge_p1p1_to_p3(ge_p, ge_p1p);
					ge_msub(ge_p1p, ge_p, Bi[-array2[num] / 2]);
				}
				ge_p1p1_to_p2(r, ge_p1p);
				num--;
			}
		}

		public static int ge_frombytes_negate_vartime(ge_p3 h, byte[] s)
		{
			int[] array = FieldElement.New();
			int[] array2 = FieldElement.New();
			int[] array3 = FieldElement.New();
			int[] array4 = FieldElement.New();
			int[] array5 = FieldElement.New();
			FieldElement.fe_frombytes(h.Y, s);
			FieldElement.fe_1(h.Z);
			FieldElement.fe_sq(array, h.Y);
			FieldElement.fe_mul(array2, array, d);
			FieldElement.fe_sub(array, array, h.Z);
			FieldElement.fe_add(array2, array2, h.Z);
			FieldElement.fe_sq(array3, array2);
			FieldElement.fe_mul(array3, array3, array2);
			FieldElement.fe_sq(h.X, array3);
			FieldElement.fe_mul(h.X, h.X, array2);
			FieldElement.fe_mul(h.X, h.X, array);
			FieldElement.fe_pow22523(h.X, h.X);
			FieldElement.fe_mul(h.X, h.X, array3);
			FieldElement.fe_mul(h.X, h.X, array);
			FieldElement.fe_sq(array4, h.X);
			FieldElement.fe_mul(array4, array4, array2);
			FieldElement.fe_sub(array5, array4, array);
			if (FieldElement.fe_isnonzero(array5) != 0)
			{
				FieldElement.fe_add(array5, array4, array);
				if (FieldElement.fe_isnonzero(array5) != 0)
				{
					return -1;
				}
				FieldElement.fe_mul(h.X, h.X, sqrtm1);
			}
			if (FieldElement.fe_isnegative(h.X) == s[31] >> 7)
			{
				FieldElement.fe_neg(h.X, h.X);
			}
			FieldElement.fe_mul(h.T, h.X, h.Y);
			return 0;
		}

		private static void ge_madd(ge_p1p1 result, ge_p3 p, ge_precomp q)
		{
			int[] array = FieldElement.New();
			FieldElement.fe_add(result.X, p.Y, p.X);
			FieldElement.fe_sub(result.Y, p.Y, p.X);
			FieldElement.fe_mul(result.Z, result.X, q.yplusx);
			FieldElement.fe_mul(result.Y, result.Y, q.yminusx);
			FieldElement.fe_mul(result.T, q.xy2d, p.T);
			FieldElement.fe_add(array, p.Z, p.Z);
			FieldElement.fe_sub(result.X, result.Z, result.Y);
			FieldElement.fe_add(result.Y, result.Z, result.Y);
			FieldElement.fe_add(result.Z, array, result.T);
			FieldElement.fe_sub(result.T, array, result.T);
		}

		private static void ge_msub(ge_p1p1 result, ge_p3 p, ge_precomp q)
		{
			int[] array = FieldElement.New();
			FieldElement.fe_add(result.X, p.Y, p.X);
			FieldElement.fe_sub(result.Y, p.Y, p.X);
			FieldElement.fe_mul(result.Z, result.X, q.yminusx);
			FieldElement.fe_mul(result.Y, result.Y, q.yplusx);
			FieldElement.fe_mul(result.T, q.xy2d, p.T);
			FieldElement.fe_add(array, p.Z, p.Z);
			FieldElement.fe_sub(result.X, result.Z, result.Y);
			FieldElement.fe_add(result.Y, result.Z, result.Y);
			FieldElement.fe_sub(result.Z, array, result.T);
			FieldElement.fe_add(result.T, array, result.T);
		}

		private static void ge_p1p1_to_p2(ge_p2 result, ge_p1p1 p)
		{
			FieldElement.fe_mul(result.X, p.X, p.T);
			FieldElement.fe_mul(result.Y, p.Y, p.Z);
			FieldElement.fe_mul(result.Z, p.Z, p.T);
		}

		private static void ge_p1p1_to_p3(ge_p3 result, ge_p1p1 p)
		{
			FieldElement.fe_mul(result.X, p.X, p.T);
			FieldElement.fe_mul(result.Y, p.Y, p.Z);
			FieldElement.fe_mul(result.Z, p.Z, p.T);
			FieldElement.fe_mul(result.T, p.X, p.Y);
		}

		private static void ge_p2_0(ge_p2 h)
		{
			FieldElement.fe_0(h.X);
			FieldElement.fe_1(h.Y);
			FieldElement.fe_1(h.Z);
		}

		private static void ge_p2_dbl(ge_p1p1 result, ge_p2 p)
		{
			int[] array = FieldElement.New();
			FieldElement.fe_sq(result.X, p.X);
			FieldElement.fe_sq(result.Z, p.Y);
			FieldElement.fe_sq2(result.T, p.Z);
			FieldElement.fe_add(result.Y, p.X, p.Y);
			FieldElement.fe_sq(array, result.Y);
			FieldElement.fe_add(result.Y, result.Z, result.X);
			FieldElement.fe_sub(result.Z, result.Z, result.X);
			FieldElement.fe_sub(result.X, array, result.Y);
			FieldElement.fe_sub(result.T, result.T, result.Z);
		}

		private static void ge_p3_0(ge_p3 h)
		{
			FieldElement.fe_0(h.X);
			FieldElement.fe_1(h.Y);
			FieldElement.fe_1(h.Z);
			FieldElement.fe_0(h.T);
		}

		private static void ge_p3_dbl(ge_p1p1 result, ge_p3 p)
		{
			ge_p2 ge_p = new ge_p2();
			ge_p3_to_p2(ge_p, p);
			ge_p2_dbl(result, ge_p);
		}

		private static void ge_p3_to_cached(ge_cached result, ge_p3 p)
		{
			FieldElement.fe_add(result.YplusX, p.Y, p.X);
			FieldElement.fe_sub(result.YminusX, p.Y, p.X);
			FieldElement.fe_copy(result.Z, p.Z);
			FieldElement.fe_mul(result.T2d, p.T, d2);
		}

		private static void ge_p3_to_p2(ge_p2 result, ge_p3 p)
		{
			FieldElement.fe_copy(result.X, p.X);
			FieldElement.fe_copy(result.Y, p.Y);
			FieldElement.fe_copy(result.Z, p.Z);
		}

		public static void ge_p3_tobytes(byte[] s, ge_p3 h)
		{
			int[] array = FieldElement.New();
			int[] array2 = FieldElement.New();
			int[] h2 = FieldElement.New();
			FieldElement.fe_invert(array, h.Z);
			FieldElement.fe_mul(array2, h.X, array);
			FieldElement.fe_mul(h2, h.Y, array);
			FieldElement.fe_tobytes(s, h2);
			s[31] ^= (byte)(FieldElement.fe_isnegative(array2) << 7);
		}

		private static byte equal(byte b, byte c)
		{
			return (byte)((uint)((b ^ c) - 1) >> 31);
		}

		private static byte negative(sbyte b)
		{
			return (byte)((ulong)b >> 63);
		}

		private static void cmov(ge_precomp t, ge_precomp u, byte b)
		{
			FieldElement.fe_cmov(t.yplusx, u.yplusx, b);
			FieldElement.fe_cmov(t.yminusx, u.yminusx, b);
			FieldElement.fe_cmov(t.xy2d, u.xy2d, b);
		}

		private static void select(ge_precomp t, int pos, sbyte b)
		{
			ge_precomp ge_precomp = new ge_precomp(FieldElement.New(), FieldElement.New(), FieldElement.New());
			byte b2 = negative(b);
			byte b3 = (byte)(b - ((-b2 & b) << 1));
			FieldElement.fe_1(t.yplusx);
			FieldElement.fe_1(t.yminusx);
			FieldElement.fe_0(t.xy2d);
			cmov(t, Base[pos][0], equal(b3, 1));
			cmov(t, Base[pos][1], equal(b3, 2));
			cmov(t, Base[pos][2], equal(b3, 3));
			cmov(t, Base[pos][3], equal(b3, 4));
			cmov(t, Base[pos][4], equal(b3, 5));
			cmov(t, Base[pos][5], equal(b3, 6));
			cmov(t, Base[pos][6], equal(b3, 7));
			cmov(t, Base[pos][7], equal(b3, 8));
			FieldElement.fe_copy(ge_precomp.yplusx, t.yminusx);
			FieldElement.fe_copy(ge_precomp.yminusx, t.yplusx);
			FieldElement.fe_neg(ge_precomp.xy2d, t.xy2d);
			cmov(t, ge_precomp, b2);
		}

		public static void ge_scalarmult_base(ge_p3 h, byte[] a)
		{
			sbyte[] array = new sbyte[64];
			ge_p1p1 ge_p1p = new ge_p1p1();
			ge_p2 ge_p = new ge_p2();
			ge_precomp ge_precomp = new ge_precomp(FieldElement.New(), FieldElement.New(), FieldElement.New());
			for (int i = 0; i < 32; i++)
			{
				array[2 * i] = (sbyte)(a[i] & 0xF);
				array[2 * i + 1] = (sbyte)((a[i] >> 4) & 0xF);
			}
			sbyte b = 0;
			for (int j = 0; j < 63; j++)
			{
				array[j] += b;
				b = (sbyte)(array[j] + 8);
				b = (sbyte)(b >> 4);
				array[j] -= (sbyte)(b << 4);
			}
			array[63] += b;
			ge_p3_0(h);
			for (int k = 1; k < 64; k += 2)
			{
				select(ge_precomp, k / 2, array[k]);
				ge_madd(ge_p1p, h, ge_precomp);
				ge_p1p1_to_p3(h, ge_p1p);
			}
			ge_p3_dbl(ge_p1p, h);
			ge_p1p1_to_p2(ge_p, ge_p1p);
			ge_p2_dbl(ge_p1p, ge_p);
			ge_p1p1_to_p2(ge_p, ge_p1p);
			ge_p2_dbl(ge_p1p, ge_p);
			ge_p1p1_to_p2(ge_p, ge_p1p);
			ge_p2_dbl(ge_p1p, ge_p);
			ge_p1p1_to_p3(h, ge_p1p);
			for (int l = 0; l < 64; l += 2)
			{
				select(ge_precomp, l / 2, array[l]);
				ge_madd(ge_p1p, h, ge_precomp);
				ge_p1p1_to_p3(h, ge_p1p);
			}
		}

		private static void ge_sub(ge_p1p1 r, ge_p3 p, ge_cached q)
		{
			int[] array = FieldElement.New();
			FieldElement.fe_add(r.X, p.Y, p.X);
			FieldElement.fe_sub(r.Y, p.Y, p.X);
			FieldElement.fe_mul(r.Z, r.X, q.YminusX);
			FieldElement.fe_mul(r.Y, r.Y, q.YplusX);
			FieldElement.fe_mul(r.T, q.T2d, p.T);
			FieldElement.fe_mul(r.X, p.Z, q.Z);
			FieldElement.fe_add(array, r.X, r.X);
			FieldElement.fe_sub(r.X, r.Z, r.Y);
			FieldElement.fe_add(r.Y, r.Z, r.Y);
			FieldElement.fe_sub(r.Z, array, r.T);
			FieldElement.fe_add(r.T, array, r.T);
		}

		public static void ge_tobytes(byte[] s, ge_p2 h)
		{
			int[] array = FieldElement.New();
			int[] array2 = FieldElement.New();
			int[] h2 = FieldElement.New();
			FieldElement.fe_invert(array, h.Z);
			FieldElement.fe_mul(array2, h.X, array);
			FieldElement.fe_mul(h2, h.Y, array);
			FieldElement.fe_tobytes(s, h2);
			s[31] ^= (byte)(FieldElement.fe_isnegative(array2) << 7);
		}
	}
	internal class Signature
	{
		private static byte[] copyOfRange(byte[] src, int start, int end)
		{
			int num = end - start;
			byte[] array = new byte[num];
			Array.Copy(src, start, array, 0, num);
			return array;
		}

		private static bool consttime_equal(byte[] x, byte[] y)
		{
			byte b = 0;
			b = (byte)(x[0] ^ y[0]);
			for (int i = 1; i < 32; i++)
			{
				b = (byte)(b | (byte)(x[i] ^ y[i]));
			}
			return b == 0;
		}

		private static byte[] H(byte[] m)
		{
			return SHA512.Create().ComputeHash(m);
		}

		public static void CreateKeypair(byte[] public_key, byte[] private_key, byte[] seed)
		{
			if (public_key.Length != 32)
			{
				throw new Exception("public-key length is wrong");
			}
			if (private_key.Length != 64)
			{
				throw new Exception("private key length is wrong");
			}
			if (seed.Length != 32)
			{
				throw new Exception("seed length is wrong");
			}
			GroupElement.ge_p3 h = new GroupElement.ge_p3();
			byte[] array = H(seed);
			array[0] &= 248;
			array[31] &= 63;
			array[31] |= 64;
			for (int i = 0; i < 64; i++)
			{
				private_key[i] = array[i];
			}
			GroupElement.ge_scalarmult_base(h, private_key);
			GroupElement.ge_p3_tobytes(public_key, h);
		}

		public static void Sign(byte[] signature, byte[] message, byte[] public_key, byte[] private_key)
		{
			if (signature.Length != 64)
			{
				throw new Exception("signature length is wrong");
			}
			if (public_key.Length != 32)
			{
				throw new Exception("public-key length is wrong");
			}
			if (private_key.Length != 64)
			{
				throw new Exception("private key length is wrong");
			}
			byte[] array = new byte[64];
			byte[] array2 = new byte[64];
			GroupElement.ge_p3 h = new GroupElement.ge_p3();
			MemoryStream memoryStream = new MemoryStream(new byte[32 + message.Length]);
			memoryStream.Write(private_key, 32, 32);
			memoryStream.Write(message, 0, message.Length);
			array2 = H(memoryStream.ToArray());
			Extra.sc_reduce(array2);
			GroupElement.ge_scalarmult_base(h, array2);
			GroupElement.ge_p3_tobytes(signature, h);
			MemoryStream memoryStream2 = new MemoryStream(new byte[64 + message.Length]);
			memoryStream2.Write(signature, 0, 32);
			memoryStream2.Write(public_key, 0, 32);
			memoryStream2.Write(message, 0, message.Length);
			array = H(memoryStream2.ToArray());
			Extra.sc_reduce(array);
			byte[] array3 = new byte[32];
			Extra.sc_muladd(array3, array, private_key, array2);
			for (int i = 0; i < 32; i++)
			{
				signature[i + 32] = array3[i];
			}
		}

		public static bool Verify(byte[] signature, byte[] message, byte[] public_key)
		{
			if (signature.Length != 64)
			{
				throw new Exception("signature length is wrong");
			}
			if (public_key.Length != 32)
			{
				throw new Exception("public-key length is wrong");
			}
			byte[] array = new byte[64];
			byte[] array2 = new byte[32];
			GroupElement.ge_p3 ge_p = new GroupElement.ge_p3();
			GroupElement.ge_p2 ge_p2 = new GroupElement.ge_p2();
			if ((signature[63] & 0xE0u) != 0)
			{
				return false;
			}
			if (GroupElement.ge_frombytes_negate_vartime(ge_p, public_key) != 0)
			{
				return false;
			}
			MemoryStream memoryStream = new MemoryStream(new byte[32 + public_key.Length + message.Length]);
			memoryStream.Write(signature, 0, 32);
			memoryStream.Write(public_key, 0, public_key.Length);
			memoryStream.Write(message, 0, message.Length);
			array = H(memoryStream.ToArray());
			byte[] array3 = new byte[32];
			for (int i = 0; i < 32; i++)
			{
				array3[i] = signature[i + 32];
			}
			Extra.sc_reduce(array);
			GroupElement.ge_double_scalarmult_vartime(ge_p2, array, ge_p, array3);
			GroupElement.ge_tobytes(array2, ge_p2);
			if (!consttime_equal(array2, signature))
			{
				return false;
			}
			return true;
		}

		public static void Test()
		{
			byte[] seed = new byte[32];
			byte[] public_key = new byte[32];
			byte[] private_key = new byte[64];
			CreateKeypair(public_key, private_key, seed);
			string s = "This is a secret message";
			byte[] bytes = Encoding.UTF8.GetBytes(s);
			byte[] signature = new byte[64];
			Sign(signature, bytes, public_key, private_key);
			if (!Verify(signature, bytes, public_key))
			{
				throw new Exception("Crypto test failed!!");
			}
		}
	}
}
