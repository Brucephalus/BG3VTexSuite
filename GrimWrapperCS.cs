
// E:\Graphine Granite Toolset\GrimWrapperCS.dll
// GrimWrapperCS, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// Global type: <Module>
// Architecture: x64
// Runtime: v4.0.30319
// Hash algorithm: SHA1

using System;
using System.Diagnostics;
using System.IO;
using System.Reflection;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using System.Runtime.Versioning;
using Graphine.Core;

[assembly: CompilationRelaxations(8)]
[assembly: RuntimeCompatibility(WrapNonExceptionThrows = true)]
[assembly: Debuggable(DebuggableAttribute.DebuggingModes.IgnoreSymbolStoreSequencePoints)]
[assembly: AssemblyCompany("Graphine NV")]
[assembly: AssemblyProduct("Granite SDK")]
[assembly: AssemblyCopyright("Copyright Graphine NV Â© 2013-2017")]
[assembly: AssemblyInformationalVersion("5.0.0.34144")]
[assembly: AssemblyDescription("Generated by cholleme@ZELDA from master/9a8e2032016ca90aea9bc098289abc7dc1f56d8c")]
[assembly: AssemblyTitle("GrimWrapperCS")]
[assembly: AssemblyConfiguration("")]
[assembly: AssemblyTrademark("")]
[assembly: ComVisible(false)]
[assembly: Guid("0fa8a01a-7d87-42b7-88b5-2dd1c95089b8")]
[assembly: AssemblyFileVersion("1.0.0.0")]
[assembly: TargetFramework(".NETFramework,Version=v4.5", FrameworkDisplayName = ".NET Framework 4.5")]
[assembly: AssemblyVersion("1.0.0.0")]
namespace Grim
{
	[Obfuscation(Exclude = true, ApplyToMembers = true)]
	public enum Error
	{
		Ok,
		FileIO,
		MemoryIO,
		UnknownFormat,
		NotSupported,
		Closed,
		OutOfRange,
		InvalidParameter,
		NotYetImplemented,
		OutOfMemory,
		Unknown,
		UnsupportedBitdepth,
		UnsupportedImageType,
		UnsupportedCompression
	}
	public class GrimWrapperCPP
	{
		public static uint autoPitch => GrimWrapperCPPPINVOKE.autoPitch_get();
	}
	internal class GrimWrapperCPPPINVOKE
	{
		protected class SWIGExceptionHelper
		{
			public delegate void ExceptionDelegate(string message);

			public delegate void ExceptionArgumentDelegate(string message, string paramName);

			private static ExceptionDelegate applicationDelegate;

			private static ExceptionDelegate arithmeticDelegate;

			private static ExceptionDelegate divideByZeroDelegate;

			private static ExceptionDelegate indexOutOfRangeDelegate;

			private static ExceptionDelegate invalidCastDelegate;

			private static ExceptionDelegate invalidOperationDelegate;

			private static ExceptionDelegate ioDelegate;

			private static ExceptionDelegate nullReferenceDelegate;

			private static ExceptionDelegate outOfMemoryDelegate;

			private static ExceptionDelegate overflowDelegate;

			private static ExceptionDelegate systemDelegate;

			private static ExceptionArgumentDelegate argumentDelegate;

			private static ExceptionArgumentDelegate argumentNullDelegate;

			private static ExceptionArgumentDelegate argumentOutOfRangeDelegate;

			[DllImport("GrimWrapperCPP")]
			public static extern void SWIGRegisterExceptionCallbacks_GrimWrapperCPP(ExceptionDelegate applicationDelegate, ExceptionDelegate arithmeticDelegate, ExceptionDelegate divideByZeroDelegate, ExceptionDelegate indexOutOfRangeDelegate, ExceptionDelegate invalidCastDelegate, ExceptionDelegate invalidOperationDelegate, ExceptionDelegate ioDelegate, ExceptionDelegate nullReferenceDelegate, ExceptionDelegate outOfMemoryDelegate, ExceptionDelegate overflowDelegate, ExceptionDelegate systemExceptionDelegate);

			[DllImport("GrimWrapperCPP", EntryPoint = "SWIGRegisterExceptionArgumentCallbacks_GrimWrapperCPP")]
			public static extern void SWIGRegisterExceptionCallbacksArgument_GrimWrapperCPP(ExceptionArgumentDelegate argumentDelegate, ExceptionArgumentDelegate argumentNullDelegate, ExceptionArgumentDelegate argumentOutOfRangeDelegate);

			private static void SetPendingApplicationException(string message)
			{
				SWIGPendingException.Set(new ApplicationException(message, SWIGPendingException.Retrieve()));
			}

			private static void SetPendingArithmeticException(string message)
			{
				SWIGPendingException.Set(new ArithmeticException(message, SWIGPendingException.Retrieve()));
			}

			private static void SetPendingDivideByZeroException(string message)
			{
				SWIGPendingException.Set(new DivideByZeroException(message, SWIGPendingException.Retrieve()));
			}

			private static void SetPendingIndexOutOfRangeException(string message)
			{
				SWIGPendingException.Set(new IndexOutOfRangeException(message, SWIGPendingException.Retrieve()));
			}

			private static void SetPendingInvalidCastException(string message)
			{
				SWIGPendingException.Set(new InvalidCastException(message, SWIGPendingException.Retrieve()));
			}

			private static void SetPendingInvalidOperationException(string message)
			{
				SWIGPendingException.Set(new InvalidOperationException(message, SWIGPendingException.Retrieve()));
			}

			private static void SetPendingIOException(string message)
			{
				SWIGPendingException.Set(new IOException(message, SWIGPendingException.Retrieve()));
			}

			private static void SetPendingNullReferenceException(string message)
			{
				SWIGPendingException.Set(new NullReferenceException(message, SWIGPendingException.Retrieve()));
			}

			private static void SetPendingOutOfMemoryException(string message)
			{
				SWIGPendingException.Set(new OutOfMemoryException(message, SWIGPendingException.Retrieve()));
			}

			private static void SetPendingOverflowException(string message)
			{
				SWIGPendingException.Set(new OverflowException(message, SWIGPendingException.Retrieve()));
			}

			private static void SetPendingSystemException(string message)
			{
				SWIGPendingException.Set(new SystemException(message, SWIGPendingException.Retrieve()));
			}

			private static void SetPendingArgumentException(string message, string paramName)
			{
				SWIGPendingException.Set(new ArgumentException(message, paramName, SWIGPendingException.Retrieve()));
			}

			private static void SetPendingArgumentNullException(string message, string paramName)
			{
				Exception ex = SWIGPendingException.Retrieve();
				if (ex != null)
				{
					message = message + " Inner Exception: " + ex.Message;
				}
				SWIGPendingException.Set(new ArgumentNullException(paramName, message));
			}

			private static void SetPendingArgumentOutOfRangeException(string message, string paramName)
			{
				Exception ex = SWIGPendingException.Retrieve();
				if (ex != null)
				{
					message = message + " Inner Exception: " + ex.Message;
				}
				SWIGPendingException.Set(new ArgumentOutOfRangeException(paramName, message));
			}

			static SWIGExceptionHelper()
			{
				applicationDelegate = SetPendingApplicationException;
				arithmeticDelegate = SetPendingArithmeticException;
				divideByZeroDelegate = SetPendingDivideByZeroException;
				indexOutOfRangeDelegate = SetPendingIndexOutOfRangeException;
				invalidCastDelegate = SetPendingInvalidCastException;
				invalidOperationDelegate = SetPendingInvalidOperationException;
				ioDelegate = SetPendingIOException;
				nullReferenceDelegate = SetPendingNullReferenceException;
				outOfMemoryDelegate = SetPendingOutOfMemoryException;
				overflowDelegate = SetPendingOverflowException;
				systemDelegate = SetPendingSystemException;
				argumentDelegate = SetPendingArgumentException;
				argumentNullDelegate = SetPendingArgumentNullException;
				argumentOutOfRangeDelegate = SetPendingArgumentOutOfRangeException;
				SWIGRegisterExceptionCallbacks_GrimWrapperCPP(applicationDelegate, arithmeticDelegate, divideByZeroDelegate, indexOutOfRangeDelegate, invalidCastDelegate, invalidOperationDelegate, ioDelegate, nullReferenceDelegate, outOfMemoryDelegate, overflowDelegate, systemDelegate);
				SWIGRegisterExceptionCallbacksArgument_GrimWrapperCPP(argumentDelegate, argumentNullDelegate, argumentOutOfRangeDelegate);
			}
		}

		public class SWIGPendingException
		{
			[ThreadStatic]
			private static Exception pendingException;

			private static int numExceptionsPending;

			public static bool Pending
			{
				get
				{
					bool result = false;
					if (numExceptionsPending > 0 && pendingException != null)
					{
						result = true;
					}
					return result;
				}
			}

			public static void Set(Exception e)
			{
				if (pendingException != null)
				{
					throw new ApplicationException("FATAL: An earlier pending exception from unmanaged code was missed and thus not thrown (" + pendingException.ToString() + ")", e);
				}
				pendingException = e;
				lock (typeof(GrimWrapperCPPPINVOKE))
				{
					numExceptionsPending++;
				}
			}

			public static Exception Retrieve()
			{
				Exception result = null;
				if (numExceptionsPending > 0 && pendingException != null)
				{
					result = pendingException;
					pendingException = null;
					lock (typeof(GrimWrapperCPPPINVOKE))
					{
						numExceptionsPending--;
						return result;
					}
				}
				return result;
			}
		}

		protected class SWIGStringHelper
		{
			public delegate string SWIGStringDelegate(string message);

			private static SWIGStringDelegate stringDelegate;

			[DllImport("GrimWrapperCPP")]
			public static extern void SWIGRegisterStringCallback_GrimWrapperCPP(SWIGStringDelegate stringDelegate);

			private static string CreateString(string cString)
			{
				return cString;
			}

			static SWIGStringHelper()
			{
				stringDelegate = CreateString;
				SWIGRegisterStringCallback_GrimWrapperCPP(stringDelegate);
			}
		}

		protected class SWIGWStringHelper
		{
			public delegate string SWIGWStringDelegate(IntPtr message);

			private static SWIGWStringDelegate wstringDelegate;

			[DllImport("GrimWrapperCPP")]
			public static extern void SWIGRegisterWStringCallback_GrimWrapperCPP(SWIGWStringDelegate wstringDelegate);

			private static string CreateWString([MarshalAs(UnmanagedType.LPWStr)] IntPtr cString)
			{
				return Marshal.PtrToStringUni(cString);
			}

			static SWIGWStringHelper()
			{
				wstringDelegate = CreateWString;
				SWIGRegisterWStringCallback_GrimWrapperCPP(wstringDelegate);
			}
		}

		protected static SWIGExceptionHelper swigExceptionHelper;

		protected static SWIGStringHelper swigStringHelper;

		protected static SWIGWStringHelper swigWStringHelper;

		static GrimWrapperCPPPINVOKE()
		{
			swigExceptionHelper = new SWIGExceptionHelper();
			swigStringHelper = new SWIGStringHelper();
			swigWStringHelper = new SWIGWStringHelper();
		}

		[DllImport("GrimWrapperCPP", EntryPoint = "CSharp_autoPitch_get")]
		public static extern uint autoPitch_get();

		[DllImport("GrimWrapperCPP", EntryPoint = "CSharp_new_Spec__SWIG_0")]
		public static extern IntPtr new_Spec__SWIG_0();

		[DllImport("GrimWrapperCPP", EntryPoint = "CSharp_new_Spec__SWIG_1")]
		public static extern IntPtr new_Spec__SWIG_1(uint jarg1, uint jarg2, uint jarg3, uint jarg4, int jarg5, uint jarg6);

		[DllImport("GrimWrapperCPP", EntryPoint = "CSharp_delete_Spec")]
		public static extern void delete_Spec(HandleRef jarg1);

		[DllImport("GrimWrapperCPP", EntryPoint = "CSharp_Spec_SetChannelName")]
		public static extern void Spec_SetChannelName(HandleRef jarg1, string jarg2, int jarg3);

		[DllImport("GrimWrapperCPP", EntryPoint = "CSharp_Spec_GetWidth")]
		public static extern uint Spec_GetWidth(HandleRef jarg1);

		[DllImport("GrimWrapperCPP", EntryPoint = "CSharp_Spec_GetHeight")]
		public static extern uint Spec_GetHeight(HandleRef jarg1);

		[DllImport("GrimWrapperCPP", EntryPoint = "CSharp_Spec_GetLevelWidth")]
		public static extern uint Spec_GetLevelWidth(HandleRef jarg1, uint jarg2);

		[DllImport("GrimWrapperCPP", EntryPoint = "CSharp_Spec_GetLevelHeight")]
		public static extern uint Spec_GetLevelHeight(HandleRef jarg1, uint jarg2);

		[DllImport("GrimWrapperCPP", EntryPoint = "CSharp_Spec_GetNumChannels")]
		public static extern uint Spec_GetNumChannels(HandleRef jarg1);

		[DllImport("GrimWrapperCPP", EntryPoint = "CSharp_Spec_GetNumLevels")]
		public static extern uint Spec_GetNumLevels(HandleRef jarg1);

		[DllImport("GrimWrapperCPP", EntryPoint = "CSharp_Spec_GetNumFaces")]
		public static extern uint Spec_GetNumFaces(HandleRef jarg1);

		[DllImport("GrimWrapperCPP", EntryPoint = "CSharp_Spec_GetPitch")]
		public static extern uint Spec_GetPitch(HandleRef jarg1);

		[DllImport("GrimWrapperCPP", EntryPoint = "CSharp_Spec_GetLevelPitch")]
		public static extern uint Spec_GetLevelPitch(HandleRef jarg1, uint jarg2);

		[DllImport("GrimWrapperCPP", EntryPoint = "CSharp_Spec_GetChannelFormat")]
		public static extern int Spec_GetChannelFormat(HandleRef jarg1);

		[DllImport("GrimWrapperCPP", EntryPoint = "CSharp_Spec_GetChannelName")]
		public static extern string Spec_GetChannelName(HandleRef jarg1, int jarg2);

		[DllImport("GrimWrapperCPP", EntryPoint = "CSharp_Spec_GetChannelNames")]
		public static extern string Spec_GetChannelNames(HandleRef jarg1);

		[DllImport("GrimWrapperCPP", EntryPoint = "CSharp_Spec_GetPixelSize")]
		public static extern uint Spec_GetPixelSize(HandleRef jarg1);

		[DllImport("GrimWrapperCPP", EntryPoint = "CSharp_Spec_GetChannelSize")]
		public static extern uint Spec_GetChannelSize(HandleRef jarg1);

		[DllImport("GrimWrapperCPP", EntryPoint = "CSharp_delete_IImage")]
		public static extern void delete_IImage(HandleRef jarg1);

		[DllImport("GrimWrapperCPP", EntryPoint = "CSharp_IImage_Open__SWIG_0")]
		public static extern int IImage_Open__SWIG_0(HandleRef jarg1, [MarshalAs(UnmanagedType.LPWStr)] string jarg2);

		[DllImport("GrimWrapperCPP", EntryPoint = "CSharp_IImage_Open__SWIG_1")]
		public static extern int IImage_Open__SWIG_1(HandleRef jarg1, IntPtr jarg2, uint jarg3);

		[DllImport("GrimWrapperCPP", EntryPoint = "CSharp_IImage_Resize")]
		public static extern int IImage_Resize(HandleRef jarg1, int jarg2, int jarg3);

		[DllImport("GrimWrapperCPP", EntryPoint = "CSharp_IImage_FlipHorizontal")]
		public static extern int IImage_FlipHorizontal(HandleRef jarg1);

		[DllImport("GrimWrapperCPP", EntryPoint = "CSharp_IImage_FlipVertical")]
		public static extern int IImage_FlipVertical(HandleRef jarg1);

		[DllImport("GrimWrapperCPP", EntryPoint = "CSharp_IImage_GetSpec")]
		public static extern IntPtr IImage_GetSpec(HandleRef jarg1);

		[DllImport("GrimWrapperCPP", EntryPoint = "CSharp_IImage_Close")]
		public static extern int IImage_Close(HandleRef jarg1);

		[DllImport("GrimWrapperCPP", EntryPoint = "CSharp_IImage_GetScanLine__SWIG_0")]
		public static extern int IImage_GetScanLine__SWIG_0(HandleRef jarg1, uint jarg2, IntPtr jarg3);

		[DllImport("GrimWrapperCPP", EntryPoint = "CSharp_IImage_GetScanLines__SWIG_0")]
		public static extern int IImage_GetScanLines__SWIG_0(HandleRef jarg1, uint jarg2, uint jarg3, IntPtr jarg4, uint jarg5);

		[DllImport("GrimWrapperCPP", EntryPoint = "CSharp_IImage_GetScanLines__SWIG_1")]
		public static extern int IImage_GetScanLines__SWIG_1(HandleRef jarg1, uint jarg2, uint jarg3, IntPtr jarg4);

		[DllImport("GrimWrapperCPP", EntryPoint = "CSharp_IImage_GetImageData__SWIG_0")]
		public static extern int IImage_GetImageData__SWIG_0(HandleRef jarg1, IntPtr jarg2, uint jarg3);

		[DllImport("GrimWrapperCPP", EntryPoint = "CSharp_IImage_GetImageData__SWIG_1")]
		public static extern int IImage_GetImageData__SWIG_1(HandleRef jarg1, IntPtr jarg2);

		[DllImport("GrimWrapperCPP", EntryPoint = "CSharp_IImage_GetScanLine__SWIG_1")]
		public static extern int IImage_GetScanLine__SWIG_1(HandleRef jarg1, uint jarg2, uint jarg3, uint jarg4, IntPtr jarg5);

		[DllImport("GrimWrapperCPP", EntryPoint = "CSharp_IImage_GetScanLines__SWIG_2")]
		public static extern int IImage_GetScanLines__SWIG_2(HandleRef jarg1, uint jarg2, uint jarg3, uint jarg4, uint jarg5, IntPtr jarg6, uint jarg7);

		[DllImport("GrimWrapperCPP", EntryPoint = "CSharp_IImage_GetScanLines__SWIG_3")]
		public static extern int IImage_GetScanLines__SWIG_3(HandleRef jarg1, uint jarg2, uint jarg3, uint jarg4, uint jarg5, IntPtr jarg6);

		[DllImport("GrimWrapperCPP", EntryPoint = "CSharp_IImage_GetImageData__SWIG_2")]
		public static extern int IImage_GetImageData__SWIG_2(HandleRef jarg1, uint jarg2, uint jarg3, IntPtr jarg4, uint jarg5);

		[DllImport("GrimWrapperCPP", EntryPoint = "CSharp_IImage_GetImageData__SWIG_3")]
		public static extern int IImage_GetImageData__SWIG_3(HandleRef jarg1, uint jarg2, uint jarg3, IntPtr jarg4);

		[DllImport("GrimWrapperCPP", EntryPoint = "CSharp_delete_IConverter")]
		public static extern void delete_IConverter(HandleRef jarg1);

		[DllImport("GrimWrapperCPP", EntryPoint = "CSharp_IConverter_IsLossy")]
		public static extern bool IConverter_IsLossy(HandleRef jarg1);

		[DllImport("GrimWrapperCPP", EntryPoint = "CSharp_IConverter_GetScanLine__SWIG_0")]
		public static extern int IConverter_GetScanLine__SWIG_0(HandleRef jarg1, uint jarg2, IntPtr jarg3);

		[DllImport("GrimWrapperCPP", EntryPoint = "CSharp_IConverter_GetScanLines__SWIG_0")]
		public static extern int IConverter_GetScanLines__SWIG_0(HandleRef jarg1, uint jarg2, uint jarg3, IntPtr jarg4, uint jarg5);

		[DllImport("GrimWrapperCPP", EntryPoint = "CSharp_IConverter_GetScanLines__SWIG_1")]
		public static extern int IConverter_GetScanLines__SWIG_1(HandleRef jarg1, uint jarg2, uint jarg3, IntPtr jarg4);

		[DllImport("GrimWrapperCPP", EntryPoint = "CSharp_IConverter_GetScanLine__SWIG_1")]
		public static extern int IConverter_GetScanLine__SWIG_1(HandleRef jarg1, uint jarg2, uint jarg3, uint jarg4, IntPtr jarg5);

		[DllImport("GrimWrapperCPP", EntryPoint = "CSharp_IConverter_GetScanLines__SWIG_2")]
		public static extern int IConverter_GetScanLines__SWIG_2(HandleRef jarg1, uint jarg2, uint jarg3, uint jarg4, uint jarg5, IntPtr jarg6, uint jarg7);

		[DllImport("GrimWrapperCPP", EntryPoint = "CSharp_IConverter_GetScanLines__SWIG_3")]
		public static extern int IConverter_GetScanLines__SWIG_3(HandleRef jarg1, uint jarg2, uint jarg3, uint jarg4, uint jarg5, IntPtr jarg6);

		[DllImport("GrimWrapperCPP", EntryPoint = "CSharp_IConverter_ConvertRaw__SWIG_0")]
		public static extern bool IConverter_ConvertRaw__SWIG_0(HandleRef jarg1, int jarg2, int jarg3, uint jarg4, HandleRef jarg5, int jarg6, int jarg7, bool jarg8, HandleRef jarg9, HandleRef jarg10);

		[DllImport("GrimWrapperCPP", EntryPoint = "CSharp_IConverter_ConvertRaw__SWIG_1")]
		public static extern bool IConverter_ConvertRaw__SWIG_1(HandleRef jarg1, HandleRef jarg2, uint jarg3, HandleRef jarg4, HandleRef jarg5, bool jarg6, HandleRef jarg7, HandleRef jarg8, bool jarg9);

		[DllImport("GrimWrapperCPP", EntryPoint = "CSharp_IConverter_FixedConversion_RGBAToBGRA")]
		public static extern void IConverter_FixedConversion_RGBAToBGRA(HandleRef jarg1, uint jarg2, HandleRef jarg3);

		[DllImport("GrimWrapperCPP", EntryPoint = "CSharp_ImageFactory_Create")]
		public static extern int ImageFactory_Create(out IntPtr jarg1);

		[DllImport("GrimWrapperCPP", EntryPoint = "CSharp_ImageFactory_GetNumSupportedFormats")]
		public static extern int ImageFactory_GetNumSupportedFormats();

		[DllImport("GrimWrapperCPP", EntryPoint = "CSharp_ImageFactory_GetSupportedFormatExtension")]
		public static extern string ImageFactory_GetSupportedFormatExtension(int jarg1);

		[DllImport("GrimWrapperCPP", EntryPoint = "CSharp_ImageFactory_CreateConverter")]
		public static extern int ImageFactory_CreateConverter(HandleRef jarg1, int jarg2, uint jarg3, [MarshalAs(UnmanagedType.LPWStr)] string jarg4, [MarshalAs(UnmanagedType.LPWStr)] string jarg5, bool jarg6, out IntPtr jarg7);

		[DllImport("GrimWrapperCPP", EntryPoint = "CSharp_ImageFactory_IsConvertable")]
		public static extern bool ImageFactory_IsConvertable(int jarg1, int jarg2);

		[DllImport("GrimWrapperCPP", EntryPoint = "CSharp_new_ImageFactory")]
		public static extern IntPtr new_ImageFactory();

		[DllImport("GrimWrapperCPP", EntryPoint = "CSharp_delete_ImageFactory")]
		public static extern void delete_ImageFactory(HandleRef jarg1);
	}
	public class IConverter : IDisposable
	{
		private HandleRef swigCPtr;

		protected bool swigCMemOwn;

		internal IConverter(IntPtr cPtr, bool cMemoryOwn)
		{
			swigCMemOwn = cMemoryOwn;
			swigCPtr = new HandleRef(this, cPtr);
		}

		internal static HandleRef getCPtr(IConverter obj)
		{
			return obj?.swigCPtr ?? new HandleRef(null, IntPtr.Zero);
		}

		~IConverter()
		{
			Dispose();
		}

		public virtual void Dispose()
		{
			lock (this)
			{
				if (swigCPtr.Handle != IntPtr.Zero)
				{
					if (swigCMemOwn)
					{
						swigCMemOwn = false;
						GrimWrapperCPPPINVOKE.delete_IConverter(swigCPtr);
					}
					swigCPtr = new HandleRef(null, IntPtr.Zero);
				}
				GC.SuppressFinalize(this);
			}
		}

		public virtual bool IsLossy()
		{
			return GrimWrapperCPPPINVOKE.IConverter_IsLossy(swigCPtr);
		}

		public virtual Error GetScanLine(uint y, IntPtr data)
		{
			return (Error)GrimWrapperCPPPINVOKE.IConverter_GetScanLine__SWIG_0(swigCPtr, y, data);
		}

		public virtual Error GetScanLines(uint ystart, uint yend, IntPtr data, uint pitch)
		{
			return (Error)GrimWrapperCPPPINVOKE.IConverter_GetScanLines__SWIG_0(swigCPtr, ystart, yend, data, pitch);
		}

		public virtual Error GetScanLines(uint ystart, uint yend, IntPtr data)
		{
			return (Error)GrimWrapperCPPPINVOKE.IConverter_GetScanLines__SWIG_1(swigCPtr, ystart, yend, data);
		}

		public virtual Error GetScanLine(uint face, uint level, uint y, IntPtr data)
		{
			return (Error)GrimWrapperCPPPINVOKE.IConverter_GetScanLine__SWIG_1(swigCPtr, face, level, y, data);
		}

		public virtual Error GetScanLines(uint face, uint level, uint ystart, uint yend, IntPtr data, uint pitch)
		{
			return (Error)GrimWrapperCPPPINVOKE.IConverter_GetScanLines__SWIG_2(swigCPtr, face, level, ystart, yend, data, pitch);
		}

		public virtual Error GetScanLines(uint face, uint level, uint ystart, uint yend, IntPtr data)
		{
			return (Error)GrimWrapperCPPPINVOKE.IConverter_GetScanLines__SWIG_3(swigCPtr, face, level, ystart, yend, data);
		}

		public static bool ConvertRaw(SWIGTYPE_p_unsigned_char input, ChannelDataType inputType, int numInputChannels, uint numPixels, SWIGTYPE_p_unsigned_char output, ChannelDataType outputType, int numOutputChannels, bool allowDepthConversion, SWIGTYPE_p_int layout, SWIGTYPE_p_bool invert)
		{
			return GrimWrapperCPPPINVOKE.IConverter_ConvertRaw__SWIG_0(SWIGTYPE_p_unsigned_char.getCPtr(input), (int)inputType, numInputChannels, numPixels, SWIGTYPE_p_unsigned_char.getCPtr(output), (int)outputType, numOutputChannels, allowDepthConversion, SWIGTYPE_p_int.getCPtr(layout), SWIGTYPE_p_bool.getCPtr(invert));
		}

		public static bool ConvertRaw(SWIGTYPE_p_unsigned_char input, SWIGTYPE_p_Graphine__Core__DataType__Enum inputType, uint numPixels, SWIGTYPE_p_unsigned_char output, SWIGTYPE_p_Graphine__Core__DataType__Enum outputType, bool allowDepthConversion, SWIGTYPE_p_int layout, SWIGTYPE_p_bool invert, bool reconstructNormals)
		{
			bool result = GrimWrapperCPPPINVOKE.IConverter_ConvertRaw__SWIG_1(SWIGTYPE_p_unsigned_char.getCPtr(input), SWIGTYPE_p_Graphine__Core__DataType__Enum.getCPtr(inputType), numPixels, SWIGTYPE_p_unsigned_char.getCPtr(output), SWIGTYPE_p_Graphine__Core__DataType__Enum.getCPtr(outputType), allowDepthConversion, SWIGTYPE_p_int.getCPtr(layout), SWIGTYPE_p_bool.getCPtr(invert), reconstructNormals);
			if (GrimWrapperCPPPINVOKE.SWIGPendingException.Pending)
			{
				throw GrimWrapperCPPPINVOKE.SWIGPendingException.Retrieve();
			}
			return result;
		}

		public static void FixedConversion_RGBAToBGRA(SWIGTYPE_p_unsigned_char rgba, uint pixels, SWIGTYPE_p_unsigned_char bgra)
		{
			GrimWrapperCPPPINVOKE.IConverter_FixedConversion_RGBAToBGRA(SWIGTYPE_p_unsigned_char.getCPtr(rgba), pixels, SWIGTYPE_p_unsigned_char.getCPtr(bgra));
		}
	}
	public class IImage : IDisposable
	{
		private HandleRef swigCPtr;

		protected bool swigCMemOwn;

		internal IImage(IntPtr cPtr, bool cMemoryOwn)
		{
			swigCMemOwn = cMemoryOwn;
			swigCPtr = new HandleRef(this, cPtr);
		}

		internal static HandleRef getCPtr(IImage obj)
		{
			return obj?.swigCPtr ?? new HandleRef(null, IntPtr.Zero);
		}

		~IImage()
		{
			Dispose();
		}

		public virtual void Dispose()
		{
			lock (this)
			{
				if (swigCPtr.Handle != IntPtr.Zero)
				{
					if (swigCMemOwn)
					{
						swigCMemOwn = false;
						GrimWrapperCPPPINVOKE.delete_IImage(swigCPtr);
					}
					swigCPtr = new HandleRef(null, IntPtr.Zero);
				}
				GC.SuppressFinalize(this);
			}
		}

		public virtual Error Open(string name)
		{
			int result = GrimWrapperCPPPINVOKE.IImage_Open__SWIG_0(swigCPtr, name);
			if (GrimWrapperCPPPINVOKE.SWIGPendingException.Pending)
			{
				throw GrimWrapperCPPPINVOKE.SWIGPendingException.Retrieve();
			}
			return (Error)result;
		}

		public virtual Error Open(IntPtr data, uint length)
		{
			return (Error)GrimWrapperCPPPINVOKE.IImage_Open__SWIG_1(swigCPtr, data, length);
		}

		public virtual Error Resize(int width, int height)
		{
			return (Error)GrimWrapperCPPPINVOKE.IImage_Resize(swigCPtr, width, height);
		}

		public virtual Error FlipHorizontal()
		{
			return (Error)GrimWrapperCPPPINVOKE.IImage_FlipHorizontal(swigCPtr);
		}

		public virtual Error FlipVertical()
		{
			return (Error)GrimWrapperCPPPINVOKE.IImage_FlipVertical(swigCPtr);
		}

		public virtual Spec GetSpec()
		{
			return new Spec(GrimWrapperCPPPINVOKE.IImage_GetSpec(swigCPtr), cMemoryOwn: false);
		}

		public virtual Error Close()
		{
			return (Error)GrimWrapperCPPPINVOKE.IImage_Close(swigCPtr);
		}

		public virtual Error GetScanLine(uint y, IntPtr data)
		{
			return (Error)GrimWrapperCPPPINVOKE.IImage_GetScanLine__SWIG_0(swigCPtr, y, data);
		}

		public virtual Error GetScanLines(uint ystart, uint yend, IntPtr data, uint pitch)
		{
			return (Error)GrimWrapperCPPPINVOKE.IImage_GetScanLines__SWIG_0(swigCPtr, ystart, yend, data, pitch);
		}

		public virtual Error GetScanLines(uint ystart, uint yend, IntPtr data)
		{
			return (Error)GrimWrapperCPPPINVOKE.IImage_GetScanLines__SWIG_1(swigCPtr, ystart, yend, data);
		}

		public virtual Error GetImageData(IntPtr data, uint pitch)
		{
			return (Error)GrimWrapperCPPPINVOKE.IImage_GetImageData__SWIG_0(swigCPtr, data, pitch);
		}

		public virtual Error GetImageData(IntPtr data)
		{
			return (Error)GrimWrapperCPPPINVOKE.IImage_GetImageData__SWIG_1(swigCPtr, data);
		}

		public virtual Error GetScanLine(uint face, uint level, uint y, IntPtr data)
		{
			return (Error)GrimWrapperCPPPINVOKE.IImage_GetScanLine__SWIG_1(swigCPtr, face, level, y, data);
		}

		public virtual Error GetScanLines(uint face, uint level, uint ystart, uint yend, IntPtr data, uint pitch)
		{
			return (Error)GrimWrapperCPPPINVOKE.IImage_GetScanLines__SWIG_2(swigCPtr, face, level, ystart, yend, data, pitch);
		}

		public virtual Error GetScanLines(uint face, uint level, uint ystart, uint yend, IntPtr data)
		{
			return (Error)GrimWrapperCPPPINVOKE.IImage_GetScanLines__SWIG_3(swigCPtr, face, level, ystart, yend, data);
		}

		public virtual Error GetImageData(uint face, uint level, IntPtr data, uint pitch)
		{
			return (Error)GrimWrapperCPPPINVOKE.IImage_GetImageData__SWIG_2(swigCPtr, face, level, data, pitch);
		}

		public virtual Error GetImageData(uint face, uint level, IntPtr data)
		{
			return (Error)GrimWrapperCPPPINVOKE.IImage_GetImageData__SWIG_3(swigCPtr, face, level, data);
		}
	}
	public class ImageFactory : IDisposable
	{
		private HandleRef swigCPtr;

		protected bool swigCMemOwn;

		internal ImageFactory(IntPtr cPtr, bool cMemoryOwn)
		{
			swigCMemOwn = cMemoryOwn;
			swigCPtr = new HandleRef(this, cPtr);
		}

		internal static HandleRef getCPtr(ImageFactory obj)
		{
			return obj?.swigCPtr ?? new HandleRef(null, IntPtr.Zero);
		}

		~ImageFactory()
		{
			Dispose();
		}

		public virtual void Dispose()
		{
			lock (this)
			{
				if (swigCPtr.Handle != IntPtr.Zero)
				{
					if (swigCMemOwn)
					{
						swigCMemOwn = false;
						GrimWrapperCPPPINVOKE.delete_ImageFactory(swigCPtr);
					}
					swigCPtr = new HandleRef(null, IntPtr.Zero);
				}
				GC.SuppressFinalize(this);
			}
		}

		public static Error Create(out IImage image)
		{
			IntPtr jarg = IntPtr.Zero;
			try
			{
				return (Error)GrimWrapperCPPPINVOKE.ImageFactory_Create(out jarg);
			}
			finally
			{
				image = ((jarg == IntPtr.Zero) ? null : new IImage(jarg, cMemoryOwn: true));
			}
		}

		public static int GetNumSupportedFormats()
		{
			return GrimWrapperCPPPINVOKE.ImageFactory_GetNumSupportedFormats();
		}

		public static string GetSupportedFormatExtension(int i)
		{
			return GrimWrapperCPPPINVOKE.ImageFactory_GetSupportedFormatExtension(i);
		}

		public static Error CreateConverter(IImage image, ChannelDataType channelType, uint numChannels, string layout, string invert, bool allowDepthConversion, out IConverter imageConverter)
		{
			IntPtr jarg = IntPtr.Zero;
			try
			{
				int result = GrimWrapperCPPPINVOKE.ImageFactory_CreateConverter(IImage.getCPtr(image), (int)channelType, numChannels, layout, invert, allowDepthConversion, out jarg);
				if (GrimWrapperCPPPINVOKE.SWIGPendingException.Pending)
				{
					throw GrimWrapperCPPPINVOKE.SWIGPendingException.Retrieve();
				}
				return (Error)result;
			}
			finally
			{
				imageConverter = ((jarg == IntPtr.Zero) ? null : new IConverter(jarg, cMemoryOwn: true));
			}
		}

		public static bool IsConvertable(ChannelDataType channelTypeIn, ChannelDataType channelTypeOut)
		{
			return GrimWrapperCPPPINVOKE.ImageFactory_IsConvertable((int)channelTypeIn, (int)channelTypeOut);
		}

		public ImageFactory()
			: this(GrimWrapperCPPPINVOKE.new_ImageFactory(), cMemoryOwn: true)
		{
		}
	}
	public class Spec : IDisposable
	{
		private HandleRef swigCPtr;

		protected bool swigCMemOwn;

		internal Spec(IntPtr cPtr, bool cMemoryOwn)
		{
			swigCMemOwn = cMemoryOwn;
			swigCPtr = new HandleRef(this, cPtr);
		}

		internal static HandleRef getCPtr(Spec obj)
		{
			return obj?.swigCPtr ?? new HandleRef(null, IntPtr.Zero);
		}

		~Spec()
		{
			Dispose();
		}

		public virtual void Dispose()
		{
			lock (this)
			{
				if (swigCPtr.Handle != IntPtr.Zero)
				{
					if (swigCMemOwn)
					{
						swigCMemOwn = false;
						GrimWrapperCPPPINVOKE.delete_Spec(swigCPtr);
					}
					swigCPtr = new HandleRef(null, IntPtr.Zero);
				}
				GC.SuppressFinalize(this);
			}
		}

		public Spec()
			: this(GrimWrapperCPPPINVOKE.new_Spec__SWIG_0(), cMemoryOwn: true)
		{
		}

		public Spec(uint width, uint height, uint numLevels, uint numFaces, ChannelDataType channelType, uint numChannels)
			: this(GrimWrapperCPPPINVOKE.new_Spec__SWIG_1(width, height, numLevels, numFaces, (int)channelType, numChannels), cMemoryOwn: true)
		{
		}

		public void SetChannelName(string channelName, int index)
		{
			GrimWrapperCPPPINVOKE.Spec_SetChannelName(swigCPtr, channelName, index);
			if (GrimWrapperCPPPINVOKE.SWIGPendingException.Pending)
			{
				throw GrimWrapperCPPPINVOKE.SWIGPendingException.Retrieve();
			}
		}

		public uint GetWidth()
		{
			return GrimWrapperCPPPINVOKE.Spec_GetWidth(swigCPtr);
		}

		public uint GetHeight()
		{
			return GrimWrapperCPPPINVOKE.Spec_GetHeight(swigCPtr);
		}

		public uint GetLevelWidth(uint level)
		{
			return GrimWrapperCPPPINVOKE.Spec_GetLevelWidth(swigCPtr, level);
		}

		public uint GetLevelHeight(uint level)
		{
			return GrimWrapperCPPPINVOKE.Spec_GetLevelHeight(swigCPtr, level);
		}

		public uint GetNumChannels()
		{
			return GrimWrapperCPPPINVOKE.Spec_GetNumChannels(swigCPtr);
		}

		public uint GetNumLevels()
		{
			return GrimWrapperCPPPINVOKE.Spec_GetNumLevels(swigCPtr);
		}

		public uint GetNumFaces()
		{
			return GrimWrapperCPPPINVOKE.Spec_GetNumFaces(swigCPtr);
		}

		public uint GetPitch()
		{
			return GrimWrapperCPPPINVOKE.Spec_GetPitch(swigCPtr);
		}

		public uint GetLevelPitch(uint level)
		{
			return GrimWrapperCPPPINVOKE.Spec_GetLevelPitch(swigCPtr, level);
		}

		public ChannelDataType GetChannelFormat()
		{
			return (ChannelDataType)GrimWrapperCPPPINVOKE.Spec_GetChannelFormat(swigCPtr);
		}

		public string GetChannelName(int index)
		{
			return GrimWrapperCPPPINVOKE.Spec_GetChannelName(swigCPtr, index);
		}

		public string GetChannelNames()
		{
			return GrimWrapperCPPPINVOKE.Spec_GetChannelNames(swigCPtr);
		}

		public uint GetPixelSize()
		{
			return GrimWrapperCPPPINVOKE.Spec_GetPixelSize(swigCPtr);
		}

		public uint GetChannelSize()
		{
			return GrimWrapperCPPPINVOKE.Spec_GetChannelSize(swigCPtr);
		}
	}
	public class SWIGTYPE_p_bool
	{
		private HandleRef swigCPtr;

		internal SWIGTYPE_p_bool(IntPtr cPtr, bool futureUse)
		{
			swigCPtr = new HandleRef(this, cPtr);
		}

		protected SWIGTYPE_p_bool()
		{
			swigCPtr = new HandleRef(null, IntPtr.Zero);
		}

		internal static HandleRef getCPtr(SWIGTYPE_p_bool obj)
		{
			return obj?.swigCPtr ?? new HandleRef(null, IntPtr.Zero);
		}
	}
	public class SWIGTYPE_p_Graphine__Core__DataType__Enum
	{
		private HandleRef swigCPtr;

		internal SWIGTYPE_p_Graphine__Core__DataType__Enum(IntPtr cPtr, bool futureUse)
		{
			swigCPtr = new HandleRef(this, cPtr);
		}

		protected SWIGTYPE_p_Graphine__Core__DataType__Enum()
		{
			swigCPtr = new HandleRef(null, IntPtr.Zero);
		}

		internal static HandleRef getCPtr(SWIGTYPE_p_Graphine__Core__DataType__Enum obj)
		{
			return obj?.swigCPtr ?? new HandleRef(null, IntPtr.Zero);
		}
	}
	public class SWIGTYPE_p_int
	{
		private HandleRef swigCPtr;

		internal SWIGTYPE_p_int(IntPtr cPtr, bool futureUse)
		{
			swigCPtr = new HandleRef(this, cPtr);
		}

		protected SWIGTYPE_p_int()
		{
			swigCPtr = new HandleRef(null, IntPtr.Zero);
		}

		internal static HandleRef getCPtr(SWIGTYPE_p_int obj)
		{
			return obj?.swigCPtr ?? new HandleRef(null, IntPtr.Zero);
		}
	}
	public class SWIGTYPE_p_unsigned_char
	{
		private HandleRef swigCPtr;

		internal SWIGTYPE_p_unsigned_char(IntPtr cPtr, bool futureUse)
		{
			swigCPtr = new HandleRef(this, cPtr);
		}

		protected SWIGTYPE_p_unsigned_char()
		{
			swigCPtr = new HandleRef(null, IntPtr.Zero);
		}

		internal static HandleRef getCPtr(SWIGTYPE_p_unsigned_char obj)
		{
			return obj?.swigCPtr ?? new HandleRef(null, IntPtr.Zero);
		}
	}
}
