
// E:\Graphine Granite Toolset 5.0.7\GrCoreToolsCS.dll
// GrCoreToolsCS, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// Global type: <Module>
// Architecture: x64
// Runtime: v4.0.30319
// Hash algorithm: SHA1

using System;
using System.Diagnostics;
using System.IO;
using System.Reflection;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using System.Runtime.Versioning;

[assembly: CompilationRelaxations(8)]
[assembly: RuntimeCompatibility(WrapNonExceptionThrows = true)]
[assembly: Debuggable(DebuggableAttribute.DebuggingModes.IgnoreSymbolStoreSequencePoints)]
[assembly: AssemblyCompany("Graphine NV")]
[assembly: AssemblyProduct("Granite SDK")]
[assembly: AssemblyCopyright("Copyright Graphine NV Â© 2013-2017")]
[assembly: AssemblyInformationalVersion("5.0.0.34144")]
[assembly: AssemblyDescription("Generated by cholleme@ZELDA from master/9a8e2032016ca90aea9bc098289abc7dc1f56d8c")]
[assembly: AssemblyTitle("GrCoreCS")]
[assembly: AssemblyConfiguration("")]
[assembly: AssemblyTrademark("")]
[assembly: ComVisible(false)]
[assembly: Guid("0df79ea0-ad0d-49fa-bc13-5eafceaac136")]
[assembly: AssemblyFileVersion("1.0.0.0")]
[assembly: TargetFramework(".NETFramework,Version=v4.5", FrameworkDisplayName = ".NET Framework 4.5")]
[assembly: AssemblyVersion("1.0.0.0")]
namespace Graphine.Core
{
	[StructLayout(LayoutKind.Sequential, Pack = 1)]
	public struct GraphineGuid
	{
		[MarshalAs(UnmanagedType.ByValArray, SizeConst = 16)]
		private byte[] id;

		public GraphineGuid(Guid guid)
		{
			id = guid.ToByteArray();
		}

		public static implicit operator GraphineGuid(Guid guid)
		{
			return new GraphineGuid(guid);
		}

		public static implicit operator Guid(GraphineGuid grGuid)
		{
			return new Guid(grGuid.id);
		}

		public static GraphineGuid NewGuid()
		{
			return new GraphineGuid(Guid.NewGuid());
		}
	}
	[StructLayout(LayoutKind.Sequential, CharSet = CharSet.Unicode, Pack = 1)]
	public struct MD5Hash
	{
		public uint cheksum0;

		public uint cheksum1;

		public uint cheksum2;

		public uint cheksum3;
	}
	[Obfuscation(Exclude = true, ApplyToMembers = true)]
	public enum ChannelDataType
	{
		UnsignedChar = 0,
		UnsignedShort = 1,
		UnsignedInt = 2,
		Float32 = 3,
		Float16 = 4,
		Last = int.MaxValue
	}
	public static class Constants
	{
		public const int MAX_NUM_LAYERS = 4;

		public const int MAX_NUM_LEVELS = 14;

		public const int MAX_CHANNELS = 4;

		public const int MAX_CHANNEL_SIZE = 4;

		public const int GR_MAX_PATH = 260;

		public const int GR_MAX_MESSAGE_LENGTH = 512;

		public const int GR_MAX_CONFIG_LENGTH = 1024;

		static Constants()
		{
		}
	}
	[Obfuscation(Exclude = true, ApplyToMembers = true)]
	public enum DataType
	{
		R8G8B8_SRGB = 0,
		R8G8B8A8_SRGB = 1,
		X8Y8Z0_TANGENT = 2,
		R8G8B8_LINEAR = 3,
		R8G8B8A8_LINEAR = 4,
		X8 = 5,
		X8Y8 = 6,
		X8Y8Z8 = 7,
		X8Y8Z8W8 = 8,
		X16 = 9,
		X16Y16 = 10,
		X16Y16Z16 = 11,
		X16Y16Z16W16 = 12,
		X32 = 13,
		X32_FLOAT = 14,
		X32Y32 = 15,
		X32Y32_FLOAT = 16,
		X32Y32Z32 = 17,
		X32Y32Z32_FLOAT = 18,
		R32G32B32 = 19,
		R32G32B32_FLOAT = 20,
		X32Y32Z32W32 = 21,
		X32Y32Z32W32_FLOAT = 22,
		R32G32B32A32 = 23,
		R32G32B32A32_FLOAT = 24,
		R16G16B16_FLOAT = 25,
		R16G16B16A16_FLOAT = 26,
		UNKNOWN = int.MaxValue
	}
	public class DataTypeInfo : IDisposable
	{
		private HandleRef swigCPtr;

		protected bool swigCMemOwn;

		internal DataTypeInfo(IntPtr cPtr, bool cMemoryOwn)
		{
			swigCMemOwn = cMemoryOwn;
			swigCPtr = new HandleRef(this, cPtr);
		}

		internal static HandleRef getCPtr(DataTypeInfo obj)
		{
			return obj?.swigCPtr ?? new HandleRef(null, IntPtr.Zero);
		}

		~DataTypeInfo()
		{
			Dispose();
		}

		public virtual void Dispose()
		{
			lock (this)
			{
				if (swigCPtr.Handle != IntPtr.Zero)
				{
					if (swigCMemOwn)
					{
						swigCMemOwn = false;
						GrCoreToolsCPPPINVOKE.delete_DataTypeInfo(swigCPtr);
					}
					swigCPtr = new HandleRef(null, IntPtr.Zero);
				}
				GC.SuppressFinalize(this);
			}
		}

		public static int GetPixelSize(DataType dataType)
		{
			return GrCoreToolsCPPPINVOKE.DataTypeInfo_GetPixelSize((int)dataType);
		}

		public static int GetFlags(DataType dataType)
		{
			return GrCoreToolsCPPPINVOKE.DataTypeInfo_GetFlags((int)dataType);
		}

		public static bool IsLinear(DataType dataType)
		{
			return GrCoreToolsCPPPINVOKE.DataTypeInfo_IsLinear((int)dataType);
		}

		public static int GetNumChannels(DataType dataType)
		{
			return GrCoreToolsCPPPINVOKE.DataTypeInfo_GetNumChannels((int)dataType);
		}

		public static ChannelDataType GetChannelDataType(DataType dataType)
		{
			return (ChannelDataType)GrCoreToolsCPPPINVOKE.DataTypeInfo_GetChannelDataType((int)dataType);
		}

		public static int GetChannelSize(DataType dataType)
		{
			return GrCoreToolsCPPPINVOKE.DataTypeInfo_GetChannelSize__SWIG_0((int)dataType);
		}

		public static int GetChannelSize(ChannelDataType channelDataType)
		{
			return GrCoreToolsCPPPINVOKE.DataTypeInfo_GetChannelSize__SWIG_1((int)channelDataType);
		}

		public static DataType GetDatatype(ChannelDataType channelDataType, int numChannels, int flags)
		{
			return (DataType)GrCoreToolsCPPPINVOKE.DataTypeInfo_GetDatatype((int)channelDataType, numChannels, flags);
		}

		public static string ToString(DataType dataType)
		{
			return GrCoreToolsCPPPINVOKE.DataTypeInfo_ToString((int)dataType);
		}

		public DataTypeInfo()
			: this(GrCoreToolsCPPPINVOKE.new_DataTypeInfo(), cMemoryOwn: true)
		{
		}
	}
	public class DiskManagement : IDisposable
	{
		private HandleRef swigCPtr;

		protected bool swigCMemOwn;

		internal DiskManagement(IntPtr cPtr, bool cMemoryOwn)
		{
			swigCMemOwn = cMemoryOwn;
			swigCPtr = new HandleRef(this, cPtr);
		}

		internal static HandleRef getCPtr(DiskManagement obj)
		{
			return obj?.swigCPtr ?? new HandleRef(null, IntPtr.Zero);
		}

		~DiskManagement()
		{
			Dispose();
		}

		public virtual void Dispose()
		{
			lock (this)
			{
				if (swigCPtr.Handle != IntPtr.Zero)
				{
					if (swigCMemOwn)
					{
						swigCMemOwn = false;
						GrCoreToolsCPPPINVOKE.delete_DiskManagement(swigCPtr);
					}
					swigCPtr = new HandleRef(null, IntPtr.Zero);
				}
				GC.SuppressFinalize(this);
			}
		}

		public static bool GetFreeDiskSpace(string directory, ref ulong freeBytesAvailable)
		{
			bool result = GrCoreToolsCPPPINVOKE.DiskManagement_GetFreeDiskSpace(directory, ref freeBytesAvailable);
			if (GrCoreToolsCPPPINVOKE.SWIGPendingException.Pending)
			{
				throw GrCoreToolsCPPPINVOKE.SWIGPendingException.Retrieve();
			}
			return result;
		}

		public DiskManagement()
			: this(GrCoreToolsCPPPINVOKE.new_DiskManagement(), cMemoryOwn: true)
		{
		}
	}
	public class GrCoreToolsCPP
	{
		public static readonly int MAX_NUM_LAYERS = GrCoreToolsCPPPINVOKE.MAX_NUM_LAYERS_get();

		public static readonly int MAX_NUM_LEVELS = GrCoreToolsCPPPINVOKE.MAX_NUM_LEVELS_get();

		public static readonly int MAX_CHANNELS = GrCoreToolsCPPPINVOKE.MAX_CHANNELS_get();

		public static readonly int MAX_CHANNEL_SIZE = GrCoreToolsCPPPINVOKE.MAX_CHANNEL_SIZE_get();

		public static readonly int GR_MAX_PATH = GrCoreToolsCPPPINVOKE.GR_MAX_PATH_get();

		public static readonly int GR_MAX_MESSAGE_LENGTH = GrCoreToolsCPPPINVOKE.GR_MAX_MESSAGE_LENGTH_get();

		public static readonly int GR_MAX_CONFIG_LENGTH = GrCoreToolsCPPPINVOKE.GR_MAX_CONFIG_LENGTH_get();
	}
	internal class GrCoreToolsCPPPINVOKE
	{
		protected class SWIGExceptionHelper
		{
			public delegate void ExceptionDelegate(string message);

			public delegate void ExceptionArgumentDelegate(string message, string paramName);

			private static ExceptionDelegate applicationDelegate;

			private static ExceptionDelegate arithmeticDelegate;

			private static ExceptionDelegate divideByZeroDelegate;

			private static ExceptionDelegate indexOutOfRangeDelegate;

			private static ExceptionDelegate invalidCastDelegate;

			private static ExceptionDelegate invalidOperationDelegate;

			private static ExceptionDelegate ioDelegate;

			private static ExceptionDelegate nullReferenceDelegate;

			private static ExceptionDelegate outOfMemoryDelegate;

			private static ExceptionDelegate overflowDelegate;

			private static ExceptionDelegate systemDelegate;

			private static ExceptionArgumentDelegate argumentDelegate;

			private static ExceptionArgumentDelegate argumentNullDelegate;

			private static ExceptionArgumentDelegate argumentOutOfRangeDelegate;

			[DllImport("GrCoreToolsCPP")]
			public static extern void SWIGRegisterExceptionCallbacks_GrCoreToolsCPP(ExceptionDelegate applicationDelegate, ExceptionDelegate arithmeticDelegate, ExceptionDelegate divideByZeroDelegate, ExceptionDelegate indexOutOfRangeDelegate, ExceptionDelegate invalidCastDelegate, ExceptionDelegate invalidOperationDelegate, ExceptionDelegate ioDelegate, ExceptionDelegate nullReferenceDelegate, ExceptionDelegate outOfMemoryDelegate, ExceptionDelegate overflowDelegate, ExceptionDelegate systemExceptionDelegate);

			[DllImport("GrCoreToolsCPP", EntryPoint = "SWIGRegisterExceptionArgumentCallbacks_GrCoreToolsCPP")]
			public static extern void SWIGRegisterExceptionCallbacksArgument_GrCoreToolsCPP(ExceptionArgumentDelegate argumentDelegate, ExceptionArgumentDelegate argumentNullDelegate, ExceptionArgumentDelegate argumentOutOfRangeDelegate);

			private static void SetPendingApplicationException(string message)
			{
				SWIGPendingException.Set(new ApplicationException(message, SWIGPendingException.Retrieve()));
			}

			private static void SetPendingArithmeticException(string message)
			{
				SWIGPendingException.Set(new ArithmeticException(message, SWIGPendingException.Retrieve()));
			}

			private static void SetPendingDivideByZeroException(string message)
			{
				SWIGPendingException.Set(new DivideByZeroException(message, SWIGPendingException.Retrieve()));
			}

			private static void SetPendingIndexOutOfRangeException(string message)
			{
				SWIGPendingException.Set(new IndexOutOfRangeException(message, SWIGPendingException.Retrieve()));
			}

			private static void SetPendingInvalidCastException(string message)
			{
				SWIGPendingException.Set(new InvalidCastException(message, SWIGPendingException.Retrieve()));
			}

			private static void SetPendingInvalidOperationException(string message)
			{
				SWIGPendingException.Set(new InvalidOperationException(message, SWIGPendingException.Retrieve()));
			}

			private static void SetPendingIOException(string message)
			{
				SWIGPendingException.Set(new IOException(message, SWIGPendingException.Retrieve()));
			}

			private static void SetPendingNullReferenceException(string message)
			{
				SWIGPendingException.Set(new NullReferenceException(message, SWIGPendingException.Retrieve()));
			}

			private static void SetPendingOutOfMemoryException(string message)
			{
				SWIGPendingException.Set(new OutOfMemoryException(message, SWIGPendingException.Retrieve()));
			}

			private static void SetPendingOverflowException(string message)
			{
				SWIGPendingException.Set(new OverflowException(message, SWIGPendingException.Retrieve()));
			}

			private static void SetPendingSystemException(string message)
			{
				SWIGPendingException.Set(new SystemException(message, SWIGPendingException.Retrieve()));
			}

			private static void SetPendingArgumentException(string message, string paramName)
			{
				SWIGPendingException.Set(new ArgumentException(message, paramName, SWIGPendingException.Retrieve()));
			}

			private static void SetPendingArgumentNullException(string message, string paramName)
			{
				Exception ex = SWIGPendingException.Retrieve();
				if (ex != null)
				{
					message = message + " Inner Exception: " + ex.Message;
				}
				SWIGPendingException.Set(new ArgumentNullException(paramName, message));
			}

			private static void SetPendingArgumentOutOfRangeException(string message, string paramName)
			{
				Exception ex = SWIGPendingException.Retrieve();
				if (ex != null)
				{
					message = message + " Inner Exception: " + ex.Message;
				}
				SWIGPendingException.Set(new ArgumentOutOfRangeException(paramName, message));
			}

			static SWIGExceptionHelper()
			{
				applicationDelegate = SetPendingApplicationException;
				arithmeticDelegate = SetPendingArithmeticException;
				divideByZeroDelegate = SetPendingDivideByZeroException;
				indexOutOfRangeDelegate = SetPendingIndexOutOfRangeException;
				invalidCastDelegate = SetPendingInvalidCastException;
				invalidOperationDelegate = SetPendingInvalidOperationException;
				ioDelegate = SetPendingIOException;
				nullReferenceDelegate = SetPendingNullReferenceException;
				outOfMemoryDelegate = SetPendingOutOfMemoryException;
				overflowDelegate = SetPendingOverflowException;
				systemDelegate = SetPendingSystemException;
				argumentDelegate = SetPendingArgumentException;
				argumentNullDelegate = SetPendingArgumentNullException;
				argumentOutOfRangeDelegate = SetPendingArgumentOutOfRangeException;
				SWIGRegisterExceptionCallbacks_GrCoreToolsCPP(applicationDelegate, arithmeticDelegate, divideByZeroDelegate, indexOutOfRangeDelegate, invalidCastDelegate, invalidOperationDelegate, ioDelegate, nullReferenceDelegate, outOfMemoryDelegate, overflowDelegate, systemDelegate);
				SWIGRegisterExceptionCallbacksArgument_GrCoreToolsCPP(argumentDelegate, argumentNullDelegate, argumentOutOfRangeDelegate);
			}
		}

		public class SWIGPendingException
		{
			[ThreadStatic]
			private static Exception pendingException;

			private static int numExceptionsPending;

			public static bool Pending
			{
				get
				{
					bool result = false;
					if (numExceptionsPending > 0 && pendingException != null)
					{
						result = true;
					}
					return result;
				}
			}

			public static void Set(Exception e)
			{
				if (pendingException != null)
				{
					throw new ApplicationException("FATAL: An earlier pending exception from unmanaged code was missed and thus not thrown (" + pendingException.ToString() + ")", e);
				}
				pendingException = e;
				lock (typeof(GrCoreToolsCPPPINVOKE))
				{
					numExceptionsPending++;
				}
			}

			public static Exception Retrieve()
			{
				Exception result = null;
				if (numExceptionsPending > 0 && pendingException != null)
				{
					result = pendingException;
					pendingException = null;
					lock (typeof(GrCoreToolsCPPPINVOKE))
					{
						numExceptionsPending--;
						return result;
					}
				}
				return result;
			}
		}

		protected class SWIGStringHelper
		{
			public delegate string SWIGStringDelegate(string message);

			private static SWIGStringDelegate stringDelegate;

			[DllImport("GrCoreToolsCPP")]
			public static extern void SWIGRegisterStringCallback_GrCoreToolsCPP(SWIGStringDelegate stringDelegate);

			private static string CreateString(string cString)
			{
				return cString;
			}

			static SWIGStringHelper()
			{
				stringDelegate = CreateString;
				SWIGRegisterStringCallback_GrCoreToolsCPP(stringDelegate);
			}
		}

		protected class SWIGWStringHelper
		{
			public delegate string SWIGWStringDelegate(IntPtr message);

			private static SWIGWStringDelegate wstringDelegate;

			[DllImport("GrCoreToolsCPP")]
			public static extern void SWIGRegisterWStringCallback_GrCoreToolsCPP(SWIGWStringDelegate wstringDelegate);

			private static string CreateWString([MarshalAs(UnmanagedType.LPWStr)] IntPtr cString)
			{
				return Marshal.PtrToStringUni(cString);
			}

			static SWIGWStringHelper()
			{
				wstringDelegate = CreateWString;
				SWIGRegisterWStringCallback_GrCoreToolsCPP(wstringDelegate);
			}
		}

		protected static SWIGExceptionHelper swigExceptionHelper;

		protected static SWIGStringHelper swigStringHelper;

		protected static SWIGWStringHelper swigWStringHelper;

		static GrCoreToolsCPPPINVOKE()
		{
			swigExceptionHelper = new SWIGExceptionHelper();
			swigStringHelper = new SWIGStringHelper();
			swigWStringHelper = new SWIGWStringHelper();
		}

		[DllImport("GrCoreToolsCPP", EntryPoint = "CSharp_MAX_NUM_LAYERS_get")]
		public static extern int MAX_NUM_LAYERS_get();

		[DllImport("GrCoreToolsCPP", EntryPoint = "CSharp_MAX_NUM_LEVELS_get")]
		public static extern int MAX_NUM_LEVELS_get();

		[DllImport("GrCoreToolsCPP", EntryPoint = "CSharp_MAX_CHANNELS_get")]
		public static extern int MAX_CHANNELS_get();

		[DllImport("GrCoreToolsCPP", EntryPoint = "CSharp_MAX_CHANNEL_SIZE_get")]
		public static extern int MAX_CHANNEL_SIZE_get();

		[DllImport("GrCoreToolsCPP", EntryPoint = "CSharp_GR_MAX_PATH_get")]
		public static extern int GR_MAX_PATH_get();

		[DllImport("GrCoreToolsCPP", EntryPoint = "CSharp_GR_MAX_MESSAGE_LENGTH_get")]
		public static extern int GR_MAX_MESSAGE_LENGTH_get();

		[DllImport("GrCoreToolsCPP", EntryPoint = "CSharp_GR_MAX_CONFIG_LENGTH_get")]
		public static extern int GR_MAX_CONFIG_LENGTH_get();

		[DllImport("GrCoreToolsCPP", EntryPoint = "CSharp_DataTypeInfo_GetPixelSize")]
		public static extern int DataTypeInfo_GetPixelSize(int jarg1);

		[DllImport("GrCoreToolsCPP", EntryPoint = "CSharp_DataTypeInfo_GetFlags")]
		public static extern int DataTypeInfo_GetFlags(int jarg1);

		[DllImport("GrCoreToolsCPP", EntryPoint = "CSharp_DataTypeInfo_IsLinear")]
		public static extern bool DataTypeInfo_IsLinear(int jarg1);

		[DllImport("GrCoreToolsCPP", EntryPoint = "CSharp_DataTypeInfo_GetNumChannels")]
		public static extern int DataTypeInfo_GetNumChannels(int jarg1);

		[DllImport("GrCoreToolsCPP", EntryPoint = "CSharp_DataTypeInfo_GetChannelDataType")]
		public static extern int DataTypeInfo_GetChannelDataType(int jarg1);

		[DllImport("GrCoreToolsCPP", EntryPoint = "CSharp_DataTypeInfo_GetChannelSize__SWIG_0")]
		public static extern int DataTypeInfo_GetChannelSize__SWIG_0(int jarg1);

		[DllImport("GrCoreToolsCPP", EntryPoint = "CSharp_DataTypeInfo_GetChannelSize__SWIG_1")]
		public static extern int DataTypeInfo_GetChannelSize__SWIG_1(int jarg1);

		[DllImport("GrCoreToolsCPP", EntryPoint = "CSharp_DataTypeInfo_GetDatatype")]
		public static extern int DataTypeInfo_GetDatatype(int jarg1, int jarg2, int jarg3);

		[DllImport("GrCoreToolsCPP", EntryPoint = "CSharp_DataTypeInfo_ToString")]
		public static extern string DataTypeInfo_ToString(int jarg1);

		[DllImport("GrCoreToolsCPP", EntryPoint = "CSharp_new_DataTypeInfo")]
		public static extern IntPtr new_DataTypeInfo();

		[DllImport("GrCoreToolsCPP", EntryPoint = "CSharp_delete_DataTypeInfo")]
		public static extern void delete_DataTypeInfo(HandleRef jarg1);

		[DllImport("GrCoreToolsCPP", EntryPoint = "CSharp_GuidBuilder_NewGuid")]
		public static extern void GuidBuilder_NewGuid(IntPtr jarg1);

		[DllImport("GrCoreToolsCPP", EntryPoint = "CSharp_new_GuidBuilder")]
		public static extern IntPtr new_GuidBuilder();

		[DllImport("GrCoreToolsCPP", EntryPoint = "CSharp_delete_GuidBuilder")]
		public static extern void delete_GuidBuilder(HandleRef jarg1);

		[DllImport("GrCoreToolsCPP", EntryPoint = "CSharp_IHashProgress_Started")]
		public static extern void IHashProgress_Started(HandleRef jarg1);

		[DllImport("GrCoreToolsCPP", EntryPoint = "CSharp_IHashProgress_Progress")]
		public static extern void IHashProgress_Progress(HandleRef jarg1, double jarg2);

		[DllImport("GrCoreToolsCPP", EntryPoint = "CSharp_IHashProgress_Finished")]
		public static extern void IHashProgress_Finished(HandleRef jarg1);

		[DllImport("GrCoreToolsCPP", EntryPoint = "CSharp_delete_IHashProgress")]
		public static extern void delete_IHashProgress(HandleRef jarg1);

		[DllImport("GrCoreToolsCPP", EntryPoint = "CSharp_new_IHashProgress")]
		public static extern IntPtr new_IHashProgress();

		[DllImport("GrCoreToolsCPP", EntryPoint = "CSharp_MD5Checker_CalculateChecksum__SWIG_0")]
		public static extern void MD5Checker_CalculateChecksum__SWIG_0([MarshalAs(UnmanagedType.LPWStr)] string jarg1, IntPtr jarg2, HandleRef jarg3);

		[DllImport("GrCoreToolsCPP", EntryPoint = "CSharp_MD5Checker_CalculateChecksum__SWIG_1")]
		public static extern void MD5Checker_CalculateChecksum__SWIG_1([MarshalAs(UnmanagedType.LPWStr)] string jarg1, IntPtr jarg2);

		[DllImport("GrCoreToolsCPP", EntryPoint = "CSharp_MD5Checker_Validate__SWIG_0")]
		public static extern bool MD5Checker_Validate__SWIG_0([MarshalAs(UnmanagedType.LPWStr)] string jarg1, IntPtr jarg2, HandleRef jarg3);

		[DllImport("GrCoreToolsCPP", EntryPoint = "CSharp_MD5Checker_Validate__SWIG_1")]
		public static extern bool MD5Checker_Validate__SWIG_1([MarshalAs(UnmanagedType.LPWStr)] string jarg1, IntPtr jarg2);

		[DllImport("GrCoreToolsCPP", EntryPoint = "CSharp_MD5Checker_Abort")]
		public static extern void MD5Checker_Abort();

		[DllImport("GrCoreToolsCPP", EntryPoint = "CSharp_new_MD5Checker")]
		public static extern IntPtr new_MD5Checker();

		[DllImport("GrCoreToolsCPP", EntryPoint = "CSharp_delete_MD5Checker")]
		public static extern void delete_MD5Checker(HandleRef jarg1);

		[DllImport("GrCoreToolsCPP", EntryPoint = "CSharp_IHashAlgorithm_ComputeHash")]
		public static extern void IHashAlgorithm_ComputeHash(HandleRef jarg1, HandleRef jarg2, uint jarg3, HandleRef jarg4, HandleRef jarg5);

		[DllImport("GrCoreToolsCPP", EntryPoint = "CSharp_IHashAlgorithm_HashLength")]
		public static extern uint IHashAlgorithm_HashLength(HandleRef jarg1);

		[DllImport("GrCoreToolsCPP", EntryPoint = "CSharp_IHashAlgorithm_AddBytes")]
		public static extern void IHashAlgorithm_AddBytes(HandleRef jarg1, HandleRef jarg2, uint jarg3);

		[DllImport("GrCoreToolsCPP", EntryPoint = "CSharp_IHashAlgorithm_GetHash")]
		public static extern void IHashAlgorithm_GetHash(HandleRef jarg1, HandleRef jarg2);

		[DllImport("GrCoreToolsCPP", EntryPoint = "CSharp_delete_IHashAlgorithm")]
		public static extern void delete_IHashAlgorithm(HandleRef jarg1);

		[DllImport("GrCoreToolsCPP", EntryPoint = "CSharp_new_MD5Calculation")]
		public static extern IntPtr new_MD5Calculation();

		[DllImport("GrCoreToolsCPP", EntryPoint = "CSharp_delete_MD5Calculation")]
		public static extern void delete_MD5Calculation(HandleRef jarg1);

		[DllImport("GrCoreToolsCPP", EntryPoint = "CSharp_MD5Calculation_ComputeHash")]
		public static extern void MD5Calculation_ComputeHash(HandleRef jarg1, uint jarg2, HandleRef jarg3, HandleRef jarg4);

		[DllImport("GrCoreToolsCPP", EntryPoint = "CSharp_MD5Calculation_HashLength")]
		public static extern uint MD5Calculation_HashLength(HandleRef jarg1);

		[DllImport("GrCoreToolsCPP", EntryPoint = "CSharp_MD5Calculation_AddBytes")]
		public static extern void MD5Calculation_AddBytes(HandleRef jarg1, HandleRef jarg2, uint jarg3);

		[DllImport("GrCoreToolsCPP", EntryPoint = "CSharp_MD5Calculation_GetHash")]
		public static extern void MD5Calculation_GetHash(HandleRef jarg1, HandleRef jarg2);

		[DllImport("GrCoreToolsCPP", EntryPoint = "CSharp_DiskManagement_GetFreeDiskSpace")]
		public static extern bool DiskManagement_GetFreeDiskSpace([MarshalAs(UnmanagedType.LPWStr)] string jarg1, ref ulong jarg2);

		[DllImport("GrCoreToolsCPP", EntryPoint = "CSharp_new_DiskManagement")]
		public static extern IntPtr new_DiskManagement();

		[DllImport("GrCoreToolsCPP", EntryPoint = "CSharp_delete_DiskManagement")]
		public static extern void delete_DiskManagement(HandleRef jarg1);
	}
	public class GuidBuilder : IDisposable
	{
		private HandleRef swigCPtr;

		protected bool swigCMemOwn;

		internal GuidBuilder(IntPtr cPtr, bool cMemoryOwn)
		{
			swigCMemOwn = cMemoryOwn;
			swigCPtr = new HandleRef(this, cPtr);
		}

		internal static HandleRef getCPtr(GuidBuilder obj)
		{
			return obj?.swigCPtr ?? new HandleRef(null, IntPtr.Zero);
		}

		~GuidBuilder()
		{
			Dispose();
		}

		public virtual void Dispose()
		{
			lock (this)
			{
				if (swigCPtr.Handle != IntPtr.Zero)
				{
					if (swigCMemOwn)
					{
						swigCMemOwn = false;
						GrCoreToolsCPPPINVOKE.delete_GuidBuilder(swigCPtr);
					}
					swigCPtr = new HandleRef(null, IntPtr.Zero);
				}
				GC.SuppressFinalize(this);
			}
		}

		public static void NewGuid(out GraphineGuid arg0)
		{
			arg0 = default(GraphineGuid);
			IntPtr intPtr = Marshal.AllocHGlobal(Marshal.SizeOf(typeof(GraphineGuid)));
			try
			{
				GrCoreToolsCPPPINVOKE.GuidBuilder_NewGuid(intPtr);
			}
			finally
			{
				arg0 = (GraphineGuid)Marshal.PtrToStructure(intPtr, typeof(GraphineGuid));
				Marshal.FreeHGlobal(intPtr);
			}
		}

		public GuidBuilder()
			: this(GrCoreToolsCPPPINVOKE.new_GuidBuilder(), cMemoryOwn: true)
		{
		}
	}
	public class IHashAlgorithm : IDisposable
	{
		private HandleRef swigCPtr;

		protected bool swigCMemOwn;

		internal IHashAlgorithm(IntPtr cPtr, bool cMemoryOwn)
		{
			swigCMemOwn = cMemoryOwn;
			swigCPtr = new HandleRef(this, cPtr);
		}

		internal static HandleRef getCPtr(IHashAlgorithm obj)
		{
			return obj?.swigCPtr ?? new HandleRef(null, IntPtr.Zero);
		}

		~IHashAlgorithm()
		{
			Dispose();
		}

		public virtual void Dispose()
		{
			lock (this)
			{
				if (swigCPtr.Handle != IntPtr.Zero)
				{
					if (swigCMemOwn)
					{
						swigCMemOwn = false;
						GrCoreToolsCPPPINVOKE.delete_IHashAlgorithm(swigCPtr);
					}
					swigCPtr = new HandleRef(null, IntPtr.Zero);
				}
				GC.SuppressFinalize(this);
			}
		}

		public virtual void ComputeHash(SWIGTYPE_p_unsigned_char bytes, uint length, SWIGTYPE_p_unsigned_char hash, SWIGTYPE_p_size_t hashLength)
		{
			GrCoreToolsCPPPINVOKE.IHashAlgorithm_ComputeHash(swigCPtr, SWIGTYPE_p_unsigned_char.getCPtr(bytes), length, SWIGTYPE_p_unsigned_char.getCPtr(hash), SWIGTYPE_p_size_t.getCPtr(hashLength));
		}

		public virtual uint HashLength()
		{
			return GrCoreToolsCPPPINVOKE.IHashAlgorithm_HashLength(swigCPtr);
		}

		public virtual void AddBytes(SWIGTYPE_p_unsigned_char bytes, uint len)
		{
			GrCoreToolsCPPPINVOKE.IHashAlgorithm_AddBytes(swigCPtr, SWIGTYPE_p_unsigned_char.getCPtr(bytes), len);
		}

		public virtual void GetHash(SWIGTYPE_p_unsigned_char hash)
		{
			GrCoreToolsCPPPINVOKE.IHashAlgorithm_GetHash(swigCPtr, SWIGTYPE_p_unsigned_char.getCPtr(hash));
		}
	}
	public class IHashProgress : IDisposable
	{
		private HandleRef swigCPtr;

		protected bool swigCMemOwn;

		internal IHashProgress(IntPtr cPtr, bool cMemoryOwn)
		{
			swigCMemOwn = cMemoryOwn;
			swigCPtr = new HandleRef(this, cPtr);
		}

		internal static HandleRef getCPtr(IHashProgress obj)
		{
			return obj?.swigCPtr ?? new HandleRef(null, IntPtr.Zero);
		}

		~IHashProgress()
		{
			Dispose();
		}

		public virtual void Dispose()
		{
			lock (this)
			{
				if (swigCPtr.Handle != IntPtr.Zero)
				{
					if (swigCMemOwn)
					{
						swigCMemOwn = false;
						GrCoreToolsCPPPINVOKE.delete_IHashProgress(swigCPtr);
					}
					swigCPtr = new HandleRef(null, IntPtr.Zero);
				}
				GC.SuppressFinalize(this);
			}
		}

		public virtual void Started()
		{
			GrCoreToolsCPPPINVOKE.IHashProgress_Started(swigCPtr);
		}

		public virtual void Progress(double percent)
		{
			GrCoreToolsCPPPINVOKE.IHashProgress_Progress(swigCPtr, percent);
		}

		public virtual void Finished()
		{
			GrCoreToolsCPPPINVOKE.IHashProgress_Finished(swigCPtr);
		}

		public IHashProgress()
			: this(GrCoreToolsCPPPINVOKE.new_IHashProgress(), cMemoryOwn: true)
		{
		}
	}
	public class MD5Calculation : IDisposable
	{
		private HandleRef swigCPtr;

		protected bool swigCMemOwn;

		internal MD5Calculation(IntPtr cPtr, bool cMemoryOwn)
		{
			swigCMemOwn = cMemoryOwn;
			swigCPtr = new HandleRef(this, cPtr);
		}

		internal static HandleRef getCPtr(MD5Calculation obj)
		{
			return obj?.swigCPtr ?? new HandleRef(null, IntPtr.Zero);
		}

		~MD5Calculation()
		{
			Dispose();
		}

		public virtual void Dispose()
		{
			lock (this)
			{
				if (swigCPtr.Handle != IntPtr.Zero)
				{
					if (swigCMemOwn)
					{
						swigCMemOwn = false;
						GrCoreToolsCPPPINVOKE.delete_MD5Calculation(swigCPtr);
					}
					swigCPtr = new HandleRef(null, IntPtr.Zero);
				}
				GC.SuppressFinalize(this);
			}
		}

		public MD5Calculation()
			: this(GrCoreToolsCPPPINVOKE.new_MD5Calculation(), cMemoryOwn: true)
		{
		}

		public static void ComputeHash(SWIGTYPE_p_unsigned_char bytes, uint length, SWIGTYPE_p_unsigned_char hash, SWIGTYPE_p_size_t hashLength)
		{
			GrCoreToolsCPPPINVOKE.MD5Calculation_ComputeHash(SWIGTYPE_p_unsigned_char.getCPtr(bytes), length, SWIGTYPE_p_unsigned_char.getCPtr(hash), SWIGTYPE_p_size_t.getCPtr(hashLength));
		}

		public uint HashLength()
		{
			return GrCoreToolsCPPPINVOKE.MD5Calculation_HashLength(swigCPtr);
		}

		public void AddBytes(SWIGTYPE_p_unsigned_char bytes, uint len)
		{
			GrCoreToolsCPPPINVOKE.MD5Calculation_AddBytes(swigCPtr, SWIGTYPE_p_unsigned_char.getCPtr(bytes), len);
		}

		public void GetHash(SWIGTYPE_p_unsigned_char hash)
		{
			GrCoreToolsCPPPINVOKE.MD5Calculation_GetHash(swigCPtr, SWIGTYPE_p_unsigned_char.getCPtr(hash));
		}
	}
	public class MD5Checker : IDisposable
	{
		private HandleRef swigCPtr;

		protected bool swigCMemOwn;

		internal MD5Checker(IntPtr cPtr, bool cMemoryOwn)
		{
			swigCMemOwn = cMemoryOwn;
			swigCPtr = new HandleRef(this, cPtr);
		}

		internal static HandleRef getCPtr(MD5Checker obj)
		{
			return obj?.swigCPtr ?? new HandleRef(null, IntPtr.Zero);
		}

		~MD5Checker()
		{
			Dispose();
		}

		public virtual void Dispose()
		{
			lock (this)
			{
				if (swigCPtr.Handle != IntPtr.Zero)
				{
					if (swigCMemOwn)
					{
						swigCMemOwn = false;
						GrCoreToolsCPPPINVOKE.delete_MD5Checker(swigCPtr);
					}
					swigCPtr = new HandleRef(null, IntPtr.Zero);
				}
				GC.SuppressFinalize(this);
			}
		}

		public static void CalculateChecksum(string filename, ref MD5Hash hash, IHashProgress cp)
		{
			IntPtr intPtr = Marshal.AllocHGlobal(Marshal.SizeOf(typeof(MD5Hash)));
			Marshal.StructureToPtr((object)hash, intPtr, fDeleteOld: false);
			try
			{
				GrCoreToolsCPPPINVOKE.MD5Checker_CalculateChecksum__SWIG_0(filename, intPtr, IHashProgress.getCPtr(cp));
				if (GrCoreToolsCPPPINVOKE.SWIGPendingException.Pending)
				{
					throw GrCoreToolsCPPPINVOKE.SWIGPendingException.Retrieve();
				}
			}
			finally
			{
				hash = (MD5Hash)Marshal.PtrToStructure(intPtr, typeof(MD5Hash));
				Marshal.FreeHGlobal(intPtr);
			}
		}

		public static void CalculateChecksum(string filename, ref MD5Hash hash)
		{
			IntPtr intPtr = Marshal.AllocHGlobal(Marshal.SizeOf(typeof(MD5Hash)));
			Marshal.StructureToPtr((object)hash, intPtr, fDeleteOld: false);
			try
			{
				GrCoreToolsCPPPINVOKE.MD5Checker_CalculateChecksum__SWIG_1(filename, intPtr);
				if (GrCoreToolsCPPPINVOKE.SWIGPendingException.Pending)
				{
					throw GrCoreToolsCPPPINVOKE.SWIGPendingException.Retrieve();
				}
			}
			finally
			{
				hash = (MD5Hash)Marshal.PtrToStructure(intPtr, typeof(MD5Hash));
				Marshal.FreeHGlobal(intPtr);
			}
		}

		public static bool Validate(string filename, ref MD5Hash hash, IHashProgress cp)
		{
			IntPtr intPtr = Marshal.AllocHGlobal(Marshal.SizeOf(typeof(MD5Hash)));
			Marshal.StructureToPtr((object)hash, intPtr, fDeleteOld: false);
			try
			{
				bool result = GrCoreToolsCPPPINVOKE.MD5Checker_Validate__SWIG_0(filename, intPtr, IHashProgress.getCPtr(cp));
				if (GrCoreToolsCPPPINVOKE.SWIGPendingException.Pending)
				{
					throw GrCoreToolsCPPPINVOKE.SWIGPendingException.Retrieve();
				}
				return result;
			}
			finally
			{
				hash = (MD5Hash)Marshal.PtrToStructure(intPtr, typeof(MD5Hash));
				Marshal.FreeHGlobal(intPtr);
			}
		}

		public static bool Validate(string filename, ref MD5Hash hash)
		{
			IntPtr intPtr = Marshal.AllocHGlobal(Marshal.SizeOf(typeof(MD5Hash)));
			Marshal.StructureToPtr((object)hash, intPtr, fDeleteOld: false);
			try
			{
				bool result = GrCoreToolsCPPPINVOKE.MD5Checker_Validate__SWIG_1(filename, intPtr);
				if (GrCoreToolsCPPPINVOKE.SWIGPendingException.Pending)
				{
					throw GrCoreToolsCPPPINVOKE.SWIGPendingException.Retrieve();
				}
				return result;
			}
			finally
			{
				hash = (MD5Hash)Marshal.PtrToStructure(intPtr, typeof(MD5Hash));
				Marshal.FreeHGlobal(intPtr);
			}
		}

		public static void Abort()
		{
			GrCoreToolsCPPPINVOKE.MD5Checker_Abort();
		}

		public MD5Checker()
			: this(GrCoreToolsCPPPINVOKE.new_MD5Checker(), cMemoryOwn: true)
		{
		}
	}
	public class SWIGTYPE_p_size_t
	{
		private HandleRef swigCPtr;

		internal SWIGTYPE_p_size_t(IntPtr cPtr, bool futureUse)
		{
			swigCPtr = new HandleRef(this, cPtr);
		}

		protected SWIGTYPE_p_size_t()
		{
			swigCPtr = new HandleRef(null, IntPtr.Zero);
		}

		internal static HandleRef getCPtr(SWIGTYPE_p_size_t obj)
		{
			return obj?.swigCPtr ?? new HandleRef(null, IntPtr.Zero);
		}
	}
	public class SWIGTYPE_p_unsigned_char
	{
		private HandleRef swigCPtr;

		internal SWIGTYPE_p_unsigned_char(IntPtr cPtr, bool futureUse)
		{
			swigCPtr = new HandleRef(this, cPtr);
		}

		protected SWIGTYPE_p_unsigned_char()
		{
			swigCPtr = new HandleRef(null, IntPtr.Zero);
		}

		internal static HandleRef getCPtr(SWIGTYPE_p_unsigned_char obj)
		{
			return obj?.swigCPtr ?? new HandleRef(null, IntPtr.Zero);
		}
	}
	[Obfuscation(Exclude = true, ApplyToMembers = true)]
	public enum TextureFormat
	{
		R8G8B8A8,
		R16G16B16A16,
		R32G32B32A32,
		BC1,
		BC3,
		BC5,
		BC7,
		BC6,
		BC4,
		ASTC4X4,
		ASTC8X8,
		COUNT
	}
	[Obfuscation(Exclude = true, ApplyToMembers = true)]
	public enum TileFileType
	{
		GTS_WITH_GTP,
		GTS_WITH_GTEX,
		GTP,
		GTEX
	}
}
