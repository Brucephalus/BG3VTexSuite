
// E:\Graphine Granite Toolset 5.0.7\GraphineLicenseManager.exe
// GraphineLicenseManager, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// Global type: <Module>
// Entry point: GraphineLicenseManager.Program.Main
// Architecture: x64
// Runtime: v4.0.30319
// Hash algorithm: SHA1

using System;
using System.CodeDom.Compiler;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration;
using System.Diagnostics;
using System.Drawing;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Management;
using System.Net;
using System.Reflection;
using System.Resources;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using System.Runtime.Versioning;
using System.Security.Cryptography;
using System.Text;
using System.Text.RegularExpressions;
using System.Windows.Forms;
using GraphineLicenseManager.Ed25519b;
using GraphineLicenseManager.Properties;

[assembly: CompilationRelaxations(8)]
[assembly: RuntimeCompatibility(WrapNonExceptionThrows = true)]
[assembly: Debuggable(DebuggableAttribute.DebuggingModes.IgnoreSymbolStoreSequencePoints)]
[assembly: AssemblyCompany("Graphine NV")]
[assembly: AssemblyProduct("Granite SDK")]
[assembly: AssemblyCopyright("Copyright Graphine NV Â© 2013-2017")]
[assembly: AssemblyInformationalVersion("5.0.0.34144")]
[assembly: AssemblyDescription("Generated by cholleme@ZELDA from master/9a8e2032016ca90aea9bc098289abc7dc1f56d8c")]
[assembly: AssemblyTitle("GraphineLicenseManager")]
[assembly: AssemblyConfiguration("")]
[assembly: AssemblyTrademark("")]
[assembly: ComVisible(false)]
[assembly: Guid("a0e66bbd-a91d-4027-b7e2-d99aba747b68")]
[assembly: AssemblyFileVersion("1.0.0.0")]
[assembly: TargetFramework(".NETFramework,Version=v4.5", FrameworkDisplayName = ".NET Framework 4.5")]
[assembly: AssemblyVersion("1.0.0.0")]
namespace GraphineLicenseManager
{
	internal class Activation
	{
		private static string LicenceManagerExe = "GraphineLicenseManager.exe";

		public static readonly string[] activationServers = new string[1] { "http://graphineactivation.appspot.com/graphine_activation" };

		public static string HardwareKey
		{
			get
			{
				string s = FindMACAddresses();
				byte[] bytes = Encoding.UTF8.GetBytes(s);
				return LicenseStringHelpers.EncodeToString(SHA512.Create().ComputeHash(bytes));
			}
		}

		public static string ActivateLicense(string licence, LicenseStringHelpers.GetProxyCredentialsDelegate proxyCredentialsGetter)
		{
			for (int i = 0; i < activationServers.Length; i++)
			{
				string server = activationServers[i];
				try
				{
					string text = ActivateLicense(server, licence, null);
					if (text != null)
					{
						return text;
					}
				}
				catch (LicenseStringHelpers.NeedProxyCredentialsException ex)
				{
					if (proxyCredentialsGetter != null)
					{
						NetworkCredential credential = new NetworkCredential();
						if (!proxyCredentialsGetter(ex.Realm, credential))
						{
							throw new Exception("Could not retrieve proxy server credentials!");
						}
						string text2 = ActivateLicense(server, licence, credential);
						if (text2 != null)
						{
							return text2;
						}
					}
				}
				catch (Exception ex2)
				{
					if (i == activationServers.Length - 1)
					{
						throw ex2;
					}
				}
			}
			return null;
		}

		private static string ActivateLicense(string server, string license, NetworkCredential credential)
		{
			string text = LicenseStringHelpers.RetrieveString(server + "?method=activate&license=" + Uri.EscapeDataString(license) + "&hardware_id=" + Uri.EscapeDataString(HardwareKey) + "&machine_name=" + Uri.EscapeDataString(Environment.MachineName), credential);
			CheckActivation(license, text);
			PersistActivation(license, text);
			return text;
		}

		public static void CheckActivation(string license, string activation)
		{
			if (!LicenseStringHelpers.IsSignatureValid(activation, GraphineKeys.publicActivationKey))
			{
				throw new Exception("The provided activation key is invalid or has been tampred with.");
			}
			string keyField = LicenseStringHelpers.GetKeyField(activation, "hardware");
			string keyField2 = LicenseStringHelpers.GetKeyField(license, "signature");
			string keyField3 = LicenseStringHelpers.GetKeyField(activation, "key");
			if (string.Compare(HardwareKey, keyField, ignoreCase: false) != 0)
			{
				throw new Exception("The provided activation key is for this hardware.");
			}
			if (string.Compare(keyField2, keyField3, ignoreCase: false) != 0)
			{
				throw new Exception("The provided activation key is not for this license.");
			}
			string keyField4 = LicenseStringHelpers.GetKeyField(activation, "expires");
			if (LicenseStringHelpers.GetNow() > LicenseStringHelpers.ParseDate(keyField4))
			{
				throw new Exception("The provided activation has expired.");
			}
		}

		public static void PersistActivation(string license, string activation)
		{
			string[] array = LicenseStringHelpers.GetKeyField(license, "product").Split(',');
			foreach (string text in array)
			{
				LicenseStringHelpers.WriteRegistryValue("SOFTWARE\\Graphine\\" + text, "Activation", activation);
			}
		}

		public static void DeleteActivation(string license)
		{
			string[] array = LicenseStringHelpers.GetKeyField(license, "product").Split(',');
			foreach (string text in array)
			{
				LicenseStringHelpers.DeleteRegistryValue("SOFTWARE\\Graphine\\" + text, "Activation");
			}
		}

		public static string DetectActivation(string license)
		{
			string text = null;
			string[] array = LicenseStringHelpers.GetKeyField(license, "product").Split(',');
			foreach (string text2 in array)
			{
				try
				{
					text = LicenseStringHelpers.ReadRegistryValue("SOFTWARE\\Graphine\\" + text2, "Activation");
				}
				catch (Exception)
				{
					continue;
				}
				if (text != null)
				{
					try
					{
						CheckActivation(license, text);
						return text;
					}
					catch (Exception)
					{
					}
				}
			}
			return null;
		}

		public static int ExpireDays(string activation)
		{
			if (activation == null)
			{
				return 0;
			}
			string keyField = LicenseStringHelpers.GetKeyField(activation, "expires");
			DateTime now = LicenseStringHelpers.GetNow();
			if (keyField != null)
			{
				return (int)(LicenseStringHelpers.ParseDate(keyField) - now).TotalDays;
			}
			return 0;
		}

		private static string FindMACAddresses()
		{
			string text = "";
			foreach (ManagementObject item in new ManagementObjectSearcher("SELECT * FROM Win32_NetworkAdapter WHERE(AdapterType = 'Ethernet 802.3') AND (MACAddress IS NOT NULL) AND PNPDeviceId LIKE '%PCI%'").Get())
			{
				text += item["MACAddress"].ToString();
			}
			return text;
		}

		private static string GetHDDSerialNumbers()
		{
			string text = "";
			foreach (ManagementObject item in new ManagementObjectSearcher("SELECT * FROM Win32_PhysicalMedia WHERE SerialNumber IS NOT NULL").Get())
			{
				text += item["SerialNumber"].ToString();
			}
			return text;
		}

		private static string FindLicenseManagerBesideAssembly()
		{
			string location = Assembly.GetExecutingAssembly().Location;
			if (location == null)
			{
				return null;
			}
			string text = Path.Combine(Path.GetDirectoryName(location), LicenceManagerExe);
			if (File.Exists(text))
			{
				return text;
			}
			return null;
		}

		private static string FindLicenseManagerUnityPluginsFolder()
		{
			return null;
		}

		private static string FindLicenseManagerBesideExecutable()
		{
			string baseDirectory = AppDomain.CurrentDomain.BaseDirectory;
			if (baseDirectory == null)
			{
				return null;
			}
			string text = Path.Combine(baseDirectory, LicenceManagerExe);
			if (File.Exists(text))
			{
				return text;
			}
			return null;
		}

		private static string FindLicenseManagerInSdkDirectory()
		{
			string environmentVariable = Environment.GetEnvironmentVariable("GRANITESDK_PATH");
			if (environmentVariable == null)
			{
				return null;
			}
			string text = Path.Combine(Path.Combine(Path.Combine(environmentVariable, "Binaries"), "x64"), LicenceManagerExe);
			if (File.Exists(text))
			{
				return text;
			}
			return null;
		}

		private static string FindLicenseManagerInToolsDirectory()
		{
			string environmentVariable = Environment.GetEnvironmentVariable("GRANITE_TOOLS_PATH");
			if (environmentVariable == null)
			{
				return null;
			}
			string text = Path.Combine(environmentVariable, LicenceManagerExe);
			if (File.Exists(text))
			{
				return text;
			}
			return null;
		}

		private static string FindLicenseManagerInCWD()
		{
			string fullPath = Path.GetFullPath(LicenceManagerExe);
			if (File.Exists(fullPath))
			{
				return fullPath;
			}
			return null;
		}

		public static bool RunLicenseManager(string productDescription, string[] acceptableProductLicenses, string extraCmdArgs, bool trySilent)
		{
			Process process = new Process();
			string text = null;
			text = FindLicenseManagerBesideAssembly();
			if (text == null)
			{
				text = FindLicenseManagerBesideExecutable();
			}
			if (text == null)
			{
				text = FindLicenseManagerUnityPluginsFolder();
			}
			if (text == null)
			{
				text = FindLicenseManagerInToolsDirectory();
			}
			if (text == null)
			{
				text = FindLicenseManagerInSdkDirectory();
			}
			if (text == null)
			{
				text = FindLicenseManagerInCWD();
			}
			if (text != null)
			{
				try
				{
					process.StartInfo.UseShellExecute = true;
					process.StartInfo.FileName = text;
					process.StartInfo.Arguments = "\"" + productDescription + "\"";
					if (extraCmdArgs != null)
					{
						ProcessStartInfo startInfo = process.StartInfo;
						startInfo.Arguments = startInfo.Arguments + " " + extraCmdArgs;
					}
					if (trySilent)
					{
						process.StartInfo.Arguments += " -trysilent";
					}
					foreach (string text2 in acceptableProductLicenses)
					{
						ProcessStartInfo startInfo2 = process.StartInfo;
						startInfo2.Arguments = startInfo2.Arguments + " \"" + text2 + "\"";
					}
					process.Start();
					process.WaitForExit();
				}
				catch (Exception)
				{
					return false;
				}
				return true;
			}
			return false;
		}
	}
	internal class GraphineKeys
	{
		public static byte[] publicKey = new byte[32]
		{
			71, 233, 65, 252, 115, 90, 173, 9, 126, 115,
			60, 156, 190, 180, 25, 68, 145, 246, 44, 42,
			67, 22, 192, 1, 18, 195, 215, 126, 179, 37,
			35, 191
		};

		public static byte[] publicActivationKey = new byte[32]
		{
			127, 219, 104, 49, 168, 5, 222, 208, 36, 31,
			198, 211, 110, 248, 132, 205, 199, 53, 1, 145,
			243, 46, 67, 186, 44, 200, 222, 250, 72, 120,
			249, 101
		};
	}
	internal class License
	{
		public static void CheckLicense(string licence, string product)
		{
			if (!LicenseStringHelpers.IsSignatureValid(licence, GraphineKeys.publicKey))
			{
				throw new Exception("The provided license is invalid or has been tampred with.");
			}
			string[] array = LicenseStringHelpers.GetKeyField(licence, "product").Split(',');
			bool flag = false;
			string[] array2 = array;
			foreach (string strB in array2)
			{
				if (string.Compare(product, strB, ignoreCase: true) == 0)
				{
					flag = true;
					break;
				}
			}
			if (!flag)
			{
				throw new Exception("The provided license key is not a valid " + product + " license.");
			}
			string keyField = LicenseStringHelpers.GetKeyField(licence, "expires");
			if (LicenseStringHelpers.GetNow() > LicenseStringHelpers.ParseDate(keyField))
			{
				throw new Exception("The provided license has expired.");
			}
		}

		public static string DetectLicense(string[] products, out int productIndex)
		{
			string text = null;
			for (int i = 0; i < products.Length; i++)
			{
				try
				{
					text = LicenseStringHelpers.ReadRegistryValue("SOFTWARE\\Graphine\\" + products[i], "License");
				}
				catch (Exception)
				{
					continue;
				}
				if (text != null)
				{
					try
					{
						CheckLicense(text, products[i]);
						productIndex = i;
						return text;
					}
					catch (Exception)
					{
					}
				}
			}
			productIndex = -1;
			return null;
		}

		public static void PersistLicense(string license)
		{
			string[] array = LicenseStringHelpers.GetKeyField(license, "product").Split(',');
			foreach (string text in array)
			{
				LicenseStringHelpers.WriteRegistryValue("SOFTWARE\\Graphine\\" + text, "License", license);
			}
		}

		public static void DeleteLicense(string license)
		{
			string[] array = LicenseStringHelpers.GetKeyField(license, "product").Split(',');
			foreach (string text in array)
			{
				LicenseStringHelpers.DeleteRegistryValue("SOFTWARE\\Graphine\\" + text, "License");
			}
		}

		public static void CheckLicenseAndActivate(string productDescription, string[] products, out int licenseId, out int subLicenseId, string extraManagerCmdArgs = null)
		{
			int productIndex = 0;
			string text = DetectLicense(products, out productIndex);
			if (text != null)
			{
				if (Activation.DetectActivation(text) == null)
				{
					Activation.RunLicenseManager(productDescription, products, extraManagerCmdArgs, trySilent: true);
					if (Activation.DetectActivation(text) == null)
					{
						throw new ArgumentException("Invalid License (1)");
					}
				}
			}
			else
			{
				Activation.RunLicenseManager(productDescription, products, extraManagerCmdArgs, trySilent: true);
				text = DetectLicense(products, out productIndex);
				if (text == null)
				{
					throw new ArgumentException("Invalid License (2)");
				}
				if (Activation.DetectActivation(text) == null)
				{
					throw new ArgumentException("Invalid License (3)");
				}
			}
			licenseId = productIndex;
			string keyField = LicenseStringHelpers.GetKeyField(text, "sub");
			if (keyField != null)
			{
				subLicenseId = 0;
				int.TryParse(keyField, out subLicenseId);
			}
			else
			{
				subLicenseId = 0;
			}
		}
	}
	internal class LicenseStringHelpers
	{
		public class ActivationUserException : Exception
		{
			public string DisplayHtml;
		}

		public class NeedProxyCredentialsException : Exception
		{
			public string Realm;
		}

		public delegate bool GetProxyCredentialsDelegate(string realm, NetworkCredential credential);

		private static readonly string HEXES = "0123456789abcdef";

		private const int KEY_QUERY_VALUE = 1;

		private const int KEY_SET_VALUE = 2;

		private const int KEY_WRITE = 131078;

		private const int KEY_READ = 131097;

		private const int KEY_WOW64_64KEY = 256;

		private const int REG_SZ = 1;

		private const int ERROR_SUCCESS = 0;

		private const int KEY_ALL_ACCESS = 983103;

		public static bool IsSignatureValid(string licence, byte[] publicKey)
		{
			int num = licence.LastIndexOf('|');
			if (num < 0)
			{
				return false;
			}
			int num2 = licence.IndexOf(':', num);
			if (num2 < 0)
			{
				return false;
			}
			byte[] signature = DecodeFromString(licence.Substring(num2 + 1));
			byte[] bytes = Encoding.UTF8.GetBytes(licence.Substring(0, num));
			return Signature.Verify(signature, bytes, publicKey);
		}

		public static string GetKeyField(string key, string field)
		{
			int num = key.IndexOf(field);
			if (num < 0)
			{
				return null;
			}
			int length = field.Length;
			if (num + length < key.Length && key[num + length] == ':')
			{
				int num2 = key.IndexOf('|', num + length + 1);
				if (num2 < 0)
				{
					return key.Substring(num + length + 1).Replace('+', ' ');
				}
				int num3 = num + length + 1;
				return key.Substring(num3, num2 - num3).Replace('+', ' ');
			}
			return null;
		}

		private static int CharToNibble(char c)
		{
			if (c >= '0' && c <= '9')
			{
				return c - 48;
			}
			if (c >= 'a' && c <= 'f')
			{
				return c - 97 + 10;
			}
			throw new ArgumentException("Invalid hex character.");
		}

		public static byte[] DecodeFromString(string s)
		{
			if (s.Length % 2 != 0)
			{
				throw new ArgumentException("Invalid hex string length");
			}
			int num = s.Length / 2;
			byte[] array = new byte[num];
			for (int i = 0; i < num; i++)
			{
				array[i] = (byte)((CharToNibble(s[i * 2]) << 4) | CharToNibble(s[i * 2 + 1]));
			}
			return array;
		}

		public static string EncodeToString(byte[] raw)
		{
			if (raw == null)
			{
				return null;
			}
			return EncodeToString(raw, 0, raw.Length);
		}

		public static string EncodeToString(byte[] raw, int first, int count)
		{
			if (raw == null)
			{
				return null;
			}
			StringBuilder stringBuilder = new StringBuilder(2 * count);
			for (int i = 0; i < count; i++)
			{
				byte b = raw[first + i];
				stringBuilder.Append(HEXES[(b & 0xF0) >> 4]);
				stringBuilder.Append(HEXES[b & 0xF]);
			}
			return stringBuilder.ToString();
		}

		public static string EncodeToCString(byte[] raw)
		{
			if (raw == null)
			{
				return null;
			}
			StringBuilder stringBuilder = new StringBuilder(2 * raw.Length);
			for (int i = 0; i < raw.Length; i++)
			{
				stringBuilder.Append("0x");
				stringBuilder.Append(HEXES[(raw[i] & 0xF0) >> 4]);
				stringBuilder.Append(HEXES[raw[i] & 0xF]);
				if (i != raw.Length - 1)
				{
					stringBuilder.Append(", ");
				}
			}
			return stringBuilder.ToString();
		}

		public static Dictionary<string, string> SplitKey(string key)
		{
			string[] array = key.Split('|');
			Dictionary<string, string> dictionary = new Dictionary<string, string>();
			string[] array2 = array;
			for (int i = 0; i < array2.Length; i++)
			{
				string[] array3 = array2[i].Split(':');
				if (array3.Length == 2)
				{
					dictionary.Add(array3[0], array3[1]);
				}
			}
			return dictionary;
		}

		public static DateTime ParseDate(string licenceDate)
		{
			return DateTime.ParseExact(licenceDate, "dd-MM-yyyy", CultureInfo.InvariantCulture, DateTimeStyles.None);
		}

		public static DateTime GetNow()
		{
			return DateTime.Now;
		}

		public static string EncodeBase32(byte[] data)
		{
			if (data.Length > 268435456)
			{
				return null;
			}
			int num = 0;
			char[] array = new char[(data.Length * 8 + 5 - 1) / 5];
			if (data.Length != 0)
			{
				int num2 = data[0];
				int num3 = 1;
				int num4 = 8;
				while (num4 > 0 || num3 < data.Length)
				{
					if (num4 < 5)
					{
						if (num3 < data.Length)
						{
							num2 <<= 8;
							num2 |= data[num3++] & 0xFF;
							num4 += 8;
						}
						else
						{
							int num5 = 5 - num4;
							num2 <<= num5;
							num4 += num5;
						}
					}
					int index = 0x1F & (num2 >> num4 - 5);
					num4 -= 5;
					array[num++] = "ABCDEFGHIJKLMNOPQRSTUVWXYZ234567"[index];
				}
			}
			return new string(array);
		}

		public static byte[] DecodeBase32(string coded)
		{
			int num = 0;
			int num2 = 0;
			int num3 = 0;
			int num4 = 0;
			for (int i = 0; i < coded.Length; i++)
			{
				char c = coded[i];
				if (c == ' ' || c == '\t' || c == '\r' || c == '\n' || c == '-' || c == 'â' || c == 'â' || c == 'â' || c == 'â')
				{
					continue;
				}
				switch (c)
				{
				case '0':
					c = 'O';
					break;
				case '1':
					c = 'L';
					break;
				case '8':
					c = 'B';
					break;
				}
				if ((c >= 'A' && c <= 'Z') || (c >= 'a' && c <= 'z'))
				{
					c = (char)((c & 0x1F) - 1);
				}
				else
				{
					if (c < '2' || c > '7')
					{
						throw new Exception("Invalid character: '" + c.ToString() + "' #" + (int)c);
					}
					c = (char)(c - 24);
				}
				num4++;
			}
			byte[] array = new byte[num4 * 5 / 8];
			for (int j = 0; j < coded.Length; j++)
			{
				char c2 = coded[j];
				if (c2 == ' ' || c2 == '\t' || c2 == '\r' || c2 == '\n' || c2 == '-')
				{
					continue;
				}
				num <<= 5;
				switch (c2)
				{
				case '0':
					c2 = 'O';
					break;
				case '1':
					c2 = 'L';
					break;
				case '8':
					c2 = 'B';
					break;
				}
				if ((c2 >= 'A' && c2 <= 'Z') || (c2 >= 'a' && c2 <= 'z'))
				{
					c2 = (char)((c2 & 0x1F) - 1);
				}
				else
				{
					if (c2 < '2' || c2 > '7')
					{
						return null;
					}
					c2 = (char)(c2 - 24);
				}
				num |= c2;
				num2 += 5;
				if (num2 >= 8)
				{
					array[num3++] = (byte)(num >> num2 - 8);
					num2 -= 8;
				}
			}
			return array;
		}

		[DllImport("Advapi32.dll")]
		private static extern uint RegOpenKeyExW(UIntPtr hKey, [MarshalAs(UnmanagedType.LPWStr)] string lpSubKey, uint ulOptions, int samDesired, out UIntPtr phkResult);

		[DllImport("Advapi32.dll")]
		private static extern uint RegCloseKey(UIntPtr hKey);

		[DllImport("Advapi32.dll")]
		private static extern uint RegQueryValueExW(UIntPtr hKey, [MarshalAs(UnmanagedType.LPWStr)] string lpValueName, int lpReserved, ref uint lpType, [MarshalAs(UnmanagedType.LPWStr)] StringBuilder lpData, ref uint lpcbData);

		[DllImport("Advapi32.dll")]
		private static extern uint RegSetValueExW(UIntPtr hKey, [MarshalAs(UnmanagedType.LPWStr)] string lpValueName, uint Reserved, uint dwType, [MarshalAs(UnmanagedType.LPWStr)] string lpData, uint cbData);

		[DllImport("Advapi32.dll")]
		private static extern uint RegCreateKeyExW(UIntPtr hKey, [MarshalAs(UnmanagedType.LPWStr)] string lpSubKey, uint Reserved, [MarshalAs(UnmanagedType.LPWStr)] string lpClass, uint dwOptions, uint samDesired, UIntPtr lpSecurityAttributes, ref UIntPtr phkResult, ref uint lpdwDisposition);

		[DllImport("Advapi32.dll")]
		private static extern uint RegDeleteValueW(UIntPtr hKey, [MarshalAs(UnmanagedType.LPWStr)] string valueName);

		public static string ReadRegistryValue(string key, string value)
		{
			UIntPtr hKey = (UIntPtr)2147483650u;
			UIntPtr phkResult = UIntPtr.Zero;
			try
			{
				if (RegOpenKeyExW(hKey, key, 0u, 131353, out phkResult) != 0)
				{
					return null;
				}
				uint lpType = 0u;
				StringBuilder stringBuilder = new StringBuilder(2048);
				uint lpcbData = (uint)(stringBuilder.Capacity * 2);
				if (RegQueryValueExW(phkResult, value, 0, ref lpType, stringBuilder, ref lpcbData) != 0)
				{
					return null;
				}
				if (lpType != 1)
				{
					return null;
				}
				return stringBuilder.ToString();
			}
			finally
			{
				if (UIntPtr.Zero != phkResult)
				{
					RegCloseKey(phkResult);
				}
			}
		}

		public static void WriteRegistryValue(string keyName, string valueName, string value)
		{
			UIntPtr hKey = (UIntPtr)2147483650u;
			UIntPtr phkResult = UIntPtr.Zero;
			try
			{
				uint lpdwDisposition = 0u;
				if (RegCreateKeyExW(hKey, keyName, 0u, null, 0u, 131334u, UIntPtr.Zero, ref phkResult, ref lpdwDisposition) != 0)
				{
					throw new Exception("RegCreateKeyExW failed");
				}
				if (RegSetValueExW(phkResult, valueName, 0u, 1u, value, (uint)(2 * (value.Length + 1))) != 0)
				{
					throw new Exception("RegSetValueExW failed");
				}
			}
			finally
			{
				if (UIntPtr.Zero != phkResult)
				{
					RegCloseKey(phkResult);
				}
			}
		}

		public static void DeleteRegistryValue(string keyName, string valueName)
		{
			UIntPtr hKey = (UIntPtr)2147483650u;
			UIntPtr phkResult = UIntPtr.Zero;
			try
			{
				if (RegOpenKeyExW(hKey, keyName, 0u, 983359, out phkResult) != 0)
				{
					throw new Exception("RegOpenKeyEx error");
				}
				if (RegDeleteValueW(phkResult, valueName) != 0)
				{
					throw new Exception("RegOpenKeyEx error");
				}
			}
			finally
			{
				if (UIntPtr.Zero != phkResult)
				{
					RegCloseKey(phkResult);
				}
			}
		}

		public static string RetrieveString(string fullRequestUrl, NetworkCredential credential)
		{
			HttpWebRequest httpWebRequest = (HttpWebRequest)WebRequest.Create(fullRequestUrl);
			if (credential != null && httpWebRequest.Proxy != null)
			{
				httpWebRequest.Proxy.Credentials = credential;
			}
			HttpWebResponse httpWebResponse = null;
			try
			{
				httpWebResponse = (HttpWebResponse)httpWebRequest.GetResponse();
			}
			catch (WebException ex)
			{
				if (ex.Status == WebExceptionStatus.ProtocolError)
				{
					if (ex.Response is HttpWebResponse httpWebResponse2)
					{
						if (httpWebResponse2.StatusCode == HttpStatusCode.ProxyAuthenticationRequired)
						{
							throw new NeedProxyCredentialsException
							{
								Realm = httpWebResponse2.GetResponseHeader("Proxy-Authenticate")
							};
						}
						StreamReader streamReader = new StreamReader(httpWebResponse2.GetResponseStream());
						throw new ActivationUserException
						{
							DisplayHtml = streamReader.ReadToEnd()
						};
					}
					throw ex;
				}
				throw ex;
			}
			Console.WriteLine(httpWebResponse.StatusDescription);
			Stream responseStream = httpWebResponse.GetResponseStream();
			StreamReader streamReader2 = new StreamReader(responseStream);
			string text = streamReader2.ReadToEnd();
			text = text.Trim();
			streamReader2.Close();
			responseStream.Close();
			httpWebResponse.Close();
			return text;
		}

		private static string RetrieveLicense(string server, string tempraryLicenseString, string company, string userName, string email, NetworkCredential credential)
		{
			return RetrieveString(server + "?method=retrieve&license=" + Uri.EscapeDataString(tempraryLicenseString) + "&company=" + Uri.EscapeDataString(company) + "&name=" + Uri.EscapeDataString(userName) + "&email=" + Uri.EscapeDataString(email), credential);
		}

		public static string RetrieveLicense(string temoraryLicenseString, string company, string userName, string email, GetProxyCredentialsDelegate proxyCredentialsGetter)
		{
			for (int i = 0; i < Activation.activationServers.Length; i++)
			{
				string server = Activation.activationServers[i];
				try
				{
					string text = RetrieveLicense(server, temoraryLicenseString, company, userName, email, null);
					if (text != null)
					{
						return text;
					}
				}
				catch (NeedProxyCredentialsException ex)
				{
					if (proxyCredentialsGetter != null)
					{
						NetworkCredential credential = new NetworkCredential();
						if (!proxyCredentialsGetter(ex.Realm, credential))
						{
							throw new Exception("Could not retrieve proxy server credentials!");
						}
						string text2 = RetrieveLicense(server, temoraryLicenseString, company, userName, email, credential);
						if (text2 != null)
						{
							return text2;
						}
					}
				}
				catch (Exception ex2)
				{
					if (i == Activation.activationServers.Length - 1)
					{
						throw ex2;
					}
				}
			}
			return null;
		}

		public static string DecodeUserLicense(string baseCodedLicense)
		{
			byte[] array = DecodeBase32(baseCodedLicense);
			if (array == null)
			{
				throw new Exception("Invalid license format.");
			}
			int num = -1;
			for (int i = 0; i < array.Length; i++)
			{
				if (array[i] == 0)
				{
					num = i;
					break;
				}
			}
			if (num < 0)
			{
				throw new Exception("Invalid license format. Could not extract a signature from the provided license.");
			}
			return Encoding.UTF8.GetString(array, 0, num) + "|signature:" + EncodeToString(array, num + 1, array.Length - num - 1);
		}
	}
	public class ActivationResultWindow : Form
	{
		private IContainer components;

		private WebBrowser webBrowser1;

		private Panel panel1;

		private Button button1;

		public ActivationResultWindow()
		{
			InitializeComponent();
		}

		public void SetHtml(string htmlCode)
		{
			webBrowser1.DocumentText = htmlCode;
		}

		private void webBrowser1_Navigating(object sender, WebBrowserNavigatingEventArgs e)
		{
			if (string.Compare(e.TargetFrameName, "external_browser", ignoreCase: true) == 0)
			{
				Process.Start(e.Url.ToString());
				e.Cancel = true;
			}
		}

		private void webBrowser1_DocumentCompleted(object sender, WebBrowserDocumentCompletedEventArgs e)
		{
			Text = webBrowser1.Document.Title;
		}

		private void webBrowser1_NewWindow(object sender, CancelEventArgs e)
		{
		}

		protected override void Dispose(bool disposing)
		{
			if (disposing && components != null)
			{
				components.Dispose();
			}
			base.Dispose(disposing);
		}

		private void InitializeComponent()
		{
			this.webBrowser1 = new System.Windows.Forms.WebBrowser();
			this.panel1 = new System.Windows.Forms.Panel();
			this.button1 = new System.Windows.Forms.Button();
			this.panel1.SuspendLayout();
			base.SuspendLayout();
			this.webBrowser1.AllowNavigation = false;
			this.webBrowser1.AllowWebBrowserDrop = false;
			this.webBrowser1.Dock = System.Windows.Forms.DockStyle.Fill;
			this.webBrowser1.IsWebBrowserContextMenuEnabled = false;
			this.webBrowser1.Location = new System.Drawing.Point(0, 0);
			this.webBrowser1.MinimumSize = new System.Drawing.Size(20, 20);
			this.webBrowser1.Name = "webBrowser1";
			this.webBrowser1.ScriptErrorsSuppressed = true;
			this.webBrowser1.Size = new System.Drawing.Size(624, 397);
			this.webBrowser1.TabIndex = 0;
			this.webBrowser1.WebBrowserShortcutsEnabled = false;
			this.webBrowser1.DocumentCompleted += new System.Windows.Forms.WebBrowserDocumentCompletedEventHandler(webBrowser1_DocumentCompleted);
			this.webBrowser1.Navigating += new System.Windows.Forms.WebBrowserNavigatingEventHandler(webBrowser1_Navigating);
			this.webBrowser1.NewWindow += new System.ComponentModel.CancelEventHandler(webBrowser1_NewWindow);
			this.panel1.Controls.Add(this.button1);
			this.panel1.Dock = System.Windows.Forms.DockStyle.Bottom;
			this.panel1.Location = new System.Drawing.Point(0, 397);
			this.panel1.Name = "panel1";
			this.panel1.Size = new System.Drawing.Size(624, 44);
			this.panel1.TabIndex = 1;
			this.button1.DialogResult = System.Windows.Forms.DialogResult.OK;
			this.button1.Location = new System.Drawing.Point(12, 9);
			this.button1.Name = "button1";
			this.button1.Size = new System.Drawing.Size(75, 23);
			this.button1.TabIndex = 0;
			this.button1.Text = "Ok";
			this.button1.UseVisualStyleBackColor = true;
			base.AutoScaleDimensions = new System.Drawing.SizeF(6f, 13f);
			base.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;
			base.ClientSize = new System.Drawing.Size(624, 441);
			base.Controls.Add(this.webBrowser1);
			base.Controls.Add(this.panel1);
			base.FormBorderStyle = System.Windows.Forms.FormBorderStyle.FixedDialog;
			base.MaximizeBox = false;
			base.MinimizeBox = false;
			base.Name = "ActivationResultWindow";
			base.SizeGripStyle = System.Windows.Forms.SizeGripStyle.Hide;
			base.StartPosition = System.Windows.Forms.FormStartPosition.CenterScreen;
			this.Text = "Activation Server Message";
			this.panel1.ResumeLayout(false);
			base.ResumeLayout(false);
		}
	}
	public class MainForm : Form
	{
		private enum StatusMessage
		{
			NoLicense,
			NoActivation,
			ExpiredLicense,
			ExpiredActivation,
			WarnExpireActivation,
			ContactingServer,
			AllOk
		}

		private string license = "";

		private string activation = "";

		private bool doingBackgroundWork;

		private bool closeOnFinishedWork;

		private bool trySilent;

		private bool isUnity;

		private string licenseInfoText = "To start using ${Product} on this machine, please press the \"Activate Now\" button to the left.";

		private string activationInfoText = "Please activate your ${Product} license.";

		private const int ExpiryWarningDays = 7;

		private List<string> productsToFind;

		private string genericProductDescription;

		private IContainer components;

		private Label label1;

		private TextBox textBoxLicenseInfo;

		private Label label2;

		private TextBox textBoxActivationCode;

		private TextBox textBoxActivationKey;

		private Label label3;

		private Button buttonActivate;

		private Label label4;

		private TextBox textBoxLicenseKey;

		private Button buttonLoadLic;

		private Label labelWelcomeMessage;

		private PictureBox pictureBox1;

		private BindingSource bindingSource1;

		private Panel panel1;

		private TextBox textBoxActivationInfo;

		private Label label6;

		private OpenFileDialog openFileDialog1;

		private Label labelProgressMessage;

		private PictureBox pictureBoxProgress;

		private ContextMenuStrip contextMenuStrip1;

		private ToolStripMenuItem removeActivationToolStripMenuItem;

		private ToolStripMenuItem removeLicenseToolStripMenuItem;

		private Panel panel2;

		private Panel panel3;

		private Label labelInternalBuild;

		public MainForm()
		{
			InitializeComponent();
			string[] commandLineArgs = Environment.GetCommandLineArgs();
			List<string> list = new List<string>();
			if (commandLineArgs.Length > 1)
			{
				if (commandLineArgs.Length == 2)
				{
					genericProductDescription = commandLineArgs[1];
					list = new List<string>(commandLineArgs.Skip(1));
				}
				else
				{
					genericProductDescription = commandLineArgs[1];
					list = new List<string>(commandLineArgs.Skip(2));
				}
			}
			productsToFind = new List<string>();
			foreach (string item in list)
			{
				if (!item.StartsWith("-"))
				{
					productsToFind.Add(item);
					continue;
				}
				if (item.Equals("-trysilent", StringComparison.InvariantCultureIgnoreCase))
				{
					trySilent = true;
					base.WindowState = FormWindowState.Minimized;
				}
				if (item.Equals("-unity", StringComparison.InvariantCultureIgnoreCase))
				{
					isUnity = true;
				}
			}
			Text = genericProductDescription + " Activation";
			SetStatusMessage(StatusMessage.NoLicense);
			Signature.Test();
			labelInternalBuild.Visible = false;
		}

		private void StartBackgroundWork(string message)
		{
			pictureBoxProgress.Visible = true;
			labelProgressMessage.Visible = true;
			labelProgressMessage.Text = message;
			buttonActivate.Enabled = false;
			buttonLoadLic.Enabled = false;
			doingBackgroundWork = true;
		}

		private void StopAnimation()
		{
			labelProgressMessage.Visible = false;
			pictureBoxProgress.Visible = false;
			buttonActivate.Enabled = true;
			buttonLoadLic.Enabled = true;
			doingBackgroundWork = false;
		}

		private void SetStatusMessage(StatusMessage msg)
		{
			string text = "";
			switch (msg)
			{
			case StatusMessage.NoLicense:
				text = "A ${Product} license could not be detected or it has expired, please enter a valid license.";
				break;
			case StatusMessage.NoActivation:
				text = "${Product} needs to be activated before it can be used.";
				break;
			case StatusMessage.ExpiredLicense:
				text = "Your ${Product} license has expired. Please enter a new license key.";
				break;
			case StatusMessage.ExpiredActivation:
				text = "Your ${Product} activation has expired. Please re-activate it.";
				break;
			case StatusMessage.WarnExpireActivation:
				text = "Your ${Product} activation will expire in ${DaysLeft} days please re-activate now to ensure you can continue working.";
				break;
			case StatusMessage.ContactingServer:
				text = "Contacting the ${Product} activation server.";
				break;
			case StatusMessage.AllOk:
				text = "Your ${Product} license is activated and ready to use.";
				break;
			}
			string newValue = Activation.ExpireDays(activation).ToString();
			text = text.Replace("${Product}", genericProductDescription);
			text = text.Replace("${DaysLeft}", newValue);
			labelWelcomeMessage.Text = text;
		}

		public bool GetProxyCredentialsDelegate(string realm, NetworkCredential credential)
		{
			PoxyLoginForm poxyLoginForm = new PoxyLoginForm();
			poxyLoginForm.Realm = realm;
			if (poxyLoginForm.ShowDialog() == DialogResult.OK)
			{
				credential.Password = poxyLoginForm.Password;
				credential.UserName = poxyLoginForm.UserName;
				return true;
			}
			return false;
		}

		public void UpdateActivation()
		{
			if (doingBackgroundWork)
			{
				return;
			}
			BackgroundWorker backgroundWorker = new BackgroundWorker();
			StartBackgroundWork("Activating...");
			SetStatusMessage(StatusMessage.ContactingServer);
			backgroundWorker.DoWork += delegate(object o, DoWorkEventArgs args)
			{
				args.Result = Activation.ActivateLicense(license, GetProxyCredentialsDelegate);
			};
			backgroundWorker.RunWorkerCompleted += delegate(object o, RunWorkerCompletedEventArgs args)
			{
				StopAnimation();
				if (args.Error != null || args.Result == null)
				{
					base.WindowState = FormWindowState.Normal;
					if (args.Error != null)
					{
						if (args.Error is LicenseStringHelpers.ActivationUserException)
						{
							ActivationResultWindow activationResultWindow = new ActivationResultWindow();
							activationResultWindow.SetHtml((args.Error as LicenseStringHelpers.ActivationUserException).DisplayHtml);
							activationResultWindow.ShowDialog();
							if (activation == null)
							{
								SetStatusMessage(StatusMessage.NoActivation);
							}
							else
							{
								SetStatusMessage(StatusMessage.AllOk);
							}
						}
						else
						{
							MessageBox.Show("Error during activation:\n" + args.Error.Message, "Activation Error", MessageBoxButtons.OK, MessageBoxIcon.Hand);
							if (activation == null)
							{
								SetStatusMessage(StatusMessage.NoActivation);
							}
							else
							{
								SetStatusMessage(StatusMessage.AllOk);
							}
						}
					}
					else
					{
						MessageBox.Show("Error during activation.", "Activation Error", MessageBoxButtons.OK, MessageBoxIcon.Hand);
						if (activation == null)
						{
							SetStatusMessage(StatusMessage.NoActivation);
						}
						else
						{
							SetStatusMessage(StatusMessage.AllOk);
						}
					}
				}
				else
				{
					activation = (string)args.Result;
					UpdateLicenseTextboxes();
					SetStatusMessage(StatusMessage.AllOk);
					if (closeOnFinishedWork)
					{
						Close();
					}
				}
				closeOnFinishedWork = false;
			};
			backgroundWorker.RunWorkerAsync();
		}

		private void buttonActivate_Click(object sender, EventArgs e)
		{
			if (license == null)
			{
				MessageBox.Show("Please enter a license key before activating.", "Activation", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
			}
			else
			{
				UpdateActivation();
			}
		}

		private void Form1_Load(object sender, EventArgs e)
		{
			buttonLoadLic.Focus();
			base.ActiveControl = buttonLoadLic;
			textBoxActivationCode.Text = Activation.HardwareKey;
			int productIndex = 0;
			license = License.DetectLicense(productsToFind.ToArray(), out productIndex);
			SetStatusMessage(StatusMessage.AllOk);
			if (license == null)
			{
				SetStatusMessage(StatusMessage.NoLicense);
			}
			if (license != null)
			{
				activation = Activation.DetectActivation(license);
			}
			if (license != null && activation == null)
			{
				SetStatusMessage(StatusMessage.NoActivation);
			}
			if (license != null && activation != null)
			{
				License.PersistLicense(license);
				Activation.PersistActivation(license, activation);
				if (Activation.ExpireDays(activation) < 7)
				{
					SetStatusMessage(StatusMessage.WarnExpireActivation);
					if (trySilent)
					{
						closeOnFinishedWork = true;
						UpdateActivation();
					}
					else
					{
						base.WindowState = FormWindowState.Normal;
					}
				}
				else if (trySilent)
				{
					Close();
					return;
				}
			}
			else if (license != null)
			{
				if (trySilent)
				{
					closeOnFinishedWork = true;
					UpdateActivation();
				}
				else
				{
					base.WindowState = FormWindowState.Normal;
				}
			}
			else
			{
				base.WindowState = FormWindowState.Normal;
			}
			UpdateLicenseTextboxes();
		}

		private string MakeNiceCase(string inp)
		{
			return inp.Substring(0, 1).ToUpper() + inp.Substring(1, inp.Length - 1);
		}

		private void UpdateLicenseTextboxes()
		{
			textBoxLicenseInfo.Clear();
			textBoxLicenseKey.Clear();
			textBoxActivationKey.Clear();
			textBoxActivationInfo.Clear();
			if (license != null)
			{
				foreach (KeyValuePair<string, string> item in LicenseStringHelpers.SplitKey(license))
				{
					textBoxLicenseInfo.AppendText(MakeNiceCase(item.Key) + ":\t\t" + item.Value + "\n");
				}
			}
			else
			{
				textBoxLicenseInfo.Text = licenseInfoText.Replace("${Product}", genericProductDescription);
			}
			if (activation != null)
			{
				foreach (KeyValuePair<string, string> item2 in LicenseStringHelpers.SplitKey(activation))
				{
					if (string.Compare(item2.Key, "hardware", ignoreCase: true) != 0 && string.Compare(item2.Key, "key", ignoreCase: true) != 0)
					{
						textBoxActivationInfo.AppendText(MakeNiceCase(item2.Key) + ":\t\t" + item2.Value + "\n");
					}
				}
				return;
			}
			textBoxActivationInfo.Text = activationInfoText.Replace("${Product}", genericProductDescription);
		}

		private void label5_Click(object sender, EventArgs e)
		{
		}

		private void label2_Click(object sender, EventArgs e)
		{
		}

		public void UpdateLicense(string licenseString)
		{
			bool flag = false;
			foreach (string item in productsToFind)
			{
				try
				{
					License.CheckLicense(licenseString, item);
					flag = true;
				}
				catch (Exception)
				{
					continue;
				}
				break;
			}
			if (!flag)
			{
				throw new Exception("Not a valid licence for " + genericProductDescription);
			}
			License.PersistLicense(licenseString);
			license = licenseString;
			activation = null;
		}

		private void buttonLoadLic_Click(object sender, EventArgs e)
		{
			if (!isUnity)
			{
				LicenseEditor licenseEditor = new LicenseEditor();
				if (licenseEditor.ShowDialog("Enter a new license:") != DialogResult.OK)
				{
					return;
				}
				try
				{
					string text = licenseEditor.License;
					if (text.IndexOf("activation:") != -1)
					{
						if (license == null)
						{
							throw new Exception("A license needs to be present before activating.");
						}
						Activation.CheckActivation(license, text);
						Activation.PersistActivation(license, text);
						activation = text;
					}
					else
					{
						UpdateLicense(text);
						UpdateActivation();
					}
					UpdateLicenseTextboxes();
					return;
				}
				catch (Exception ex)
				{
					MessageBox.Show("Error loading license:\n" + ex.Message, "Invalid License", MessageBoxButtons.OK, MessageBoxIcon.Asterisk);
					return;
				}
			}
			new UnityForm(this).ShowDialog();
			UpdateLicenseTextboxes();
		}

		private void buttonOfflineActivation_Click(object sender, EventArgs e)
		{
			MessageBox.Show("Please mail the hardware ID of the offline computer together with your license file to activation@graphinesoftware.com. You will then recieve instructions on activating the offline computer.", "Offline Activation Info", MessageBoxButtons.OK, MessageBoxIcon.Asterisk);
		}

		private void removeLicenseToolStripMenuItem_Click(object sender, EventArgs e)
		{
			License.DeleteLicense(license);
			license = null;
			activation = null;
			SetStatusMessage(StatusMessage.NoLicense);
			UpdateLicenseTextboxes();
		}

		private void removeActivationToolStripMenuItem_Click(object sender, EventArgs e)
		{
			Activation.DeleteActivation(license);
			activation = null;
			SetStatusMessage(StatusMessage.NoActivation);
			UpdateLicenseTextboxes();
		}

		private void MainForm_FormClosing(object sender, FormClosingEventArgs e)
		{
			if (doingBackgroundWork)
			{
				e.Cancel = true;
				closeOnFinishedWork = true;
			}
		}

		protected override void Dispose(bool disposing)
		{
			if (disposing && components != null)
			{
				components.Dispose();
			}
			base.Dispose(disposing);
		}

		private void InitializeComponent()
		{
			this.components = new System.ComponentModel.Container();
			System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(GraphineLicenseManager.MainForm));
			this.label1 = new System.Windows.Forms.Label();
			this.textBoxLicenseInfo = new System.Windows.Forms.TextBox();
			this.label2 = new System.Windows.Forms.Label();
			this.textBoxActivationCode = new System.Windows.Forms.TextBox();
			this.textBoxActivationKey = new System.Windows.Forms.TextBox();
			this.label3 = new System.Windows.Forms.Label();
			this.buttonActivate = new System.Windows.Forms.Button();
			this.label4 = new System.Windows.Forms.Label();
			this.textBoxLicenseKey = new System.Windows.Forms.TextBox();
			this.buttonLoadLic = new System.Windows.Forms.Button();
			this.labelWelcomeMessage = new System.Windows.Forms.Label();
			this.panel1 = new System.Windows.Forms.Panel();
			this.panel2 = new System.Windows.Forms.Panel();
			this.pictureBoxProgress = new System.Windows.Forms.PictureBox();
			this.pictureBox1 = new System.Windows.Forms.PictureBox();
			this.textBoxActivationInfo = new System.Windows.Forms.TextBox();
			this.label6 = new System.Windows.Forms.Label();
			this.openFileDialog1 = new System.Windows.Forms.OpenFileDialog();
			this.labelProgressMessage = new System.Windows.Forms.Label();
			this.contextMenuStrip1 = new System.Windows.Forms.ContextMenuStrip(this.components);
			this.removeActivationToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
			this.removeLicenseToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
			this.bindingSource1 = new System.Windows.Forms.BindingSource(this.components);
			this.panel3 = new System.Windows.Forms.Panel();
			this.labelInternalBuild = new System.Windows.Forms.Label();
			this.panel1.SuspendLayout();
			((System.ComponentModel.ISupportInitialize)this.pictureBoxProgress).BeginInit();
			((System.ComponentModel.ISupportInitialize)this.pictureBox1).BeginInit();
			this.contextMenuStrip1.SuspendLayout();
			((System.ComponentModel.ISupportInitialize)this.bindingSource1).BeginInit();
			this.panel3.SuspendLayout();
			base.SuspendLayout();
			this.label1.AutoSize = true;
			this.label1.BackColor = System.Drawing.Color.Transparent;
			this.label1.ForeColor = System.Drawing.Color.FromArgb(0, 150, 240);
			this.label1.Location = new System.Drawing.Point(151, 96);
			this.label1.Name = "label1";
			this.label1.Size = new System.Drawing.Size(69, 13);
			this.label1.TabIndex = 0;
			this.label1.Text = "Licence Info:";
			this.textBoxLicenseInfo.BackColor = System.Drawing.Color.White;
			this.textBoxLicenseInfo.Location = new System.Drawing.Point(152, 112);
			this.textBoxLicenseInfo.Multiline = true;
			this.textBoxLicenseInfo.Name = "textBoxLicenseInfo";
			this.textBoxLicenseInfo.ReadOnly = true;
			this.textBoxLicenseInfo.ScrollBars = System.Windows.Forms.ScrollBars.Vertical;
			this.textBoxLicenseInfo.Size = new System.Drawing.Size(533, 75);
			this.textBoxLicenseInfo.TabIndex = 1;
			this.label2.AutoSize = true;
			this.label2.BackColor = System.Drawing.Color.Transparent;
			this.label2.ForeColor = System.Drawing.Color.FromArgb(0, 150, 240);
			this.label2.Location = new System.Drawing.Point(149, 311);
			this.label2.Name = "label2";
			this.label2.Size = new System.Drawing.Size(70, 13);
			this.label2.TabIndex = 2;
			this.label2.Text = "Hardware ID:";
			this.label2.Click += new System.EventHandler(label2_Click);
			this.textBoxActivationCode.BackColor = System.Drawing.Color.White;
			this.textBoxActivationCode.Location = new System.Drawing.Point(152, 327);
			this.textBoxActivationCode.Multiline = true;
			this.textBoxActivationCode.Name = "textBoxActivationCode";
			this.textBoxActivationCode.ReadOnly = true;
			this.textBoxActivationCode.ScrollBars = System.Windows.Forms.ScrollBars.Vertical;
			this.textBoxActivationCode.Size = new System.Drawing.Size(533, 50);
			this.textBoxActivationCode.TabIndex = 3;
			this.textBoxActivationKey.Location = new System.Drawing.Point(244, 495);
			this.textBoxActivationKey.Multiline = true;
			this.textBoxActivationKey.Name = "textBoxActivationKey";
			this.textBoxActivationKey.ReadOnly = true;
			this.textBoxActivationKey.Size = new System.Drawing.Size(455, 50);
			this.textBoxActivationKey.TabIndex = 5;
			this.label3.AutoSize = true;
			this.label3.Location = new System.Drawing.Point(124, 498);
			this.label3.Name = "label3";
			this.label3.Size = new System.Drawing.Size(78, 13);
			this.label3.TabIndex = 4;
			this.label3.Text = "Activation Key:";
			this.buttonActivate.Location = new System.Drawing.Point(12, 142);
			this.buttonActivate.Name = "buttonActivate";
			this.buttonActivate.Size = new System.Drawing.Size(110, 23);
			this.buttonActivate.TabIndex = 6;
			this.buttonActivate.Text = "Force Reactivation";
			this.buttonActivate.UseVisualStyleBackColor = true;
			this.buttonActivate.Click += new System.EventHandler(buttonActivate_Click);
			this.label4.AutoSize = true;
			this.label4.Location = new System.Drawing.Point(124, 554);
			this.label4.Name = "label4";
			this.label4.Size = new System.Drawing.Size(69, 13);
			this.label4.TabIndex = 8;
			this.label4.Text = "Licence Key:";
			this.textBoxLicenseKey.Location = new System.Drawing.Point(244, 551);
			this.textBoxLicenseKey.Multiline = true;
			this.textBoxLicenseKey.Name = "textBoxLicenseKey";
			this.textBoxLicenseKey.ReadOnly = true;
			this.textBoxLicenseKey.Size = new System.Drawing.Size(455, 50);
			this.textBoxLicenseKey.TabIndex = 9;
			this.buttonLoadLic.Location = new System.Drawing.Point(13, 113);
			this.buttonLoadLic.Name = "buttonLoadLic";
			this.buttonLoadLic.Size = new System.Drawing.Size(109, 23);
			this.buttonLoadLic.TabIndex = 1;
			this.buttonLoadLic.Text = "Activate Now...";
			this.buttonLoadLic.UseVisualStyleBackColor = true;
			this.buttonLoadLic.Click += new System.EventHandler(buttonLoadLic_Click);
			this.labelWelcomeMessage.Font = new System.Drawing.Font("Arial", 11.25f, System.Drawing.FontStyle.Italic, System.Drawing.GraphicsUnit.Point, 0);
			this.labelWelcomeMessage.ForeColor = System.Drawing.Color.FromArgb(0, 150, 240);
			this.labelWelcomeMessage.Location = new System.Drawing.Point(279, 23);
			this.labelWelcomeMessage.Name = "labelWelcomeMessage";
			this.labelWelcomeMessage.Size = new System.Drawing.Size(376, 52);
			this.labelWelcomeMessage.TabIndex = 11;
			this.labelWelcomeMessage.Text = "Some text will go here";
			this.labelWelcomeMessage.Click += new System.EventHandler(label5_Click);
			this.panel1.BackColor = System.Drawing.Color.White;
			this.panel1.Controls.Add(this.panel2);
			this.panel1.Controls.Add(this.pictureBoxProgress);
			this.panel1.Controls.Add(this.pictureBox1);
			this.panel1.Controls.Add(this.labelWelcomeMessage);
			this.panel1.Dock = System.Windows.Forms.DockStyle.Top;
			this.panel1.Location = new System.Drawing.Point(0, 0);
			this.panel1.Name = "panel1";
			this.panel1.Size = new System.Drawing.Size(717, 80);
			this.panel1.TabIndex = 13;
			this.panel2.BackColor = System.Drawing.Color.White;
			this.panel2.Dock = System.Windows.Forms.DockStyle.Bottom;
			this.panel2.Location = new System.Drawing.Point(0, 78);
			this.panel2.Name = "panel2";
			this.panel2.Size = new System.Drawing.Size(717, 2);
			this.panel2.TabIndex = 2;
			this.pictureBoxProgress.Image = GraphineLicenseManager.Properties.Resources.spinner_nukegif;
			this.pictureBoxProgress.Location = new System.Drawing.Point(656, 14);
			this.pictureBoxProgress.Name = "pictureBoxProgress";
			this.pictureBoxProgress.Size = new System.Drawing.Size(48, 48);
			this.pictureBoxProgress.SizeMode = System.Windows.Forms.PictureBoxSizeMode.Zoom;
			this.pictureBoxProgress.TabIndex = 17;
			this.pictureBoxProgress.TabStop = false;
			this.pictureBoxProgress.Visible = false;
			this.pictureBox1.Image = GraphineLicenseManager.Properties.Resources.graphine_logo_small_apha;
			this.pictureBox1.Location = new System.Drawing.Point(19, 0);
			this.pictureBox1.Name = "pictureBox1";
			this.pictureBox1.Size = new System.Drawing.Size(238, 80);
			this.pictureBox1.SizeMode = System.Windows.Forms.PictureBoxSizeMode.Zoom;
			this.pictureBox1.TabIndex = 12;
			this.pictureBox1.TabStop = false;
			this.textBoxActivationInfo.BackColor = System.Drawing.Color.White;
			this.textBoxActivationInfo.Location = new System.Drawing.Point(152, 230);
			this.textBoxActivationInfo.Multiline = true;
			this.textBoxActivationInfo.Name = "textBoxActivationInfo";
			this.textBoxActivationInfo.ReadOnly = true;
			this.textBoxActivationInfo.ScrollBars = System.Windows.Forms.ScrollBars.Vertical;
			this.textBoxActivationInfo.Size = new System.Drawing.Size(533, 50);
			this.textBoxActivationInfo.TabIndex = 15;
			this.label6.AutoSize = true;
			this.label6.BackColor = System.Drawing.Color.Transparent;
			this.label6.ForeColor = System.Drawing.Color.FromArgb(0, 150, 240);
			this.label6.Location = new System.Drawing.Point(149, 214);
			this.label6.Name = "label6";
			this.label6.Size = new System.Drawing.Size(78, 13);
			this.label6.TabIndex = 14;
			this.label6.Text = "Activation Info:";
			this.openFileDialog1.FileName = "license.txt";
			this.openFileDialog1.Filter = "License Text Files|*.txt|All files|*.*";
			this.labelProgressMessage.AutoSize = true;
			this.labelProgressMessage.BackColor = System.Drawing.Color.Transparent;
			this.labelProgressMessage.Dock = System.Windows.Forms.DockStyle.Bottom;
			this.labelProgressMessage.Location = new System.Drawing.Point(0, 398);
			this.labelProgressMessage.Name = "labelProgressMessage";
			this.labelProgressMessage.Size = new System.Drawing.Size(113, 13);
			this.labelProgressMessage.TabIndex = 16;
			this.labelProgressMessage.Text = "labelProgressMessage";
			this.labelProgressMessage.Visible = false;
			this.labelProgressMessage.Click += new System.EventHandler(removeLicenseToolStripMenuItem_Click);
			this.contextMenuStrip1.Items.AddRange(new System.Windows.Forms.ToolStripItem[2] { this.removeActivationToolStripMenuItem, this.removeLicenseToolStripMenuItem });
			this.contextMenuStrip1.Name = "contextMenuStrip1";
			this.contextMenuStrip1.Size = new System.Drawing.Size(175, 48);
			this.removeActivationToolStripMenuItem.Name = "removeActivationToolStripMenuItem";
			this.removeActivationToolStripMenuItem.Size = new System.Drawing.Size(174, 22);
			this.removeActivationToolStripMenuItem.Text = "Remove Activation";
			this.removeActivationToolStripMenuItem.Click += new System.EventHandler(removeActivationToolStripMenuItem_Click);
			this.removeLicenseToolStripMenuItem.Name = "removeLicenseToolStripMenuItem";
			this.removeLicenseToolStripMenuItem.Size = new System.Drawing.Size(174, 22);
			this.removeLicenseToolStripMenuItem.Text = "Remove License";
			this.removeLicenseToolStripMenuItem.Click += new System.EventHandler(removeLicenseToolStripMenuItem_Click);
			this.panel3.BackColor = System.Drawing.Color.FromArgb(232, 232, 232);
			this.panel3.BackgroundImage = GraphineLicenseManager.Properties.Resources.top_background_graphic;
			this.panel3.BackgroundImageLayout = System.Windows.Forms.ImageLayout.None;
			this.panel3.Controls.Add(this.labelInternalBuild);
			this.panel3.Controls.Add(this.labelProgressMessage);
			this.panel3.Controls.Add(this.label6);
			this.panel3.Controls.Add(this.label1);
			this.panel3.Controls.Add(this.textBoxLicenseInfo);
			this.panel3.Controls.Add(this.label2);
			this.panel3.Controls.Add(this.textBoxActivationCode);
			this.panel3.Controls.Add(this.label3);
			this.panel3.Controls.Add(this.textBoxActivationKey);
			this.panel3.Controls.Add(this.buttonActivate);
			this.panel3.Controls.Add(this.label4);
			this.panel3.Controls.Add(this.textBoxLicenseKey);
			this.panel3.Controls.Add(this.buttonLoadLic);
			this.panel3.Dock = System.Windows.Forms.DockStyle.Fill;
			this.panel3.Location = new System.Drawing.Point(0, 0);
			this.panel3.Name = "panel3";
			this.panel3.Size = new System.Drawing.Size(717, 411);
			this.panel3.TabIndex = 17;
			this.labelInternalBuild.AutoSize = true;
			this.labelInternalBuild.Font = new System.Drawing.Font("Microsoft Sans Serif", 8.25f, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, 0);
			this.labelInternalBuild.ForeColor = System.Drawing.Color.Red;
			this.labelInternalBuild.Location = new System.Drawing.Point(3, 385);
			this.labelInternalBuild.Name = "labelInternalBuild";
			this.labelInternalBuild.Size = new System.Drawing.Size(141, 13);
			this.labelInternalBuild.TabIndex = 17;
			this.labelInternalBuild.Text = "Graphine Internal Build!";
			base.AutoScaleDimensions = new System.Drawing.SizeF(6f, 13f);
			base.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;
			this.BackColor = System.Drawing.Color.White;
			base.ClientSize = new System.Drawing.Size(717, 411);
			this.ContextMenuStrip = this.contextMenuStrip1;
			base.Controls.Add(this.textBoxActivationInfo);
			base.Controls.Add(this.panel1);
			base.Controls.Add(this.panel3);
			base.FormBorderStyle = System.Windows.Forms.FormBorderStyle.FixedDialog;
			base.Icon = (System.Drawing.Icon)resources.GetObject("$this.Icon");
			base.MaximizeBox = false;
			base.MinimizeBox = false;
			base.Name = "MainForm";
			base.SizeGripStyle = System.Windows.Forms.SizeGripStyle.Hide;
			base.StartPosition = System.Windows.Forms.FormStartPosition.CenterScreen;
			this.Text = "Graphine Activation";
			base.FormClosing += new System.Windows.Forms.FormClosingEventHandler(MainForm_FormClosing);
			base.Load += new System.EventHandler(Form1_Load);
			this.panel1.ResumeLayout(false);
			((System.ComponentModel.ISupportInitialize)this.pictureBoxProgress).EndInit();
			((System.ComponentModel.ISupportInitialize)this.pictureBox1).EndInit();
			this.contextMenuStrip1.ResumeLayout(false);
			((System.ComponentModel.ISupportInitialize)this.bindingSource1).EndInit();
			this.panel3.ResumeLayout(false);
			this.panel3.PerformLayout();
			base.ResumeLayout(false);
			base.PerformLayout();
		}
	}
	public class LicenseEditor : Form
	{
		private IContainer components;

		private TextBox textBox1;

		private Panel panel1;

		private Button buttonLoadFile;

		private Button buttonPaste;

		private Button buttonCancel;

		private Button buttonOk;

		private OpenFileDialog openFileDialog1;

		private Panel panel2;

		private Label label1;

		public string License
		{
			get
			{
				return LicenseStringHelpers.DecodeUserLicense(textBox1.Text);
			}
			set
			{
				textBox1.Text = value;
			}
		}

		public LicenseEditor()
		{
			InitializeComponent();
		}

		private void buttonPaste_Click(object sender, EventArgs e)
		{
			if (Clipboard.ContainsText())
			{
				textBox1.Text = Clipboard.GetText();
			}
		}

		private void buttonLoadFile_Click(object sender, EventArgs e)
		{
			if (openFileDialog1.ShowDialog() == DialogResult.OK)
			{
				string text = null;
				try
				{
					text = File.ReadAllText(openFileDialog1.FileName).Trim();
				}
				catch (Exception ex)
				{
					MessageBox.Show("Error loading license:\n" + ex.Message, "Invalid License", MessageBoxButtons.OK, MessageBoxIcon.Asterisk);
				}
				if (text != null)
				{
					textBox1.Text = text;
				}
			}
		}

		public DialogResult ShowDialog(string message)
		{
			label1.Text = message;
			return ShowDialog();
		}

		protected override void Dispose(bool disposing)
		{
			if (disposing && components != null)
			{
				components.Dispose();
			}
			base.Dispose(disposing);
		}

		private void InitializeComponent()
		{
			this.textBox1 = new System.Windows.Forms.TextBox();
			this.panel1 = new System.Windows.Forms.Panel();
			this.buttonLoadFile = new System.Windows.Forms.Button();
			this.buttonPaste = new System.Windows.Forms.Button();
			this.buttonCancel = new System.Windows.Forms.Button();
			this.buttonOk = new System.Windows.Forms.Button();
			this.openFileDialog1 = new System.Windows.Forms.OpenFileDialog();
			this.panel2 = new System.Windows.Forms.Panel();
			this.label1 = new System.Windows.Forms.Label();
			this.panel1.SuspendLayout();
			this.panel2.SuspendLayout();
			base.SuspendLayout();
			this.textBox1.Dock = System.Windows.Forms.DockStyle.Fill;
			this.textBox1.Font = new System.Drawing.Font("Courier New", 8.25f, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, 0);
			this.textBox1.Location = new System.Drawing.Point(4, 48);
			this.textBox1.Multiline = true;
			this.textBox1.Name = "textBox1";
			this.textBox1.Size = new System.Drawing.Size(664, 193);
			this.textBox1.TabIndex = 0;
			this.panel1.Controls.Add(this.buttonLoadFile);
			this.panel1.Controls.Add(this.buttonPaste);
			this.panel1.Controls.Add(this.buttonCancel);
			this.panel1.Controls.Add(this.buttonOk);
			this.panel1.Dock = System.Windows.Forms.DockStyle.Bottom;
			this.panel1.Location = new System.Drawing.Point(4, 241);
			this.panel1.Name = "panel1";
			this.panel1.Size = new System.Drawing.Size(664, 45);
			this.panel1.TabIndex = 1;
			this.buttonLoadFile.Location = new System.Drawing.Point(285, 11);
			this.buttonLoadFile.Name = "buttonLoadFile";
			this.buttonLoadFile.Size = new System.Drawing.Size(75, 23);
			this.buttonLoadFile.TabIndex = 3;
			this.buttonLoadFile.Text = "File...";
			this.buttonLoadFile.UseVisualStyleBackColor = true;
			this.buttonLoadFile.Click += new System.EventHandler(buttonLoadFile_Click);
			this.buttonPaste.Location = new System.Drawing.Point(204, 11);
			this.buttonPaste.Name = "buttonPaste";
			this.buttonPaste.Size = new System.Drawing.Size(75, 23);
			this.buttonPaste.TabIndex = 2;
			this.buttonPaste.Text = "Paste";
			this.buttonPaste.UseVisualStyleBackColor = true;
			this.buttonPaste.Click += new System.EventHandler(buttonPaste_Click);
			this.buttonCancel.DialogResult = System.Windows.Forms.DialogResult.Cancel;
			this.buttonCancel.Location = new System.Drawing.Point(93, 11);
			this.buttonCancel.Name = "buttonCancel";
			this.buttonCancel.Size = new System.Drawing.Size(75, 23);
			this.buttonCancel.TabIndex = 1;
			this.buttonCancel.Text = "Cancel";
			this.buttonCancel.UseVisualStyleBackColor = true;
			this.buttonOk.DialogResult = System.Windows.Forms.DialogResult.OK;
			this.buttonOk.Location = new System.Drawing.Point(12, 11);
			this.buttonOk.Name = "buttonOk";
			this.buttonOk.Size = new System.Drawing.Size(75, 23);
			this.buttonOk.TabIndex = 0;
			this.buttonOk.Text = "Ok";
			this.buttonOk.UseVisualStyleBackColor = true;
			this.openFileDialog1.FileName = "license.txt";
			this.openFileDialog1.Filter = "License Text Files|*.txt|All files|*.*";
			this.panel2.Controls.Add(this.label1);
			this.panel2.Dock = System.Windows.Forms.DockStyle.Top;
			this.panel2.Location = new System.Drawing.Point(4, 4);
			this.panel2.Name = "panel2";
			this.panel2.Size = new System.Drawing.Size(664, 44);
			this.panel2.TabIndex = 2;
			this.label1.AutoSize = true;
			this.label1.Location = new System.Drawing.Point(4, 4);
			this.label1.Name = "label1";
			this.label1.Size = new System.Drawing.Size(35, 13);
			this.label1.TabIndex = 0;
			this.label1.Text = "label1";
			base.AutoScaleDimensions = new System.Drawing.SizeF(6f, 13f);
			base.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;
			base.ClientSize = new System.Drawing.Size(672, 290);
			base.Controls.Add(this.textBox1);
			base.Controls.Add(this.panel1);
			base.Controls.Add(this.panel2);
			base.FormBorderStyle = System.Windows.Forms.FormBorderStyle.FixedDialog;
			base.MaximizeBox = false;
			base.MinimizeBox = false;
			base.Name = "LicenseEditor";
			base.Padding = new System.Windows.Forms.Padding(4);
			base.ShowIcon = false;
			base.ShowInTaskbar = false;
			base.SizeGripStyle = System.Windows.Forms.SizeGripStyle.Hide;
			base.StartPosition = System.Windows.Forms.FormStartPosition.CenterScreen;
			this.Text = "Enter Key";
			this.panel1.ResumeLayout(false);
			this.panel2.ResumeLayout(false);
			this.panel2.PerformLayout();
			base.ResumeLayout(false);
			base.PerformLayout();
		}
	}
	public class PoxyLoginForm : Form
	{
		private IContainer components;

		private TextBox textBoxUser;

		private Label label1;

		private Label labelRealm;

		private Button buttonOk;

		private Button buttonCancel;

		private Label label3;

		private Label label4;

		private TextBox textBoxPassword;

		public string Realm
		{
			get
			{
				return labelRealm.Text;
			}
			set
			{
				labelRealm.Text = value;
			}
		}

		public string UserName
		{
			get
			{
				return textBoxUser.Text;
			}
			set
			{
				textBoxUser.Text = value;
			}
		}

		public string Password
		{
			get
			{
				return textBoxPassword.Text;
			}
			set
			{
				textBoxPassword.Text = value;
			}
		}

		public PoxyLoginForm()
		{
			InitializeComponent();
		}

		private void PoxyLoginForm_Load(object sender, EventArgs e)
		{
		}

		protected override void Dispose(bool disposing)
		{
			if (disposing && components != null)
			{
				components.Dispose();
			}
			base.Dispose(disposing);
		}

		private void InitializeComponent()
		{
			this.textBoxUser = new System.Windows.Forms.TextBox();
			this.label1 = new System.Windows.Forms.Label();
			this.labelRealm = new System.Windows.Forms.Label();
			this.buttonOk = new System.Windows.Forms.Button();
			this.buttonCancel = new System.Windows.Forms.Button();
			this.label3 = new System.Windows.Forms.Label();
			this.label4 = new System.Windows.Forms.Label();
			this.textBoxPassword = new System.Windows.Forms.TextBox();
			base.SuspendLayout();
			this.textBoxUser.Location = new System.Drawing.Point(137, 79);
			this.textBoxUser.Name = "textBoxUser";
			this.textBoxUser.Size = new System.Drawing.Size(175, 20);
			this.textBoxUser.TabIndex = 0;
			this.label1.AutoSize = true;
			this.label1.Location = new System.Drawing.Point(22, 28);
			this.label1.Name = "label1";
			this.label1.Size = new System.Drawing.Size(340, 13);
			this.label1.TabIndex = 1;
			this.label1.Text = "You need to authenticate with your proxy server for the following realm:";
			this.labelRealm.AutoSize = true;
			this.labelRealm.Location = new System.Drawing.Point(22, 50);
			this.labelRealm.Name = "labelRealm";
			this.labelRealm.Size = new System.Drawing.Size(109, 13);
			this.labelRealm.TabIndex = 2;
			this.labelRealm.Text = "<realm appears here>";
			this.buttonOk.DialogResult = System.Windows.Forms.DialogResult.OK;
			this.buttonOk.Location = new System.Drawing.Point(22, 144);
			this.buttonOk.Name = "buttonOk";
			this.buttonOk.Size = new System.Drawing.Size(75, 23);
			this.buttonOk.TabIndex = 3;
			this.buttonOk.Text = "Ok";
			this.buttonOk.UseVisualStyleBackColor = true;
			this.buttonCancel.DialogResult = System.Windows.Forms.DialogResult.Cancel;
			this.buttonCancel.Location = new System.Drawing.Point(103, 144);
			this.buttonCancel.Name = "buttonCancel";
			this.buttonCancel.Size = new System.Drawing.Size(75, 23);
			this.buttonCancel.TabIndex = 4;
			this.buttonCancel.Text = "Cancel";
			this.buttonCancel.UseVisualStyleBackColor = true;
			this.label3.AutoSize = true;
			this.label3.Location = new System.Drawing.Point(22, 82);
			this.label3.Name = "label3";
			this.label3.Size = new System.Drawing.Size(58, 13);
			this.label3.TabIndex = 5;
			this.label3.Text = "User name";
			this.label4.AutoSize = true;
			this.label4.Location = new System.Drawing.Point(22, 105);
			this.label4.Name = "label4";
			this.label4.Size = new System.Drawing.Size(53, 13);
			this.label4.TabIndex = 6;
			this.label4.Text = "Password";
			this.textBoxPassword.Location = new System.Drawing.Point(137, 102);
			this.textBoxPassword.Name = "textBoxPassword";
			this.textBoxPassword.PasswordChar = '*';
			this.textBoxPassword.Size = new System.Drawing.Size(175, 20);
			this.textBoxPassword.TabIndex = 7;
			this.textBoxPassword.UseSystemPasswordChar = true;
			base.AutoScaleDimensions = new System.Drawing.SizeF(6f, 13f);
			base.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;
			base.ClientSize = new System.Drawing.Size(394, 181);
			base.Controls.Add(this.textBoxPassword);
			base.Controls.Add(this.label4);
			base.Controls.Add(this.label3);
			base.Controls.Add(this.buttonCancel);
			base.Controls.Add(this.buttonOk);
			base.Controls.Add(this.labelRealm);
			base.Controls.Add(this.label1);
			base.Controls.Add(this.textBoxUser);
			base.FormBorderStyle = System.Windows.Forms.FormBorderStyle.FixedDialog;
			base.MaximizeBox = false;
			base.MinimizeBox = false;
			base.Name = "PoxyLoginForm";
			base.StartPosition = System.Windows.Forms.FormStartPosition.CenterScreen;
			this.Text = "Proxy Server Login";
			base.Load += new System.EventHandler(PoxyLoginForm_Load);
			base.ResumeLayout(false);
			base.PerformLayout();
		}
	}
	internal static class Program
	{
		[STAThread]
		private static void Main(string[] args)
		{
			if (args.Length >= 1)
			{
				Application.EnableVisualStyles();
				Application.SetCompatibleTextRenderingDefault(defaultValue: false);
				Application.Run(new MainForm());
			}
			else
			{
				MessageBox.Show("Please run this manager through the proper shortcut.", "License Manager", MessageBoxButtons.OK, MessageBoxIcon.Asterisk);
			}
		}
	}
	public class UnityForm : Form
	{
		private MainForm mainForm;

		private IContainer components;

		private TextBox textBoxName;

		private Label label1;

		private Label label2;

		private TextBox textBoxEmail;

		private Label label3;

		private TextBox textBoxInvoice;

		private Label label4;

		private Button button1;

		private Button button2;

		private Label label5;

		private TextBox textBoxCompany;

		private RadioButton assetStoreRadioButton;

		private RadioButton graphineRadioButton;

		private GroupBox assetStoreGroupBox;

		private GroupBox graphineGroupBox;

		private TextBox textBoxLicense;

		private Label label6;

		private Label label7;

		private Label label8;

		private Panel panel1;

		public UnityForm()
		{
			InitializeComponent();
		}

		public UnityForm(MainForm parent)
		{
			InitializeComponent();
			mainForm = parent;
		}

		private void button1_Click(object sender, EventArgs e)
		{
			_ = string.Empty;
			string text = string.Empty;
			if (assetStoreRadioButton.Checked)
			{
				if (!new Regex("^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$", RegexOptions.IgnoreCase).IsMatch(textBoxEmail.Text))
				{
					MessageBox.Show(this, "Please enter a valid email address.", "Error", MessageBoxButtons.OK, MessageBoxIcon.Hand);
					return;
				}
				if (textBoxName.Text.Trim().Length == 0)
				{
					MessageBox.Show(this, "Please enter a name.", "Error", MessageBoxButtons.OK, MessageBoxIcon.Hand);
					return;
				}
				text = textBoxInvoice.Text.Trim();
				if (text.Length == 0)
				{
					MessageBox.Show(this, "Please enter a Unity invoice number.", "Error", MessageBoxButtons.OK, MessageBoxIcon.Hand);
					return;
				}
			}
			if (graphineRadioButton.Checked)
			{
				text = textBoxLicense.Text.Trim();
				if (text.Length == 0)
				{
					MessageBox.Show(this, "Please enter a license key.", "Error", MessageBoxButtons.OK, MessageBoxIcon.Hand);
					return;
				}
				text = text.ToLowerInvariant();
			}
			try
			{
				if (assetStoreRadioButton.Checked)
				{
					HanleInvoiceNumer(text);
				}
				else
				{
					byte[] array = null;
					try
					{
						array = LicenseStringHelpers.DecodeBase32(text);
					}
					catch (Exception ex)
					{
						MessageBox.Show(this, "Please enter a valid license key.\nDetailed info: " + ex.Message, "Error", MessageBoxButtons.OK, MessageBoxIcon.Hand);
						return;
					}
					if (array == null)
					{
						MessageBox.Show(this, "Please enter a valid license key.", "Error", MessageBoxButtons.OK, MessageBoxIcon.Hand);
						return;
					}
					HandleStandardLicense(text);
				}
			}
			catch (LicenseStringHelpers.ActivationUserException ex2)
			{
				ActivationResultWindow activationResultWindow = new ActivationResultWindow();
				activationResultWindow.SetHtml(ex2.DisplayHtml);
				activationResultWindow.ShowDialog();
			}
			catch (Exception ex3)
			{
				MessageBox.Show(this, "An error occured when trying to validate the license:\n" + ex3.Message, "Error", MessageBoxButtons.OK, MessageBoxIcon.Hand);
				return;
			}
			base.DialogResult = DialogResult.OK;
		}

		private void HanleInvoiceNumer(string number)
		{
			string licenseString = LicenseStringHelpers.DecodeUserLicense(LicenseStringHelpers.RetrieveLicense(number, textBoxCompany.Text, textBoxName.Text, textBoxEmail.Text, mainForm.GetProxyCredentialsDelegate));
			mainForm.UpdateLicense(licenseString);
			mainForm.UpdateActivation();
		}

		private void HandleStandardLicense(string license)
		{
			string licenseString = LicenseStringHelpers.DecodeUserLicense(license);
			mainForm.UpdateLicense(licenseString);
			mainForm.UpdateActivation();
		}

		private void button2_Click(object sender, EventArgs e)
		{
			base.DialogResult = DialogResult.Cancel;
		}

		private void label3_Click(object sender, EventArgs e)
		{
		}

		private void textBoxLicense_TextChanged(object sender, EventArgs e)
		{
		}

		private void groupBox2_Enter(object sender, EventArgs e)
		{
		}

		private void radioButton1_CheckedChanged(object sender, EventArgs e)
		{
			assetStoreGroupBox.Enabled = assetStoreRadioButton.Checked;
		}

		private void radioButton2_CheckedChanged(object sender, EventArgs e)
		{
			graphineGroupBox.Enabled = graphineRadioButton.Checked;
		}

		protected override void Dispose(bool disposing)
		{
			if (disposing && components != null)
			{
				components.Dispose();
			}
			base.Dispose(disposing);
		}

		private void InitializeComponent()
		{
			this.textBoxName = new System.Windows.Forms.TextBox();
			this.label1 = new System.Windows.Forms.Label();
			this.label2 = new System.Windows.Forms.Label();
			this.textBoxEmail = new System.Windows.Forms.TextBox();
			this.label3 = new System.Windows.Forms.Label();
			this.textBoxInvoice = new System.Windows.Forms.TextBox();
			this.label4 = new System.Windows.Forms.Label();
			this.button1 = new System.Windows.Forms.Button();
			this.button2 = new System.Windows.Forms.Button();
			this.label5 = new System.Windows.Forms.Label();
			this.textBoxCompany = new System.Windows.Forms.TextBox();
			this.assetStoreRadioButton = new System.Windows.Forms.RadioButton();
			this.graphineRadioButton = new System.Windows.Forms.RadioButton();
			this.assetStoreGroupBox = new System.Windows.Forms.GroupBox();
			this.label6 = new System.Windows.Forms.Label();
			this.graphineGroupBox = new System.Windows.Forms.GroupBox();
			this.label7 = new System.Windows.Forms.Label();
			this.textBoxLicense = new System.Windows.Forms.TextBox();
			this.label8 = new System.Windows.Forms.Label();
			this.panel1 = new System.Windows.Forms.Panel();
			this.assetStoreGroupBox.SuspendLayout();
			this.graphineGroupBox.SuspendLayout();
			this.panel1.SuspendLayout();
			base.SuspendLayout();
			this.textBoxName.Location = new System.Drawing.Point(105, 52);
			this.textBoxName.Name = "textBoxName";
			this.textBoxName.Size = new System.Drawing.Size(218, 20);
			this.textBoxName.TabIndex = 0;
			this.label1.AutoSize = true;
			this.label1.Location = new System.Drawing.Point(18, 55);
			this.label1.Name = "label1";
			this.label1.Size = new System.Drawing.Size(38, 13);
			this.label1.TabIndex = 1;
			this.label1.Text = "Name:";
			this.label2.AutoSize = true;
			this.label2.Location = new System.Drawing.Point(18, 81);
			this.label2.Name = "label2";
			this.label2.Size = new System.Drawing.Size(35, 13);
			this.label2.TabIndex = 3;
			this.label2.Text = "Email:";
			this.textBoxEmail.Location = new System.Drawing.Point(105, 78);
			this.textBoxEmail.Name = "textBoxEmail";
			this.textBoxEmail.Size = new System.Drawing.Size(218, 20);
			this.textBoxEmail.TabIndex = 2;
			this.label3.Location = new System.Drawing.Point(18, 107);
			this.label3.Name = "label3";
			this.label3.Size = new System.Drawing.Size(85, 20);
			this.label3.TabIndex = 4;
			this.label3.Text = "Invoice number:";
			this.label3.Click += new System.EventHandler(label3_Click);
			this.textBoxInvoice.Location = new System.Drawing.Point(105, 104);
			this.textBoxInvoice.Name = "textBoxInvoice";
			this.textBoxInvoice.Size = new System.Drawing.Size(218, 20);
			this.textBoxInvoice.TabIndex = 5;
			this.textBoxInvoice.TextChanged += new System.EventHandler(textBoxLicense_TextChanged);
			this.label4.Location = new System.Drawing.Point(15, 9);
			this.label4.Name = "label4";
			this.label4.Size = new System.Drawing.Size(536, 16);
			this.label4.TabIndex = 6;
			this.label4.Text = "Please enter the following information to activate your Granite for Unity license key.";
			this.button1.Location = new System.Drawing.Point(18, 497);
			this.button1.Name = "button1";
			this.button1.Size = new System.Drawing.Size(75, 23);
			this.button1.TabIndex = 7;
			this.button1.Text = "Ok";
			this.button1.UseVisualStyleBackColor = true;
			this.button1.Click += new System.EventHandler(button1_Click);
			this.button2.Location = new System.Drawing.Point(99, 497);
			this.button2.Name = "button2";
			this.button2.Size = new System.Drawing.Size(75, 23);
			this.button2.TabIndex = 8;
			this.button2.Text = "Cancel";
			this.button2.UseVisualStyleBackColor = true;
			this.button2.Click += new System.EventHandler(button2_Click);
			this.label5.AutoSize = true;
			this.label5.Location = new System.Drawing.Point(18, 29);
			this.label5.Name = "label5";
			this.label5.Size = new System.Drawing.Size(85, 13);
			this.label5.TabIndex = 10;
			this.label5.Text = "Company Name:";
			this.textBoxCompany.Location = new System.Drawing.Point(105, 26);
			this.textBoxCompany.Name = "textBoxCompany";
			this.textBoxCompany.Size = new System.Drawing.Size(218, 20);
			this.textBoxCompany.TabIndex = 9;
			this.assetStoreRadioButton.AutoSize = true;
			this.assetStoreRadioButton.Location = new System.Drawing.Point(3, 6);
			this.assetStoreRadioButton.Name = "assetStoreRadioButton";
			this.assetStoreRadioButton.Size = new System.Drawing.Size(209, 17);
			this.assetStoreRadioButton.TabIndex = 11;
			this.assetStoreRadioButton.TabStop = true;
			this.assetStoreRadioButton.Text = "I got the plugin on the Unity asset store";
			this.assetStoreRadioButton.UseVisualStyleBackColor = true;
			this.assetStoreRadioButton.CheckedChanged += new System.EventHandler(radioButton1_CheckedChanged);
			this.graphineRadioButton.AutoSize = true;
			this.graphineRadioButton.Location = new System.Drawing.Point(3, 29);
			this.graphineRadioButton.Name = "graphineRadioButton";
			this.graphineRadioButton.Size = new System.Drawing.Size(213, 17);
			this.graphineRadioButton.TabIndex = 12;
			this.graphineRadioButton.TabStop = true;
			this.graphineRadioButton.Text = "I got the plugin on the Graphine website";
			this.graphineRadioButton.UseVisualStyleBackColor = true;
			this.graphineRadioButton.CheckedChanged += new System.EventHandler(radioButton2_CheckedChanged);
			this.assetStoreGroupBox.Controls.Add(this.label6);
			this.assetStoreGroupBox.Controls.Add(this.textBoxInvoice);
			this.assetStoreGroupBox.Controls.Add(this.textBoxName);
			this.assetStoreGroupBox.Controls.Add(this.label1);
			this.assetStoreGroupBox.Controls.Add(this.label5);
			this.assetStoreGroupBox.Controls.Add(this.textBoxEmail);
			this.assetStoreGroupBox.Controls.Add(this.textBoxCompany);
			this.assetStoreGroupBox.Controls.Add(this.label2);
			this.assetStoreGroupBox.Controls.Add(this.label3);
			this.assetStoreGroupBox.Enabled = false;
			this.assetStoreGroupBox.Location = new System.Drawing.Point(18, 121);
			this.assetStoreGroupBox.Name = "assetStoreGroupBox";
			this.assetStoreGroupBox.Size = new System.Drawing.Size(533, 173);
			this.assetStoreGroupBox.TabIndex = 13;
			this.assetStoreGroupBox.TabStop = false;
			this.assetStoreGroupBox.Text = "Unity Asset Store";
			this.label6.Location = new System.Drawing.Point(18, 135);
			this.label6.Name = "label6";
			this.label6.Size = new System.Drawing.Size(509, 35);
			this.label6.TabIndex = 15;
			this.label6.Text = "Please make sure you enter the correct information as documentation and license info will be sent to the provided email address.";
			this.graphineGroupBox.Controls.Add(this.label7);
			this.graphineGroupBox.Controls.Add(this.textBoxLicense);
			this.graphineGroupBox.Enabled = false;
			this.graphineGroupBox.Location = new System.Drawing.Point(18, 318);
			this.graphineGroupBox.Name = "graphineGroupBox";
			this.graphineGroupBox.Size = new System.Drawing.Size(533, 164);
			this.graphineGroupBox.TabIndex = 14;
			this.graphineGroupBox.TabStop = false;
			this.graphineGroupBox.Text = "Graphine Online Store";
			this.graphineGroupBox.Enter += new System.EventHandler(groupBox2_Enter);
			this.label7.Location = new System.Drawing.Point(18, 28);
			this.label7.Name = "label7";
			this.label7.Size = new System.Drawing.Size(509, 20);
			this.label7.TabIndex = 16;
			this.label7.Text = "Please enter the license key you recieved via email.";
			this.textBoxLicense.Location = new System.Drawing.Point(21, 59);
			this.textBoxLicense.Multiline = true;
			this.textBoxLicense.Name = "textBoxLicense";
			this.textBoxLicense.Size = new System.Drawing.Size(491, 81);
			this.textBoxLicense.TabIndex = 7;
			this.label8.Location = new System.Drawing.Point(15, 42);
			this.label8.Name = "label8";
			this.label8.Size = new System.Drawing.Size(536, 16);
			this.label8.TabIndex = 15;
			this.label8.Text = "How did you get Granite for Unity?";
			this.panel1.Controls.Add(this.graphineRadioButton);
			this.panel1.Controls.Add(this.assetStoreRadioButton);
			this.panel1.Location = new System.Drawing.Point(17, 62);
			this.panel1.Name = "panel1";
			this.panel1.Size = new System.Drawing.Size(533, 52);
			this.panel1.TabIndex = 16;
			base.AutoScaleDimensions = new System.Drawing.SizeF(6f, 13f);
			base.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;
			base.ClientSize = new System.Drawing.Size(573, 534);
			base.Controls.Add(this.panel1);
			base.Controls.Add(this.label8);
			base.Controls.Add(this.graphineGroupBox);
			base.Controls.Add(this.assetStoreGroupBox);
			base.Controls.Add(this.label4);
			base.Controls.Add(this.button1);
			base.Controls.Add(this.button2);
			base.FormBorderStyle = System.Windows.Forms.FormBorderStyle.FixedDialog;
			base.MaximizeBox = false;
			base.MinimizeBox = false;
			base.Name = "UnityForm";
			this.Text = "Enter a new Unity license";
			this.assetStoreGroupBox.ResumeLayout(false);
			this.assetStoreGroupBox.PerformLayout();
			this.graphineGroupBox.ResumeLayout(false);
			this.graphineGroupBox.PerformLayout();
			this.panel1.ResumeLayout(false);
			this.panel1.PerformLayout();
			base.ResumeLayout(false);
		}
	}
}
namespace GraphineLicenseManager.Properties
{
	[GeneratedCode("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
	[DebuggerNonUserCode]
	[CompilerGenerated]
	internal class Resources
	{
		private static ResourceManager resourceMan;

		private static CultureInfo resourceCulture;

		[EditorBrowsable(EditorBrowsableState.Advanced)]
		internal static ResourceManager ResourceManager
		{
			get
			{
				if (resourceMan == null)
				{
					resourceMan = new ResourceManager("GraphineLicenseManager.Properties.Resources", typeof(Resources).Assembly);
				}
				return resourceMan;
			}
		}

		[EditorBrowsable(EditorBrowsableState.Advanced)]
		internal static CultureInfo Culture
		{
			get
			{
				return resourceCulture;
			}
			set
			{
				resourceCulture = value;
			}
		}

		internal static Bitmap graphine_logo_small_apha => (Bitmap)ResourceManager.GetObject("graphine_logo_small_apha", resourceCulture);

		internal static Bitmap spinner_nukegif => (Bitmap)ResourceManager.GetObject("spinner_nukegif", resourceCulture);

		internal static Bitmap spinner_piramid => (Bitmap)ResourceManager.GetObject("spinner_piramid", resourceCulture);

		internal static Bitmap top_background_graphic => (Bitmap)ResourceManager.GetObject("top-background-graphic", resourceCulture);

		internal Resources()
		{
		}
	}
	[CompilerGenerated]
	[GeneratedCode("Microsoft.VisualStudio.Editors.SettingsDesigner.SettingsSingleFileGenerator", "11.0.0.0")]
	internal sealed class Settings : ApplicationSettingsBase
	{
		private static Settings defaultInstance = (Settings)SettingsBase.Synchronized(new Settings());

		public static Settings Default => defaultInstance;
	}
}
namespace GraphineLicenseManager.Ed25519b
{
	internal class Extra
	{
		public static int readUnsigned(byte b)
		{
			return b & 0xFF;
		}

		public static long load_3(byte[] inp, int ofs, int shift)
		{
			return (long)((ulong)(readUnsigned(inp[ofs]) | ((long)readUnsigned(inp[1 + ofs]) << 8) | ((long)readUnsigned(inp[2 + ofs]) << 16)) >> shift);
		}

		public static long load_4(byte[] inp, int ofs, int shift)
		{
			return (long)((ulong)(readUnsigned(inp[ofs]) | ((long)readUnsigned(inp[1 + ofs]) << 8) | ((long)readUnsigned(inp[2 + ofs]) << 16) | ((long)readUnsigned(inp[3 + ofs]) << 24)) >> shift);
		}

		public static void sc_reduce(byte[] s)
		{
			long num = 0x1FFFFF & load_3(s, 0, 0);
			long num2 = 0x1FFFFF & load_4(s, 2, 5);
			long num3 = 0x1FFFFF & load_3(s, 5, 2);
			long num4 = 0x1FFFFF & load_4(s, 7, 7);
			long num5 = 0x1FFFFF & load_4(s, 10, 4);
			long num6 = 0x1FFFFF & load_3(s, 13, 1);
			long num7 = 0x1FFFFF & load_4(s, 15, 6);
			long num8 = 0x1FFFFF & load_3(s, 18, 3);
			long num9 = 0x1FFFFF & load_3(s, 21, 0);
			long num10 = 0x1FFFFF & load_4(s, 23, 5);
			long num11 = 0x1FFFFF & load_3(s, 26, 2);
			long num12 = 0x1FFFFF & load_4(s, 28, 7);
			long num13 = 0x1FFFFF & load_4(s, 31, 4);
			long num14 = 0x1FFFFF & load_3(s, 34, 1);
			long num15 = 0x1FFFFF & load_4(s, 36, 6);
			long num16 = 0x1FFFFF & load_3(s, 39, 3);
			long num17 = 0x1FFFFF & load_3(s, 42, 0);
			long num18 = 0x1FFFFF & load_4(s, 44, 5);
			long num19 = 0x1FFFFF & load_3(s, 47, 2);
			long num20 = 0x1FFFFF & load_4(s, 49, 7);
			long num21 = 0x1FFFFF & load_4(s, 52, 4);
			long num22 = 0x1FFFFF & load_3(s, 55, 1);
			long num23 = 0x1FFFFF & load_4(s, 57, 6);
			long num24 = load_4(s, 60, 3);
			num12 += num24 * 666643;
			num13 += num24 * 470296;
			num14 += num24 * 654183;
			num15 -= num24 * 997805;
			num16 += num24 * 136657;
			num17 -= num24 * 683901;
			num24 = 0L;
			num11 += num23 * 666643;
			num12 += num23 * 470296;
			num13 += num23 * 654183;
			num14 -= num23 * 997805;
			num15 += num23 * 136657;
			num16 -= num23 * 683901;
			num23 = 0L;
			num10 += num22 * 666643;
			num11 += num22 * 470296;
			num12 += num22 * 654183;
			num13 -= num22 * 997805;
			num14 += num22 * 136657;
			num15 -= num22 * 683901;
			num22 = 0L;
			num9 += num21 * 666643;
			num10 += num21 * 470296;
			num11 += num21 * 654183;
			num12 -= num21 * 997805;
			num13 += num21 * 136657;
			num14 -= num21 * 683901;
			num21 = 0L;
			num8 += num20 * 666643;
			num9 += num20 * 470296;
			num10 += num20 * 654183;
			num11 -= num20 * 997805;
			num12 += num20 * 136657;
			num13 -= num20 * 683901;
			num20 = 0L;
			num7 += num19 * 666643;
			num8 += num19 * 470296;
			num9 += num19 * 654183;
			num10 -= num19 * 997805;
			num11 += num19 * 136657;
			num12 -= num19 * 683901;
			num19 = 0L;
			long num25 = num7 + 1048576 >> 21;
			num8 += num25;
			num7 -= num25 << 21;
			long num26 = num9 + 1048576 >> 21;
			num10 += num26;
			num9 -= num26 << 21;
			long num27 = num11 + 1048576 >> 21;
			num12 += num27;
			num11 -= num27 << 21;
			long num28 = num13 + 1048576 >> 21;
			num14 += num28;
			num13 -= num28 << 21;
			long num29 = num15 + 1048576 >> 21;
			num16 += num29;
			num15 -= num29 << 21;
			long num30 = num17 + 1048576 >> 21;
			num18 += num30;
			num17 -= num30 << 21;
			long num31 = num8 + 1048576 >> 21;
			num9 += num31;
			num8 -= num31 << 21;
			long num32 = num10 + 1048576 >> 21;
			num11 += num32;
			num10 -= num32 << 21;
			long num33 = num12 + 1048576 >> 21;
			num13 += num33;
			num12 -= num33 << 21;
			long num34 = num14 + 1048576 >> 21;
			num15 += num34;
			num14 -= num34 << 21;
			long num35 = num16 + 1048576 >> 21;
			num17 += num35;
			num16 -= num35 << 21;
			num6 += num18 * 666643;
			num7 += num18 * 470296;
			num8 += num18 * 654183;
			num9 -= num18 * 997805;
			num10 += num18 * 136657;
			num11 -= num18 * 683901;
			num18 = 0L;
			num5 += num17 * 666643;
			num6 += num17 * 470296;
			num7 += num17 * 654183;
			num8 -= num17 * 997805;
			num9 += num17 * 136657;
			num10 -= num17 * 683901;
			num17 = 0L;
			num4 += num16 * 666643;
			num5 += num16 * 470296;
			num6 += num16 * 654183;
			num7 -= num16 * 997805;
			num8 += num16 * 136657;
			num9 -= num16 * 683901;
			num16 = 0L;
			num3 += num15 * 666643;
			num4 += num15 * 470296;
			num5 += num15 * 654183;
			num6 -= num15 * 997805;
			num7 += num15 * 136657;
			num8 -= num15 * 683901;
			num15 = 0L;
			num2 += num14 * 666643;
			num3 += num14 * 470296;
			num4 += num14 * 654183;
			num5 -= num14 * 997805;
			num6 += num14 * 136657;
			num7 -= num14 * 683901;
			num14 = 0L;
			num += num13 * 666643;
			num2 += num13 * 470296;
			num3 += num13 * 654183;
			num4 -= num13 * 997805;
			num5 += num13 * 136657;
			num6 -= num13 * 683901;
			num13 = 0L;
			long num36 = num + 1048576 >> 21;
			num2 += num36;
			num -= num36 << 21;
			long num37 = num3 + 1048576 >> 21;
			num4 += num37;
			num3 -= num37 << 21;
			long num38 = num5 + 1048576 >> 21;
			num6 += num38;
			num5 -= num38 << 21;
			num25 = num7 + 1048576 >> 21;
			num8 += num25;
			num7 -= num25 << 21;
			num26 = num9 + 1048576 >> 21;
			num10 += num26;
			num9 -= num26 << 21;
			num27 = num11 + 1048576 >> 21;
			num12 += num27;
			num11 -= num27 << 21;
			long num39 = num2 + 1048576 >> 21;
			num3 += num39;
			num2 -= num39 << 21;
			long num40 = num4 + 1048576 >> 21;
			num5 += num40;
			num4 -= num40 << 21;
			long num41 = num6 + 1048576 >> 21;
			num7 += num41;
			num6 -= num41 << 21;
			num31 = num8 + 1048576 >> 21;
			num9 += num31;
			num8 -= num31 << 21;
			num32 = num10 + 1048576 >> 21;
			num11 += num32;
			num10 -= num32 << 21;
			num33 = num12 + 1048576 >> 21;
			num13 += num33;
			num12 -= num33 << 21;
			num += num13 * 666643;
			num2 += num13 * 470296;
			num3 += num13 * 654183;
			num4 -= num13 * 997805;
			num5 += num13 * 136657;
			num6 -= num13 * 683901;
			num13 = 0L;
			num36 = num >> 21;
			num2 += num36;
			num -= num36 << 21;
			num39 = num2 >> 21;
			num3 += num39;
			num2 -= num39 << 21;
			num37 = num3 >> 21;
			num4 += num37;
			num3 -= num37 << 21;
			num40 = num4 >> 21;
			num5 += num40;
			num4 -= num40 << 21;
			num38 = num5 >> 21;
			num6 += num38;
			num5 -= num38 << 21;
			num41 = num6 >> 21;
			num7 += num41;
			num6 -= num41 << 21;
			num25 = num7 >> 21;
			num8 += num25;
			num7 -= num25 << 21;
			num31 = num8 >> 21;
			num9 += num31;
			num8 -= num31 << 21;
			num26 = num9 >> 21;
			num10 += num26;
			num9 -= num26 << 21;
			num32 = num10 >> 21;
			num11 += num32;
			num10 -= num32 << 21;
			num27 = num11 >> 21;
			num12 += num27;
			num11 -= num27 << 21;
			num33 = num12 >> 21;
			num13 += num33;
			num12 -= num33 << 21;
			num += num13 * 666643;
			num2 += num13 * 470296;
			num3 += num13 * 654183;
			num4 -= num13 * 997805;
			num5 += num13 * 136657;
			num6 -= num13 * 683901;
			num13 = 0L;
			num36 = num >> 21;
			num2 += num36;
			num -= num36 << 21;
			num39 = num2 >> 21;
			num3 += num39;
			num2 -= num39 << 21;
			num37 = num3 >> 21;
			num4 += num37;
			num3 -= num37 << 21;
			num40 = num4 >> 21;
			num5 += num40;
			num4 -= num40 << 21;
			num38 = num5 >> 21;
			num6 += num38;
			num5 -= num38 << 21;
			num41 = num6 >> 21;
			num7 += num41;
			num6 -= num41 << 21;
			num25 = num7 >> 21;
			num8 += num25;
			num7 -= num25 << 21;
			num31 = num8 >> 21;
			num9 += num31;
			num8 -= num31 << 21;
			num26 = num9 >> 21;
			num10 += num26;
			num9 -= num26 << 21;
			num32 = num10 >> 21;
			num11 += num32;
			num10 -= num32 << 21;
			num27 = num11 >> 21;
			num12 += num27;
			num11 -= num27 << 21;
			s[0] = (byte)num;
			s[1] = (byte)(num >> 8);
			s[2] = (byte)((num >> 16) | (num2 << 5));
			s[3] = (byte)(num2 >> 3);
			s[4] = (byte)(num2 >> 11);
			s[5] = (byte)((num2 >> 19) | (num3 << 2));
			s[6] = (byte)(num3 >> 6);
			s[7] = (byte)((num3 >> 14) | (num4 << 7));
			s[8] = (byte)(num4 >> 1);
			s[9] = (byte)(num4 >> 9);
			s[10] = (byte)((num4 >> 17) | (num5 << 4));
			s[11] = (byte)(num5 >> 4);
			s[12] = (byte)(num5 >> 12);
			s[13] = (byte)((num5 >> 20) | (num6 << 1));
			s[14] = (byte)(num6 >> 7);
			s[15] = (byte)((num6 >> 15) | (num7 << 6));
			s[16] = (byte)(num7 >> 2);
			s[17] = (byte)(num7 >> 10);
			s[18] = (byte)((num7 >> 18) | (num8 << 3));
			s[19] = (byte)(num8 >> 5);
			s[20] = (byte)(num8 >> 13);
			s[21] = (byte)num9;
			s[22] = (byte)(num9 >> 8);
			s[23] = (byte)((num9 >> 16) | (num10 << 5));
			s[24] = (byte)(num10 >> 3);
			s[25] = (byte)(num10 >> 11);
			s[26] = (byte)((num10 >> 19) | (num11 << 2));
			s[27] = (byte)(num11 >> 6);
			s[28] = (byte)((num11 >> 14) | (num12 << 7));
			s[29] = (byte)(num12 >> 1);
			s[30] = (byte)(num12 >> 9);
			s[31] = (byte)(num12 >> 17);
		}

		public static void sc_muladd(byte[] s, byte[] a, byte[] b, byte[] c)
		{
			long num = 0x1FFFFF & load_3(a, 0, 0);
			long num2 = 0x1FFFFF & load_4(a, 2, 5);
			long num3 = 0x1FFFFF & load_3(a, 5, 2);
			long num4 = 0x1FFFFF & load_4(a, 7, 7);
			long num5 = 0x1FFFFF & load_4(a, 10, 4);
			long num6 = 0x1FFFFF & load_3(a, 13, 1);
			long num7 = 0x1FFFFF & load_4(a, 15, 6);
			long num8 = 0x1FFFFF & load_3(a, 18, 3);
			long num9 = 0x1FFFFF & load_3(a, 21, 0);
			long num10 = 0x1FFFFF & load_4(a, 23, 5);
			long num11 = 0x1FFFFF & load_3(a, 26, 2);
			long num12 = load_4(a, 28, 7);
			long num13 = 0x1FFFFF & load_3(b, 0, 0);
			long num14 = 0x1FFFFF & load_4(b, 2, 5);
			long num15 = 0x1FFFFF & load_3(b, 5, 2);
			long num16 = 0x1FFFFF & load_4(b, 7, 7);
			long num17 = 0x1FFFFF & load_4(b, 10, 4);
			long num18 = 0x1FFFFF & load_3(b, 13, 1);
			long num19 = 0x1FFFFF & load_4(b, 15, 6);
			long num20 = 0x1FFFFF & load_3(b, 18, 3);
			long num21 = 0x1FFFFF & load_3(b, 21, 0);
			long num22 = 0x1FFFFF & load_4(b, 23, 5);
			long num23 = 0x1FFFFF & load_3(b, 26, 2);
			long num24 = load_4(b, 28, 7);
			long num25 = 0x1FFFFF & load_3(c, 0, 0);
			long num26 = 0x1FFFFF & load_4(c, 2, 5);
			long num27 = 0x1FFFFF & load_3(c, 5, 2);
			long num28 = 0x1FFFFF & load_4(c, 7, 7);
			long num29 = 0x1FFFFF & load_4(c, 10, 4);
			long num30 = 0x1FFFFF & load_3(c, 13, 1);
			long num31 = 0x1FFFFF & load_4(c, 15, 6);
			long num32 = 0x1FFFFF & load_3(c, 18, 3);
			long num33 = 0x1FFFFF & load_3(c, 21, 0);
			long num34 = 0x1FFFFF & load_4(c, 23, 5);
			long num35 = 0x1FFFFF & load_3(c, 26, 2);
			long num36 = load_4(c, 28, 7);
			long num37 = num25 + num * num13;
			long num38 = num26 + num * num14 + num2 * num13;
			long num39 = num27 + num * num15 + num2 * num14 + num3 * num13;
			long num40 = num28 + num * num16 + num2 * num15 + num3 * num14 + num4 * num13;
			long num41 = num29 + num * num17 + num2 * num16 + num3 * num15 + num4 * num14 + num5 * num13;
			long num42 = num30 + num * num18 + num2 * num17 + num3 * num16 + num4 * num15 + num5 * num14 + num6 * num13;
			long num43 = num31 + num * num19 + num2 * num18 + num3 * num17 + num4 * num16 + num5 * num15 + num6 * num14 + num7 * num13;
			long num44 = num32 + num * num20 + num2 * num19 + num3 * num18 + num4 * num17 + num5 * num16 + num6 * num15 + num7 * num14 + num8 * num13;
			long num45 = num33 + num * num21 + num2 * num20 + num3 * num19 + num4 * num18 + num5 * num17 + num6 * num16 + num7 * num15 + num8 * num14 + num9 * num13;
			long num46 = num34 + num * num22 + num2 * num21 + num3 * num20 + num4 * num19 + num5 * num18 + num6 * num17 + num7 * num16 + num8 * num15 + num9 * num14 + num10 * num13;
			long num47 = num35 + num * num23 + num2 * num22 + num3 * num21 + num4 * num20 + num5 * num19 + num6 * num18 + num7 * num17 + num8 * num16 + num9 * num15 + num10 * num14 + num11 * num13;
			long num48 = num36 + num * num24 + num2 * num23 + num3 * num22 + num4 * num21 + num5 * num20 + num6 * num19 + num7 * num18 + num8 * num17 + num9 * num16 + num10 * num15 + num11 * num14 + num12 * num13;
			long num49 = num2 * num24 + num3 * num23 + num4 * num22 + num5 * num21 + num6 * num20 + num7 * num19 + num8 * num18 + num9 * num17 + num10 * num16 + num11 * num15 + num12 * num14;
			long num50 = num3 * num24 + num4 * num23 + num5 * num22 + num6 * num21 + num7 * num20 + num8 * num19 + num9 * num18 + num10 * num17 + num11 * num16 + num12 * num15;
			long num51 = num4 * num24 + num5 * num23 + num6 * num22 + num7 * num21 + num8 * num20 + num9 * num19 + num10 * num18 + num11 * num17 + num12 * num16;
			long num52 = num5 * num24 + num6 * num23 + num7 * num22 + num8 * num21 + num9 * num20 + num10 * num19 + num11 * num18 + num12 * num17;
			long num53 = num6 * num24 + num7 * num23 + num8 * num22 + num9 * num21 + num10 * num20 + num11 * num19 + num12 * num18;
			long num54 = num7 * num24 + num8 * num23 + num9 * num22 + num10 * num21 + num11 * num20 + num12 * num19;
			long num55 = num8 * num24 + num9 * num23 + num10 * num22 + num11 * num21 + num12 * num20;
			long num56 = num9 * num24 + num10 * num23 + num11 * num22 + num12 * num21;
			long num57 = num10 * num24 + num11 * num23 + num12 * num22;
			long num58 = num11 * num24 + num12 * num23;
			long num59 = num12 * num24;
			long num60 = 0L;
			long num61 = num37 + 1048576 >> 21;
			num38 += num61;
			num37 -= num61 << 21;
			long num62 = num39 + 1048576 >> 21;
			num40 += num62;
			num39 -= num62 << 21;
			long num63 = num41 + 1048576 >> 21;
			num42 += num63;
			num41 -= num63 << 21;
			long num64 = num43 + 1048576 >> 21;
			num44 += num64;
			num43 -= num64 << 21;
			long num65 = num45 + 1048576 >> 21;
			num46 += num65;
			num45 -= num65 << 21;
			long num66 = num47 + 1048576 >> 21;
			num48 += num66;
			num47 -= num66 << 21;
			long num67 = num49 + 1048576 >> 21;
			num50 += num67;
			num49 -= num67 << 21;
			long num68 = num51 + 1048576 >> 21;
			num52 += num68;
			num51 -= num68 << 21;
			long num69 = num53 + 1048576 >> 21;
			num54 += num69;
			num53 -= num69 << 21;
			long num70 = num55 + 1048576 >> 21;
			num56 += num70;
			num55 -= num70 << 21;
			long num71 = num57 + 1048576 >> 21;
			num58 += num71;
			num57 -= num71 << 21;
			long num72 = num59 + 1048576 >> 21;
			num60 += num72;
			num59 -= num72 << 21;
			long num73 = num38 + 1048576 >> 21;
			num39 += num73;
			num38 -= num73 << 21;
			long num74 = num40 + 1048576 >> 21;
			num41 += num74;
			num40 -= num74 << 21;
			long num75 = num42 + 1048576 >> 21;
			num43 += num75;
			num42 -= num75 << 21;
			long num76 = num44 + 1048576 >> 21;
			num45 += num76;
			num44 -= num76 << 21;
			long num77 = num46 + 1048576 >> 21;
			num47 += num77;
			num46 -= num77 << 21;
			long num78 = num48 + 1048576 >> 21;
			num49 += num78;
			num48 -= num78 << 21;
			long num79 = num50 + 1048576 >> 21;
			num51 += num79;
			num50 -= num79 << 21;
			long num80 = num52 + 1048576 >> 21;
			num53 += num80;
			num52 -= num80 << 21;
			long num81 = num54 + 1048576 >> 21;
			num55 += num81;
			num54 -= num81 << 21;
			long num82 = num56 + 1048576 >> 21;
			num57 += num82;
			num56 -= num82 << 21;
			long num83 = num58 + 1048576 >> 21;
			num59 += num83;
			num58 -= num83 << 21;
			num48 += num60 * 666643;
			num49 += num60 * 470296;
			num50 += num60 * 654183;
			num51 -= num60 * 997805;
			num52 += num60 * 136657;
			num53 -= num60 * 683901;
			num60 = 0L;
			num47 += num59 * 666643;
			num48 += num59 * 470296;
			num49 += num59 * 654183;
			num50 -= num59 * 997805;
			num51 += num59 * 136657;
			num52 -= num59 * 683901;
			num59 = 0L;
			num46 += num58 * 666643;
			num47 += num58 * 470296;
			num48 += num58 * 654183;
			num49 -= num58 * 997805;
			num50 += num58 * 136657;
			num51 -= num58 * 683901;
			num58 = 0L;
			num45 += num57 * 666643;
			num46 += num57 * 470296;
			num47 += num57 * 654183;
			num48 -= num57 * 997805;
			num49 += num57 * 136657;
			num50 -= num57 * 683901;
			num57 = 0L;
			num44 += num56 * 666643;
			num45 += num56 * 470296;
			num46 += num56 * 654183;
			num47 -= num56 * 997805;
			num48 += num56 * 136657;
			num49 -= num56 * 683901;
			num56 = 0L;
			num43 += num55 * 666643;
			num44 += num55 * 470296;
			num45 += num55 * 654183;
			num46 -= num55 * 997805;
			num47 += num55 * 136657;
			num48 -= num55 * 683901;
			num55 = 0L;
			num64 = num43 + 1048576 >> 21;
			num44 += num64;
			num43 -= num64 << 21;
			num65 = num45 + 1048576 >> 21;
			num46 += num65;
			num45 -= num65 << 21;
			num66 = num47 + 1048576 >> 21;
			num48 += num66;
			num47 -= num66 << 21;
			num67 = num49 + 1048576 >> 21;
			num50 += num67;
			num49 -= num67 << 21;
			num68 = num51 + 1048576 >> 21;
			num52 += num68;
			num51 -= num68 << 21;
			num69 = num53 + 1048576 >> 21;
			num54 += num69;
			num53 -= num69 << 21;
			num76 = num44 + 1048576 >> 21;
			num45 += num76;
			num44 -= num76 << 21;
			num77 = num46 + 1048576 >> 21;
			num47 += num77;
			num46 -= num77 << 21;
			num78 = num48 + 1048576 >> 21;
			num49 += num78;
			num48 -= num78 << 21;
			num79 = num50 + 1048576 >> 21;
			num51 += num79;
			num50 -= num79 << 21;
			num80 = num52 + 1048576 >> 21;
			num53 += num80;
			num52 -= num80 << 21;
			num42 += num54 * 666643;
			num43 += num54 * 470296;
			num44 += num54 * 654183;
			num45 -= num54 * 997805;
			num46 += num54 * 136657;
			num47 -= num54 * 683901;
			num54 = 0L;
			num41 += num53 * 666643;
			num42 += num53 * 470296;
			num43 += num53 * 654183;
			num44 -= num53 * 997805;
			num45 += num53 * 136657;
			num46 -= num53 * 683901;
			num53 = 0L;
			num40 += num52 * 666643;
			num41 += num52 * 470296;
			num42 += num52 * 654183;
			num43 -= num52 * 997805;
			num44 += num52 * 136657;
			num45 -= num52 * 683901;
			num52 = 0L;
			num39 += num51 * 666643;
			num40 += num51 * 470296;
			num41 += num51 * 654183;
			num42 -= num51 * 997805;
			num43 += num51 * 136657;
			num44 -= num51 * 683901;
			num51 = 0L;
			num38 += num50 * 666643;
			num39 += num50 * 470296;
			num40 += num50 * 654183;
			num41 -= num50 * 997805;
			num42 += num50 * 136657;
			num43 -= num50 * 683901;
			num50 = 0L;
			num37 += num49 * 666643;
			num38 += num49 * 470296;
			num39 += num49 * 654183;
			num40 -= num49 * 997805;
			num41 += num49 * 136657;
			num42 -= num49 * 683901;
			num49 = 0L;
			num61 = num37 + 1048576 >> 21;
			num38 += num61;
			num37 -= num61 << 21;
			num62 = num39 + 1048576 >> 21;
			num40 += num62;
			num39 -= num62 << 21;
			num63 = num41 + 1048576 >> 21;
			num42 += num63;
			num41 -= num63 << 21;
			num64 = num43 + 1048576 >> 21;
			num44 += num64;
			num43 -= num64 << 21;
			num65 = num45 + 1048576 >> 21;
			num46 += num65;
			num45 -= num65 << 21;
			num66 = num47 + 1048576 >> 21;
			num48 += num66;
			num47 -= num66 << 21;
			num73 = num38 + 1048576 >> 21;
			num39 += num73;
			num38 -= num73 << 21;
			num74 = num40 + 1048576 >> 21;
			num41 += num74;
			num40 -= num74 << 21;
			num75 = num42 + 1048576 >> 21;
			num43 += num75;
			num42 -= num75 << 21;
			num76 = num44 + 1048576 >> 21;
			num45 += num76;
			num44 -= num76 << 21;
			num77 = num46 + 1048576 >> 21;
			num47 += num77;
			num46 -= num77 << 21;
			num78 = num48 + 1048576 >> 21;
			num49 += num78;
			num48 -= num78 << 21;
			num37 += num49 * 666643;
			num38 += num49 * 470296;
			num39 += num49 * 654183;
			num40 -= num49 * 997805;
			num41 += num49 * 136657;
			num42 -= num49 * 683901;
			num49 = 0L;
			num61 = num37 >> 21;
			num38 += num61;
			num37 -= num61 << 21;
			num73 = num38 >> 21;
			num39 += num73;
			num38 -= num73 << 21;
			num62 = num39 >> 21;
			num40 += num62;
			num39 -= num62 << 21;
			num74 = num40 >> 21;
			num41 += num74;
			num40 -= num74 << 21;
			num63 = num41 >> 21;
			num42 += num63;
			num41 -= num63 << 21;
			num75 = num42 >> 21;
			num43 += num75;
			num42 -= num75 << 21;
			num64 = num43 >> 21;
			num44 += num64;
			num43 -= num64 << 21;
			num76 = num44 >> 21;
			num45 += num76;
			num44 -= num76 << 21;
			num65 = num45 >> 21;
			num46 += num65;
			num45 -= num65 << 21;
			num77 = num46 >> 21;
			num47 += num77;
			num46 -= num77 << 21;
			num66 = num47 >> 21;
			num48 += num66;
			num47 -= num66 << 21;
			num78 = num48 >> 21;
			num49 += num78;
			num48 -= num78 << 21;
			num37 += num49 * 666643;
			num38 += num49 * 470296;
			num39 += num49 * 654183;
			num40 -= num49 * 997805;
			num41 += num49 * 136657;
			num42 -= num49 * 683901;
			num49 = 0L;
			num61 = num37 >> 21;
			num38 += num61;
			num37 -= num61 << 21;
			num73 = num38 >> 21;
			num39 += num73;
			num38 -= num73 << 21;
			num62 = num39 >> 21;
			num40 += num62;
			num39 -= num62 << 21;
			num74 = num40 >> 21;
			num41 += num74;
			num40 -= num74 << 21;
			num63 = num41 >> 21;
			num42 += num63;
			num41 -= num63 << 21;
			num75 = num42 >> 21;
			num43 += num75;
			num42 -= num75 << 21;
			num64 = num43 >> 21;
			num44 += num64;
			num43 -= num64 << 21;
			num76 = num44 >> 21;
			num45 += num76;
			num44 -= num76 << 21;
			num65 = num45 >> 21;
			num46 += num65;
			num45 -= num65 << 21;
			num77 = num46 >> 21;
			num47 += num77;
			num46 -= num77 << 21;
			num66 = num47 >> 21;
			num48 += num66;
			num47 -= num66 << 21;
			s[0] = (byte)num37;
			s[1] = (byte)(num37 >> 8);
			s[2] = (byte)((num37 >> 16) | (num38 << 5));
			s[3] = (byte)(num38 >> 3);
			s[4] = (byte)(num38 >> 11);
			s[5] = (byte)((num38 >> 19) | (num39 << 2));
			s[6] = (byte)(num39 >> 6);
			s[7] = (byte)((num39 >> 14) | (num40 << 7));
			s[8] = (byte)(num40 >> 1);
			s[9] = (byte)(num40 >> 9);
			s[10] = (byte)((num40 >> 17) | (num41 << 4));
			s[11] = (byte)(num41 >> 4);
			s[12] = (byte)(num41 >> 12);
			s[13] = (byte)((num41 >> 20) | (num42 << 1));
			s[14] = (byte)(num42 >> 7);
			s[15] = (byte)((num42 >> 15) | (num43 << 6));
			s[16] = (byte)(num43 >> 2);
			s[17] = (byte)(num43 >> 10);
			s[18] = (byte)((num43 >> 18) | (num44 << 3));
			s[19] = (byte)(num44 >> 5);
			s[20] = (byte)(num44 >> 13);
			s[21] = (byte)num45;
			s[22] = (byte)(num45 >> 8);
			s[23] = (byte)((num45 >> 16) | (num46 << 5));
			s[24] = (byte)(num46 >> 3);
			s[25] = (byte)(num46 >> 11);
			s[26] = (byte)((num46 >> 19) | (num47 << 2));
			s[27] = (byte)(num47 >> 6);
			s[28] = (byte)((num47 >> 14) | (num48 << 7));
			s[29] = (byte)(num48 >> 1);
			s[30] = (byte)(num48 >> 9);
			s[31] = (byte)(num48 >> 17);
		}
	}
	internal class FieldElement
	{
		public static int[] New()
		{
			return new int[10];
		}

		public static int[] New(int a, int b, int c, int d, int e, int f, int g, int h, int i, int j)
		{
			return new int[10] { a, b, c, d, e, f, g, h, i, j };
		}

		public static int readUnsigned(byte b)
		{
			return b & 0xFF;
		}

		public static long load_3(byte[] inp, int ofs)
		{
			return readUnsigned(inp[ofs]) | ((long)readUnsigned(inp[1 + ofs]) << 8) | ((long)readUnsigned(inp[2 + ofs]) << 16);
		}

		public static long load_4(byte[] inp, int ofs)
		{
			return readUnsigned(inp[ofs]) | ((long)readUnsigned(inp[1 + ofs]) << 8) | ((long)readUnsigned(inp[2 + ofs]) << 16) | ((long)readUnsigned(inp[3 + ofs]) << 24);
		}

		public static void fe_0(int[] h)
		{
			h[0] = 0;
			h[1] = 0;
			h[2] = 0;
			h[3] = 0;
			h[4] = 0;
			h[5] = 0;
			h[6] = 0;
			h[7] = 0;
			h[8] = 0;
			h[9] = 0;
		}

		public static void fe_1(int[] h)
		{
			h[0] = 1;
			h[1] = 0;
			h[2] = 0;
			h[3] = 0;
			h[4] = 0;
			h[5] = 0;
			h[6] = 0;
			h[7] = 0;
			h[8] = 0;
			h[9] = 0;
		}

		public static void fe_add(int[] h, int[] f, int[] g)
		{
			int num = f[0];
			int num2 = f[1];
			int num3 = f[2];
			int num4 = f[3];
			int num5 = f[4];
			int num6 = f[5];
			int num7 = f[6];
			int num8 = f[7];
			int num9 = f[8];
			int num10 = f[9];
			int num11 = g[0];
			int num12 = g[1];
			int num13 = g[2];
			int num14 = g[3];
			int num15 = g[4];
			int num16 = g[5];
			int num17 = g[6];
			int num18 = g[7];
			int num19 = g[8];
			int num20 = g[9];
			int num21 = num + num11;
			int num22 = num2 + num12;
			int num23 = num3 + num13;
			int num24 = num4 + num14;
			int num25 = num5 + num15;
			int num26 = num6 + num16;
			int num27 = num7 + num17;
			int num28 = num8 + num18;
			int num29 = num9 + num19;
			int num30 = num10 + num20;
			h[0] = num21;
			h[1] = num22;
			h[2] = num23;
			h[3] = num24;
			h[4] = num25;
			h[5] = num26;
			h[6] = num27;
			h[7] = num28;
			h[8] = num29;
			h[9] = num30;
		}

		public static void fe_cmov(int[] f, int[] g, int b)
		{
			int num = f[0];
			int num2 = f[1];
			int num3 = f[2];
			int num4 = f[3];
			int num5 = f[4];
			int num6 = f[5];
			int num7 = f[6];
			int num8 = f[7];
			int num9 = f[8];
			int num10 = f[9];
			int num11 = g[0];
			int num12 = g[1];
			int num13 = g[2];
			int num14 = g[3];
			int num15 = g[4];
			int num16 = g[5];
			int num17 = g[6];
			int num18 = g[7];
			int num19 = g[8];
			int num20 = g[9];
			int num21 = num ^ num11;
			int num22 = num2 ^ num12;
			int num23 = num3 ^ num13;
			int num24 = num4 ^ num14;
			int num25 = num5 ^ num15;
			int num26 = num6 ^ num16;
			int num27 = num7 ^ num17;
			int num28 = num8 ^ num18;
			int num29 = num9 ^ num19;
			int num30 = num10 ^ num20;
			b = -b;
			num21 &= b;
			num22 &= b;
			num23 &= b;
			num24 &= b;
			num25 &= b;
			num26 &= b;
			num27 &= b;
			num28 &= b;
			num29 &= b;
			num30 &= b;
			f[0] = num ^ num21;
			f[1] = num2 ^ num22;
			f[2] = num3 ^ num23;
			f[3] = num4 ^ num24;
			f[4] = num5 ^ num25;
			f[5] = num6 ^ num26;
			f[6] = num7 ^ num27;
			f[7] = num8 ^ num28;
			f[8] = num9 ^ num29;
			f[9] = num10 ^ num30;
		}

		public static void fe_cswap(int[] f, int[] g, int b)
		{
			int num = f[0];
			int num2 = f[1];
			int num3 = f[2];
			int num4 = f[3];
			int num5 = f[4];
			int num6 = f[5];
			int num7 = f[6];
			int num8 = f[7];
			int num9 = f[8];
			int num10 = f[9];
			int num11 = g[0];
			int num12 = g[1];
			int num13 = g[2];
			int num14 = g[3];
			int num15 = g[4];
			int num16 = g[5];
			int num17 = g[6];
			int num18 = g[7];
			int num19 = g[8];
			int num20 = g[9];
			int num21 = num ^ num11;
			int num22 = num2 ^ num12;
			int num23 = num3 ^ num13;
			int num24 = num4 ^ num14;
			int num25 = num5 ^ num15;
			int num26 = num6 ^ num16;
			int num27 = num7 ^ num17;
			int num28 = num8 ^ num18;
			int num29 = num9 ^ num19;
			int num30 = num10 ^ num20;
			b = -b;
			num21 &= b;
			num22 &= b;
			num23 &= b;
			num24 &= b;
			num25 &= b;
			num26 &= b;
			num27 &= b;
			num28 &= b;
			num29 &= b;
			num30 &= b;
			f[0] = num ^ num21;
			f[1] = num2 ^ num22;
			f[2] = num3 ^ num23;
			f[3] = num4 ^ num24;
			f[4] = num5 ^ num25;
			f[5] = num6 ^ num26;
			f[6] = num7 ^ num27;
			f[7] = num8 ^ num28;
			f[8] = num9 ^ num29;
			f[9] = num10 ^ num30;
			g[0] = num11 ^ num21;
			g[1] = num12 ^ num22;
			g[2] = num13 ^ num23;
			g[3] = num14 ^ num24;
			g[4] = num15 ^ num25;
			g[5] = num16 ^ num26;
			g[6] = num17 ^ num27;
			g[7] = num18 ^ num28;
			g[8] = num19 ^ num29;
			g[9] = num20 ^ num30;
		}

		public static void fe_copy(int[] h, int[] f)
		{
			int num = f[0];
			int num2 = f[1];
			int num3 = f[2];
			int num4 = f[3];
			int num5 = f[4];
			int num6 = f[5];
			int num7 = f[6];
			int num8 = f[7];
			int num9 = f[8];
			int num10 = f[9];
			h[0] = num;
			h[1] = num2;
			h[2] = num3;
			h[3] = num4;
			h[4] = num5;
			h[5] = num6;
			h[6] = num7;
			h[7] = num8;
			h[8] = num9;
			h[9] = num10;
		}

		public static void fe_frombytes(int[] h, byte[] s)
		{
			long num = load_4(s, 0);
			long num2 = load_3(s, 4) << 6;
			long num3 = load_3(s, 7) << 5;
			long num4 = load_3(s, 10) << 3;
			long num5 = load_3(s, 13) << 2;
			long num6 = load_4(s, 16);
			long num7 = load_3(s, 20) << 7;
			long num8 = load_3(s, 23) << 5;
			long num9 = load_3(s, 26) << 4;
			long num10 = (load_3(s, 29) & 0x7FFFFF) << 2;
			long num11 = num10 + 16777216 >> 25;
			num += num11 * 19;
			num10 -= num11 << 25;
			long num12 = num2 + 16777216 >> 25;
			num3 += num12;
			num2 -= num12 << 25;
			long num13 = num4 + 16777216 >> 25;
			num5 += num13;
			num4 -= num13 << 25;
			long num14 = num6 + 16777216 >> 25;
			num7 += num14;
			num6 -= num14 << 25;
			long num15 = num8 + 16777216 >> 25;
			num9 += num15;
			num8 -= num15 << 25;
			long num16 = num + 33554432 >> 26;
			num2 += num16;
			num -= num16 << 26;
			long num17 = num3 + 33554432 >> 26;
			num4 += num17;
			num3 -= num17 << 26;
			long num18 = num5 + 33554432 >> 26;
			num6 += num18;
			num5 -= num18 << 26;
			long num19 = num7 + 33554432 >> 26;
			num8 += num19;
			num7 -= num19 << 26;
			long num20 = num9 + 33554432 >> 26;
			num10 += num20;
			num9 -= num20 << 26;
			h[0] = (int)num;
			h[1] = (int)num2;
			h[2] = (int)num3;
			h[3] = (int)num4;
			h[4] = (int)num5;
			h[5] = (int)num6;
			h[6] = (int)num7;
			h[7] = (int)num8;
			h[8] = (int)num9;
			h[9] = (int)num10;
		}

		public static void fe_invert(int[] outp, int[] z)
		{
			int[] array = New();
			int[] array2 = New();
			int[] array3 = New();
			int[] array4 = New();
			fe_sq(array, z);
			for (int i = 1; i < 1; i++)
			{
				fe_sq(array, array);
			}
			fe_sq(array2, array);
			for (int i = 1; i < 2; i++)
			{
				fe_sq(array2, array2);
			}
			fe_mul(array2, z, array2);
			fe_mul(array, array, array2);
			fe_sq(array3, array);
			for (int i = 1; i < 1; i++)
			{
				fe_sq(array3, array3);
			}
			fe_mul(array2, array2, array3);
			fe_sq(array3, array2);
			for (int i = 1; i < 5; i++)
			{
				fe_sq(array3, array3);
			}
			fe_mul(array2, array3, array2);
			fe_sq(array3, array2);
			for (int i = 1; i < 10; i++)
			{
				fe_sq(array3, array3);
			}
			fe_mul(array3, array3, array2);
			fe_sq(array4, array3);
			for (int i = 1; i < 20; i++)
			{
				fe_sq(array4, array4);
			}
			fe_mul(array3, array4, array3);
			fe_sq(array3, array3);
			for (int i = 1; i < 10; i++)
			{
				fe_sq(array3, array3);
			}
			fe_mul(array2, array3, array2);
			fe_sq(array3, array2);
			for (int i = 1; i < 50; i++)
			{
				fe_sq(array3, array3);
			}
			fe_mul(array3, array3, array2);
			fe_sq(array4, array3);
			for (int i = 1; i < 100; i++)
			{
				fe_sq(array4, array4);
			}
			fe_mul(array3, array4, array3);
			fe_sq(array3, array3);
			for (int i = 1; i < 50; i++)
			{
				fe_sq(array3, array3);
			}
			fe_mul(array2, array3, array2);
			fe_sq(array2, array2);
			for (int i = 1; i < 5; i++)
			{
				fe_sq(array2, array2);
			}
			fe_mul(outp, array2, array);
		}

		public static int fe_isnegative(int[] f)
		{
			byte[] array = new byte[32];
			fe_tobytes(array, f);
			return array[0] & 1;
		}

		public static int fe_isnonzero(int[] f)
		{
			byte[] array = new byte[32];
			fe_tobytes(array, f);
			if ((byte)((byte)((byte)((byte)((byte)((byte)((byte)((byte)((byte)((byte)((byte)((byte)((byte)((byte)((byte)((byte)((byte)((byte)((byte)((byte)((byte)((byte)((byte)((byte)((byte)((byte)((byte)((byte)((byte)((byte)((byte)(array[0] | array[1]) | array[2]) | array[3]) | array[4]) | array[5]) | array[6]) | array[7]) | array[8]) | array[9]) | array[10]) | array[11]) | array[12]) | array[13]) | array[14]) | array[15]) | array[16]) | array[17]) | array[18]) | array[19]) | array[20]) | array[21]) | array[22]) | array[23]) | array[24]) | array[25]) | array[26]) | array[27]) | array[28]) | array[29]) | array[30]) | array[31]) == 0)
			{
				return 0;
			}
			return 1;
		}

		public static void fe_mul(int[] h, int[] f, int[] g)
		{
			int num = f[0];
			int num2 = f[1];
			int num3 = f[2];
			int num4 = f[3];
			int num5 = f[4];
			int num6 = f[5];
			int num7 = f[6];
			int num8 = f[7];
			int num9 = f[8];
			int num10 = f[9];
			int num11 = g[0];
			int num12 = g[1];
			int num13 = g[2];
			int num14 = g[3];
			int num15 = g[4];
			int num16 = g[5];
			int num17 = g[6];
			int num18 = g[7];
			int num19 = g[8];
			int num20 = g[9];
			int num21 = 19 * num12;
			int num22 = 19 * num13;
			int num23 = 19 * num14;
			int num24 = 19 * num15;
			int num25 = 19 * num16;
			int num26 = 19 * num17;
			int num27 = 19 * num18;
			int num28 = 19 * num19;
			int num29 = 19 * num20;
			int num30 = 2 * num2;
			int num31 = 2 * num4;
			int num32 = 2 * num6;
			int num33 = 2 * num8;
			int num34 = 2 * num10;
			long num35 = (long)num * (long)num11;
			long num36 = (long)num * (long)num12;
			long num37 = (long)num * (long)num13;
			long num38 = (long)num * (long)num14;
			long num39 = (long)num * (long)num15;
			long num40 = (long)num * (long)num16;
			long num41 = (long)num * (long)num17;
			long num42 = (long)num * (long)num18;
			long num43 = (long)num * (long)num19;
			long num44 = (long)num * (long)num20;
			long num45 = (long)num2 * (long)num11;
			long num46 = (long)num30 * (long)num12;
			long num47 = (long)num2 * (long)num13;
			long num48 = (long)num30 * (long)num14;
			long num49 = (long)num2 * (long)num15;
			long num50 = (long)num30 * (long)num16;
			long num51 = (long)num2 * (long)num17;
			long num52 = (long)num30 * (long)num18;
			long num53 = (long)num2 * (long)num19;
			long num54 = (long)num30 * (long)num29;
			long num55 = (long)num3 * (long)num11;
			long num56 = (long)num3 * (long)num12;
			long num57 = (long)num3 * (long)num13;
			long num58 = (long)num3 * (long)num14;
			long num59 = (long)num3 * (long)num15;
			long num60 = (long)num3 * (long)num16;
			long num61 = (long)num3 * (long)num17;
			long num62 = (long)num3 * (long)num18;
			long num63 = (long)num3 * (long)num28;
			long num64 = (long)num3 * (long)num29;
			long num65 = (long)num4 * (long)num11;
			long num66 = (long)num31 * (long)num12;
			long num67 = (long)num4 * (long)num13;
			long num68 = (long)num31 * (long)num14;
			long num69 = (long)num4 * (long)num15;
			long num70 = (long)num31 * (long)num16;
			long num71 = (long)num4 * (long)num17;
			long num72 = (long)num31 * (long)num27;
			long num73 = (long)num4 * (long)num28;
			long num74 = (long)num31 * (long)num29;
			long num75 = (long)num5 * (long)num11;
			long num76 = (long)num5 * (long)num12;
			long num77 = (long)num5 * (long)num13;
			long num78 = (long)num5 * (long)num14;
			long num79 = (long)num5 * (long)num15;
			long num80 = (long)num5 * (long)num16;
			long num81 = (long)num5 * (long)num26;
			long num82 = (long)num5 * (long)num27;
			long num83 = (long)num5 * (long)num28;
			long num84 = (long)num5 * (long)num29;
			long num85 = (long)num6 * (long)num11;
			long num86 = (long)num32 * (long)num12;
			long num87 = (long)num6 * (long)num13;
			long num88 = (long)num32 * (long)num14;
			long num89 = (long)num6 * (long)num15;
			long num90 = (long)num32 * (long)num25;
			long num91 = (long)num6 * (long)num26;
			long num92 = (long)num32 * (long)num27;
			long num93 = (long)num6 * (long)num28;
			long num94 = (long)num32 * (long)num29;
			long num95 = (long)num7 * (long)num11;
			long num96 = (long)num7 * (long)num12;
			long num97 = (long)num7 * (long)num13;
			long num98 = (long)num7 * (long)num14;
			long num99 = (long)num7 * (long)num24;
			long num100 = (long)num7 * (long)num25;
			long num101 = (long)num7 * (long)num26;
			long num102 = (long)num7 * (long)num27;
			long num103 = (long)num7 * (long)num28;
			long num104 = (long)num7 * (long)num29;
			long num105 = (long)num8 * (long)num11;
			long num106 = (long)num33 * (long)num12;
			long num107 = (long)num8 * (long)num13;
			long num108 = (long)num33 * (long)num23;
			long num109 = (long)num8 * (long)num24;
			long num110 = (long)num33 * (long)num25;
			long num111 = (long)num8 * (long)num26;
			long num112 = (long)num33 * (long)num27;
			long num113 = (long)num8 * (long)num28;
			long num114 = (long)num33 * (long)num29;
			long num115 = (long)num9 * (long)num11;
			long num116 = (long)num9 * (long)num12;
			long num117 = (long)num9 * (long)num22;
			long num118 = (long)num9 * (long)num23;
			long num119 = (long)num9 * (long)num24;
			long num120 = (long)num9 * (long)num25;
			long num121 = (long)num9 * (long)num26;
			long num122 = (long)num9 * (long)num27;
			long num123 = (long)num9 * (long)num28;
			long num124 = (long)num9 * (long)num29;
			long num125 = (long)num10 * (long)num11;
			long num126 = (long)num34 * (long)num21;
			long num127 = (long)num10 * (long)num22;
			long num128 = (long)num34 * (long)num23;
			long num129 = (long)num10 * (long)num24;
			long num130 = (long)num34 * (long)num25;
			long num131 = (long)num10 * (long)num26;
			long num132 = (long)num34 * (long)num27;
			long num133 = (long)num10 * (long)num28;
			long num134 = (long)num34 * (long)num29;
			long num135 = num35 + num54 + num63 + num72 + num81 + num90 + num99 + num108 + num117 + num126;
			long num136 = num36 + num45 + num64 + num73 + num82 + num91 + num100 + num109 + num118 + num127;
			long num137 = num37 + num46 + num55 + num74 + num83 + num92 + num101 + num110 + num119 + num128;
			long num138 = num38 + num47 + num56 + num65 + num84 + num93 + num102 + num111 + num120 + num129;
			long num139 = num39 + num48 + num57 + num66 + num75 + num94 + num103 + num112 + num121 + num130;
			long num140 = num40 + num49 + num58 + num67 + num76 + num85 + num104 + num113 + num122 + num131;
			long num141 = num41 + num50 + num59 + num68 + num77 + num86 + num95 + num114 + num123 + num132;
			long num142 = num42 + num51 + num60 + num69 + num78 + num87 + num96 + num105 + num124 + num133;
			long num143 = num43 + num52 + num61 + num70 + num79 + num88 + num97 + num106 + num115 + num134;
			long num144 = num44 + num53 + num62 + num71 + num80 + num89 + num98 + num107 + num116 + num125;
			long num145 = num135 + 33554432 >> 26;
			num136 += num145;
			num135 -= num145 << 26;
			long num146 = num139 + 33554432 >> 26;
			num140 += num146;
			num139 -= num146 << 26;
			long num147 = num136 + 16777216 >> 25;
			num137 += num147;
			num136 -= num147 << 25;
			long num148 = num140 + 16777216 >> 25;
			num141 += num148;
			num140 -= num148 << 25;
			long num149 = num137 + 33554432 >> 26;
			num138 += num149;
			num137 -= num149 << 26;
			long num150 = num141 + 33554432 >> 26;
			num142 += num150;
			num141 -= num150 << 26;
			long num151 = num138 + 16777216 >> 25;
			num139 += num151;
			num138 -= num151 << 25;
			long num152 = num142 + 16777216 >> 25;
			num143 += num152;
			num142 -= num152 << 25;
			num146 = num139 + 33554432 >> 26;
			num140 += num146;
			num139 -= num146 << 26;
			long num153 = num143 + 33554432 >> 26;
			num144 += num153;
			num143 -= num153 << 26;
			long num154 = num144 + 16777216 >> 25;
			num135 += num154 * 19;
			num144 -= num154 << 25;
			num145 = num135 + 33554432 >> 26;
			num136 += num145;
			num135 -= num145 << 26;
			h[0] = (int)num135;
			h[1] = (int)num136;
			h[2] = (int)num137;
			h[3] = (int)num138;
			h[4] = (int)num139;
			h[5] = (int)num140;
			h[6] = (int)num141;
			h[7] = (int)num142;
			h[8] = (int)num143;
			h[9] = (int)num144;
		}

		public static void fe_mul121666(int[] h, int[] f)
		{
			int num = f[0];
			int num2 = f[1];
			int num3 = f[2];
			int num4 = f[3];
			int num5 = f[4];
			int num6 = f[5];
			int num7 = f[6];
			int num8 = f[7];
			int num9 = f[8];
			int num10 = f[9];
			long num11 = (long)num * 121666L;
			long num12 = (long)num2 * 121666L;
			long num13 = (long)num3 * 121666L;
			long num14 = (long)num4 * 121666L;
			long num15 = (long)num5 * 121666L;
			long num16 = (long)num6 * 121666L;
			long num17 = (long)num7 * 121666L;
			long num18 = (long)num8 * 121666L;
			long num19 = (long)num9 * 121666L;
			long num20 = (long)num10 * 121666L;
			long num21 = num20 + 16777216 >> 25;
			num11 += num21 * 19;
			num20 -= num21 << 25;
			long num22 = num12 + 16777216 >> 25;
			num13 += num22;
			num12 -= num22 << 25;
			long num23 = num14 + 16777216 >> 25;
			num15 += num23;
			num14 -= num23 << 25;
			long num24 = num16 + 16777216 >> 25;
			num17 += num24;
			num16 -= num24 << 25;
			long num25 = num18 + 16777216 >> 25;
			num19 += num25;
			num18 -= num25 << 25;
			long num26 = num11 + 33554432 >> 26;
			num12 += num26;
			num11 -= num26 << 26;
			long num27 = num13 + 33554432 >> 26;
			num14 += num27;
			num13 -= num27 << 26;
			long num28 = num15 + 33554432 >> 26;
			num16 += num28;
			num15 -= num28 << 26;
			long num29 = num17 + 33554432 >> 26;
			num18 += num29;
			num17 -= num29 << 26;
			long num30 = num19 + 33554432 >> 26;
			num20 += num30;
			num19 -= num30 << 26;
			h[0] = (int)num11;
			h[1] = (int)num12;
			h[2] = (int)num13;
			h[3] = (int)num14;
			h[4] = (int)num15;
			h[5] = (int)num16;
			h[6] = (int)num17;
			h[7] = (int)num18;
			h[8] = (int)num19;
			h[9] = (int)num20;
		}

		public static void fe_neg(int[] h, int[] f)
		{
			int num = f[0];
			int num2 = f[1];
			int num3 = f[2];
			int num4 = f[3];
			int num5 = f[4];
			int num6 = f[5];
			int num7 = f[6];
			int num8 = f[7];
			int num9 = f[8];
			int num10 = f[9];
			int num11 = -num;
			int num12 = -num2;
			int num13 = -num3;
			int num14 = -num4;
			int num15 = -num5;
			int num16 = -num6;
			int num17 = -num7;
			int num18 = -num8;
			int num19 = -num9;
			int num20 = -num10;
			h[0] = num11;
			h[1] = num12;
			h[2] = num13;
			h[3] = num14;
			h[4] = num15;
			h[5] = num16;
			h[6] = num17;
			h[7] = num18;
			h[8] = num19;
			h[9] = num20;
		}

		public static void fe_pow22523(int[] outp, int[] z)
		{
			int[] array = New();
			int[] array2 = New();
			int[] array3 = New();
			fe_sq(array, z);
			for (int i = 1; i < 1; i++)
			{
				fe_sq(array, array);
			}
			fe_sq(array2, array);
			for (int i = 1; i < 2; i++)
			{
				fe_sq(array2, array2);
			}
			fe_mul(array2, z, array2);
			fe_mul(array, array, array2);
			fe_sq(array, array);
			for (int i = 1; i < 1; i++)
			{
				fe_sq(array, array);
			}
			fe_mul(array, array2, array);
			fe_sq(array2, array);
			for (int i = 1; i < 5; i++)
			{
				fe_sq(array2, array2);
			}
			fe_mul(array, array2, array);
			fe_sq(array2, array);
			for (int i = 1; i < 10; i++)
			{
				fe_sq(array2, array2);
			}
			fe_mul(array2, array2, array);
			fe_sq(array3, array2);
			for (int i = 1; i < 20; i++)
			{
				fe_sq(array3, array3);
			}
			fe_mul(array2, array3, array2);
			fe_sq(array2, array2);
			for (int i = 1; i < 10; i++)
			{
				fe_sq(array2, array2);
			}
			fe_mul(array, array2, array);
			fe_sq(array2, array);
			for (int i = 1; i < 50; i++)
			{
				fe_sq(array2, array2);
			}
			fe_mul(array2, array2, array);
			fe_sq(array3, array2);
			for (int i = 1; i < 100; i++)
			{
				fe_sq(array3, array3);
			}
			fe_mul(array2, array3, array2);
			fe_sq(array2, array2);
			for (int i = 1; i < 50; i++)
			{
				fe_sq(array2, array2);
			}
			fe_mul(array, array2, array);
			fe_sq(array, array);
			for (int i = 1; i < 2; i++)
			{
				fe_sq(array, array);
			}
			fe_mul(outp, array, z);
		}

		public static void fe_sq(int[] h, int[] f)
		{
			int num = f[0];
			int num2 = f[1];
			int num3 = f[2];
			int num4 = f[3];
			int num5 = f[4];
			int num6 = f[5];
			int num7 = f[6];
			int num8 = f[7];
			int num9 = f[8];
			int num10 = f[9];
			int num11 = 2 * num;
			int num12 = 2 * num2;
			int num13 = 2 * num3;
			int num14 = 2 * num4;
			int num15 = 2 * num5;
			int num16 = 2 * num6;
			int num17 = 2 * num7;
			int num18 = 2 * num8;
			int num19 = 38 * num6;
			int num20 = 19 * num7;
			int num21 = 38 * num8;
			int num22 = 19 * num9;
			int num23 = 38 * num10;
			long num24 = (long)num * (long)num;
			long num25 = (long)num11 * (long)num2;
			long num26 = (long)num11 * (long)num3;
			long num27 = (long)num11 * (long)num4;
			long num28 = (long)num11 * (long)num5;
			long num29 = (long)num11 * (long)num6;
			long num30 = (long)num11 * (long)num7;
			long num31 = (long)num11 * (long)num8;
			long num32 = (long)num11 * (long)num9;
			long num33 = (long)num11 * (long)num10;
			long num34 = (long)num12 * (long)num2;
			long num35 = (long)num12 * (long)num3;
			long num36 = (long)num12 * (long)num14;
			long num37 = (long)num12 * (long)num5;
			long num38 = (long)num12 * (long)num16;
			long num39 = (long)num12 * (long)num7;
			long num40 = (long)num12 * (long)num18;
			long num41 = (long)num12 * (long)num9;
			long num42 = (long)num12 * (long)num23;
			long num43 = (long)num3 * (long)num3;
			long num44 = (long)num13 * (long)num4;
			long num45 = (long)num13 * (long)num5;
			long num46 = (long)num13 * (long)num6;
			long num47 = (long)num13 * (long)num7;
			long num48 = (long)num13 * (long)num8;
			long num49 = (long)num13 * (long)num22;
			long num50 = (long)num3 * (long)num23;
			long num51 = (long)num14 * (long)num4;
			long num52 = (long)num14 * (long)num5;
			long num53 = (long)num14 * (long)num16;
			long num54 = (long)num14 * (long)num7;
			long num55 = (long)num14 * (long)num21;
			long num56 = (long)num14 * (long)num22;
			long num57 = (long)num14 * (long)num23;
			long num58 = (long)num5 * (long)num5;
			long num59 = (long)num15 * (long)num6;
			long num60 = (long)num15 * (long)num20;
			long num61 = (long)num5 * (long)num21;
			long num62 = (long)num15 * (long)num22;
			long num63 = (long)num5 * (long)num23;
			long num64 = (long)num6 * (long)num19;
			long num65 = (long)num16 * (long)num20;
			long num66 = (long)num16 * (long)num21;
			long num67 = (long)num16 * (long)num22;
			long num68 = (long)num16 * (long)num23;
			long num69 = (long)num7 * (long)num20;
			long num70 = (long)num7 * (long)num21;
			long num71 = (long)num17 * (long)num22;
			long num72 = (long)num7 * (long)num23;
			long num73 = (long)num8 * (long)num21;
			long num74 = (long)num18 * (long)num22;
			long num75 = (long)num18 * (long)num23;
			long num76 = (long)num9 * (long)num22;
			long num77 = (long)num9 * (long)num23;
			long num78 = (long)num10 * (long)num23;
			long num79 = num24 + num42 + num49 + num55 + num60 + num64;
			long num80 = num25 + num50 + num56 + num61 + num65;
			long num81 = num26 + num34 + num57 + num62 + num66 + num69;
			long num82 = num27 + num35 + num63 + num67 + num70;
			long num83 = num28 + num36 + num43 + num68 + num71 + num73;
			long num84 = num29 + num37 + num44 + num72 + num74;
			long num85 = num30 + num38 + num45 + num51 + num75 + num76;
			long num86 = num31 + num39 + num46 + num52 + num77;
			long num87 = num32 + num40 + num47 + num53 + num58 + num78;
			long num88 = num33 + num41 + num48 + num54 + num59;
			long num89 = num79 + 33554432 >> 26;
			num80 += num89;
			num79 -= num89 << 26;
			long num90 = num83 + 33554432 >> 26;
			num84 += num90;
			num83 -= num90 << 26;
			long num91 = num80 + 16777216 >> 25;
			num81 += num91;
			num80 -= num91 << 25;
			long num92 = num84 + 16777216 >> 25;
			num85 += num92;
			num84 -= num92 << 25;
			long num93 = num81 + 33554432 >> 26;
			num82 += num93;
			num81 -= num93 << 26;
			long num94 = num85 + 33554432 >> 26;
			num86 += num94;
			num85 -= num94 << 26;
			long num95 = num82 + 16777216 >> 25;
			num83 += num95;
			num82 -= num95 << 25;
			long num96 = num86 + 16777216 >> 25;
			num87 += num96;
			num86 -= num96 << 25;
			num90 = num83 + 33554432 >> 26;
			num84 += num90;
			num83 -= num90 << 26;
			long num97 = num87 + 33554432 >> 26;
			num88 += num97;
			num87 -= num97 << 26;
			long num98 = num88 + 16777216 >> 25;
			num79 += num98 * 19;
			num88 -= num98 << 25;
			num89 = num79 + 33554432 >> 26;
			num80 += num89;
			num79 -= num89 << 26;
			h[0] = (int)num79;
			h[1] = (int)num80;
			h[2] = (int)num81;
			h[3] = (int)num82;
			h[4] = (int)num83;
			h[5] = (int)num84;
			h[6] = (int)num85;
			h[7] = (int)num86;
			h[8] = (int)num87;
			h[9] = (int)num88;
		}

		public static void fe_sq2(int[] h, int[] f)
		{
			int num = f[0];
			int num2 = f[1];
			int num3 = f[2];
			int num4 = f[3];
			int num5 = f[4];
			int num6 = f[5];
			int num7 = f[6];
			int num8 = f[7];
			int num9 = f[8];
			int num10 = f[9];
			int num11 = 2 * num;
			int num12 = 2 * num2;
			int num13 = 2 * num3;
			int num14 = 2 * num4;
			int num15 = 2 * num5;
			int num16 = 2 * num6;
			int num17 = 2 * num7;
			int num18 = 2 * num8;
			int num19 = 38 * num6;
			int num20 = 19 * num7;
			int num21 = 38 * num8;
			int num22 = 19 * num9;
			int num23 = 38 * num10;
			long num24 = (long)num * (long)num;
			long num25 = (long)num11 * (long)num2;
			long num26 = (long)num11 * (long)num3;
			long num27 = (long)num11 * (long)num4;
			long num28 = (long)num11 * (long)num5;
			long num29 = (long)num11 * (long)num6;
			long num30 = (long)num11 * (long)num7;
			long num31 = (long)num11 * (long)num8;
			long num32 = (long)num11 * (long)num9;
			long num33 = (long)num11 * (long)num10;
			long num34 = (long)num12 * (long)num2;
			long num35 = (long)num12 * (long)num3;
			long num36 = (long)num12 * (long)num14;
			long num37 = (long)num12 * (long)num5;
			long num38 = (long)num12 * (long)num16;
			long num39 = (long)num12 * (long)num7;
			long num40 = (long)num12 * (long)num18;
			long num41 = (long)num12 * (long)num9;
			long num42 = (long)num12 * (long)num23;
			long num43 = (long)num3 * (long)num3;
			long num44 = (long)num13 * (long)num4;
			long num45 = (long)num13 * (long)num5;
			long num46 = (long)num13 * (long)num6;
			long num47 = (long)num13 * (long)num7;
			long num48 = (long)num13 * (long)num8;
			long num49 = (long)num13 * (long)num22;
			long num50 = (long)num3 * (long)num23;
			long num51 = (long)num14 * (long)num4;
			long num52 = (long)num14 * (long)num5;
			long num53 = (long)num14 * (long)num16;
			long num54 = (long)num14 * (long)num7;
			long num55 = (long)num14 * (long)num21;
			long num56 = (long)num14 * (long)num22;
			long num57 = (long)num14 * (long)num23;
			long num58 = (long)num5 * (long)num5;
			long num59 = (long)num15 * (long)num6;
			long num60 = (long)num15 * (long)num20;
			long num61 = (long)num5 * (long)num21;
			long num62 = (long)num15 * (long)num22;
			long num63 = (long)num5 * (long)num23;
			long num64 = (long)num6 * (long)num19;
			long num65 = (long)num16 * (long)num20;
			long num66 = (long)num16 * (long)num21;
			long num67 = (long)num16 * (long)num22;
			long num68 = (long)num16 * (long)num23;
			long num69 = (long)num7 * (long)num20;
			long num70 = (long)num7 * (long)num21;
			long num71 = (long)num17 * (long)num22;
			long num72 = (long)num7 * (long)num23;
			long num73 = (long)num8 * (long)num21;
			long num74 = (long)num18 * (long)num22;
			long num75 = (long)num18 * (long)num23;
			long num76 = (long)num9 * (long)num22;
			long num77 = (long)num9 * (long)num23;
			long num78 = (long)num10 * (long)num23;
			long num79 = num24 + num42 + num49 + num55 + num60 + num64;
			long num80 = num25 + num50 + num56 + num61 + num65;
			long num81 = num26 + num34 + num57 + num62 + num66 + num69;
			long num82 = num27 + num35 + num63 + num67 + num70;
			long num83 = num28 + num36 + num43 + num68 + num71 + num73;
			long num84 = num29 + num37 + num44 + num72 + num74;
			long num85 = num30 + num38 + num45 + num51 + num75 + num76;
			long num86 = num31 + num39 + num46 + num52 + num77;
			long num87 = num32 + num40 + num47 + num53 + num58 + num78;
			long num88 = num33 + num41 + num48 + num54 + num59;
			num79 += num79;
			num80 += num80;
			num81 += num81;
			num82 += num82;
			num83 += num83;
			num84 += num84;
			num85 += num85;
			num86 += num86;
			num87 += num87;
			num88 += num88;
			long num89 = num79 + 33554432 >> 26;
			num80 += num89;
			num79 -= num89 << 26;
			long num90 = num83 + 33554432 >> 26;
			num84 += num90;
			num83 -= num90 << 26;
			long num91 = num80 + 16777216 >> 25;
			num81 += num91;
			num80 -= num91 << 25;
			long num92 = num84 + 16777216 >> 25;
			num85 += num92;
			num84 -= num92 << 25;
			long num93 = num81 + 33554432 >> 26;
			num82 += num93;
			num81 -= num93 << 26;
			long num94 = num85 + 33554432 >> 26;
			num86 += num94;
			num85 -= num94 << 26;
			long num95 = num82 + 16777216 >> 25;
			num83 += num95;
			num82 -= num95 << 25;
			long num96 = num86 + 16777216 >> 25;
			num87 += num96;
			num86 -= num96 << 25;
			num90 = num83 + 33554432 >> 26;
			num84 += num90;
			num83 -= num90 << 26;
			long num97 = num87 + 33554432 >> 26;
			num88 += num97;
			num87 -= num97 << 26;
			long num98 = num88 + 16777216 >> 25;
			num79 += num98 * 19;
			num88 -= num98 << 25;
			num89 = num79 + 33554432 >> 26;
			num80 += num89;
			num79 -= num89 << 26;
			h[0] = (int)num79;
			h[1] = (int)num80;
			h[2] = (int)num81;
			h[3] = (int)num82;
			h[4] = (int)num83;
			h[5] = (int)num84;
			h[6] = (int)num85;
			h[7] = (int)num86;
			h[8] = (int)num87;
			h[9] = (int)num88;
		}

		public static void fe_sub(int[] h, int[] f, int[] g)
		{
			int num = f[0];
			int num2 = f[1];
			int num3 = f[2];
			int num4 = f[3];
			int num5 = f[4];
			int num6 = f[5];
			int num7 = f[6];
			int num8 = f[7];
			int num9 = f[8];
			int num10 = f[9];
			int num11 = g[0];
			int num12 = g[1];
			int num13 = g[2];
			int num14 = g[3];
			int num15 = g[4];
			int num16 = g[5];
			int num17 = g[6];
			int num18 = g[7];
			int num19 = g[8];
			int num20 = g[9];
			int num21 = num - num11;
			int num22 = num2 - num12;
			int num23 = num3 - num13;
			int num24 = num4 - num14;
			int num25 = num5 - num15;
			int num26 = num6 - num16;
			int num27 = num7 - num17;
			int num28 = num8 - num18;
			int num29 = num9 - num19;
			int num30 = num10 - num20;
			h[0] = num21;
			h[1] = num22;
			h[2] = num23;
			h[3] = num24;
			h[4] = num25;
			h[5] = num26;
			h[6] = num27;
			h[7] = num28;
			h[8] = num29;
			h[9] = num30;
		}

		public static void fe_tobytes(byte[] s, int[] h)
		{
			int num = h[0];
			int num2 = h[1];
			int num3 = h[2];
			int num4 = h[3];
			int num5 = h[4];
			int num6 = h[5];
			int num7 = h[6];
			int num8 = h[7];
			int num9 = h[8];
			int num10 = h[9];
			int num11 = 19 * num10 + 16777216 >> 25;
			num11 = num + num11 >> 26;
			num11 = num2 + num11 >> 25;
			num11 = num3 + num11 >> 26;
			num11 = num4 + num11 >> 25;
			num11 = num5 + num11 >> 26;
			num11 = num6 + num11 >> 25;
			num11 = num7 + num11 >> 26;
			num11 = num8 + num11 >> 25;
			num11 = num9 + num11 >> 26;
			num11 = num10 + num11 >> 25;
			num += 19 * num11;
			int num12 = num >> 26;
			num2 += num12;
			num -= num12 << 26;
			int num13 = num2 >> 25;
			num3 += num13;
			num2 -= num13 << 25;
			int num14 = num3 >> 26;
			num4 += num14;
			num3 -= num14 << 26;
			int num15 = num4 >> 25;
			num5 += num15;
			num4 -= num15 << 25;
			int num16 = num5 >> 26;
			num6 += num16;
			num5 -= num16 << 26;
			int num17 = num6 >> 25;
			num7 += num17;
			num6 -= num17 << 25;
			int num18 = num7 >> 26;
			num8 += num18;
			num7 -= num18 << 26;
			int num19 = num8 >> 25;
			num9 += num19;
			num8 -= num19 << 25;
			int num20 = num9 >> 26;
			num10 += num20;
			num9 -= num20 << 26;
			int num21 = num10 >> 25;
			num10 -= num21 << 25;
			s[0] = (byte)num;
			s[1] = (byte)(num >> 8);
			s[2] = (byte)(num >> 16);
			s[3] = (byte)((num >> 24) | (num2 << 2));
			s[4] = (byte)(num2 >> 6);
			s[5] = (byte)(num2 >> 14);
			s[6] = (byte)((num2 >> 22) | (num3 << 3));
			s[7] = (byte)(num3 >> 5);
			s[8] = (byte)(num3 >> 13);
			s[9] = (byte)((num3 >> 21) | (num4 << 5));
			s[10] = (byte)(num4 >> 3);
			s[11] = (byte)(num4 >> 11);
			s[12] = (byte)((num4 >> 19) | (num5 << 6));
			s[13] = (byte)(num5 >> 2);
			s[14] = (byte)(num5 >> 10);
			s[15] = (byte)(num5 >> 18);
			s[16] = (byte)num6;
			s[17] = (byte)(num6 >> 8);
			s[18] = (byte)(num6 >> 16);
			s[19] = (byte)((num6 >> 24) | (num7 << 1));
			s[20] = (byte)(num7 >> 7);
			s[21] = (byte)(num7 >> 15);
			s[22] = (byte)((num7 >> 23) | (num8 << 3));
			s[23] = (byte)(num8 >> 5);
			s[24] = (byte)(num8 >> 13);
			s[25] = (byte)((num8 >> 21) | (num9 << 4));
			s[26] = (byte)(num9 >> 4);
			s[27] = (byte)(num9 >> 12);
			s[28] = (byte)((num9 >> 20) | (num10 << 6));
			s[29] = (byte)(num10 >> 2);
			s[30] = (byte)(num10 >> 10);
			s[31] = (byte)(num10 >> 18);
		}
	}
	internal class GroupElement
	{
		internal class ge_p2
		{
			public int[] X = FieldElement.New();

			public int[] Y = FieldElement.New();

			public int[] Z = FieldElement.New();
		}

		internal class ge_p3
		{
			public int[] X = FieldElement.New();

			public int[] Y = FieldElement.New();

			public int[] Z = FieldElement.New();

			public int[] T = FieldElement.New();
		}

		internal class ge_p1p1
		{
			public int[] X = FieldElement.New();

			public int[] Y = FieldElement.New();

			public int[] Z = FieldElement.New();

			public int[] T = FieldElement.New();
		}

		internal class ge_precomp
		{
			public int[] yplusx = FieldElement.New();

			public int[] yminusx = FieldElement.New();

			public int[] xy2d = FieldElement.New();

			public ge_precomp(int[] yplusx, int[] yminusx, int[] xy2d)
			{
				this.yplusx = yplusx;
				this.yminusx = yminusx;
				this.xy2d = xy2d;
			}
		}

		internal class ge_cached
		{
			public int[] YplusX = FieldElement.New();

			public int[] YminusX = FieldElement.New();

			public int[] Z = FieldElement.New();

			public int[] T2d = FieldElement.New();
		}

		private static int[] d = new int[10] { -10913610, 13857413, -15372611, 6949391, 114729, -8787816, -6275908, -3247719, -18696448, -12055116 };

		private static int[] sqrtm1 = new int[10] { -32595792, -7943725, 9377950, 3500415, 12389472, -272473, -25146209, -2005654, 326686, 11406482 };

		private static int[] d2 = new int[10] { -21827239, -5839606, -30745221, 13898782, 229458, 15978800, -12551817, -6495438, 29715968, 9444199 };

		private static ge_precomp[] Bi = new ge_precomp[8]
		{
			new ge_precomp(new int[10] { 25967493, -14356035, 29566456, 3660896, -12694345, 4014787, 27544626, -11754271, -6079156, 2047605 }, new int[10] { -12545711, 934262, -2722910, 3049990, -727428, 9406986, 12720692, 5043384, 19500929, -15469378 }, new int[10] { -8738181, 4489570, 9688441, -14785194, 10184609, -12363380, 29287919, 11864899, -24514362, -4438546 }),
			new ge_precomp(new int[10] { 15636291, -9688557, 24204773, -7912398, 616977, -16685262, 27787600, -14772189, 28944400, -1550024 }, new int[10] { 16568933, 4717097, -11556148, -1102322, 15682896, -11807043, 16354577, -11775962, 7689662, 11199574 }, new int[10] { 30464156, -5976125, -11779434, -15670865, 23220365, 15915852, 7512774, 10017326, -17749093, -9920357 }),
			new ge_precomp(new int[10] { 10861363, 11473154, 27284546, 1981175, -30064349, 12577861, 32867885, 14515107, -15438304, 10819380 }, new int[10] { 4708026, 6336745, 20377586, 9066809, -11272109, 6594696, -25653668, 12483688, -12668491, 5581306 }, new int[10] { 19563160, 16186464, -29386857, 4097519, 10237984, -4348115, 28542350, 13850243, -23678021, -15815942 }),
			new ge_precomp(new int[10] { 5153746, 9909285, 1723747, -2777874, 30523605, 5516873, 19480852, 5230134, -23952439, -15175766 }, new int[10] { -30269007, -3463509, 7665486, 10083793, 28475525, 1649722, 20654025, 16520125, 30598449, 7715701 }, new int[10] { 28881845, 14381568, 9657904, 3680757, -20181635, 7843316, -31400660, 1370708, 29794553, -1409300 }),
			new ge_precomp(new int[10] { -22518993, -6692182, 14201702, -8745502, -23510406, 8844726, 18474211, -1361450, -13062696, 13821877 }, new int[10] { -6455177, -7839871, 3374702, -4740862, -27098617, -10571707, 31655028, -7212327, 18853322, -14220951 }, new int[10] { 4566830, -12963868, -28974889, -12240689, -7602672, -2830569, -8514358, -10431137, 2207753, -3209784 }),
			new ge_precomp(new int[10] { -25154831, -4185821, 29681144, 7868801, -6854661, -9423865, -12437364, -663000, -31111463, -16132436 }, new int[10] { 25576264, -2703214, 7349804, -11814844, 16472782, 9300885, 3844789, 15725684, 171356, 6466918 }, new int[10] { 23103977, 13316479, 9739013, -16149481, 817875, -15038942, 8965339, -14088058, -30714912, 16193877 }),
			new ge_precomp(new int[10] { -33521811, 3180713, -2394130, 14003687, -16903474, -16270840, 17238398, 4729455, -18074513, 9256800 }, new int[10] { -25182317, -4174131, 32336398, 5036987, -21236817, 11360617, 22616405, 9761698, -19827198, 630305 }, new int[10] { -13720693, 2639453, -24237460, -7406481, 9494427, -5774029, -6554551, -15960994, -2449256, -14291300 }),
			new ge_precomp(new int[10] { -3151181, -5046075, 9282714, 6866145, -31907062, -863023, -18940575, 15033784, 25105118, -7894876 }, new int[10] { -24326370, 15950226, -31801215, -14592823, -11662737, -5090925, 1573892, -2625887, 2198790, -15804619 }, new int[10] { -3099351, 10324967, -2241613, 7453183, -5446979, -2735503, -13812022, -16236442, -32461234, -12290683 })
		};

		private static ge_precomp[][] Base = new ge_precomp[32][]
		{
			new ge_precomp[8]
			{
				new ge_precomp(FieldElement.New(25967493, -14356035, 29566456, 3660896, -12694345, 4014787, 27544626, -11754271, -6079156, 2047605), FieldElement.New(-12545711, 934262, -2722910, 3049990, -727428, 9406986, 12720692, 5043384, 19500929, -15469378), FieldElement.New(-8738181, 4489570, 9688441, -14785194, 10184609, -12363380, 29287919, 11864899, -24514362, -4438546)),
				new ge_precomp(FieldElement.New(-12815894, -12976347, -21581243, 11784320, -25355658, -2750717, -11717903, -3814571, -358445, -10211303), FieldElement.New(-21703237, 6903825, 27185491, 6451973, -29577724, -9554005, -15616551, 11189268, -26829678, -5319081), FieldElement.New(26966642, 11152617, 32442495, 15396054, 14353839, -12752335, -3128826, -9541118, -15472047, -4166697)),
				new ge_precomp(FieldElement.New(15636291, -9688557, 24204773, -7912398, 616977, -16685262, 27787600, -14772189, 28944400, -1550024), FieldElement.New(16568933, 4717097, -11556148, -1102322, 15682896, -11807043, 16354577, -11775962, 7689662, 11199574), FieldElement.New(30464156, -5976125, -11779434, -15670865, 23220365, 15915852, 7512774, 10017326, -17749093, -9920357)),
				new ge_precomp(FieldElement.New(-17036878, 13921892, 10945806, -6033431, 27105052, -16084379, -28926210, 15006023, 3284568, -6276540), FieldElement.New(23599295, -8306047, -11193664, -7687416, 13236774, 10506355, 7464579, 9656445, 13059162, 10374397), FieldElement.New(7798556, 16710257, 3033922, 2874086, 28997861, 2835604, 32406664, -3839045, -641708, -101325)),
				new ge_precomp(FieldElement.New(10861363, 11473154, 27284546, 1981175, -30064349, 12577861, 32867885, 14515107, -15438304, 10819380), FieldElement.New(4708026, 6336745, 20377586, 9066809, -11272109, 6594696, -25653668, 12483688, -12668491, 5581306), FieldElement.New(19563160, 16186464, -29386857, 4097519, 10237984, -4348115, 28542350, 13850243, -23678021, -15815942)),
				new ge_precomp(FieldElement.New(-15371964, -12862754, 32573250, 4720197, -26436522, 5875511, -19188627, -15224819, -9818940, -12085777), FieldElement.New(-8549212, 109983, 15149363, 2178705, 22900618, 4543417, 3044240, -15689887, 1762328, 14866737), FieldElement.New(-18199695, -15951423, -10473290, 1707278, -17185920, 3916101, -28236412, 3959421, 27914454, 4383652)),
				new ge_precomp(FieldElement.New(5153746, 9909285, 1723747, -2777874, 30523605, 5516873, 19480852, 5230134, -23952439, -15175766), FieldElement.New(-30269007, -3463509, 7665486, 10083793, 28475525, 1649722, 20654025, 16520125, 30598449, 7715701), FieldElement.New(28881845, 14381568, 9657904, 3680757, -20181635, 7843316, -31400660, 1370708, 29794553, -1409300)),
				new ge_precomp(FieldElement.New(14499471, -2729599, -33191113, -4254652, 28494862, 14271267, 30290735, 10876454, -33154098, 2381726), FieldElement.New(-7195431, -2655363, -14730155, 462251, -27724326, 3941372, -6236617, 3696005, -32300832, 15351955), FieldElement.New(27431194, 8222322, 16448760, -3907995, -18707002, 11938355, -32961401, -2970515, 29551813, 10109425))
			},
			new ge_precomp[8]
			{
				new ge_precomp(FieldElement.New(-13657040, -13155431, -31283750, 11777098, 21447386, 6519384, -2378284, -1627556, 10092783, -4764171), FieldElement.New(27939166, 14210322, 4677035, 16277044, -22964462, -12398139, -32508754, 12005538, -17810127, 12803510), FieldElement.New(17228999, -15661624, -1233527, 300140, -1224870, -11714777, 30364213, -9038194, 18016357, 4397660)),
				new ge_precomp(FieldElement.New(-10958843, -7690207, 4776341, -14954238, 27850028, -15602212, -26619106, 14544525, -17477504, 982639), FieldElement.New(29253598, 15796703, -2863982, -9908884, 10057023, 3163536, 7332899, -4120128, -21047696, 9934963), FieldElement.New(5793303, 16271923, -24131614, -10116404, 29188560, 1206517, -14747930, 4559895, -30123922, -10897950)),
				new ge_precomp(FieldElement.New(-27643952, -11493006, 16282657, -11036493, 28414021, -15012264, 24191034, 4541697, -13338309, 5500568), FieldElement.New(12650548, -1497113, 9052871, 11355358, -17680037, -8400164, -17430592, 12264343, 10874051, 13524335), FieldElement.New(25556948, -3045990, 714651, 2510400, 23394682, -10415330, 33119038, 5080568, -22528059, 5376628)),
				new ge_precomp(FieldElement.New(-26088264, -4011052, -17013699, -3537628, -6726793, 1920897, -22321305, -9447443, 4535768, 1569007), FieldElement.New(-2255422, 14606630, -21692440, -8039818, 28430649, 8775819, -30494562, 3044290, 31848280, 12543772), FieldElement.New(-22028579, 2943893, -31857513, 6777306, 13784462, -4292203, -27377195, -2062731, 7718482, 14474653)),
				new ge_precomp(FieldElement.New(2385315, 2454213, -22631320, 46603, -4437935, -15680415, 656965, -7236665, 24316168, -5253567), FieldElement.New(13741529, 10911568, -33233417, -8603737, -20177830, -1033297, 33040651, -13424532, -20729456, 8321686), FieldElement.New(21060490, -2212744, 15712757, -4336099, 1639040, 10656336, 23845965, -11874838, -9984458, 608372)),
				new ge_precomp(FieldElement.New(-13672732, -15087586, -10889693, -7557059, -6036909, 11305547, 1123968, -6780577, 27229399, 23887), FieldElement.New(-23244140, -294205, -11744728, 14712571, -29465699, -2029617, 12797024, -6440308, -1633405, 16678954), FieldElement.New(-29500620, 4770662, -16054387, 14001338, 7830047, 9564805, -1508144, -4795045, -17169265, 4904953)),
				new ge_precomp(FieldElement.New(24059557, 14617003, 19037157, -15039908, 19766093, -14906429, 5169211, 16191880, 2128236, -4326833), FieldElement.New(-16981152, 4124966, -8540610, -10653797, 30336522, -14105247, -29806336, 916033, -6882542, -2986532), FieldElement.New(-22630907, 12419372, -7134229, -7473371, -16478904, 16739175, 285431, 2763829, 15736322, 4143876)),
				new ge_precomp(FieldElement.New(2379352, 11839345, -4110402, -5988665, 11274298, 794957, 212801, -14594663, 23527084, -16458268), FieldElement.New(33431127, -11130478, -17838966, -15626900, 8909499, 8376530, -32625340, 4087881, -15188911, -14416214), FieldElement.New(1767683, 7197987, -13205226, -2022635, -13091350, 448826, 5799055, 4357868, -4774191, -16323038))
			},
			new ge_precomp[8]
			{
				new ge_precomp(FieldElement.New(6721966, 13833823, -23523388, -1551314, 26354293, -11863321, 23365147, -3949732, 7390890, 2759800), FieldElement.New(4409041, 2052381, 23373853, 10530217, 7676779, -12885954, 21302353, -4264057, 1244380, -12919645), FieldElement.New(-4421239, 7169619, 4982368, -2957590, 30256825, -2777540, 14086413, 9208236, 15886429, 16489664)),
				new ge_precomp(FieldElement.New(1996075, 10375649, 14346367, 13311202, -6874135, -16438411, -13693198, 398369, -30606455, -712933), FieldElement.New(-25307465, 9795880, -2777414, 14878809, -33531835, 14780363, 13348553, 12076947, -30836462, 5113182), FieldElement.New(-17770784, 11797796, 31950843, 13929123, -25888302, 12288344, -30341101, -7336386, 13847711, 5387222)),
				new ge_precomp(FieldElement.New(-18582163, -3416217, 17824843, -2340966, 22744343, -10442611, 8763061, 3617786, -19600662, 10370991), FieldElement.New(20246567, -14369378, 22358229, -543712, 18507283, -10413996, 14554437, -8746092, 32232924, 16763880), FieldElement.New(9648505, 10094563, 26416693, 14745928, -30374318, -6472621, 11094161, 15689506, 3140038, -16510092)),
				new ge_precomp(FieldElement.New(-16160072, 5472695, 31895588, 4744994, 8823515, 10365685, -27224800, 9448613, -28774454, 366295), FieldElement.New(19153450, 11523972, -11096490, -6503142, -24647631, 5420647, 28344573, 8041113, 719605, 11671788), FieldElement.New(8678025, 2694440, -6808014, 2517372, 4964326, 11152271, -15432916, -15266516, 27000813, -10195553)),
				new ge_precomp(FieldElement.New(-15157904, 7134312, 8639287, -2814877, -7235688, 10421742, 564065, 5336097, 6750977, -14521026), FieldElement.New(11836410, -3979488, 26297894, 16080799, 23455045, 15735944, 1695823, -8819122, 8169720, 16220347), FieldElement.New(-18115838, 8653647, 17578566, -6092619, -8025777, -16012763, -11144307, -2627664, -5990708, -14166033)),
				new ge_precomp(FieldElement.New(-23308498, -10968312, 15213228, -10081214, -30853605, -11050004, 27884329, 2847284, 2655861, 1738395), FieldElement.New(-27537433, -14253021, -25336301, -8002780, -9370762, 8129821, 21651608, -3239336, -19087449, -11005278), FieldElement.New(1533110, 3437855, 23735889, 459276, 29970501, 11335377, 26030092, 5821408, 10478196, 8544890)),
				new ge_precomp(FieldElement.New(32173121, -16129311, 24896207, 3921497, 22579056, -3410854, 19270449, 12217473, 17789017, -3395995), FieldElement.New(-30552961, -2228401, -15578829, -10147201, 13243889, 517024, 15479401, -3853233, 30460520, 1052596), FieldElement.New(-11614875, 13323618, 32618793, 8175907, -15230173, 12596687, 27491595, -4612359, 3179268, -9478891)),
				new ge_precomp(FieldElement.New(31947069, -14366651, -4640583, -15339921, -15125977, -6039709, -14756777, -16411740, 19072640, -9511060), FieldElement.New(11685058, 11822410, 3158003, -13952594, 33402194, -4165066, 5977896, -5215017, 473099, 5040608), FieldElement.New(-20290863, 8198642, -27410132, 11602123, 1290375, -2799760, 28326862, 1721092, -19558642, -3131606))
			},
			new ge_precomp[8]
			{
				new ge_precomp(FieldElement.New(7881532, 10687937, 7578723, 7738378, -18951012, -2553952, 21820786, 8076149, -27868496, 11538389), FieldElement.New(-19935666, 3899861, 18283497, -6801568, -15728660, -11249211, 8754525, 7446702, -5676054, 5797016), FieldElement.New(-11295600, -3793569, -15782110, -7964573, 12708869, -8456199, 2014099, -9050574, -2369172, -5877341)),
				new ge_precomp(FieldElement.New(-22472376, -11568741, -27682020, 1146375, 18956691, 16640559, 1192730, -3714199, 15123619, 10811505), FieldElement.New(14352098, -3419715, -18942044, 10822655, 32750596, 4699007, -70363, 15776356, -28886779, -11974553), FieldElement.New(-28241164, -8072475, -4978962, -5315317, 29416931, 1847569, -20654173, -16484855, 4714547, -9600655)),
				new ge_precomp(FieldElement.New(15200332, 8368572, 19679101, 15970074, -31872674, 1959451, 24611599, -4543832, -11745876, 12340220), FieldElement.New(12876937, -10480056, 33134381, 6590940, -6307776, 14872440, 9613953, 8241152, 15370987, 9608631), FieldElement.New(-4143277, -12014408, 8446281, -391603, 4407738, 13629032, -7724868, 15866074, -28210621, -8814099)),
				new ge_precomp(FieldElement.New(26660628, -15677655, 8393734, 358047, -7401291, 992988, -23904233, 858697, 20571223, 8420556), FieldElement.New(14620715, 13067227, -15447274, 8264467, 14106269, 15080814, 33531827, 12516406, -21574435, -12476749), FieldElement.New(236881, 10476226, 57258, -14677024, 6472998, 2466984, 17258519, 7256740, 8791136, 15069930)),
				new ge_precomp(FieldElement.New(1276410, -9371918, 22949635, -16322807, -23493039, -5702186, 14711875, 4874229, -30663140, -2331391), FieldElement.New(5855666, 4990204, -13711848, 7294284, -7804282, 1924647, -1423175, -7912378, -33069337, 9234253), FieldElement.New(20590503, -9018988, 31529744, -7352666, -2706834, 10650548, 31559055, -11609587, 18979186, 13396066)),
				new ge_precomp(FieldElement.New(24474287, 4968103, 22267082, 4407354, 24063882, -8325180, -18816887, 13594782, 33514650, 7021958), FieldElement.New(-11566906, -6565505, -21365085, 15928892, -26158305, 4315421, -25948728, -3916677, -21480480, 12868082), FieldElement.New(-28635013, 13504661, 19988037, -2132761, 21078225, 6443208, -21446107, 2244500, -12455797, -8089383)),
				new ge_precomp(FieldElement.New(-30595528, 13793479, -5852820, 319136, -25723172, -6263899, 33086546, 8957937, -15233648, 5540521), FieldElement.New(-11630176, -11503902, -8119500, -7643073, 2620056, 1022908, -23710744, -1568984, -16128528, -14962807), FieldElement.New(23152971, 775386, 27395463, 14006635, -9701118, 4649512, 1689819, 892185, -11513277, -15205948)),
				new ge_precomp(FieldElement.New(9770129, 9586738, 26496094, 4324120, 1556511, -3550024, 27453819, 4763127, -19179614, 5867134), FieldElement.New(-32765025, 1927590, 31726409, -4753295, 23962434, -16019500, 27846559, 5931263, -29749703, -16108455), FieldElement.New(27461885, -2977536, 22380810, 1815854, -23033753, -3031938, 7283490, -15148073, -19526700, 7734629))
			},
			new ge_precomp[8]
			{
				new ge_precomp(FieldElement.New(-8010264, -9590817, -11120403, 6196038, 29344158, -13430885, 7585295, -3176626, 18549497, 15302069), FieldElement.New(-32658337, -6171222, -7672793, -11051681, 6258878, 13504381, 10458790, -6418461, -8872242, 8424746), FieldElement.New(24687205, 8613276, -30667046, -3233545, 1863892, -1830544, 19206234, 7134917, -11284482, -828919)),
				new ge_precomp(FieldElement.New(11334899, -9218022, 8025293, 12707519, 17523892, -10476071, 10243738, -14685461, -5066034, 16498837), FieldElement.New(8911542, 6887158, -9584260, -6958590, 11145641, -9543680, 17303925, -14124238, 6536641, 10543906), FieldElement.New(-28946384, 15479763, -17466835, 568876, -1497683, 11223454, -2669190, -16625574, -27235709, 8876771)),
				new ge_precomp(FieldElement.New(-25742899, -12566864, -15649966, -846607, -33026686, -796288, -33481822, 15824474, -604426, -9039817), FieldElement.New(10330056, 70051, 7957388, -9002667, 9764902, 15609756, 27698697, -4890037, 1657394, 3084098), FieldElement.New(10477963, -7470260, 12119566, -13250805, 29016247, -5365589, 31280319, 14396151, -30233575, 15272409)),
				new ge_precomp(FieldElement.New(-12288309, 3169463, 28813183, 16658753, 25116432, -5630466, -25173957, -12636138, -25014757, 1950504), FieldElement.New(-26180358, 9489187, 11053416, -14746161, -31053720, 5825630, -8384306, -8767532, 15341279, 8373727), FieldElement.New(28685821, 7759505, -14378516, -12002860, -31971820, 4079242, 298136, -10232602, -2878207, 15190420)),
				new ge_precomp(FieldElement.New(-32932876, 13806336, -14337485, -15794431, -24004620, 10940928, 8669718, 2742393, -26033313, -6875003), FieldElement.New(-1580388, -11729417, -25979658, -11445023, -17411874, -10912854, 9291594, -16247779, -12154742, 6048605), FieldElement.New(-30305315, 14843444, 1539301, 11864366, 20201677, 1900163, 13934231, 5128323, 11213262, 9168384)),
				new ge_precomp(FieldElement.New(-26280513, 11007847, 19408960, -940758, -18592965, -4328580, -5088060, -11105150, 20470157, -16398701), FieldElement.New(-23136053, 9282192, 14855179, -15390078, -7362815, -14408560, -22783952, 14461608, 14042978, 5230683), FieldElement.New(29969567, -2741594, -16711867, -8552442, 9175486, -2468974, 21556951, 3506042, -5933891, -12449708)),
				new ge_precomp(FieldElement.New(-3144746, 8744661, 19704003, 4581278, -20430686, 6830683, -21284170, 8971513, -28539189, 15326563), FieldElement.New(-19464629, 10110288, -17262528, -3503892, -23500387, 1355669, -15523050, 15300988, -20514118, 9168260), FieldElement.New(-5353335, 4488613, -23803248, 16314347, 7780487, -15638939, -28948358, 9601605, 33087103, -9011387)),
				new ge_precomp(FieldElement.New(-19443170, -15512900, -20797467, -12445323, -29824447, 10229461, -27444329, -15000531, -5996870, 15664672), FieldElement.New(23294591, -16632613, -22650781, -8470978, 27844204, 11461195, 13099750, -2460356, 18151676, 13417686), FieldElement.New(-24722913, -4176517, -31150679, 5988919, -26858785, 6685065, 1661597, -12551441, 15271676, -15452665))
			},
			new ge_precomp[8]
			{
				new ge_precomp(FieldElement.New(11433042, -13228665, 8239631, -5279517, -1985436, -725718, -18698764, 2167544, -6921301, -13440182), FieldElement.New(-31436171, 15575146, 30436815, 12192228, -22463353, 9395379, -9917708, -8638997, 12215110, 12028277), FieldElement.New(14098400, 6555944, 23007258, 5757252, -15427832, -12950502, 30123440, 4617780, -16900089, -655628)),
				new ge_precomp(FieldElement.New(-4026201, -15240835, 11893168, 13718664, -14809462, 1847385, -15819999, 10154009, 23973261, -12684474), FieldElement.New(-26531820, -3695990, -1908898, 2534301, -31870557, -16550355, 18341390, -11419951, 32013174, -10103539), FieldElement.New(-25479301, 10876443, -11771086, -14625140, -12369567, 1838104, 21911214, 6354752, 4425632, -837822)),
				new ge_precomp(FieldElement.New(-10433389, -14612966, 22229858, -3091047, -13191166, 776729, -17415375, -12020462, 4725005, 14044970), FieldElement.New(19268650, -7304421, 1555349, 8692754, -21474059, -9910664, 6347390, -1411784, -19522291, -16109756), FieldElement.New(-24864089, 12986008, -10898878, -5558584, -11312371, -148526, 19541418, 8180106, 9282262, 10282508)),
				new ge_precomp(FieldElement.New(-26205082, 4428547, -8661196, -13194263, 4098402, -14165257, 15522535, 8372215, 5542595, -10702683), FieldElement.New(-10562541, 14895633, 26814552, -16673850, -17480754, -2489360, -2781891, 6993761, -18093885, 10114655), FieldElement.New(-20107055, -929418, 31422704, 10427861, -7110749, 6150669, -29091755, -11529146, 25953725, -106158)),
				new ge_precomp(FieldElement.New(-4234397, -8039292, -9119125, 3046000, 2101609, -12607294, 19390020, 6094296, -3315279, 12831125), FieldElement.New(-15998678, 7578152, 5310217, 14408357, -33548620, -224739, 31575954, 6326196, 7381791, -2421839), FieldElement.New(-20902779, 3296811, 24736065, -16328389, 18374254, 7318640, 6295303, 8082724, -15362489, 12339664)),
				new ge_precomp(FieldElement.New(27724736, 2291157, 6088201, -14184798, 1792727, 5857634, 13848414, 15768922, 25091167, 14856294), FieldElement.New(-18866652, 8331043, 24373479, 8541013, -701998, -9269457, 12927300, -12695493, -22182473, -9012899), FieldElement.New(-11423429, -5421590, 11632845, 3405020, 30536730, -11674039, -27260765, 13866390, 30146206, 9142070)),
				new ge_precomp(FieldElement.New(3924129, -15307516, -13817122, -10054960, 12291820, -668366, -27702774, 9326384, -8237858, 4171294), FieldElement.New(-15921940, 16037937, 6713787, 16606682, -21612135, 2790944, 26396185, 3731949, 345228, -5462949), FieldElement.New(-21327538, 13448259, 25284571, 1143661, 20614966, -8849387, 2031539, -12391231, -16253183, -13582083)),
				new ge_precomp(FieldElement.New(31016211, -16722429, 26371392, -14451233, -5027349, 14854137, 17477601, 3842657, 28012650, -16405420), FieldElement.New(-5075835, 9368966, -8562079, -4600902, -15249953, 6970560, -9189873, 16292057, -8867157, 3507940), FieldElement.New(29439664, 3537914, 23333589, 6997794, -17555561, -11018068, -15209202, -15051267, -9164929, 6580396))
			},
			new ge_precomp[8]
			{
				new ge_precomp(FieldElement.New(-12185861, -7679788, 16438269, 10826160, -8696817, -6235611, 17860444, -9273846, -2095802, 9304567), FieldElement.New(20714564, -4336911, 29088195, 7406487, 11426967, -5095705, 14792667, -14608617, 5289421, -477127), FieldElement.New(-16665533, -10650790, -6160345, -13305760, 9192020, -1802462, 17271490, 12349094, 26939669, -3752294)),
				new ge_precomp(FieldElement.New(-12889898, 9373458, 31595848, 16374215, 21471720, 13221525, -27283495, -12348559, -3698806, 117887), FieldElement.New(22263325, -6560050, 3984570, -11174646, -15114008, -566785, 28311253, 5358056, -23319780, 541964), FieldElement.New(16259219, 3261970, 2309254, -15534474, -16885711, -4581916, 24134070, -16705829, -13337066, -13552195)),
				new ge_precomp(FieldElement.New(9378160, -13140186, -22845982, -12745264, 28198281, -7244098, -2399684, -717351, 690426, 14876244), FieldElement.New(24977353, -314384, -8223969, -13465086, 28432343, -1176353, -13068804, -12297348, -22380984, 6618999), FieldElement.New(-1538174, 11685646, 12944378, 13682314, -24389511, -14413193, 8044829, -13817328, 32239829, -5652762)),
				new ge_precomp(FieldElement.New(-18603066, 4762990, -926250, 8885304, -28412480, -3187315, 9781647, -10350059, 32779359, 5095274), FieldElement.New(-33008130, -5214506, -32264887, -3685216, 9460461, -9327423, -24601656, 14506724, 21639561, -2630236), FieldElement.New(-16400943, -13112215, 25239338, 15531969, 3987758, -4499318, -1289502, -6863535, 17874574, 558605)),
				new ge_precomp(FieldElement.New(-13600129, 10240081, 9171883, 16131053, -20869254, 9599700, 33499487, 5080151, 2085892, 5119761), FieldElement.New(-22205145, -2519528, -16381601, 414691, -25019550, 2170430, 30634760, -8363614, -31999993, -5759884), FieldElement.New(-6845704, 15791202, 8550074, -1312654, 29928809, -12092256, 27534430, -7192145, -22351378, 12961482)),
				new ge_precomp(FieldElement.New(-24492060, -9570771, 10368194, 11582341, -23397293, -2245287, 16533930, 8206996, -30194652, -5159638), FieldElement.New(-11121496, -3382234, 2307366, 6362031, -135455, 8868177, -16835630, 7031275, 7589640, 8945490), FieldElement.New(-32152748, 8917967, 6661220, -11677616, -1192060, -15793393, 7251489, -11182180, 24099109, -14456170)),
				new ge_precomp(FieldElement.New(5019558, -7907470, 4244127, -14714356, -26933272, 6453165, -19118182, -13289025, -6231896, -10280736), FieldElement.New(10853594, 10721687, 26480089, 5861829, -22995819, 1972175, -1866647, -10557898, -3363451, -6441124), FieldElement.New(-17002408, 5906790, 221599, -6563147, 7828208, -13248918, 24362661, -2008168, -13866408, 7421392)),
				new ge_precomp(FieldElement.New(8139927, -6546497, 32257646, -5890546, 30375719, 1886181, -21175108, 15441252, 28826358, -4123029), FieldElement.New(6267086, 9695052, 7709135, -16603597, -32869068, -1886135, 14795160, -7840124, 13746021, -1742048), FieldElement.New(28584902, 7787108, -6732942, -15050729, 22846041, -7571236, -3181936, -363524, 4771362, -8419958))
			},
			new ge_precomp[8]
			{
				new ge_precomp(FieldElement.New(24949256, 6376279, -27466481, -8174608, -18646154, -9930606, 33543569, -12141695, 3569627, 11342593), FieldElement.New(26514989, 4740088, 27912651, 3697550, 19331575, -11472339, 6809886, 4608608, 7325975, -14801071), FieldElement.New(-11618399, -14554430, -24321212, 7655128, -1369274, 5214312, -27400540, 10258390, -17646694, -8186692)),
				new ge_precomp(FieldElement.New(11431204, 15823007, 26570245, 14329124, 18029990, 4796082, -31446179, 15580664, 9280358, -3973687), FieldElement.New(-160783, -10326257, -22855316, -4304997, -20861367, -13621002, -32810901, -11181622, -15545091, 4387441), FieldElement.New(-20799378, 12194512, 3937617, -5805892, -27154820, 9340370, -24513992, 8548137, 20617071, -7482001)),
				new ge_precomp(FieldElement.New(-938825, -3930586, -8714311, 16124718, 24603125, -6225393, -13775352, -11875822, 24345683, 10325460), FieldElement.New(-19855277, -1568885, -22202708, 8714034, 14007766, 6928528, 16318175, -1010689, 4766743, 3552007), FieldElement.New(-21751364, -16730916, 1351763, -803421, -4009670, 3950935, 3217514, 14481909, 10988822, -3994762)),
				new ge_precomp(FieldElement.New(15564307, -14311570, 3101243, 5684148, 30446780, -8051356, 12677127, -6505343, -8295852, 13296005), FieldElement.New(-9442290, 6624296, -30298964, -11913677, -4670981, -2057379, 31521204, 9614054, -30000824, 12074674), FieldElement.New(4771191, -135239, 14290749, -13089852, 27992298, 14998318, -1413936, -1556716, 29832613, -16391035)),
				new ge_precomp(FieldElement.New(7064884, -7541174, -19161962, -5067537, -18891269, -2912736, 25825242, 5293297, -27122660, 13101590), FieldElement.New(-2298563, 2439670, -7466610, 1719965, -27267541, -16328445, 32512469, -5317593, -30356070, -4190957), FieldElement.New(-30006540, 10162316, -33180176, 3981723, -16482138, -13070044, 14413974, 9515896, 19568978, 9628812)),
				new ge_precomp(FieldElement.New(33053803, 199357, 15894591, 1583059, 27380243, -4580435, -17838894, -6106839, -6291786, 3437740), FieldElement.New(-18978877, 3884493, 19469877, 12726490, 15913552, 13614290, -22961733, 70104, 7463304, 4176122), FieldElement.New(-27124001, 10659917, 11482427, -16070381, 12771467, -6635117, -32719404, -5322751, 24216882, 5944158)),
				new ge_precomp(FieldElement.New(8894125, 7450974, -2664149, -9765752, -28080517, -12389115, 19345746, 14680796, 11632993, 5847885), FieldElement.New(26942781, -2315317, 9129564, -4906607, 26024105, 11769399, -11518837, 6367194, -9727230, 4782140), FieldElement.New(19916461, -4828410, -22910704, -11414391, 25606324, -5972441, 33253853, 8220911, 6358847, -1873857)),
				new ge_precomp(FieldElement.New(801428, -2081702, 16569428, 11065167, 29875704, 96627, 7908388, -4480480, -13538503, 1387155), FieldElement.New(19646058, 5720633, -11416706, 12814209, 11607948, 12749789, 14147075, 15156355, -21866831, 11835260), FieldElement.New(19299512, 1155910, 28703737, 14890794, 2925026, 7269399, 26121523, 15467869, -26560550, 5052483))
			},
			new ge_precomp[8]
			{
				new ge_precomp(FieldElement.New(-3017432, 10058206, 1980837, 3964243, 22160966, 12322533, -6431123, -12618185, 12228557, -7003677), FieldElement.New(32944382, 14922211, -22844894, 5188528, 21913450, -8719943, 4001465, 13238564, -6114803, 8653815), FieldElement.New(22865569, -4652735, 27603668, -12545395, 14348958, 8234005, 24808405, 5719875, 28483275, 2841751)),
				new ge_precomp(FieldElement.New(-16420968, -1113305, -327719, -12107856, 21886282, -15552774, -1887966, -315658, 19932058, -12739203), FieldElement.New(-11656086, 10087521, -8864888, -5536143, -19278573, -3055912, 3999228, 13239134, -4777469, -13910208), FieldElement.New(1382174, -11694719, 17266790, 9194690, -13324356, 9720081, 20403944, 11284705, -14013818, 3093230)),
				new ge_precomp(FieldElement.New(16650921, -11037932, -1064178, 1570629, -8329746, 7352753, -302424, 16271225, -24049421, -6691850), FieldElement.New(-21911077, -5927941, -4611316, -5560156, -31744103, -10785293, 24123614, 15193618, -21652117, -16739389), FieldElement.New(-9935934, -4289447, -25279823, 4372842, 2087473, 10399484, 31870908, 14690798, 17361620, 11864968)),
				new ge_precomp(FieldElement.New(-11307610, 6210372, 13206574, 5806320, -29017692, -13967200, -12331205, -7486601, -25578460, -16240689), FieldElement.New(14668462, -12270235, 26039039, 15305210, 25515617, 4542480, 10453892, 6577524, 9145645, -6443880), FieldElement.New(5974874, 3053895, -9433049, -10385191, -31865124, 3225009, -7972642, 3936128, -5652273, -3050304)),
				new ge_precomp(FieldElement.New(30625386, -4729400, -25555961, -12792866, -20484575, 7695099, 17097188, -16303496, -27999779, 1803632), FieldElement.New(-3553091, 9865099, -5228566, 4272701, -5673832, -16689700, 14911344, 12196514, -21405489, 7047412), FieldElement.New(20093277, 9920966, -11138194, -5343857, 13161587, 12044805, -32856851, 4124601, -32343828, -10257566)),
				new ge_precomp(FieldElement.New(-20788824, 14084654, -13531713, 7842147, 19119038, -13822605, 4752377, -8714640, -21679658, 2288038), FieldElement.New(-26819236, -3283715, 29965059, 3039786, -14473765, 2540457, 29457502, 14625692, -24819617, 12570232), FieldElement.New(-1063558, -11551823, 16920318, 12494842, 1278292, -5869109, -21159943, -3498680, -11974704, 4724943)),
				new ge_precomp(FieldElement.New(17960970, -11775534, -4140968, -9702530, -8876562, -1410617, -12907383, -8659932, -29576300, 1903856), FieldElement.New(23134274, -14279132, -10681997, -1611936, 20684485, 15770816, -12989750, 3190296, 26955097, 14109738), FieldElement.New(15308788, 5320727, -30113809, -14318877, 22902008, 7767164, 29425325, -11277562, 31960942, 11934971)),
				new ge_precomp(FieldElement.New(-27395711, 8435796, 4109644, 12222639, -24627868, 14818669, 20638173, 4875028, 10491392, 1379718), FieldElement.New(-13159415, 9197841, 3875503, -8936108, -1383712, -5879801, 33518459, 16176658, 21432314, 12180697), FieldElement.New(-11787308, 11500838, 13787581, -13832590, -22430679, 10140205, 1465425, 12689540, -10301319, -13872883))
			},
			new ge_precomp[8]
			{
				new ge_precomp(FieldElement.New(5414091, -15386041, -21007664, 9643570, 12834970, 1186149, -2622916, -1342231, 26128231, 6032912), FieldElement.New(-26337395, -13766162, 32496025, -13653919, 17847801, -12669156, 3604025, 8316894, -25875034, -10437358), FieldElement.New(3296484, 6223048, 24680646, -12246460, -23052020, 5903205, -8862297, -4639164, 12376617, 3188849)),
				new ge_precomp(FieldElement.New(29190488, -14659046, 27549113, -1183516, 3520066, -10697301, 32049515, -7309113, -16109234, -9852307), FieldElement.New(-14744486, -9309156, 735818, -598978, -20407687, -5057904, 25246078, -15795669, 18640741, -960977), FieldElement.New(-6928835, -16430795, 10361374, 5642961, 4910474, 12345252, -31638386, -494430, 10530747, 1053335)),
				new ge_precomp(FieldElement.New(-29265967, -14186805, -13538216, -12117373, -19457059, -10655384, -31462369, -2948985, 24018831, 15026644), FieldElement.New(-22592535, -3145277, -2289276, 5953843, -13440189, 9425631, 25310643, 13003497, -2314791, -15145616), FieldElement.New(-27419985, -603321, -8043984, -1669117, -26092265, 13987819, -27297622, 187899, -23166419, -2531735)),
				new ge_precomp(FieldElement.New(-21744398, -13810475, 1844840, 5021428, -10434399, -15911473, 9716667, 16266922, -5070217, 726099), FieldElement.New(29370922, -6053998, 7334071, -15342259, 9385287, 2247707, -13661962, -4839461, 30007388, -15823341), FieldElement.New(-936379, 16086691, 23751945, -543318, -1167538, -5189036, 9137109, 730663, 9835848, 4555336)),
				new ge_precomp(FieldElement.New(-23376435, 1410446, -22253753, -12899614, 30867635, 15826977, 17693930, 544696, -11985298, 12422646), FieldElement.New(31117226, -12215734, -13502838, 6561947, -9876867, -12757670, -5118685, -4096706, 29120153, 13924425), FieldElement.New(-17400879, -14233209, 19675799, -2734756, -11006962, -5858820, -9383939, -11317700, 7240931, -237388)),
				new ge_precomp(FieldElement.New(-31361739, -11346780, -15007447, -5856218, -22453340, -12152771, 1222336, 4389483, 3293637, -15551743), FieldElement.New(-16684801, -14444245, 11038544, 11054958, -13801175, -3338533, -24319580, 7733547, 12796905, -6335822), FieldElement.New(-8759414, -10817836, -25418864, 10783769, -30615557, -9746811, -28253339, 3647836, 3222231, -11160462)),
				new ge_precomp(FieldElement.New(18606113, 1693100, -25448386, -15170272, 4112353, 10045021, 23603893, -2048234, -7550776, 2484985), FieldElement.New(9255317, -3131197, -12156162, -1004256, 13098013, -9214866, 16377220, -2102812, -19802075, -3034702), FieldElement.New(-22729289, 7496160, -5742199, 11329249, 19991973, -3347502, -31718148, 9936966, -30097688, -10618797)),
				new ge_precomp(FieldElement.New(21878590, -5001297, 4338336, 13643897, -3036865, 13160960, 19708896, 5415497, -7360503, -4109293), FieldElement.New(27736861, 10103576, 12500508, 8502413, -3413016, -9633558, 10436918, -1550276, -23659143, -8132100), FieldElement.New(19492550, -12104365, -29681976, -852630, -3208171, 12403437, 30066266, 8367329, 13243957, 8709688))
			},
			new ge_precomp[8]
			{
				new ge_precomp(FieldElement.New(12015105, 2801261, 28198131, 10151021, 24818120, -4743133, -11194191, -5645734, 5150968, 7274186), FieldElement.New(2831366, -12492146, 1478975, 6122054, 23825128, -12733586, 31097299, 6083058, 31021603, -9793610), FieldElement.New(-2529932, -2229646, 445613, 10720828, -13849527, -11505937, -23507731, 16354465, 15067285, -14147707)),
				new ge_precomp(FieldElement.New(7840942, 14037873, -33364863, 15934016, -728213, -3642706, 21403988, 1057586, -19379462, -12403220), FieldElement.New(915865, -16469274, 15608285, -8789130, -24357026, 6060030, -17371319, 8410997, -7220461, 16527025), FieldElement.New(32922597, -556987, 20336074, -16184568, 10903705, -5384487, 16957574, 52992, 23834301, 6588044)),
				new ge_precomp(FieldElement.New(32752030, 11232950, 3381995, -8714866, 22652988, -10744103, 17159699, 16689107, -20314580, -1305992), FieldElement.New(-4689649, 9166776, -25710296, -10847306, 11576752, 12733943, 7924251, -2752281, 1976123, -7249027), FieldElement.New(21251222, 16309901, -2983015, -6783122, 30810597, 12967303, 156041, -3371252, 12331345, -8237197)),
				new ge_precomp(FieldElement.New(8651614, -4477032, -16085636, -4996994, 13002507, 2950805, 29054427, -5106970, 10008136, -4667901), FieldElement.New(31486080, 15114593, -14261250, 12951354, 14369431, -7387845, 16347321, -13662089, 8684155, -10532952), FieldElement.New(19443825, 11385320, 24468943, -9659068, -23919258, 2187569, -26263207, -6086921, 31316348, 14219878)),
				new ge_precomp(FieldElement.New(-28594490, 1193785, 32245219, 11392485, 31092169, 15722801, 27146014, 6992409, 29126555, 9207390), FieldElement.New(32382935, 1110093, 18477781, 11028262, -27411763, -7548111, -4980517, 10843782, -7957600, -14435730), FieldElement.New(2814918, 7836403, 27519878, -7868156, -20894015, -11553689, -21494559, 8550130, 28346258, 1994730)),
				new ge_precomp(FieldElement.New(-19578299, 8085545, -14000519, -3948622, 2785838, -16231307, -19516951, 7174894, 22628102, 8115180), FieldElement.New(-30405132, 955511, -11133838, -15078069, -32447087, -13278079, -25651578, 3317160, -9943017, 930272), FieldElement.New(-15303681, -6833769, 28856490, 1357446, 23421993, 1057177, 24091212, -1388970, -22765376, -10650715)),
				new ge_precomp(FieldElement.New(-22751231, -5303997, -12907607, -12768866, -15811511, -7797053, -14839018, -16554220, -1867018, 8398970), FieldElement.New(-31969310, 2106403, -4736360, 1362501, 12813763, 16200670, 22981545, -6291273, 18009408, -15772772), FieldElement.New(-17220923, -9545221, -27784654, 14166835, 29815394, 7444469, 29551787, -3727419, 19288549, 1325865)),
				new ge_precomp(FieldElement.New(15100157, -15835752, -23923978, -1005098, -26450192, 15509408, 12376730, -3479146, 33166107, -8042750), FieldElement.New(20909231, 13023121, -9209752, 16251778, -5778415, -8094914, 12412151, 10018715, 2213263, -13878373), FieldElement.New(32529814, -11074689, 30361439, -16689753, -9135940, 1513226, 22922121, 6382134, -5766928, 8371348))
			},
			new ge_precomp[8]
			{
				new ge_precomp(FieldElement.New(9923462, 11271500, 12616794, 3544722, -29998368, -1721626, 12891687, -8193132, -26442943, 10486144), FieldElement.New(-22597207, -7012665, 8587003, -8257861, 4084309, -12970062, 361726, 2610596, -23921530, -11455195), FieldElement.New(5408411, -1136691, -4969122, 10561668, 24145918, 14240566, 31319731, -4235541, 19985175, -3436086)),
				new ge_precomp(FieldElement.New(-13994457, 16616821, 14549246, 3341099, 32155958, 13648976, -17577068, 8849297, 65030, 8370684), FieldElement.New(-8320926, -12049626, 31204563, 5839400, -20627288, -1057277, -19442942, 6922164, 12743482, -9800518), FieldElement.New(-2361371, 12678785, 28815050, 4759974, -23893047, 4884717, 23783145, 11038569, 18800704, 255233)),
				new ge_precomp(FieldElement.New(-5269658, -1773886, 13957886, 7990715, 23132995, 728773, 13393847, 9066957, 19258688, -14753793), FieldElement.New(-2936654, -10827535, -10432089, 14516793, -3640786, 4372541, -31934921, 2209390, -1524053, 2055794), FieldElement.New(580882, 16705327, 5468415, -2683018, -30926419, -14696000, -7203346, -8994389, -30021019, 7394435)),
				new ge_precomp(FieldElement.New(23838809, 1822728, -15738443, 15242727, 8318092, -3733104, -21672180, -3492205, -4821741, 14799921), FieldElement.New(13345610, 9759151, 3371034, -16137791, 16353039, 8577942, 31129804, 13496856, -9056018, 7402518), FieldElement.New(2286874, -4435931, -20042458, -2008336, -13696227, 5038122, 11006906, -15760352, 8205061, 1607563)),
				new ge_precomp(FieldElement.New(14414086, -8002132, 3331830, -3208217, 22249151, -5594188, 18364661, -2906958, 30019587, -9029278), FieldElement.New(-27688051, 1585953, -10775053, 931069, -29120221, -11002319, -14410829, 12029093, 9944378, 8024), FieldElement.New(4368715, -3709630, 29874200, -15022983, -20230386, -11410704, -16114594, -999085, -8142388, 5640030)),
				new ge_precomp(FieldElement.New(10299610, 13746483, 11661824, 16234854, 7630238, 5998374, 9809887, -16694564, 15219798, -14327783), FieldElement.New(27425505, -5719081, 3055006, 10660664, 23458024, 595578, -15398605, -1173195, -18342183, 9742717), FieldElement.New(6744077, 2427284, 26042789, 2720740, -847906, 1118974, 32324614, 7406442, 12420155, 1994844)),
				new ge_precomp(FieldElement.New(14012521, -5024720, -18384453, -9578469, -26485342, -3936439, -13033478, -10909803, 24319929, -6446333), FieldElement.New(16412690, -4507367, 10772641, 15929391, -17068788, -4658621, 10555945, -10484049, -30102368, -4739048), FieldElement.New(22397382, -7767684, -9293161, -12792868, 17166287, -9755136, -27333065, 6199366, 21880021, -12250760)),
				new ge_precomp(FieldElement.New(-4283307, 5368523, -31117018, 8163389, -30323063, 3209128, 16557151, 8890729, 8840445, 4957760), FieldElement.New(-15447727, 709327, -6919446, -10870178, -29777922, 6522332, -21720181, 12130072, -14796503, 5005757), FieldElement.New(-2114751, -14308128, 23019042, 15765735, -25269683, 6002752, 10183197, -13239326, -16395286, -2176112))
			},
			new ge_precomp[8]
			{
				new ge_precomp(FieldElement.New(-19025756, 1632005, 13466291, -7995100, -23640451, 16573537, -32013908, -3057104, 22208662, 2000468), FieldElement.New(3065073, -1412761, -25598674, -361432, -17683065, -5703415, -8164212, 11248527, -3691214, -7414184), FieldElement.New(10379208, -6045554, 8877319, 1473647, -29291284, -12507580, 16690915, 2553332, -3132688, 16400289)),
				new ge_precomp(FieldElement.New(15716668, 1254266, -18472690, 7446274, -8448918, 6344164, -22097271, -7285580, 26894937, 9132066), FieldElement.New(24158887, 12938817, 11085297, -8177598, -28063478, -4457083, -30576463, 64452, -6817084, -2692882), FieldElement.New(13488534, 7794716, 22236231, 5989356, 25426474, -12578208, 2350710, -3418511, -4688006, 2364226)),
				new ge_precomp(FieldElement.New(16335052, 9132434, 25640582, 6678888, 1725628, 8517937, -11807024, -11697457, 15445875, -7798101), FieldElement.New(29004207, -7867081, 28661402, -640412, -12794003, -7943086, 31863255, -4135540, -278050, -15759279), FieldElement.New(-6122061, -14866665, -28614905, 14569919, -10857999, -3591829, 10343412, -6976290, -29828287, -10815811)),
				new ge_precomp(FieldElement.New(27081650, 3463984, 14099042, -4517604, 1616303, -6205604, 29542636, 15372179, 17293797, 960709), FieldElement.New(20263915, 11434237, -5765435, 11236810, 13505955, -10857102, -16111345, 6493122, -19384511, 7639714), FieldElement.New(-2830798, -14839232, 25403038, -8215196, -8317012, -16173699, 18006287, -16043750, 29994677, -15808121)),
				new ge_precomp(FieldElement.New(9769828, 5202651, -24157398, -13631392, -28051003, -11561624, -24613141, -13860782, -31184575, 709464), FieldElement.New(12286395, 13076066, -21775189, -1176622, -25003198, 4057652, -32018128, -8890874, 16102007, 13205847), FieldElement.New(13733362, 5599946, 10557076, 3195751, -5557991, 8536970, -25540170, 8525972, 10151379, 10394400)),
				new ge_precomp(FieldElement.New(4024660, -16137551, 22436262, 12276534, -9099015, -2686099, 19698229, 11743039, -33302334, 8934414), FieldElement.New(-15879800, -4525240, -8580747, -2934061, 14634845, -698278, -9449077, 3137094, -11536886, 11721158), FieldElement.New(17555939, -5013938, 8268606, 2331751, -22738815, 9761013, 9319229, 8835153, -9205489, -1280045)),
				new ge_precomp(FieldElement.New(-461409, -7830014, 20614118, 16688288, -7514766, -4807119, 22300304, 505429, 6108462, -6183415), FieldElement.New(-5070281, 12367917, -30663534, 3234473, 32617080, -8422642, 29880583, -13483331, -26898490, -7867459), FieldElement.New(-31975283, 5726539, 26934134, 10237677, -3173717, -605053, 24199304, 3795095, 7592688, -14992079)),
				new ge_precomp(FieldElement.New(21594432, -14964228, 17466408, -4077222, 32537084, 2739898, 6407723, 12018833, -28256052, 4298412), FieldElement.New(-20650503, -11961496, -27236275, 570498, 3767144, -1717540, 13891942, -1569194, 13717174, 10805743), FieldElement.New(-14676630, -15644296, 15287174, 11927123, 24177847, -8175568, -796431, 14860609, -26938930, -5863836))
			},
			new ge_precomp[8]
			{
				new ge_precomp(FieldElement.New(12962541, 5311799, -10060768, 11658280, 18855286, -7954201, 13286263, -12808704, -4381056, 9882022), FieldElement.New(18512079, 11319350, -20123124, 15090309, 18818594, 5271736, -22727904, 3666879, -23967430, -3299429), FieldElement.New(-6789020, -3146043, 16192429, 13241070, 15898607, -14206114, -10084880, -6661110, -2403099, 5276065)),
				new ge_precomp(FieldElement.New(30169808, -5317648, 26306206, -11750859, 27814964, 7069267, 7152851, 3684982, 1449224, 13082861), FieldElement.New(10342826, 3098505, 2119311, 193222, 25702612, 12233820, 23697382, 15056736, -21016438, -8202000), FieldElement.New(-33150110, 3261608, 22745853, 7948688, 19370557, -15177665, -26171976, 6482814, -10300080, -11060101)),
				new ge_precomp(FieldElement.New(32869458, -5408545, 25609743, 15678670, -10687769, -15471071, 26112421, 2521008, -22664288, 6904815), FieldElement.New(29506923, 4457497, 3377935, -9796444, -30510046, 12935080, 1561737, 3841096, -29003639, -6657642), FieldElement.New(10340844, -6630377, -18656632, -2278430, 12621151, -13339055, 30878497, -11824370, -25584551, 5181966)),
				new ge_precomp(FieldElement.New(25940115, -12658025, 17324188, -10307374, -8671468, 15029094, 24396252, -16450922, -2322852, -12388574), FieldElement.New(-21765684, 9916823, -1300409, 4079498, -1028346, 11909559, 1782390, 12641087, 20603771, -6561742), FieldElement.New(-18882287, -11673380, 24849422, 11501709, 13161720, -4768874, 1925523, 11914390, 4662781, 7820689)),
				new ge_precomp(FieldElement.New(12241050, -425982, 8132691, 9393934, 32846760, -1599620, 29749456, 12172924, 16136752, 15264020), FieldElement.New(-10349955, -14680563, -8211979, 2330220, -17662549, -14545780, 10658213, 6671822, 19012087, 3772772), FieldElement.New(3753511, -3421066, 10617074, 2028709, 14841030, -6721664, 28718732, -15762884, 20527771, 12988982)),
				new ge_precomp(FieldElement.New(-14822485, -5797269, -3707987, 12689773, -898983, -10914866, -24183046, -10564943, 3299665, -12424953), FieldElement.New(-16777703, -15253301, -9642417, 4978983, 3308785, 8755439, 6943197, 6461331, -25583147, 8991218), FieldElement.New(-17226263, 1816362, -1673288, -6086439, 31783888, -8175991, -32948145, 7417950, -30242287, 1507265)),
				new ge_precomp(FieldElement.New(29692663, 6829891, -10498800, 4334896, 20945975, -11906496, -28887608, 8209391, 14606362, -10647073), FieldElement.New(-3481570, 8707081, 32188102, 5672294, 22096700, 1711240, -33020695, 9761487, 4170404, -2085325), FieldElement.New(-11587470, 14855945, -4127778, -1531857, -26649089, 15084046, 22186522, 16002000, -14276837, -8400798)),
				new ge_precomp(FieldElement.New(-4811456, 13761029, -31703877, -2483919, -3312471, 7869047, -7113572, -9620092, 13240845, 10965870), FieldElement.New(-7742563, -8256762, -14768334, -13656260, -23232383, 12387166, 4498947, 14147411, 29514390, 4302863), FieldElement.New(-13413405, -12407859, 20757302, -13801832, 14785143, 8976368, -5061276, -2144373, 17846988, -13971927))
			},
			new ge_precomp[8]
			{
				new ge_precomp(FieldElement.New(-2244452, -754728, -4597030, -1066309, -6247172, 1455299, -21647728, -9214789, -5222701, 12650267), FieldElement.New(-9906797, -16070310, 21134160, 12198166, -27064575, 708126, 387813, 13770293, -19134326, 10958663), FieldElement.New(22470984, 12369526, 23446014, -5441109, -21520802, -9698723, -11772496, -11574455, -25083830, 4271862)),
				new ge_precomp(FieldElement.New(-25169565, -10053642, -19909332, 15361595, -5984358, 2159192, 75375, -4278529, -32526221, 8469673), FieldElement.New(15854970, 4148314, -8893890, 7259002, 11666551, 13824734, -30531198, 2697372, 24154791, -9460943), FieldElement.New(15446137, -15806644, 29759747, 14019369, 30811221, -9610191, -31582008, 12840104, 24913809, 9815020)),
				new ge_precomp(FieldElement.New(-4709286, -5614269, -31841498, -12288893, -14443537, 10799414, -9103676, 13438769, 18735128, 9466238), FieldElement.New(11933045, 9281483, 5081055, -5183824, -2628162, -4905629, -7727821, -10896103, -22728655, 16199064), FieldElement.New(14576810, 379472, -26786533, -8317236, -29426508, -10812974, -102766, 1876699, 30801119, 2164795)),
				new ge_precomp(FieldElement.New(15995086, 3199873, 13672555, 13712240, -19378835, -4647646, -13081610, -15496269, -13492807, 1268052), FieldElement.New(-10290614, -3659039, -3286592, 10948818, 23037027, 3794475, -3470338, -12600221, -17055369, 3565904), FieldElement.New(29210088, -9419337, -5919792, -4952785, 10834811, -13327726, -16512102, -10820713, -27162222, -14030531)),
				new ge_precomp(FieldElement.New(-13161890, 15508588, 16663704, -8156150, -28349942, 9019123, -29183421, -3769423, 2244111, -14001979), FieldElement.New(-5152875, -3800936, -9306475, -6071583, 16243069, 14684434, -25673088, -16180800, 13491506, 4641841), FieldElement.New(10813417, 643330, -19188515, -728916, 30292062, -16600078, 27548447, -7721242, 14476989, -12767431)),
				new ge_precomp(FieldElement.New(10292079, 9984945, 6481436, 8279905, -7251514, 7032743, 27282937, -1644259, -27912810, 12651324), FieldElement.New(-31185513, -813383, 22271204, 11835308, 10201545, 15351028, 17099662, 3988035, 21721536, -3148940), FieldElement.New(10202177, -6545839, -31373232, -9574638, -32150642, -8119683, -12906320, 3852694, 13216206, 14842320)),
				new ge_precomp(FieldElement.New(-15815640, -10601066, -6538952, -7258995, -6984659, -6581778, -31500847, 13765824, -27434397, 9900184), FieldElement.New(14465505, -13833331, -32133984, -14738873, -27443187, 12990492, 33046193, 15796406, -7051866, -8040114), FieldElement.New(30924417, -8279620, 6359016, -12816335, 16508377, 9071735, -25488601, 15413635, 9524356, -7018878)),
				new ge_precomp(FieldElement.New(12274201, -13175547, 32627641, -1785326, 6736625, 13267305, 5237659, -5109483, 15663516, 4035784), FieldElement.New(-2951309, 8903985, 17349946, 601635, -16432815, -4612556, -13732739, -15889334, -22258478, 4659091), FieldElement.New(-16916263, -4952973, -30393711, -15158821, 20774812, 15897498, 5736189, 15026997, -2178256, -13455585))
			},
			new ge_precomp[8]
			{
				new ge_precomp(FieldElement.New(-8858980, -2219056, 28571666, -10155518, -474467, -10105698, -3801496, 278095, 23440562, -290208), FieldElement.New(10226241, -5928702, 15139956, 120818, -14867693, 5218603, 32937275, 11551483, -16571960, -7442864), FieldElement.New(17932739, -12437276, -24039557, 10749060, 11316803, 7535897, 22503767, 5561594, -3646624, 3898661)),
				new ge_precomp(FieldElement.New(7749907, -969567, -16339731, -16464, -25018111, 15122143, -1573531, 7152530, 21831162, 1245233), FieldElement.New(26958459, -14658026, 4314586, 8346991, -5677764, 11960072, -32589295, -620035, -30402091, -16716212), FieldElement.New(-12165896, 9166947, 33491384, 13673479, 29787085, 13096535, 6280834, 14587357, -22338025, 13987525)),
				new ge_precomp(FieldElement.New(-24349909, 7778775, 21116000, 15572597, -4833266, -5357778, -4300898, -5124639, -7469781, -2858068), FieldElement.New(9681908, -6737123, -31951644, 13591838, -6883821, 386950, 31622781, 6439245, -14581012, 4091397), FieldElement.New(-8426427, 1470727, -28109679, -1596990, 3978627, -5123623, -19622683, 12092163, 29077877, -14741988)),
				new ge_precomp(FieldElement.New(5269168, -6859726, -13230211, -8020715, 25932563, 1763552, -5606110, -5505881, -20017847, 2357889), FieldElement.New(32264008, -15407652, -5387735, -1160093, -2091322, -3946900, 23104804, -12869908, 5727338, 189038), FieldElement.New(14609123, -8954470, -6000566, -16622781, -14577387, -7743898, -26745169, 10942115, -25888931, -14884697)),
				new ge_precomp(FieldElement.New(20513500, 5557931, -15604613, 7829531, 26413943, -2019404, -21378968, 7471781, 13913677, -5137875), FieldElement.New(-25574376, 11967826, 29233242, 12948236, -6754465, 4713227, -8940970, 14059180, 12878652, 8511905), FieldElement.New(-25656801, 3393631, -2955415, -7075526, -2250709, 9366908, -30223418, 6812974, 5568676, -3127656)),
				new ge_precomp(FieldElement.New(11630004, 12144454, 2116339, 13606037, 27378885, 15676917, -17408753, -13504373, -14395196, 8070818), FieldElement.New(27117696, -10007378, -31282771, -5570088, 1127282, 12772488, -29845906, 10483306, -11552749, -1028714), FieldElement.New(10637467, -5688064, 5674781, 1072708, -26343588, -6982302, -1683975, 9177853, -27493162, 15431203)),
				new ge_precomp(FieldElement.New(20525145, 10892566, -12742472, 12779443, -29493034, 16150075, -28240519, 14943142, -15056790, -7935931), FieldElement.New(-30024462, 5626926, -551567, -9981087, 753598, 11981191, 25244767, -3239766, -3356550, 9594024), FieldElement.New(-23752644, 2636870, -5163910, -10103818, 585134, 7877383, 11345683, -6492290, 13352335, -10977084)),
				new ge_precomp(FieldElement.New(-1931799, -5407458, 3304649, -12884869, 17015806, -4877091, -29783850, -7752482, -13215537, -319204), FieldElement.New(20239939, 6607058, 6203985, 3483793, -18386976, -779229, -20723742, 15077870, -22750759, 14523817), FieldElement.New(27406042, -6041657, 27423596, -4497394, 4996214, 10002360, -28842031, -4545494, -30172742, -4805667))
			},
			new ge_precomp[8]
			{
				new ge_precomp(FieldElement.New(11374242, 12660715, 17861383, -12540833, 10935568, 1099227, -13886076, -9091740, -27727044, 11358504), FieldElement.New(-12730809, 10311867, 1510375, 10778093, -2119455, -9145702, 32676003, 11149336, -26123651, 4985768), FieldElement.New(-19096303, 341147, -6197485, -239033, 15756973, -8796662, -983043, 13794114, -19414307, -15621255)),
				new ge_precomp(FieldElement.New(6490081, 11940286, 25495923, -7726360, 8668373, -8751316, 3367603, 6970005, -1691065, -9004790), FieldElement.New(1656497, 13457317, 15370807, 6364910, 13605745, 8362338, -19174622, -5475723, -16796596, -5031438), FieldElement.New(-22273315, -13524424, -64685, -4334223, -18605636, -10921968, -20571065, -7007978, -99853, -10237333)),
				new ge_precomp(FieldElement.New(17747465, 10039260, 19368299, -4050591, -20630635, -16041286, 31992683, -15857976, -29260363, -5511971), FieldElement.New(31932027, -4986141, -19612382, 16366580, 22023614, 88450, 11371999, -3744247, 4882242, -10626905), FieldElement.New(29796507, 37186, 19818052, 10115756, -11829032, 3352736, 18551198, 3272828, -5190932, -4162409)),
				new ge_precomp(FieldElement.New(12501286, 4044383, -8612957, -13392385, -32430052, 5136599, -19230378, -3529697, 330070, -3659409), FieldElement.New(6384877, 2899513, 17807477, 7663917, -2358888, 12363165, 25366522, -8573892, -271295, 12071499), FieldElement.New(-8365515, -4042521, 25133448, -4517355, -6211027, 2265927, -32769618, 1936675, -5159697, 3829363)),
				new ge_precomp(FieldElement.New(28425966, -5835433, -577090, -4697198, -14217555, 6870930, 7921550, -6567787, 26333140, 14267664), FieldElement.New(-11067219, 11871231, 27385719, -10559544, -4585914, -11189312, 10004786, -8709488, -21761224, 8930324), FieldElement.New(-21197785, -16396035, 25654216, -1725397, 12282012, 11008919, 1541940, 4757911, -26491501, -16408940)),
				new ge_precomp(FieldElement.New(13537262, -7759490, -20604840, 10961927, -5922820, -13218065, -13156584, 6217254, -15943699, 13814990), FieldElement.New(-17422573, 15157790, 18705543, 29619, 24409717, -260476, 27361681, 9257833, -1956526, -1776914), FieldElement.New(-25045300, -10191966, 15366585, 15166509, -13105086, 8423556, -29171540, 12361135, -18685978, 4578290)),
				new ge_precomp(FieldElement.New(24579768, 3711570, 1342322, -11180126, -27005135, 14124956, -22544529, 14074919, 21964432, 8235257), FieldElement.New(-6528613, -2411497, 9442966, -5925588, 12025640, -1487420, -2981514, -1669206, 13006806, 2355433), FieldElement.New(-16304899, -13605259, -6632427, -5142349, 16974359, -10911083, 27202044, 1719366, 1141648, -12796236)),
				new ge_precomp(FieldElement.New(-12863944, -13219986, -8318266, -11018091, -6810145, -4843894, 13475066, -3133972, 32674895, 13715045), FieldElement.New(11423335, -5468059, 32344216, 8962751, 24989809, 9241752, -13265253, 16086212, -28740881, -15642093), FieldElement.New(-1409668, 12530728, -6368726, 10847387, 19531186, -14132160, -11709148, 7791794, -27245943, 4383347))
			},
			new ge_precomp[8]
			{
				new ge_precomp(FieldElement.New(-28970898, 5271447, -1266009, -9736989, -12455236, 16732599, -4862407, -4906449, 27193557, 6245191), FieldElement.New(-15193956, 5362278, -1783893, 2695834, 4960227, 12840725, 23061898, 3260492, 22510453, 8577507), FieldElement.New(-12632451, 11257346, -32692994, 13548177, -721004, 10879011, 31168030, 13952092, -29571492, -3635906)),
				new ge_precomp(FieldElement.New(3877321, -9572739, 32416692, 5405324, -11004407, -13656635, 3759769, 11935320, 5611860, 8164018), FieldElement.New(-16275802, 14667797, 15906460, 12155291, -22111149, -9039718, 32003002, -8832289, 5773085, -8422109), FieldElement.New(-23788118, -8254300, 1950875, 8937633, 18686727, 16459170, -905725, 12376320, 31632953, 190926)),
				new ge_precomp(FieldElement.New(-24593607, -16138885, -8423991, 13378746, 14162407, 6901328, -8288749, 4508564, -25341555, -3627528), FieldElement.New(8884438, -5884009, 6023974, 10104341, -6881569, -4941533, 18722941, -14786005, -1672488, 827625), FieldElement.New(-32720583, -16289296, -32503547, 7101210, 13354605, 2659080, -1800575, -14108036, -24878478, 1541286)),
				new ge_precomp(FieldElement.New(2901347, -1117687, 3880376, -10059388, -17620940, -3612781, -21802117, -3567481, 20456845, -1885033), FieldElement.New(27019610, 12299467, -13658288, -1603234, -12861660, -4861471, -19540150, -5016058, 29439641, 15138866), FieldElement.New(21536104, -6626420, -32447818, -10690208, -22408077, 5175814, -5420040, -16361163, 7779328, 109896)),
				new ge_precomp(FieldElement.New(30279744, 14648750, -8044871, 6425558, 13639621, -743509, 28698390, 12180118, 23177719, -554075), FieldElement.New(26572847, 3405927, -31701700, 12890905, -19265668, 5335866, -6493768, 2378492, 4439158, -13279347), FieldElement.New(-22716706, 3489070, -9225266, -332753, 18875722, -1140095, 14819434, -12731527, -17717757, -5461437)),
				new ge_precomp(FieldElement.New(-5056483, 16566551, 15953661, 3767752, -10436499, 15627060, -820954, 2177225, 8550082, -15114165), FieldElement.New(-18473302, 16596775, -381660, 15663611, 22860960, 15585581, -27844109, -3582739, -23260460, -8428588), FieldElement.New(-32480551, 15707275, -8205912, -5652081, 29464558, 2713815, -22725137, 15860482, -21902570, 1494193)),
				new ge_precomp(FieldElement.New(-19562091, -14087393, -25583872, -9299552, 13127842, 759709, 21923482, 16529112, 8742704, 12967017), FieldElement.New(-28464899, 1553205, 32536856, -10473729, -24691605, -406174, -8914625, -2933896, -29903758, 15553883), FieldElement.New(21877909, 3230008, 9881174, 10539357, -4797115, 2841332, 11543572, 14513274, 19375923, -12647961)),
				new ge_precomp(FieldElement.New(8832269, -14495485, 13253511, 5137575, 5037871, 4078777, 24880818, -6222716, 2862653, 9455043), FieldElement.New(29306751, 5123106, 20245049, -14149889, 9592566, 8447059, -2077124, -2990080, 15511449, 4789663), FieldElement.New(-20679756, 7004547, 8824831, -9434977, -4045704, -3750736, -5754762, 108893, 23513200, 16652362))
			},
			new ge_precomp[8]
			{
				new ge_precomp(FieldElement.New(-33256173, 4144782, -4476029, -6579123, 10770039, -7155542, -6650416, -12936300, -18319198, 10212860), FieldElement.New(2756081, 8598110, 7383731, -6859892, 22312759, -1105012, 21179801, 2600940, -9988298, -12506466), FieldElement.New(-24645692, 13317462, -30449259, -15653928, 21365574, -10869657, 11344424, 864440, -2499677, -16710063)),
				new ge_precomp(FieldElement.New(-26432803, 6148329, -17184412, -14474154, 18782929, -275997, -22561534, 211300, 2719757, 4940997), FieldElement.New(-1323882, 3911313, -6948744, 14759765, -30027150, 7851207, 21690126, 8518463, 26699843, 5276295), FieldElement.New(-13149873, -6429067, 9396249, 365013, 24703301, -10488939, 1321586, 149635, -15452774, 7159369)),
				new ge_precomp(FieldElement.New(9987780, -3404759, 17507962, 9505530, 9731535, -2165514, 22356009, 8312176, 22477218, -8403385), FieldElement.New(18155857, -16504990, 19744716, 9006923, 15154154, -10538976, 24256460, -4864995, -22548173, 9334109), FieldElement.New(2986088, -4911893, 10776628, -3473844, 10620590, -7083203, -21413845, 14253545, -22587149, 536906)),
				new ge_precomp(FieldElement.New(4377756, 8115836, 24567078, 15495314, 11625074, 13064599, 7390551, 10589625, 10838060, -15420424), FieldElement.New(-19342404, 867880, 9277171, -3218459, -14431572, -1986443, 19295826, -15796950, 6378260, 699185), FieldElement.New(7895026, 4057113, -7081772, -13077756, -17886831, -323126, -716039, 15693155, -5045064, -13373962)),
				new ge_precomp(FieldElement.New(-7737563, -5869402, -14566319, -7406919, 11385654, 13201616, 31730678, -10962840, -3918636, -9669325), FieldElement.New(10188286, -15770834, -7336361, 13427543, 22223443, 14896287, 30743455, 7116568, -21786507, 5427593), FieldElement.New(696102, 13206899, 27047647, -10632082, 15285305, -9853179, 10798490, -4578720, 19236243, 12477404)),
				new ge_precomp(FieldElement.New(-11229439, 11243796, -17054270, -8040865, -788228, -8167967, -3897669, 11180504, -23169516, 7733644), FieldElement.New(17800790, -14036179, -27000429, -11766671, 23887827, 3149671, 23466177, -10538171, 10322027, 15313801), FieldElement.New(26246234, 11968874, 32263343, -5468728, 6830755, -13323031, -15794704, -101982, -24449242, 10890804)),
				new ge_precomp(FieldElement.New(-31365647, 10271363, -12660625, -6267268, 16690207, -13062544, -14982212, 16484931, 25180797, -5334884), FieldElement.New(-586574, 10376444, -32586414, -11286356, 19801893, 10997610, 2276632, 9482883, 316878, 13820577), FieldElement.New(-9882808, -4510367, -2115506, 16457136, -11100081, 11674996, 30756178, -7515054, 30696930, -3712849)),
				new ge_precomp(FieldElement.New(32988917, -9603412, 12499366, 7910787, -10617257, -11931514, -7342816, -9985397, -32349517, 7392473), FieldElement.New(-8855661, 15927861, 9866406, -3649411, -2396914, -16655781, -30409476, -9134995, 25112947, -2926644), FieldElement.New(-2504044, -436966, 25621774, -5678772, 15085042, -5479877, -24884878, -13526194, 5537438, -13914319))
			},
			new ge_precomp[8]
			{
				new ge_precomp(FieldElement.New(-11225584, 2320285, -9584280, 10149187, -33444663, 5808648, -14876251, -1729667, 31234590, 6090599), FieldElement.New(-9633316, 116426, 26083934, 2897444, -6364437, -2688086, 609721, 15878753, -6970405, -9034768), FieldElement.New(-27757857, 247744, -15194774, -9002551, 23288161, -10011936, -23869595, 6503646, 20650474, 1804084)),
				new ge_precomp(FieldElement.New(-27589786, 15456424, 8972517, 8469608, 15640622, 4439847, 3121995, -10329713, 27842616, -202328), FieldElement.New(-15306973, 2839644, 22530074, 10026331, 4602058, 5048462, 28248656, 5031932, -11375082, 12714369), FieldElement.New(20807691, -7270825, 29286141, 11421711, -27876523, -13868230, -21227475, 1035546, -19733229, 12796920)),
				new ge_precomp(FieldElement.New(12076899, -14301286, -8785001, -11848922, -25012791, 16400684, -17591495, -12899438, 3480665, -15182815), FieldElement.New(-32361549, 5457597, 28548107, 7833186, 7303070, -11953545, -24363064, -15921875, -33374054, 2771025), FieldElement.New(-21389266, 421932, 26597266, 6860826, 22486084, -6737172, -17137485, -4210226, -24552282, 15673397)),
				new ge_precomp(FieldElement.New(-20184622, 2338216, 19788685, -9620956, -4001265, -8740893, -20271184, 4733254, 3727144, -12934448), FieldElement.New(6120119, 814863, -11794402, -622716, 6812205, -15747771, 2019594, 7975683, 31123697, -10958981), FieldElement.New(30069250, -11435332, 30434654, 2958439, 18399564, -976289, 12296869, 9204260, -16432438, 9648165)),
				new ge_precomp(FieldElement.New(32705432, -1550977, 30705658, 7451065, -11805606, 9631813, 3305266, 5248604, -26008332, -11377501), FieldElement.New(17219865, 2375039, -31570947, -5575615, -19459679, 9219903, 294711, 15298639, 2662509, -16297073), FieldElement.New(-1172927, -7558695, -4366770, -4287744, -21346413, -8434326, 32087529, -1222777, 32247248, -14389861)),
				new ge_precomp(FieldElement.New(14312628, 1221556, 17395390, -8700143, -4945741, -8684635, -28197744, -9637817, -16027623, -13378845), FieldElement.New(-1428825, -9678990, -9235681, 6549687, -7383069, -468664, 23046502, 9803137, 17597934, 2346211), FieldElement.New(18510800, 15337574, 26171504, 981392, -22241552, 7827556, -23491134, -11323352, 3059833, -11782870)),
				new ge_precomp(FieldElement.New(10141598, 6082907, 17829293, -1947643, 9830092, 13613136, -25556636, -5544586, -33502212, 3592096), FieldElement.New(33114168, -15889352, -26525686, -13343397, 33076705, 8716171, 1151462, 1521897, -982665, -6837803), FieldElement.New(-32939165, -4255815, 23947181, -324178, -33072974, -12305637, -16637686, 3891704, 26353178, 693168)),
				new ge_precomp(FieldElement.New(30374239, 1595580, -16884039, 13186931, 4600344, 406904, 9585294, -400668, 31375464, 14369965), FieldElement.New(-14370654, -7772529, 1510301, 6434173, -18784789, -6262728, 32732230, -13108839, 17901441, 16011505), FieldElement.New(18171223, -11934626, -12500402, 15197122, -11038147, -15230035, -19172240, -16046376, 8764035, 12309598))
			},
			new ge_precomp[8]
			{
				new ge_precomp(FieldElement.New(5975908, -5243188, -19459362, -9681747, -11541277, 14015782, -23665757, 1228319, 17544096, -10593782), FieldElement.New(5811932, -1715293, 3442887, -2269310, -18367348, -8359541, -18044043, -15410127, -5565381, 12348900), FieldElement.New(-31399660, 11407555, 25755363, 6891399, -3256938, 14872274, -24849353, 8141295, -10632534, -585479)),
				new ge_precomp(FieldElement.New(-12675304, 694026, -5076145, 13300344, 14015258, -14451394, -9698672, -11329050, 30944593, 1130208), FieldElement.New(8247766, -6710942, -26562381, -7709309, -14401939, -14648910, 4652152, 2488540, 23550156, -271232), FieldElement.New(17294316, -3788438, 7026748, 15626851, 22990044, 113481, 2267737, -5908146, -408818, -137719)),
				new ge_precomp(FieldElement.New(16091085, -16253926, 18599252, 7340678, 2137637, -1221657, -3364161, 14550936, 3260525, -7166271), FieldElement.New(-4910104, -13332887, 18550887, 10864893, -16459325, -7291596, -23028869, -13204905, -12748722, 2701326), FieldElement.New(-8574695, 16099415, 4629974, -16340524, -20786213, -6005432, -10018363, 9276971, 11329923, 1862132)),
				new ge_precomp(FieldElement.New(14763076, -15903608, -30918270, 3689867, 3511892, 10313526, -21951088, 12219231, -9037963, -940300), FieldElement.New(8894987, -3446094, 6150753, 3013931, 301220, 15693451, -31981216, -2909717, -15438168, 11595570), FieldElement.New(15214962, 3537601, -26238722, -14058872, 4418657, -15230761, 13947276, 10730794, -13489462, -4363670)),
				new ge_precomp(FieldElement.New(-2538306, 7682793, 32759013, 263109, -29984731, -7955452, -22332124, -10188635, 977108, 699994), FieldElement.New(-12466472, 4195084, -9211532, 550904, -15565337, 12917920, 19118110, -439841, -30534533, -14337913), FieldElement.New(31788461, -14507657, 4799989, 7372237, 8808585, -14747943, 9408237, -10051775, 12493932, -5409317)),
				new ge_precomp(FieldElement.New(-25680606, 5260744, -19235809, -6284470, -3695942, 16566087, 27218280, 2607121, 29375955, 6024730), FieldElement.New(842132, -2794693, -4763381, -8722815, 26332018, -12405641, 11831880, 6985184, -9940361, 2854096), FieldElement.New(-4847262, -7969331, 2516242, -5847713, 9695691, -7221186, 16512645, 960770, 12121869, 16648078)),
				new ge_precomp(FieldElement.New(-15218652, 14667096, -13336229, 2013717, 30598287, -464137, -31504922, -7882064, 20237806, 2838411), FieldElement.New(-19288047, 4453152, 15298546, -16178388, 22115043, -15972604, 12544294, -13470457, 1068881, -12499905), FieldElement.New(-9558883, -16518835, 33238498, 13506958, 30505848, -1114596, -8486907, -2630053, 12521378, 4845654)),
				new ge_precomp(FieldElement.New(-28198521, 10744108, -2958380, 10199664, 7759311, -13088600, 3409348, -873400, -6482306, -12885870), FieldElement.New(-23561822, 6230156, -20382013, 10655314, -24040585, -11621172, 10477734, -1240216, -3113227, 13974498), FieldElement.New(12966261, 15550616, -32038948, -1615346, 21025980, -629444, 5642325, 7188737, 18895762, 12629579))
			},
			new ge_precomp[8]
			{
				new ge_precomp(FieldElement.New(14741879, -14946887, 22177208, -11721237, 1279741, 8058600, 11758140, 789443, 32195181, 3895677), FieldElement.New(10758205, 15755439, -4509950, 9243698, -4879422, 6879879, -2204575, -3566119, -8982069, 4429647), FieldElement.New(-2453894, 15725973, -20436342, -10410672, -5803908, -11040220, -7135870, -11642895, 18047436, -15281743)),
				new ge_precomp(FieldElement.New(-25173001, -11307165, 29759956, 11776784, -22262383, -15820455, 10993114, -12850837, -17620701, -9408468), FieldElement.New(21987233, 700364, -24505048, 14972008, -7774265, -5718395, 32155026, 2581431, -29958985, 8773375), FieldElement.New(-25568350, 454463, -13211935, 16126715, 25240068, 8594567, 20656846, 12017935, -7874389, -13920155)),
				new ge_precomp(FieldElement.New(6028182, 6263078, -31011806, -11301710, -818919, 2461772, -31841174, -5468042, -1721788, -2776725), FieldElement.New(-12278994, 16624277, 987579, -5922598, 32908203, 1248608, 7719845, -4166698, 28408820, 6816612), FieldElement.New(-10358094, -8237829, 19549651, -12169222, 22082623, 16147817, 20613181, 13982702, -10339570, 5067943)),
				new ge_precomp(FieldElement.New(-30505967, -3821767, 12074681, 13582412, -19877972, 2443951, -19719286, 12746132, 5331210, -10105944), FieldElement.New(30528811, 3601899, -1957090, 4619785, -27361822, -15436388, 24180793, -12570394, 27679908, -1648928), FieldElement.New(9402404, -13957065, 32834043, 10838634, -26580150, -13237195, 26653274, -8685565, 22611444, -12715406)),
				new ge_precomp(FieldElement.New(22190590, 1118029, 22736441, 15130463, -30460692, -5991321, 19189625, -4648942, 4854859, 6622139), FieldElement.New(-8310738, -2953450, -8262579, -3388049, -10401731, -271929, 13424426, -3567227, 26404409, 13001963), FieldElement.New(-31241838, -15415700, -2994250, 8939346, 11562230, -12840670, -26064365, -11621720, -15405155, 11020693)),
				new ge_precomp(FieldElement.New(1866042, -7949489, -7898649, -10301010, 12483315, 13477547, 3175636, -12424163, 28761762, 1406734), FieldElement.New(-448555, -1777666, 13018551, 3194501, -9580420, -11161737, 24760585, -4347088, 25577411, -13378680), FieldElement.New(-24290378, 4759345, -690653, -1852816, 2066747, 10693769, -29595790, 9884936, -9368926, 4745410)),
				new ge_precomp(FieldElement.New(-9141284, 6049714, -19531061, -4341411, -31260798, 9944276, -15462008, -11311852, 10931924, -11931931), FieldElement.New(-16561513, 14112680, -8012645, 4817318, -8040464, -11414606, -22853429, 10856641, -20470770, 13434654), FieldElement.New(22759489, -10073434, -16766264, -1871422, 13637442, -10168091, 1765144, -12654326, 28445307, -5364710)),
				new ge_precomp(FieldElement.New(29875063, 12493613, 2795536, -3786330, 1710620, 15181182, -10195717, -8788675, 9074234, 1167180), FieldElement.New(-26205683, 11014233, -9842651, -2635485, -26908120, 7532294, -18716888, -9535498, 3843903, 9367684), FieldElement.New(-10969595, -6403711, 9591134, 9582310, 11349256, 108879, 16235123, 8601684, -139197, 4242895))
			},
			new ge_precomp[8]
			{
				new ge_precomp(FieldElement.New(22092954, -13191123, -2042793, -11968512, 32186753, -11517388, -6574341, 2470660, -27417366, 16625501), FieldElement.New(-11057722, 3042016, 13770083, -9257922, 584236, -544855, -7770857, 2602725, -27351616, 14247413), FieldElement.New(6314175, -10264892, -32772502, 15957557, -10157730, 168750, -8618807, 14290061, 27108877, -1180880)),
				new ge_precomp(FieldElement.New(-8586597, -7170966, 13241782, 10960156, -32991015, -13794596, 33547976, -11058889, -27148451, 981874), FieldElement.New(22833440, 9293594, -32649448, -13618667, -9136966, 14756819, -22928859, -13970780, -10479804, -16197962), FieldElement.New(-7768587, 3326786, -28111797, 10783824, 19178761, 14905060, 22680049, 13906969, -15933690, 3797899)),
				new ge_precomp(FieldElement.New(21721356, -4212746, -12206123, 9310182, -3882239, -13653110, 23740224, -2709232, 20491983, -8042152), FieldElement.New(9209270, -15135055, -13256557, -6167798, -731016, 15289673, 25947805, 15286587, 30997318, -6703063), FieldElement.New(7392032, 16618386, 23946583, -8039892, -13265164, -1533858, -14197445, -2321576, 17649998, -250080)),
				new ge_precomp(FieldElement.New(-9301088, -14193827, 30609526, -3049543, -25175069, -1283752, -15241566, -9525724, -2233253, 7662146), FieldElement.New(-17558673, 1763594, -33114336, 15908610, -30040870, -12174295, 7335080, -8472199, -3174674, 3440183), FieldElement.New(-19889700, -5977008, -24111293, -9688870, 10799743, -16571957, 40450, -4431835, 4862400, 1133)),
				new ge_precomp(FieldElement.New(-32856209, -7873957, -5422389, 14860950, -16319031, 7956142, 7258061, 311861, -30594991, -7379421), FieldElement.New(-3773428, -1565936, 28985340, 7499440, 24445838, 9325937, 29727763, 16527196, 18278453, 15405622), FieldElement.New(-4381906, 8508652, -19898366, -3674424, -5984453, 15149970, -13313598, 843523, -21875062, 13626197)),
				new ge_precomp(FieldElement.New(2281448, -13487055, -10915418, -2609910, 1879358, 16164207, -10783882, 3953792, 13340839, 15928663), FieldElement.New(31727126, -7179855, -18437503, -8283652, 2875793, -16390330, -25269894, -7014826, -23452306, 5964753), FieldElement.New(4100420, -5959452, -17179337, 6017714, -18705837, 12227141, -26684835, 11344144, 2538215, -7570755)),
				new ge_precomp(FieldElement.New(-9433605, 6123113, 11159803, -2156608, 30016280, 14966241, -20474983, 1485421, -629256, -15958862), FieldElement.New(-26804558, 4260919, 11851389, 9658551, -32017107, 16367492, -20205425, -13191288, 11659922, -11115118), FieldElement.New(26180396, 10015009, -30844224, -8581293, 5418197, 9480663, 2231568, -10170080, 33100372, -1306171)),
				new ge_precomp(FieldElement.New(15121113, -5201871, -10389905, 15427821, -27509937, -15992507, 21670947, 4486675, -5931810, -14466380), FieldElement.New(16166486, -9483733, -11104130, 6023908, -31926798, -1364923, 2340060, -16254968, -10735770, -10039824), FieldElement.New(28042865, -3557089, -12126526, 12259706, -3717498, -6945899, 6766453, -8689599, 18036436, 5803270))
			},
			new ge_precomp[8]
			{
				new ge_precomp(FieldElement.New(-817581, 6763912, 11803561, 1585585, 10958447, -2671165, 23855391, 4598332, -6159431, -14117438), FieldElement.New(-31031306, -14256194, 17332029, -2383520, 31312682, -5967183, 696309, 50292, -20095739, 11763584), FieldElement.New(-594563, -2514283, -32234153, 12643980, 12650761, 14811489, 665117, -12613632, -19773211, -10713562)),
				new ge_precomp(FieldElement.New(30464590, -11262872, -4127476, -12734478, 19835327, -7105613, -24396175, 2075773, -17020157, 992471), FieldElement.New(18357185, -6994433, 7766382, 16342475, -29324918, 411174, 14578841, 8080033, -11574335, -10601610), FieldElement.New(19598397, 10334610, 12555054, 2555664, 18821899, -10339780, 21873263, 16014234, 26224780, 16452269)),
				new ge_precomp(FieldElement.New(-30223925, 5145196, 5944548, 16385966, 3976735, 2009897, -11377804, -7618186, -20533829, 3698650), FieldElement.New(14187449, 3448569, -10636236, -10810935, -22663880, -3433596, 7268410, -10890444, 27394301, 12015369), FieldElement.New(19695761, 16087646, 28032085, 12999827, 6817792, 11427614, 20244189, -1312777, -13259127, -3402461)),
				new ge_precomp(FieldElement.New(30860103, 12735208, -1888245, -4699734, -16974906, 2256940, -8166013, 12298312, -8550524, -10393462), FieldElement.New(-5719826, -11245325, -1910649, 15569035, 26642876, -7587760, -5789354, -15118654, -4976164, 12651793), FieldElement.New(-2848395, 9953421, 11531313, -5282879, 26895123, -12697089, -13118820, -16517902, 9768698, -2533218)),
				new ge_precomp(FieldElement.New(-24719459, 1894651, -287698, -4704085, 15348719, -8156530, 32767513, 12765450, 4940095, 10678226), FieldElement.New(18860224, 15980149, -18987240, -1562570, -26233012, -11071856, -7843882, 13944024, -24372348, 16582019), FieldElement.New(-15504260, 4970268, -29893044, 4175593, -20993212, -2199756, -11704054, 15444560, -11003761, 7989037)),
				new ge_precomp(FieldElement.New(31490452, 5568061, -2412803, 2182383, -32336847, 4531686, -32078269, 6200206, -19686113, -14800171), FieldElement.New(-17308668, -15879940, -31522777, -2831, -32887382, 16375549, 8680158, -16371713, 28550068, -6857132), FieldElement.New(-28126887, -5688091, 16837845, -1820458, -6850681, 12700016, -30039981, 4364038, 1155602, 5988841)),
				new ge_precomp(FieldElement.New(21890435, -13272907, -12624011, 12154349, -7831873, 15300496, 23148983, -4470481, 24618407, 8283181), FieldElement.New(-33136107, -10512751, 9975416, 6841041, -31559793, 16356536, 3070187, -7025928, 1466169, 10740210), FieldElement.New(-1509399, -15488185, -13503385, -10655916, 32799044, 909394, -13938903, -5779719, -32164649, -15327040)),
				new ge_precomp(FieldElement.New(3960823, -14267803, -28026090, -15918051, -19404858, 13146868, 15567327, 951507, -3260321, -573935), FieldElement.New(24740841, 5052253, -30094131, 8961361, 25877428, 6165135, -24368180, 14397372, -7380369, -6144105), FieldElement.New(-28888365, 3510803, -28103278, -1158478, -11238128, -10631454, -15441463, -14453128, -1625486, -6494814))
			},
			new ge_precomp[8]
			{
				new ge_precomp(FieldElement.New(793299, -9230478, 8836302, -6235707, -27360908, -2369593, 33152843, -4885251, -9906200, -621852), FieldElement.New(5666233, 525582, 20782575, -8038419, -24538499, 14657740, 16099374, 1468826, -6171428, -15186581), FieldElement.New(-4859255, -3779343, -2917758, -6748019, 7778750, 11688288, -30404353, -9871238, -1558923, -9863646)),
				new ge_precomp(FieldElement.New(10896332, -7719704, 824275, 472601, -19460308, 3009587, 25248958, 14783338, -30581476, -15757844), FieldElement.New(10566929, 12612572, -31944212, 11118703, -12633376, 12362879, 21752402, 8822496, 24003793, 14264025), FieldElement.New(27713862, -7355973, -11008240, 9227530, 27050101, 2504721, 23886875, -13117525, 13958495, -5732453)),
				new ge_precomp(FieldElement.New(-23481610, 4867226, -27247128, 3900521, 29838369, -8212291, -31889399, -10041781, 7340521, -15410068), FieldElement.New(4646514, -8011124, -22766023, -11532654, 23184553, 8566613, 31366726, -1381061, -15066784, -10375192), FieldElement.New(-17270517, 12723032, -16993061, 14878794, 21619651, -6197576, 27584817, 3093888, -8843694, 3849921)),
				new ge_precomp(FieldElement.New(-9064912, 2103172, 25561640, -15125738, -5239824, 9582958, 32477045, -9017955, 5002294, -15550259), FieldElement.New(-12057553, -11177906, 21115585, -13365155, 8808712, -12030708, 16489530, 13378448, -25845716, 12741426), FieldElement.New(-5946367, 10645103, -30911586, 15390284, -3286982, -7118677, 24306472, 15852464, 28834118, -7646072)),
				new ge_precomp(FieldElement.New(-17335748, -9107057, -24531279, 9434953, -8472084, -583362, -13090771, 455841, 20461858, 5491305), FieldElement.New(13669248, -16095482, -12481974, -10203039, -14569770, -11893198, -24995986, 11293807, -28588204, -9421832), FieldElement.New(28497928, 6272777, -33022994, 14470570, 8906179, -1225630, 18504674, -14165166, 29867745, -8795943)),
				new ge_precomp(FieldElement.New(-16207023, 13517196, -27799630, -13697798, 24009064, -6373891, -6367600, -13175392, 22853429, -4012011), FieldElement.New(24191378, 16712145, -13931797, 15217831, 14542237, 1646131, 18603514, -11037887, 12876623, -2112447), FieldElement.New(17902668, 4518229, -411702, -2829247, 26878217, 5258055, -12860753, 608397, 16031844, 3723494)),
				new ge_precomp(FieldElement.New(-28632773, 12763728, -20446446, 7577504, 33001348, -13017745, 17558842, -7872890, 23896954, -4314245), FieldElement.New(-20005381, -12011952, 31520464, 605201, 2543521, 5991821, -2945064, 7229064, -9919646, -8826859), FieldElement.New(28816045, 298879, -28165016, -15920938, 19000928, -1665890, -12680833, -2949325, -18051778, -2082915)),
				new ge_precomp(FieldElement.New(16000882, -344896, 3493092, -11447198, -29504595, -13159789, 12577740, 16041268, -19715240, 7847707), FieldElement.New(10151868, 10572098, 27312476, 7922682, 14825339, 4723128, -32855931, -6519018, -10020567, 3852848), FieldElement.New(-11430470, 15697596, -21121557, -4420647, 5386314, 15063598, 16514493, -15932110, 29330899, -15076224))
			},
			new ge_precomp[8]
			{
				new ge_precomp(FieldElement.New(-25499735, -4378794, -15222908, -6901211, 16615731, 2051784, 3303702, 15490, -27548796, 12314391), FieldElement.New(15683520, -6003043, 18109120, -9980648, 15337968, -5997823, -16717435, 15921866, 16103996, -3731215), FieldElement.New(-23169824, -10781249, 13588192, -1628807, -3798557, -1074929, -19273607, 5402699, -29815713, -9841101)),
				new ge_precomp(FieldElement.New(23190676, 2384583, -32714340, 3462154, -29903655, -1529132, -11266856, 8911517, -25205859, 2739713), FieldElement.New(21374101, -3554250, -33524649, 9874411, 15377179, 11831242, -33529904, 6134907, 4931255, 11987849), FieldElement.New(-7732, -2978858, -16223486, 7277597, 105524, -322051, -31480539, 13861388, -30076310, 10117930)),
				new ge_precomp(FieldElement.New(-29501170, -10744872, -26163768, 13051539, -25625564, 5089643, -6325503, 6704079, 12890019, 15728940), FieldElement.New(-21972360, -11771379, -951059, -4418840, 14704840, 2695116, 903376, -10428139, 12885167, 8311031), FieldElement.New(-17516482, 5352194, 10384213, -13811658, 7506451, 13453191, 26423267, 4384730, 1888765, -5435404)),
				new ge_precomp(FieldElement.New(-25817338, -3107312, -13494599, -3182506, 30896459, -13921729, -32251644, -12707869, -19464434, -3340243), FieldElement.New(-23607977, -2665774, -526091, 4651136, 5765089, 4618330, 6092245, 14845197, 17151279, -9854116), FieldElement.New(-24830458, -12733720, -15165978, 10367250, -29530908, -265356, 22825805, -7087279, -16866484, 16176525)),
				new ge_precomp(FieldElement.New(-23583256, 6564961, 20063689, 3798228, -4740178, 7359225, 2006182, -10363426, -28746253, -10197509), FieldElement.New(-10626600, -4486402, -13320562, -5125317, 3432136, -6393229, 23632037, -1940610, 32808310, 1099883), FieldElement.New(15030977, 5768825, -27451236, -2887299, -6427378, -15361371, -15277896, -6809350, 2051441, -15225865)),
				new ge_precomp(FieldElement.New(-3362323, -7239372, 7517890, 9824992, 23555850, 295369, 5148398, -14154188, -22686354, 16633660), FieldElement.New(4577086, -16752288, 13249841, -15304328, 19958763, -14537274, 18559670, -10759549, 8402478, -9864273), FieldElement.New(-28406330, -1051581, -26790155, -907698, -17212414, -11030789, 9453451, -14980072, 17983010, 9967138)),
				new ge_precomp(FieldElement.New(-25762494, 6524722, 26585488, 9969270, 24709298, 1220360, -1677990, 7806337, 17507396, 3651560), FieldElement.New(-10420457, -4118111, 14584639, 15971087, -15768321, 8861010, 26556809, -5574557, -18553322, -11357135), FieldElement.New(2839101, 14284142, 4029895, 3472686, 14402957, 12689363, -26642121, 8459447, -5605463, -7621941)),
				new ge_precomp(FieldElement.New(-4839289, -3535444, 9744961, 2871048, 25113978, 3187018, -25110813, -849066, 17258084, -7977739), FieldElement.New(18164541, -10595176, -17154882, -1542417, 19237078, -9745295, 23357533, -15217008, 26908270, 12150756), FieldElement.New(-30264870, -7647865, 5112249, -7036672, -1499807, -6974257, 43168, -5537701, -32302074, 16215819))
			},
			new ge_precomp[8]
			{
				new ge_precomp(FieldElement.New(-6898905, 9824394, -12304779, -4401089, -31397141, -6276835, 32574489, 12532905, -7503072, -8675347), FieldElement.New(-27343522, -16515468, -27151524, -10722951, 946346, 16291093, 254968, 7168080, 21676107, -1943028), FieldElement.New(21260961, -8424752, -16831886, -11920822, -23677961, 3968121, -3651949, -6215466, -3556191, -7913075)),
				new ge_precomp(FieldElement.New(16544754, 13250366, -16804428, 15546242, -4583003, 12757258, -2462308, -8680336, -18907032, -9662799), FieldElement.New(-2415239, -15577728, 18312303, 4964443, -15272530, -12653564, 26820651, 16690659, 25459437, -4564609), FieldElement.New(-25144690, 11425020, 28423002, -11020557, -6144921, -15826224, 9142795, -2391602, -6432418, -1644817)),
				new ge_precomp(FieldElement.New(-23104652, 6253476, 16964147, -3768872, -25113972, -12296437, -27457225, -16344658, 6335692, 7249989), FieldElement.New(-30333227, 13979675, 7503222, -12368314, -11956721, -4621693, -30272269, 2682242, 25993170, -12478523), FieldElement.New(4364628, 5930691, 32304656, -10044554, -8054781, 15091131, 22857016, -10598955, 31820368, 15075278)),
				new ge_precomp(FieldElement.New(31879134, -8918693, 17258761, 90626, -8041836, -4917709, 24162788, -9650886, -17970238, 12833045), FieldElement.New(19073683, 14851414, -24403169, -11860168, 7625278, 11091125, -19619190, 2074449, -9413939, 14905377), FieldElement.New(24483667, -11935567, -2518866, -11547418, -1553130, 15355506, -25282080, 9253129, 27628530, -7555480)),
				new ge_precomp(FieldElement.New(17597607, 8340603, 19355617, 552187, 26198470, -3176583, 4593324, -9157582, -14110875, 15297016), FieldElement.New(510886, 14337390, -31785257, 16638632, 6328095, 2713355, -20217417, -11864220, 8683221, 2921426), FieldElement.New(18606791, 11874196, 27155355, -5281482, -24031742, 6265446, -25178240, -1278924, 4674690, 13890525)),
				new ge_precomp(FieldElement.New(13609624, 13069022, -27372361, -13055908, 24360586, 9592974, 14977157, 9835105, 4389687, 288396), FieldElement.New(9922506, -519394, 13613107, 5883594, -18758345, -434263, -12304062, 8317628, 23388070, 16052080), FieldElement.New(12720016, 11937594, -31970060, -5028689, 26900120, 8561328, -20155687, -11632979, -14754271, -10812892)),
				new ge_precomp(FieldElement.New(15961858, 14150409, 26716931, -665832, -22794328, 13603569, 11829573, 7467844, -28822128, 929275), FieldElement.New(11038231, -11582396, -27310482, -7316562, -10498527, -16307831, -23479533, -9371869, -21393143, 2465074), FieldElement.New(20017163, -4323226, 27915242, 1529148, 12396362, 15675764, 13817261, -9658066, 2463391, -4622140)),
				new ge_precomp(FieldElement.New(-16358878, -12663911, -12065183, 4996454, -1256422, 1073572, 9583558, 12851107, 4003896, 12673717), FieldElement.New(-1731589, -15155870, -3262930, 16143082, 19294135, 13385325, 14741514, -9103726, 7903886, 2348101), FieldElement.New(24536016, -16515207, 12715592, -3862155, 1511293, 10047386, -3842346, -7129159, -28377538, 10048127))
			},
			new ge_precomp[8]
			{
				new ge_precomp(FieldElement.New(-12622226, -6204820, 30718825, 2591312, -10617028, 12192840, 18873298, -7297090, -32297756, 15221632), FieldElement.New(-26478122, -11103864, 11546244, -1852483, 9180880, 7656409, -21343950, 2095755, 29769758, 6593415), FieldElement.New(-31994208, -2907461, 4176912, 3264766, 12538965, -868111, 26312345, -6118678, 30958054, 8292160)),
				new ge_precomp(FieldElement.New(31429822, -13959116, 29173532, 15632448, 12174511, -2760094, 32808831, 3977186, 26143136, -3148876), FieldElement.New(22648901, 1402143, -22799984, 13746059, 7936347, 365344, -8668633, -1674433, -3758243, -2304625), FieldElement.New(-15491917, 8012313, -2514730, -12702462, -23965846, -10254029, -1612713, -1535569, -16664475, 8194478)),
				new ge_precomp(FieldElement.New(27338066, -7507420, -7414224, 10140405, -19026427, -6589889, 27277191, 8855376, 28572286, 3005164), FieldElement.New(26287124, 4821776, 25476601, -4145903, -3764513, -15788984, -18008582, 1182479, -26094821, -13079595), FieldElement.New(-7171154, 3178080, 23970071, 6201893, -17195577, -4489192, -21876275, -13982627, 32208683, -1198248)),
				new ge_precomp(FieldElement.New(-16657702, 2817643, -10286362, 14811298, 6024667, 13349505, -27315504, -10497842, -27672585, -11539858), FieldElement.New(15941029, -9405932, -21367050, 8062055, 31876073, -238629, -15278393, -1444429, 15397331, -4130193), FieldElement.New(8934485, -13485467, -23286397, -13423241, -32446090, 14047986, 31170398, -1441021, -27505566, 15087184)),
				new ge_precomp(FieldElement.New(-18357243, -2156491, 24524913, -16677868, 15520427, -6360776, -15502406, 11461896, 16788528, -5868942), FieldElement.New(-1947386, 16013773, 21750665, 3714552, -17401782, -16055433, -3770287, -10323320, 31322514, -11615635), FieldElement.New(21426655, -5650218, -13648287, -5347537, -28812189, -4920970, -18275391, -14621414, 13040862, -12112948)),
				new ge_precomp(FieldElement.New(11293895, 12478086, -27136401, 15083750, -29307421, 14748872, 14555558, -13417103, 1613711, 4896935), FieldElement.New(-25894883, 15323294, -8489791, -8057900, 25967126, -13425460, 2825960, -4897045, -23971776, -11267415), FieldElement.New(-15924766, -5229880, -17443532, 6410664, 3622847, 10243618, 20615400, 12405433, -23753030, -8436416)),
				new ge_precomp(FieldElement.New(-7091295, 12556208, -20191352, 9025187, -17072479, 4333801, 4378436, 2432030, 23097949, -566018), FieldElement.New(4565804, -16025654, 20084412, -7842817, 1724999, 189254, 24767264, 10103221, -18512313, 2424778), FieldElement.New(366633, -11976806, 8173090, -6890119, 30788634, 5745705, -7168678, 1344109, -3642553, 12412659)),
				new ge_precomp(FieldElement.New(-24001791, 7690286, 14929416, -168257, -32210835, -13412986, 24162697, -15326504, -3141501, 11179385), FieldElement.New(18289522, -14724954, 8056945, 16430056, -21729724, 7842514, -6001441, -1486897, -18684645, -11443503), FieldElement.New(476239, 6601091, -6152790, -9723375, 17503545, -4863900, 27672959, 13403813, 11052904, 5219329))
			},
			new ge_precomp[8]
			{
				new ge_precomp(FieldElement.New(20678546, -8375738, -32671898, 8849123, -5009758, 14574752, 31186971, -3973730, 9014762, -8579056), FieldElement.New(-13644050, -10350239, -15962508, 5075808, -1514661, -11534600, -33102500, 9160280, 8473550, -3256838), FieldElement.New(24900749, 14435722, 17209120, -15292541, -22592275, 9878983, -7689309, -16335821, -24568481, 11788948)),
				new ge_precomp(FieldElement.New(-3118155, -11395194, -13802089, 14797441, 9652448, -6845904, -20037437, 10410733, -24568470, -1458691), FieldElement.New(-15659161, 16736706, -22467150, 10215878, -9097177, 7563911, 11871841, -12505194, -18513325, 8464118), FieldElement.New(-23400612, 8348507, -14585951, -861714, -3950205, -6373419, 14325289, 8628612, 33313881, -8370517)),
				new ge_precomp(FieldElement.New(-20186973, -4967935, 22367356, 5271547, -1097117, -4788838, -24805667, -10236854, -8940735, -5818269), FieldElement.New(-6948785, -1795212, -32625683, -16021179, 32635414, -7374245, 15989197, -12838188, 28358192, -4253904), FieldElement.New(-23561781, -2799059, -32351682, -1661963, -9147719, 10429267, -16637684, 4072016, -5351664, 5596589)),
				new ge_precomp(FieldElement.New(-28236598, -3390048, 12312896, 6213178, 3117142, 16078565, 29266239, 2557221, 1768301, 15373193), FieldElement.New(-7243358, -3246960, -4593467, -7553353, -127927, -912245, -1090902, -4504991, -24660491, 3442910), FieldElement.New(-30210571, 5124043, 14181784, 8197961, 18964734, -11939093, 22597931, 7176455, -18585478, 13365930)),
				new ge_precomp(FieldElement.New(-7877390, -1499958, 8324673, 4690079, 6261860, 890446, 24538107, -8570186, -9689599, -3031667), FieldElement.New(25008904, -10771599, -4305031, -9638010, 16265036, 15721635, 683793, -11823784, 15723479, -15163481), FieldElement.New(-9660625, 12374379, -27006999, -7026148, -7724114, -12314514, 11879682, 5400171, 519526, -1235876)),
				new ge_precomp(FieldElement.New(22258397, -16332233, -7869817, 14613016, -22520255, -2950923, -20353881, 7315967, 16648397, 7605640), FieldElement.New(-8081308, -8464597, -8223311, 9719710, 19259459, -15348212, 23994942, -5281555, -9468848, 4763278), FieldElement.New(-21699244, 9220969, -15730624, 1084137, -25476107, -2852390, 31088447, -7764523, -11356529, 728112)),
				new ge_precomp(FieldElement.New(26047220, -11751471, -6900323, -16521798, 24092068, 9158119, -4273545, -12555558, -29365436, -5498272), FieldElement.New(17510331, -322857, 5854289, 8403524, 17133918, -3112612, -28111007, 12327945, 10750447, 10014012), FieldElement.New(-10312768, 3936952, 9156313, -8897683, 16498692, -994647, -27481051, -666732, 3424691, 7540221)),
				new ge_precomp(FieldElement.New(30322361, -6964110, 11361005, -4143317, 7433304, 4989748, -7071422, -16317219, -9244265, 15258046), FieldElement.New(13054562, -2779497, 19155474, 469045, -12482797, 4566042, 5631406, 2711395, 1062915, -5136345), FieldElement.New(-19240248, -11254599, -29509029, -7499965, -5835763, 13005411, -6066489, 12194497, 32960380, 1459310))
			},
			new ge_precomp[8]
			{
				new ge_precomp(FieldElement.New(19852034, 7027924, 23669353, 10020366, 8586503, -6657907, 394197, -6101885, 18638003, -11174937), FieldElement.New(31395534, 15098109, 26581030, 8030562, -16527914, -5007134, 9012486, -7584354, -6643087, -5442636), FieldElement.New(-9192165, -2347377, -1997099, 4529534, 25766844, 607986, -13222, 9677543, -32294889, -6456008)),
				new ge_precomp(FieldElement.New(-2444496, -149937, 29348902, 8186665, 1873760, 12489863, -30934579, -7839692, -7852844, -8138429), FieldElement.New(-15236356, -15433509, 7766470, 746860, 26346930, -10221762, -27333451, 10754588, -9431476, 5203576), FieldElement.New(31834314, 14135496, -770007, 5159118, 20917671, -16768096, -7467973, -7337524, 31809243, 7347066)),
				new ge_precomp(FieldElement.New(-9606723, -11874240, 20414459, 13033986, 13716524, -11691881, 19797970, -12211255, 15192876, -2087490), FieldElement.New(-12663563, -2181719, 1168162, -3804809, 26747877, -14138091, 10609330, 12694420, 33473243, -13382104), FieldElement.New(33184999, 11180355, 15832085, -11385430, -1633671, 225884, 15089336, -11023903, -6135662, 14480053)),
				new ge_precomp(FieldElement.New(31308717, -5619998, 31030840, -1897099, 15674547, -6582883, 5496208, 13685227, 27595050, 8737275), FieldElement.New(-20318852, -15150239, 10933843, -16178022, 8335352, -7546022, -31008351, -12610604, 26498114, 66511), FieldElement.New(22644454, -8761729, -16671776, 4884562, -3105614, -13559366, 30540766, -4286747, -13327787, -7515095)),
				new ge_precomp(FieldElement.New(-28017847, 9834845, 18617207, -2681312, -3401956, -13307506, 8205540, 13585437, -17127465, 15115439), FieldElement.New(23711543, -672915, 31206561, -8362711, 6164647, -9709987, -33535882, -1426096, 8236921, 16492939), FieldElement.New(-23910559, -13515526, -26299483, -4503841, 25005590, -7687270, 19574902, 10071562, 6708380, -6222424)),
				new ge_precomp(FieldElement.New(2101391, -4930054, 19702731, 2367575, -15427167, 1047675, 5301017, 9328700, 29955601, -11678310), FieldElement.New(3096359, 9271816, -21620864, -15521844, -14847996, -7592937, -25892142, -12635595, -9917575, 6216608), FieldElement.New(-32615849, 338663, -25195611, 2510422, -29213566, -13820213, 24822830, -6146567, -26767480, 7525079)),
				new ge_precomp(FieldElement.New(-23066649, -13985623, 16133487, -7896178, -3389565, 778788, -910336, -2782495, -19386633, 11994101), FieldElement.New(21691500, -13624626, -641331, -14367021, 3285881, -3483596, -25064666, 9718258, -7477437, 13381418), FieldElement.New(18445390, -4202236, 14979846, 11622458, -1727110, -3582980, 23111648, -6375247, 28535282, 15779576)),
				new ge_precomp(FieldElement.New(30098053, 3089662, -9234387, 16662135, -21306940, 11308411, -14068454, 12021730, 9955285, -16303356), FieldElement.New(9734894, -14576830, -7473633, -9138735, 2060392, 11313496, -18426029, 9924399, 20194861, 13380996), FieldElement.New(-26378102, -7965207, -22167821, 15789297, -18055342, -6168792, -1984914, 15707771, 26342023, 10146099))
			},
			new ge_precomp[8]
			{
				new ge_precomp(FieldElement.New(-26016874, -219943, 21339191, -41388, 19745256, -2878700, -29637280, 2227040, 21612326, -545728), FieldElement.New(-13077387, 1184228, 23562814, -5970442, -20351244, -6348714, 25764461, 12243797, -20856566, 11649658), FieldElement.New(-10031494, 11262626, 27384172, 2271902, 26947504, -15997771, 39944, 6114064, 33514190, 2333242)),
				new ge_precomp(FieldElement.New(-21433588, -12421821, 8119782, 7219913, -21830522, -9016134, -6679750, -12670638, 24350578, -13450001), FieldElement.New(-4116307, -11271533, -23886186, 4843615, -30088339, 690623, -31536088, -10406836, 8317860, 12352766), FieldElement.New(18200138, -14475911, -33087759, -2696619, -23702521, -9102511, -23552096, -2287550, 20712163, 6719373)),
				new ge_precomp(FieldElement.New(26656208, 6075253, -7858556, 1886072, -28344043, 4262326, 11117530, -3763210, 26224235, -3297458), FieldElement.New(-17168938, -14854097, -3395676, -16369877, -19954045, 14050420, 21728352, 9493610, 18620611, -16428628), FieldElement.New(-13323321, 13325349, 11432106, 5964811, 18609221, 6062965, -5269471, -9725556, -30701573, -16479657)),
				new ge_precomp(FieldElement.New(-23860538, -11233159, 26961357, 1640861, -32413112, -16737940, 12248509, -5240639, 13735342, 1934062), FieldElement.New(25089769, 6742589, 17081145, -13406266, 21909293, -16067981, -15136294, -3765346, -21277997, 5473616), FieldElement.New(31883677, -7961101, 1083432, -11572403, 22828471, 13290673, -7125085, 12469656, 29111212, -5451014)),
				new ge_precomp(FieldElement.New(24244947, -15050407, -26262976, 2791540, -14997599, 16666678, 24367466, 6388839, -10295587, 452383), FieldElement.New(-25640782, -3417841, 5217916, 16224624, 19987036, -4082269, -24236251, -5915248, 15766062, 8407814), FieldElement.New(-20406999, 13990231, 15495425, 16395525, 5377168, 15166495, -8917023, -4388953, -8067909, 2276718)),
				new ge_precomp(FieldElement.New(30157918, 12924066, -17712050, 9245753, 19895028, 3368142, -23827587, 5096219, 22740376, -7303417), FieldElement.New(2041139, -14256350, 7783687, 13876377, -25946985, -13352459, 24051124, 13742383, -15637599, 13295222), FieldElement.New(33338237, -8505733, 12532113, 7977527, 9106186, -1715251, -17720195, -4612972, -4451357, -14669444)),
				new ge_precomp(FieldElement.New(-20045281, 5454097, -14346548, 6447146, 28862071, 1883651, -2469266, -4141880, 7770569, 9620597), FieldElement.New(23208068, 7979712, 33071466, 8149229, 1758231, -10834995, 30945528, -1694323, -33502340, -14767970), FieldElement.New(1439958, -16270480, -1079989, -793782, 4625402, 10647766, -5043801, 1220118, 30494170, -11440799)),
				new ge_precomp(FieldElement.New(-5037580, -13028295, -2970559, -3061767, 15640974, -6701666, -26739026, 926050, -1684339, -13333647), FieldElement.New(13908495, -3549272, 30919928, -6273825, -21521863, 7989039, 9021034, 9078865, 3353509, 4033511), FieldElement.New(-29663431, -15113610, 32259991, -344482, 24295849, -12912123, 23161163, 8839127, 27485041, 7356032))
			},
			new ge_precomp[8]
			{
				new ge_precomp(FieldElement.New(9661027, 705443, 11980065, -5370154, -1628543, 14661173, -6346142, 2625015, 28431036, -16771834), FieldElement.New(-23839233, -8311415, -25945511, 7480958, -17681669, -8354183, -22545972, 14150565, 15970762, 4099461), FieldElement.New(29262576, 16756590, 26350592, -8793563, 8529671, -11208050, 13617293, -9937143, 11465739, 8317062)),
				new ge_precomp(FieldElement.New(-25493081, -6962928, 32500200, -9419051, -23038724, -2302222, 14898637, 3848455, 20969334, -5157516), FieldElement.New(-20384450, -14347713, -18336405, 13884722, -33039454, 2842114, -21610826, -3649888, 11177095, 14989547), FieldElement.New(-24496721, -11716016, 16959896, 2278463, 12066309, 10137771, 13515641, 2581286, -28487508, 9930240)),
				new ge_precomp(FieldElement.New(-17751622, -2097826, 16544300, -13009300, -15914807, -14949081, 18345767, -13403753, 16291481, -5314038), FieldElement.New(-33229194, 2553288, 32678213, 9875984, 8534129, 6889387, -9676774, 6957617, 4368891, 9788741), FieldElement.New(16660756, 7281060, -10830758, 12911820, 20108584, -8101676, -21722536, -8613148, 16250552, -11111103)),
				new ge_precomp(FieldElement.New(-19765507, 2390526, -16551031, 14161980, 1905286, 6414907, 4689584, 10604807, -30190403, 4782747), FieldElement.New(-1354539, 14736941, -7367442, -13292886, 7710542, -14155590, -9981571, 4383045, 22546403, 437323), FieldElement.New(31665577, -12180464, -16186830, 1491339, -18368625, 3294682, 27343084, 2786261, -30633590, -14097016)),
				new ge_precomp(FieldElement.New(-14467279, -683715, -33374107, 7448552, 19294360, 14334329, -19690631, 2355319, -19284671, -6114373), FieldElement.New(15121312, -15796162, 6377020, -6031361, -10798111, -12957845, 18952177, 15496498, -29380133, 11754228), FieldElement.New(-2637277, -13483075, 8488727, -14303896, 12728761, -1622493, 7141596, 11724556, 22761615, -10134141)),
				new ge_precomp(FieldElement.New(16918416, 11729663, -18083579, 3022987, -31015732, -13339659, -28741185, -12227393, 32851222, 11717399), FieldElement.New(11166634, 7338049, -6722523, 4531520, -29468672, -7302055, 31474879, 3483633, -1193175, -4030831), FieldElement.New(-185635, 9921305, 31456609, -13536438, -12013818, 13348923, 33142652, 6546660, -19985279, -3948376)),
				new ge_precomp(FieldElement.New(-32460596, 11266712, -11197107, -7899103, 31703694, 3855903, -8537131, -12833048, -30772034, -15486313), FieldElement.New(-18006477, 12709068, 3991746, -6479188, -21491523, -10550425, -31135347, -16049879, 10928917, 3011958), FieldElement.New(-6957757, -15594337, 31696059, 334240, 29576716, 14796075, -30831056, -12805180, 18008031, 10258577)),
				new ge_precomp(FieldElement.New(-22448644, 15655569, 7018479, -4410003, -30314266, -1201591, -1853465, 1367120, 25127874, 6671743), FieldElement.New(29701166, -14373934, -10878120, 9279288, -17568, 13127210, 21382910, 11042292, 25838796, 4642684), FieldElement.New(-20430234, 14955537, -24126347, 8124619, -5369288, -5990470, 30468147, -13900640, 18423289, 4177476))
			}
		};

		private static void ge_add(ge_p1p1 r, ge_p3 p, ge_cached q)
		{
			int[] array = FieldElement.New();
			FieldElement.fe_add(r.X, p.Y, p.X);
			FieldElement.fe_sub(r.Y, p.Y, p.X);
			FieldElement.fe_mul(r.Z, r.X, q.YplusX);
			FieldElement.fe_mul(r.Y, r.Y, q.YminusX);
			FieldElement.fe_mul(r.T, q.T2d, p.T);
			FieldElement.fe_mul(r.X, p.Z, q.Z);
			FieldElement.fe_add(array, r.X, r.X);
			FieldElement.fe_sub(r.X, r.Z, r.Y);
			FieldElement.fe_add(r.Y, r.Z, r.Y);
			FieldElement.fe_add(r.Z, array, r.T);
			FieldElement.fe_sub(r.T, array, r.T);
		}

		private static void slide(sbyte[] r, byte[] a)
		{
			for (int i = 0; i < 256; i++)
			{
				r[i] = (sbyte)(1 & (a[i >> 3] >> (i & 7)));
			}
			for (int i = 0; i < 256; i++)
			{
				if (r[i] == 0)
				{
					continue;
				}
				for (int j = 1; j <= 6 && i + j < 256; j++)
				{
					if (r[i + j] == 0)
					{
						continue;
					}
					if (r[i] + (r[i + j] << j) <= 15)
					{
						r[i] += (sbyte)(r[i + j] << j);
						r[i + j] = 0;
						continue;
					}
					if (r[i] - (r[i + j] << j) < -15)
					{
						break;
					}
					r[i] -= (sbyte)(r[i + j] << j);
					for (int k = i + j; k < 256; k++)
					{
						if (r[k] == 0)
						{
							r[k] = 1;
							break;
						}
						r[k] = 0;
					}
				}
			}
		}

		public static void ge_double_scalarmult_vartime(ge_p2 r, byte[] a, ge_p3 A, byte[] b)
		{
			sbyte[] array = new sbyte[256];
			sbyte[] array2 = new sbyte[256];
			ge_cached[] array3 = new ge_cached[8];
			for (int i = 0; i < array3.Length; i++)
			{
				array3[i] = new ge_cached();
			}
			ge_p1p1 ge_p1p = new ge_p1p1();
			ge_p3 ge_p = new ge_p3();
			ge_p3 ge_p2 = new ge_p3();
			slide(array, a);
			slide(array2, b);
			ge_p3_to_cached(array3[0], A);
			ge_p3_dbl(ge_p1p, A);
			ge_p1p1_to_p3(ge_p2, ge_p1p);
			ge_add(ge_p1p, ge_p2, array3[0]);
			ge_p1p1_to_p3(ge_p, ge_p1p);
			ge_p3_to_cached(array3[1], ge_p);
			ge_add(ge_p1p, ge_p2, array3[1]);
			ge_p1p1_to_p3(ge_p, ge_p1p);
			ge_p3_to_cached(array3[2], ge_p);
			ge_add(ge_p1p, ge_p2, array3[2]);
			ge_p1p1_to_p3(ge_p, ge_p1p);
			ge_p3_to_cached(array3[3], ge_p);
			ge_add(ge_p1p, ge_p2, array3[3]);
			ge_p1p1_to_p3(ge_p, ge_p1p);
			ge_p3_to_cached(array3[4], ge_p);
			ge_add(ge_p1p, ge_p2, array3[4]);
			ge_p1p1_to_p3(ge_p, ge_p1p);
			ge_p3_to_cached(array3[5], ge_p);
			ge_add(ge_p1p, ge_p2, array3[5]);
			ge_p1p1_to_p3(ge_p, ge_p1p);
			ge_p3_to_cached(array3[6], ge_p);
			ge_add(ge_p1p, ge_p2, array3[6]);
			ge_p1p1_to_p3(ge_p, ge_p1p);
			ge_p3_to_cached(array3[7], ge_p);
			ge_p2_0(r);
			int num = 255;
			while (num >= 0 && array[num] == 0 && array2[num] == 0)
			{
				num--;
			}
			while (num >= 0)
			{
				ge_p2_dbl(ge_p1p, r);
				if (array[num] > 0)
				{
					ge_p1p1_to_p3(ge_p, ge_p1p);
					ge_add(ge_p1p, ge_p, array3[array[num] / 2]);
				}
				else if (array[num] < 0)
				{
					ge_p1p1_to_p3(ge_p, ge_p1p);
					ge_sub(ge_p1p, ge_p, array3[-array[num] / 2]);
				}
				if (array2[num] > 0)
				{
					ge_p1p1_to_p3(ge_p, ge_p1p);
					ge_madd(ge_p1p, ge_p, Bi[array2[num] / 2]);
				}
				else if (array2[num] < 0)
				{
					ge_p1p1_to_p3(ge_p, ge_p1p);
					ge_msub(ge_p1p, ge_p, Bi[-array2[num] / 2]);
				}
				ge_p1p1_to_p2(r, ge_p1p);
				num--;
			}
		}

		public static int ge_frombytes_negate_vartime(ge_p3 h, byte[] s)
		{
			int[] array = FieldElement.New();
			int[] array2 = FieldElement.New();
			int[] array3 = FieldElement.New();
			int[] array4 = FieldElement.New();
			int[] array5 = FieldElement.New();
			FieldElement.fe_frombytes(h.Y, s);
			FieldElement.fe_1(h.Z);
			FieldElement.fe_sq(array, h.Y);
			FieldElement.fe_mul(array2, array, d);
			FieldElement.fe_sub(array, array, h.Z);
			FieldElement.fe_add(array2, array2, h.Z);
			FieldElement.fe_sq(array3, array2);
			FieldElement.fe_mul(array3, array3, array2);
			FieldElement.fe_sq(h.X, array3);
			FieldElement.fe_mul(h.X, h.X, array2);
			FieldElement.fe_mul(h.X, h.X, array);
			FieldElement.fe_pow22523(h.X, h.X);
			FieldElement.fe_mul(h.X, h.X, array3);
			FieldElement.fe_mul(h.X, h.X, array);
			FieldElement.fe_sq(array4, h.X);
			FieldElement.fe_mul(array4, array4, array2);
			FieldElement.fe_sub(array5, array4, array);
			if (FieldElement.fe_isnonzero(array5) != 0)
			{
				FieldElement.fe_add(array5, array4, array);
				if (FieldElement.fe_isnonzero(array5) != 0)
				{
					return -1;
				}
				FieldElement.fe_mul(h.X, h.X, sqrtm1);
			}
			if (FieldElement.fe_isnegative(h.X) == s[31] >> 7)
			{
				FieldElement.fe_neg(h.X, h.X);
			}
			FieldElement.fe_mul(h.T, h.X, h.Y);
			return 0;
		}

		private static void ge_madd(ge_p1p1 result, ge_p3 p, ge_precomp q)
		{
			int[] array = FieldElement.New();
			FieldElement.fe_add(result.X, p.Y, p.X);
			FieldElement.fe_sub(result.Y, p.Y, p.X);
			FieldElement.fe_mul(result.Z, result.X, q.yplusx);
			FieldElement.fe_mul(result.Y, result.Y, q.yminusx);
			FieldElement.fe_mul(result.T, q.xy2d, p.T);
			FieldElement.fe_add(array, p.Z, p.Z);
			FieldElement.fe_sub(result.X, result.Z, result.Y);
			FieldElement.fe_add(result.Y, result.Z, result.Y);
			FieldElement.fe_add(result.Z, array, result.T);
			FieldElement.fe_sub(result.T, array, result.T);
		}

		private static void ge_msub(ge_p1p1 result, ge_p3 p, ge_precomp q)
		{
			int[] array = FieldElement.New();
			FieldElement.fe_add(result.X, p.Y, p.X);
			FieldElement.fe_sub(result.Y, p.Y, p.X);
			FieldElement.fe_mul(result.Z, result.X, q.yminusx);
			FieldElement.fe_mul(result.Y, result.Y, q.yplusx);
			FieldElement.fe_mul(result.T, q.xy2d, p.T);
			FieldElement.fe_add(array, p.Z, p.Z);
			FieldElement.fe_sub(result.X, result.Z, result.Y);
			FieldElement.fe_add(result.Y, result.Z, result.Y);
			FieldElement.fe_sub(result.Z, array, result.T);
			FieldElement.fe_add(result.T, array, result.T);
		}

		private static void ge_p1p1_to_p2(ge_p2 result, ge_p1p1 p)
		{
			FieldElement.fe_mul(result.X, p.X, p.T);
			FieldElement.fe_mul(result.Y, p.Y, p.Z);
			FieldElement.fe_mul(result.Z, p.Z, p.T);
		}

		private static void ge_p1p1_to_p3(ge_p3 result, ge_p1p1 p)
		{
			FieldElement.fe_mul(result.X, p.X, p.T);
			FieldElement.fe_mul(result.Y, p.Y, p.Z);
			FieldElement.fe_mul(result.Z, p.Z, p.T);
			FieldElement.fe_mul(result.T, p.X, p.Y);
		}

		private static void ge_p2_0(ge_p2 h)
		{
			FieldElement.fe_0(h.X);
			FieldElement.fe_1(h.Y);
			FieldElement.fe_1(h.Z);
		}

		private static void ge_p2_dbl(ge_p1p1 result, ge_p2 p)
		{
			int[] array = FieldElement.New();
			FieldElement.fe_sq(result.X, p.X);
			FieldElement.fe_sq(result.Z, p.Y);
			FieldElement.fe_sq2(result.T, p.Z);
			FieldElement.fe_add(result.Y, p.X, p.Y);
			FieldElement.fe_sq(array, result.Y);
			FieldElement.fe_add(result.Y, result.Z, result.X);
			FieldElement.fe_sub(result.Z, result.Z, result.X);
			FieldElement.fe_sub(result.X, array, result.Y);
			FieldElement.fe_sub(result.T, result.T, result.Z);
		}

		private static void ge_p3_0(ge_p3 h)
		{
			FieldElement.fe_0(h.X);
			FieldElement.fe_1(h.Y);
			FieldElement.fe_1(h.Z);
			FieldElement.fe_0(h.T);
		}

		private static void ge_p3_dbl(ge_p1p1 result, ge_p3 p)
		{
			ge_p2 ge_p = new ge_p2();
			ge_p3_to_p2(ge_p, p);
			ge_p2_dbl(result, ge_p);
		}

		private static void ge_p3_to_cached(ge_cached result, ge_p3 p)
		{
			FieldElement.fe_add(result.YplusX, p.Y, p.X);
			FieldElement.fe_sub(result.YminusX, p.Y, p.X);
			FieldElement.fe_copy(result.Z, p.Z);
			FieldElement.fe_mul(result.T2d, p.T, d2);
		}

		private static void ge_p3_to_p2(ge_p2 result, ge_p3 p)
		{
			FieldElement.fe_copy(result.X, p.X);
			FieldElement.fe_copy(result.Y, p.Y);
			FieldElement.fe_copy(result.Z, p.Z);
		}

		public static void ge_p3_tobytes(byte[] s, ge_p3 h)
		{
			int[] array = FieldElement.New();
			int[] array2 = FieldElement.New();
			int[] h2 = FieldElement.New();
			FieldElement.fe_invert(array, h.Z);
			FieldElement.fe_mul(array2, h.X, array);
			FieldElement.fe_mul(h2, h.Y, array);
			FieldElement.fe_tobytes(s, h2);
			s[31] ^= (byte)(FieldElement.fe_isnegative(array2) << 7);
		}

		private static byte equal(byte b, byte c)
		{
			return (byte)((uint)((b ^ c) - 1) >> 31);
		}

		private static byte negative(sbyte b)
		{
			return (byte)((ulong)b >> 63);
		}

		private static void cmov(ge_precomp t, ge_precomp u, byte b)
		{
			FieldElement.fe_cmov(t.yplusx, u.yplusx, b);
			FieldElement.fe_cmov(t.yminusx, u.yminusx, b);
			FieldElement.fe_cmov(t.xy2d, u.xy2d, b);
		}

		private static void select(ge_precomp t, int pos, sbyte b)
		{
			ge_precomp ge_precomp = new ge_precomp(FieldElement.New(), FieldElement.New(), FieldElement.New());
			byte b2 = negative(b);
			byte b3 = (byte)(b - ((-b2 & b) << 1));
			FieldElement.fe_1(t.yplusx);
			FieldElement.fe_1(t.yminusx);
			FieldElement.fe_0(t.xy2d);
			cmov(t, Base[pos][0], equal(b3, 1));
			cmov(t, Base[pos][1], equal(b3, 2));
			cmov(t, Base[pos][2], equal(b3, 3));
			cmov(t, Base[pos][3], equal(b3, 4));
			cmov(t, Base[pos][4], equal(b3, 5));
			cmov(t, Base[pos][5], equal(b3, 6));
			cmov(t, Base[pos][6], equal(b3, 7));
			cmov(t, Base[pos][7], equal(b3, 8));
			FieldElement.fe_copy(ge_precomp.yplusx, t.yminusx);
			FieldElement.fe_copy(ge_precomp.yminusx, t.yplusx);
			FieldElement.fe_neg(ge_precomp.xy2d, t.xy2d);
			cmov(t, ge_precomp, b2);
		}

		public static void ge_scalarmult_base(ge_p3 h, byte[] a)
		{
			sbyte[] array = new sbyte[64];
			ge_p1p1 ge_p1p = new ge_p1p1();
			ge_p2 ge_p = new ge_p2();
			ge_precomp ge_precomp = new ge_precomp(FieldElement.New(), FieldElement.New(), FieldElement.New());
			for (int i = 0; i < 32; i++)
			{
				array[2 * i] = (sbyte)(a[i] & 0xF);
				array[2 * i + 1] = (sbyte)((a[i] >> 4) & 0xF);
			}
			sbyte b = 0;
			for (int i = 0; i < 63; i++)
			{
				array[i] += b;
				b = (sbyte)(array[i] + 8);
				b = (sbyte)(b >> 4);
				array[i] -= (sbyte)(b << 4);
			}
			array[63] += b;
			ge_p3_0(h);
			for (int i = 1; i < 64; i += 2)
			{
				select(ge_precomp, i / 2, array[i]);
				ge_madd(ge_p1p, h, ge_precomp);
				ge_p1p1_to_p3(h, ge_p1p);
			}
			ge_p3_dbl(ge_p1p, h);
			ge_p1p1_to_p2(ge_p, ge_p1p);
			ge_p2_dbl(ge_p1p, ge_p);
			ge_p1p1_to_p2(ge_p, ge_p1p);
			ge_p2_dbl(ge_p1p, ge_p);
			ge_p1p1_to_p2(ge_p, ge_p1p);
			ge_p2_dbl(ge_p1p, ge_p);
			ge_p1p1_to_p3(h, ge_p1p);
			for (int i = 0; i < 64; i += 2)
			{
				select(ge_precomp, i / 2, array[i]);
				ge_madd(ge_p1p, h, ge_precomp);
				ge_p1p1_to_p3(h, ge_p1p);
			}
		}

		private static void ge_sub(ge_p1p1 r, ge_p3 p, ge_cached q)
		{
			int[] array = FieldElement.New();
			FieldElement.fe_add(r.X, p.Y, p.X);
			FieldElement.fe_sub(r.Y, p.Y, p.X);
			FieldElement.fe_mul(r.Z, r.X, q.YminusX);
			FieldElement.fe_mul(r.Y, r.Y, q.YplusX);
			FieldElement.fe_mul(r.T, q.T2d, p.T);
			FieldElement.fe_mul(r.X, p.Z, q.Z);
			FieldElement.fe_add(array, r.X, r.X);
			FieldElement.fe_sub(r.X, r.Z, r.Y);
			FieldElement.fe_add(r.Y, r.Z, r.Y);
			FieldElement.fe_sub(r.Z, array, r.T);
			FieldElement.fe_add(r.T, array, r.T);
		}

		public static void ge_tobytes(byte[] s, ge_p2 h)
		{
			int[] array = FieldElement.New();
			int[] array2 = FieldElement.New();
			int[] h2 = FieldElement.New();
			FieldElement.fe_invert(array, h.Z);
			FieldElement.fe_mul(array2, h.X, array);
			FieldElement.fe_mul(h2, h.Y, array);
			FieldElement.fe_tobytes(s, h2);
			s[31] ^= (byte)(FieldElement.fe_isnegative(array2) << 7);
		}
	}
	internal class Signature
	{
		private static byte[] copyOfRange(byte[] src, int start, int end)
		{
			int num = end - start;
			byte[] array = new byte[num];
			Array.Copy(src, start, array, 0, num);
			return array;
		}

		private static bool consttime_equal(byte[] x, byte[] y)
		{
			byte b = 0;
			b = (byte)(x[0] ^ y[0]);
			for (int i = 1; i < 32; i++)
			{
				b = (byte)(b | (byte)(x[i] ^ y[i]));
			}
			return b == 0;
		}

		private static byte[] H(byte[] m)
		{
			return SHA512.Create().ComputeHash(m);
		}

		public static void CreateKeypair(byte[] public_key, byte[] private_key, byte[] seed)
		{
			if (public_key.Length != 32)
			{
				throw new Exception("public-key length is wrong");
			}
			if (private_key.Length != 64)
			{
				throw new Exception("private key length is wrong");
			}
			if (seed.Length != 32)
			{
				throw new Exception("seed length is wrong");
			}
			GroupElement.ge_p3 h = new GroupElement.ge_p3();
			byte[] array = H(seed);
			array[0] &= 248;
			array[31] &= 63;
			array[31] |= 64;
			for (int i = 0; i < 64; i++)
			{
				private_key[i] = array[i];
			}
			GroupElement.ge_scalarmult_base(h, private_key);
			GroupElement.ge_p3_tobytes(public_key, h);
		}

		public static void Sign(byte[] signature, byte[] message, byte[] public_key, byte[] private_key)
		{
			if (signature.Length != 64)
			{
				throw new Exception("signature length is wrong");
			}
			if (public_key.Length != 32)
			{
				throw new Exception("public-key length is wrong");
			}
			if (private_key.Length != 64)
			{
				throw new Exception("private key length is wrong");
			}
			byte[] array = new byte[64];
			byte[] array2 = new byte[64];
			GroupElement.ge_p3 h = new GroupElement.ge_p3();
			MemoryStream memoryStream = new MemoryStream(new byte[32 + message.Length]);
			memoryStream.Write(private_key, 32, 32);
			memoryStream.Write(message, 0, message.Length);
			array2 = H(memoryStream.ToArray());
			Extra.sc_reduce(array2);
			GroupElement.ge_scalarmult_base(h, array2);
			GroupElement.ge_p3_tobytes(signature, h);
			MemoryStream memoryStream2 = new MemoryStream(new byte[64 + message.Length]);
			memoryStream2.Write(signature, 0, 32);
			memoryStream2.Write(public_key, 0, 32);
			memoryStream2.Write(message, 0, message.Length);
			array = H(memoryStream2.ToArray());
			Extra.sc_reduce(array);
			byte[] array3 = new byte[32];
			Extra.sc_muladd(array3, array, private_key, array2);
			for (int i = 0; i < 32; i++)
			{
				signature[i + 32] = array3[i];
			}
		}

		public static bool Verify(byte[] signature, byte[] message, byte[] public_key)
		{
			if (signature.Length != 64)
			{
				throw new Exception("signature length is wrong");
			}
			if (public_key.Length != 32)
			{
				throw new Exception("public-key length is wrong");
			}
			byte[] array = new byte[64];
			byte[] array2 = new byte[32];
			GroupElement.ge_p3 ge_p = new GroupElement.ge_p3();
			GroupElement.ge_p2 ge_p2 = new GroupElement.ge_p2();
			if ((signature[63] & 0xE0u) != 0)
			{
				return false;
			}
			if (GroupElement.ge_frombytes_negate_vartime(ge_p, public_key) != 0)
			{
				return false;
			}
			MemoryStream memoryStream = new MemoryStream(new byte[32 + public_key.Length + message.Length]);
			memoryStream.Write(signature, 0, 32);
			memoryStream.Write(public_key, 0, public_key.Length);
			memoryStream.Write(message, 0, message.Length);
			array = H(memoryStream.ToArray());
			byte[] array3 = new byte[32];
			for (int i = 0; i < 32; i++)
			{
				array3[i] = signature[i + 32];
			}
			Extra.sc_reduce(array);
			GroupElement.ge_double_scalarmult_vartime(ge_p2, array, ge_p, array3);
			GroupElement.ge_tobytes(array2, ge_p2);
			if (!consttime_equal(array2, signature))
			{
				return false;
			}
			return true;
		}

		public static void Test()
		{
			byte[] seed = new byte[32];
			byte[] public_key = new byte[32];
			byte[] private_key = new byte[64];
			CreateKeypair(public_key, private_key, seed);
			string s = "This is a secret message";
			byte[] bytes = Encoding.UTF8.GetBytes(s);
			byte[] signature = new byte[64];
			Sign(signature, bytes, public_key, private_key);
			if (!Verify(signature, bytes, public_key))
			{
				throw new Exception("Crypto test failed!!");
			}
		}
	}
}
